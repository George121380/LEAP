From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_rice_in_pot(rice:item, pot:item, stove:item):
    body:
        achieve_once inside(rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_water(pot)
        boil_rice_in_pot(rice, pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior add_water(pot:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior boil_rice_in_pot(rice:item, pot:item, stove:item):
    body:
        achieve_once inside(rice, pot) # Place rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to start boiling the rice

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_water(pot)
        boil_rice_in_pot(rice, pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. pot_2069 is opened. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the pot_2069. Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the pot_2069. Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_rice_2036, cupboard_229)
Fail to find food_rice_2036 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(food_rice_2036, wallshelf_234)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot find: Robot is close to the pot_2069. Robot is close to the wallshelf_234. 
##############################
From agent.py
exp(food_rice_2036, wallshelf_234)
Fail to find food_rice_2036 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(food_rice_2036, wallshelf_235)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot find: Robot is close to the pot_2069. Robot is close to the wallshelf_235. 
##############################
From agent.py
exp(food_rice_2036, wallshelf_235)
Fail to find food_rice_2036 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the pot_2069. Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_rice_2036)putin_executor(food_rice_2036, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. Grabbing food_rice_2036 by left hand. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by left hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot needs to be filled with water as indicated by the `add_water(pot)` behavior. There is no mention of water being added to the pot before placing it on the stove. You should ensure the pot contains water to complete this sub-task.
##############################
From agent.py
Human Instruction: The pot needs to be filled with water as indicated by the `add_water(pot)` behavior. There is no mention of water being added to the pot before placing it on the stove. You should ensure the pot contains water to complete this sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to cupboard_229.
Action 12: Open cupboard_229.
Action 13: look for food_rice_2036 around cupboard_229.
Action 14: Walk to wallshelf_234.
Action 15: look for food_rice_2036 around wallshelf_234.
Action 16: Walk to wallshelf_235.
Action 17: look for food_rice_2036 around wallshelf_235.
Action 18: Walk to fridge_289.
Action 19: Switch off fridge_289.
Action 20: Open fridge_289.
Action 21: look for food_rice_2036 around fridge_289.
Action 22: Grab food_rice_2036.
Action 23: Put food_rice_2036 into pot_2069.
Action 24: Walk to stove_2065.
Action 25: Put pot_2069 on stove_2065.
Action 26: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_143(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==143
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve has_water(pot)  # Ensure the pot has water by filling it from the faucet

behavior add_rice_to_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot)  # Put the rice inside the pot

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)  # Place the pot on the stove
        achieve_once is_on(stove)  # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        add_water_to_pot(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_cd_player_2060_around_bookshelf_101(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cd_player,bookshelf_instance)
        else:
            exp(cd_player,bookshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,bookshelf_instance]=True
        close[bookshelf_instance,cd_player]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_and_place_pot(pot:item, stove:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water from the faucet
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve_once is_on(stove) # Turn on the stove to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select the faucet with ID 43

        fill_and_place_pot(pot, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_150(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water from the faucet

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot) # Add the rice into the pot

behavior boil_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to heat the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice(pot, stove)
 
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_water_to_pot(pot: item, faucet: item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior add_rice_to_pot(pot: item, rice: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot

behavior boil_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is on to boil the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        add_water_to_pot(pot, faucet)
        add_rice_to_pot(pot, rice)
        boil_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_146(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==146
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(food_rice_2036, pot) # Place the rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_rice_2036; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_food_rice(x: item):
    return True # Assume it is rice when is_food_rice(x) is called, indicating the item is rice

behavior boil_rice_in_pot(pot: item, stove: item, rice: item):
    body:
        achieve has_water(pot) # Ensure the pot has water
        achieve_once inside(rice, pot) # Place the rice inside the pot
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select the rice with ID 2036

        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        boil_rice_in_pot(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_dress_2044_around_closetdrawer_154(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==154
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

behavior find_mouse_413_around_cpuscreen_416(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==416
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(mouse,cpuscreen_instance)
        else:
            exp(mouse,cpuscreen_instance)
    eff:
        unknown[mouse]=False
        close[mouse,cpuscreen_instance]=True
        close[cpuscreen_instance,mouse]=True
    

behavior find_chair_106_around_ironing_board_2074(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(chair,ironing_board_instance)
        else:
            exp(chair,ironing_board_instance)
    eff:
        unknown[chair]=False
        close[chair,ironing_board_instance]=True
        close[ironing_board_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the specified pot
    symbol has_water_in_pot = has_water(pot)
    return has_water_in_pot

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve_once inside(food_rice, pot)
        # Ensure rice is inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to begin boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_in_pot(pot)
        # Select a pot that has water in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select the rice

        boil_rice_in_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_rice; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_spectacles_2082_around_tablelamp_97(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==97
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(spectacles,tablelamp_instance)
        else:
            exp(spectacles,tablelamp_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,tablelamp_instance]=True
        close[tablelamp_instance,spectacles]=True
    

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the specified pot
    symbol has_water_in_pot = has_water(pot)
    return has_water_in_pot

behavior boil_rice_in_pot(pot: item, stove: item, food_rice: item):
    body:
        achieve_once inside(food_rice, pot)
        # Ensure rice is inside the pot
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to begin boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water_in_pot(pot)
        # Select a pot that has water in it

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select the rice

        boil_rice_in_pot(pot, stove, food_rice)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) 
        # Fill the pot with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)
        # Add rice into the pot

behavior start_boiling_rice(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Put the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select pot with ID 2069

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 43
        # Select faucet with ID 43

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select rice with ID 2036

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select stove with ID 2065

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        start_boiling_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def is_pot_with_water(pot: item):
    # Function to check if the pot contains water
    return has_water(pot)

behavior add_rice_to_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot) # Add rice to the pot

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if not is_pot_with_water(pot):
            achieve has_water(pot)
        # Fill the pot with water if necessary

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        add_rice_to_pot(rice, pot)

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_rice_on_stove(pot, stove)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_coffee_table_2068(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(bowl,coffee_table_instance)
        else:
            exp(bowl,coffee_table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,coffee_table_instance]=True
        close[coffee_table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)  # Move close to the faucet for filling the pot with water
        achieve_once has_water(pot)  # Ensure the pot is filled with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)  # Add the rice to the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)  # Place the pot on the stove

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)  # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        start_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)  # Move close to the faucet for filling the pot with water
        achieve_once has_water(pot)  # Ensure the pot is filled with water

behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)  # Add the rice to the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)  # Place the pot on the stove

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)  # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select the faucet

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        start_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_43)
Robot find: Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot contains water. Add water to the pot using the faucet before placing it on the stove and turning it on to boil the rice.
##############################
From agent.py
Human Instruction: You need to ensure the pot contains water. Add water to the pot using the faucet before placing it on the stove and turning it on to boil the rice.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: Walk to pot_2069.
Action 4: Open pot_2069.
Action 5: Grab pot_2069.
Action 6: Walk to faucet_43.
Action 7: Switch on faucet_43.
Action 8: Switch off faucet_43.
Action 9: Walk to kitchen_counter_230.
Action 10: look for food_rice_2036 around kitchen_counter_230.
Action 11: Walk to cupboard_229.
Action 12: Open cupboard_229.
Action 13: look for food_rice_2036 around cupboard_229.
Action 14: Walk to wallshelf_234.
Action 15: look for food_rice_2036 around wallshelf_234.
Action 16: Walk to wallshelf_235.
Action 17: look for food_rice_2036 around wallshelf_235.
Action 18: Walk to fridge_289.
Action 19: Switch off fridge_289.
Action 20: Open fridge_289.
Action 21: look for food_rice_2036 around fridge_289.
Action 22: Grab food_rice_2036.
Action 23: Put food_rice_2036 into pot_2069.
Action 24: Walk to stove_2065.
Action 25: Put pot_2069 on stove_2065.
Action 26: Switch on stove_2065.
Action 27: Walk to faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if the pot has water inside
    symbol has_water = exists o: item: (is_faucet(o) and has_water(pot))
    return has_water

behavior add_water_pot_and_boil(pot: item, stove: item, faucet: item):
    body:
        achieve_once has_water(pot) # Fill the pot with water from the faucet
        achieve_once on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        if not has_water_in_pot(pot):
            add_water_pot_and_boil(pot, stove, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once close_char(char, faucet)
        achieve has_water(pot)

behavior add_rice_to_pot(rice: item, pot: item):
    body:
        achieve_once inside(rice, pot)

behavior boil_rice_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)
        achieve_once is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        bind rice: item where:
            is_food_rice(rice)
        
        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(rice, pot)
        boil_rice_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_bookshelf_101(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

behavior find_clothes_dress_2044_around_closetdrawer_121(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_dress,closetdrawer_instance)
        else:
            exp(clothes_dress,closetdrawer_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot)
        # Fill the pot with water from the faucet

behavior add_rice_to_pot(pot:item, rice:item):
    body:
        achieve_once inside(rice, pot)
        # Add rice to the pot

behavior boil_rice_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        add_rice_to_pot(pot, rice)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Boil some rice by pot.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(kitchen_counter_230)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(wallshelf_234)', 'walk_executor(wallshelf_235)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'grab_executor(food_rice_2036)', 'putin_executor(food_rice_2036, pot_2069)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(faucet_43)']
Time info:
Time consume: 262 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 49
goal generate times: 13
goal correct times: 1
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 0 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
