From agent.py
Reset goals: The sub-goals are: 
['1. Heat the milk to a suitable temperature.', '2. Add cereal to the hot milk.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_ice_cream_2025_around_fridge_289(food_ice_cream:item):
    goal: not unknown(food_ice_cream)
    body:
        assert is_food_ice_cream(food_ice_cream)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_ice_cream,fridge_instance)
        else:
            exp(food_ice_cream,fridge_instance)
    eff:
        unknown[food_ice_cream]=False
        close[food_ice_cream,fridge_instance]=True
        close[fridge_instance,food_ice_cream]=True
    

#exp_behavior_end

#goal_representation

behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Place the milk on the stove for heating
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk(milk, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior heat_milk(milk:item, stove:item):
    body:
        achieve_once inside(milk, stove)
        # Place the milk on the stove for heating
        achieve_once is_on(stove)
        # Turn on the stove to heat the milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        heat_milk(milk, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(stove_2065)putin_executor(milk_2043, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: drawing_240, drawing_239, Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(milk_2043, fridge_289)
Find milk_2043. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(stove_2065)putin_executor(milk_2043, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: drawing_238, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is opened. 
##############################
From agent.py
walk_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. 
##############################
From agent.py
grab_executor(milk_2043)
Robot find: Robot is close to the fridge_289. Robot is close to the milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(milk_2043, stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. milk_2043 is inside stove_2065. milk_2043 is close stove_2065. stove_2065 is close milk_2043. milk_2043 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the milk_2043. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind milk: item where:
            is_milk(milk) and is_hot(milk)
        # Select hot milk

        add_cereal_to_hot_milk(cereal, milk)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_hot not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind milk: item where:
            is_milk(milk) and recipient(milk)
        # Select hot milk that is recipient

        add_cereal_to_hot_milk(cereal, milk)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and hot(milk)
        # Select the hot milk

        add_cereal_to_hot_milk(cereal, milk)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function hot not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#goal_representation
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and drinkable(milk)
        # Select the hot milk (using the drinkable property as a substitute for hot)

        add_cereal_to_hot_milk(cereal, milk)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        # Select the milk with ID 2043

        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        add_cereal_to_milk(cereal, milk)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(milk: item, cereal: item):
    body:
        achieve_once inside(cereal, milk)
        # Add cereal to the hot milk

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and drinkable(milk)
        # Select the already heated milk that is drinkable
        
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        add_cereal_to_hot_milk(milk, cereal)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior add_cereal_to_hot_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk) # Add the cereal into the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        # Select the milk with ID 2043 (Assuming this milk was heated and is in a cup or a container ready for cereal)

        add_cereal_to_hot_milk(cereal, milk)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_hot_milk(cereal: item, hot_milk: item):
    body:
        achieve_once inside(cereal, hot_milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind hot_milk: item where:
            is_milk(hot_milk) and pourable(hot_milk)
        # Select the hot milk

        add_cereal_to_hot_milk(cereal, hot_milk)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal: item, milk: item):
    body:
        achieve_once inside(cereal, milk)
        # Add cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select cereal

        bind milk: item where:
            is_milk(milk)
        # Select the hot milk

        add_cereal_to_milk(cereal, milk)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and inside(milk, stove_2065)
        # Select the milk that is already heated

        add_cereal_to_milk(cereal, milk)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind milk: item where:
            is_milk(milk) and exists stove_2065: item : (inside(milk, stove_2065))
        # Select the milk that is already heated in the stove

        add_cereal_to_milk(cereal, milk)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'stove_2065') at line 5786, column 38.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior add_cereal_to_milk(cereal:item, milk:item):
    body:
        achieve_once inside(cereal, milk)
        # Add the cereal to the hot milk

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind milk: item where:
            is_milk(milk) and inside(milk, stove)
        # Select the milk that is already heated in the stove

        add_cereal_to_milk(cereal, milk)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_table_107(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_hot_milk(cup:item):
    # Check if the hot milk is in the cup
    symbol has_hot_milk=exists o: item : (is_milk(o) and inside(o, cup))
    return has_hot_milk

behavior add_cereal_to_hot_milk(cereal:item, cup:item):
    body:
        achieve_once inside(cereal, cup)
        # Add cereal to the hot milk in the cup

behavior __goal__():
    body:
        bind cereal: item where:
            is_food_cereal(cereal)
        # Select the cereal

        bind cup: item where:
            is_cup(cup) and is_hot_milk(cup)
        # Select the cup with hot milk

        add_cereal_to_hot_milk(cereal, cup)
        # Add cereal to the hot milk

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Task Summary:
Task Goal:
Prepare a cup of hot milk with cereal inside.
Action History:
['walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(milk_2043)', 'grab_executor(milk_2043)', 'walk_executor(stove_2065)', 'putin_executor(milk_2043, stove_2065)', 'switchon_executor(stove_2065)']
Time info:
Time consume: 145 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 55
goal generate times: 10
goal correct times: 0
action_num: 10

Task complete rate:
Keystate: k1 - Requires: 15 steps
Action Completion Rate: No actions required
Scene_id: 0
##############################
