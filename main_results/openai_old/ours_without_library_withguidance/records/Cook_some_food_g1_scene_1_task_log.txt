From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and place it on the stove.', '2. Fill the pot with water and put the vegetables in it.', '3. Turn on the stove to boil the vegetables.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_snack_2110_around_kitchen_counter_122(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_snack,kitchen_counter_instance)
        else:
            exp(food_snack,kitchen_counter_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_snack]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot(pot: item):
    body:
        achieve visited(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot):
            bind pot: item where:
                is_pot(pot)
            find_pot(pot)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Find a pot")
                    
        if exists stove: item : is_stove(stove):
            bind stove: item where:
                is_stove(stove)
            place_pot_on_stove(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Locate the stove")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2110_around_kitchen_counter_122(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_snack,kitchen_counter_instance)
        else:
            exp(food_snack,kitchen_counter_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_snack]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
behavior find_pot(pot: item):
    body:
        achieve visited(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot):
            bind pot: item where:
                is_pot(pot)
            find_pot(pot)
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Find a pot")
                    
        if exists stove: item : is_stove(stove):
            bind stove: item where:
                is_stove(stove)
            place_pot_on_stove(pot, stove)
        else:
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Locate the stove")
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_snack_2110_around_kitchen_counter_122(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_snack,kitchen_counter_instance)
        else:
            exp(food_snack,kitchen_counter_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_snack]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
behavior find_pot(pot: item):
    body:
        achieve visited(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot):
            bind pot: item where:
                is_pot(pot)
            find_pot(pot)
        
            if exists stove: item : is_stove(stove):
                bind stove: item where:
                    is_stove(stove)
                place_pot_on_stove(pot, stove)
            else:
                foreach stove: item:
                    if is_stove(stove) and not visited(stove):
                        observe(stove, "Locate the stove")
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Find a pot")
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_pot(pot: item):
    body:
        achieve visited(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        if exists pot: item : is_pot(pot):
            bind pot: item where:
                is_pot(pot)
            find_pot(pot)
        
            if exists stove: item : is_stove(stove):
                bind stove: item where:
                    is_stove(stove)
                place_pot_on_stove(pot, stove)
            else:
                foreach stove: item:
                    if is_stove(stove) and not visited(stove):
                        observe(stove, "Locate the stove")
        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Find a pot")
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(pot_2138, kitchen_counter_122)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, look around this place)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(pot_2138, kitchen_counter_122)
Fail to find pot_2138 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, look around this place)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)open_executor(stove_2135)exp(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, look around this place)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
exp(pot_2138, stove_2135)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, look around this place)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is no longer close stove_2135.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
obs(pot_2138, look around this place)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. 
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot:item, stove:item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

def has_faucet(sink:item):
    # Function to check if there is a faucet near a given sink
    symbol faucet_exists=exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        # Ensure the pot is in the sink for filling it with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If theres a faucet nearby, turn it on to fill the pot

        achieve has_water(pot)
        # Fill the pot with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select pot with ID 2138

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        bind sink: item where:
            is_sink(sink) and has_faucet(sink)
        # Select an appropriate sink that has a faucet

        bind vegetable: item where:
            is_food_vegetable(vegetable)

        if not is_pot_on_stove(pot, stove):
            achieve on(pot, stove)
        # Ensure the pot is on the stove

        fill_pot_with_water(pot, sink)
        # Fill the pot with water

        achieve inside(vegetable, pot)
        # Place the vegetables inside the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_vegetable_2113_around_cutting_board_2123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2123
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_pot_with_water(pot: item, location: item):
    body:
        achieve_once inside(pot, location)
        # Ensure the pot is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the pot

        achieve has_water(pot)
        # Fill the pot with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the pot

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the pot

        fill_pot_with_water(pot, sink)
        # Fill the pot with water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select an instance of vegetables

        place_vegetables_in_pot(vegetables, pot)
        # Place the vegetables inside the pot

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_pot_with_water(pot: item, location: item):
    body:
        achieve_once inside(pot, location)
        # Ensure the pot is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the pot

        achieve has_water(pot)
        # Fill the pot with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the pot

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the pot

        fill_pot_with_water(pot, sink)
        # Fill the pot with water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select an instance of vegetables

        place_vegetables_in_pot(vegetables, pot)
        # Place the vegetables inside the pot

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2138)walk_executor(sink_19)putin_executor(pot_2138, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(cutting_board_2123)exp(food_vegetable_2113, cutting_board_2123)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is close stove_2135. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
putin_executor(pot_2138, sink_19)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. pot_2138 released by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close pot_2138.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close sink_19.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
exp(food_vegetable_2113, cutting_board_2123)
Fail to find food_vegetable_2113 around cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)putin_executor(pot_2138, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close cutting_board_2123.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(pot_2138, sink_19)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. pot_2138 released by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close pot_2138.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close sink_19.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)putin_executor(pot_2138, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(pot_2138, sink_19)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close sink_19. pot_2138 released by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close pot_2138.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close sink_19. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close sink_19.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_vegetable_2113. Robot is close fridge_126. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_vegetable_2113. Robot is close fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close food_vegetable_2113. Robot is no longer inside dining_room_41.Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_2138)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close food_vegetable_2113. food_vegetable_2113 released by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_294_around_desk_272(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(hanger,desk_instance)
        else:
            exp(hanger,desk_instance)
    eff:
        unknown[hanger]=False
        close[hanger,desk_instance]=True
        close[desk_instance,hanger]=True
    

behavior find_lighter_2004_around_kitchen_counter_123(lighter:item):
    goal: not unknown(lighter)
    body:
        assert is_lighter(lighter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(lighter,kitchen_counter_instance)
        else:
            exp(lighter,kitchen_counter_instance)
    eff:
        unknown[lighter]=False
        close[lighter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,lighter]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)close_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer inside bathroom_1.Robot is no longer close food_vegetable_2113.
##############################
From agent.py
close_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
