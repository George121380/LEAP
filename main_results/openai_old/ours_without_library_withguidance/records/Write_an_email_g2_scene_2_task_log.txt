From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_2118_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse: item):
    body:
        achieve_once inhand(mouse)
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair)
        
        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_table_127(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mouse,table_instance)
        else:
            exp(mouse,table_instance)
    eff:
        unknown[mouse]=False
        close[mouse,table_instance]=True
        close[table_instance,mouse]=True
    

behavior find_chair_2118_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse: item):
    body:
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "sit on the chair in front of the computer in the home office and touch the mouse near the computer to turn it on." ?
Answer: Get close to the computer in the home office. Sit on the chair in front of the computer. Then, touch the mouse to turn on the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_table_127(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mouse,table_instance)
        else:
            exp(mouse,table_instance)
    eff:
        unknown[mouse]=False
        close[mouse,table_instance]=True
        close[table_instance,mouse]=True
    

behavior find_chair_2118_around_table_127(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_phone_47_around_table_127(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(phone,table_instance)
        else:
            exp(phone,table_instance)
    eff:
        unknown[phone]=False
        close[phone,table_instance]=True
        close[table_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_computer(computer: item):
    body:
        achieve close_char(char, computer)

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse: item):
    body:
        touch(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        
        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        
        approach_computer(computer)
        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_table_127(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mouse,table_instance)
        else:
            exp(mouse,table_instance)
    eff:
        unknown[mouse]=False
        close[mouse,table_instance]=True
        close[table_instance,mouse]=True
    

behavior find_chair_138_around_computer_379(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select a mouse inside the home office

        sit_on_chair(chair)
        # Sit on the chair in the home office

        touch_mouse(mouse)
        # Touch the mouse to turn on the computer

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair in the home office

        sit_on_chair(chair)
        # Sit on the chair in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_138_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office, then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2118_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_computer_on_chair_in_front(desired_location: item):
    # Function to verify if theres a chair in front of the computer in the home office
    symbol is_correct_placement = exists office: item: is_home_office(office) and inside(desired_location, office) and is_chair(desired_location) and close(desired_location, computer)
    return is_correct_placement

behavior sit_on_chair_in_front_of_computer(chair: item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        if exists chair: item : is_chair(chair) and is_computer_on_chair_in_front(chair):
            # If theres a chair in front of the computer in the home office, bind it
            bind chair: item where:
                is_computer_on_chair_in_front(chair)
            sit_on_chair_in_front_of_computer(chair)
        else:
            # If no suitable chair is yet defined, observe the home office for such a setup
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if the chair is in front of a computer in the home office")


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: computer; available variables: [Variable<desired_location: item>, Variable<office: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2118_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_laptop_2015_around_desk_261(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#goal_representation
 
def is_computer_on_chair_in_front(desired_location: item, computer: item):
    # Function to verify if theres a chair in front of the computer in the home office
    symbol is_correct_placement = exists office: item: is_home_office(office) and inside(desired_location, office) and is_chair(desired_location) and close(desired_location, computer)
    return is_correct_placement

behavior sit_on_chair_in_front_of_computer(chair: item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        if exists chair: item : is_chair(chair) and is_computer_on_chair_in_front(chair, computer):
            # If theres a chair in front of the computer in the home office, bind it
            bind chair: item where:
                is_computer_on_chair_in_front(chair, computer)
            sit_on_chair_in_front_of_computer(chair)
        else:
            # If no suitable chair is yet defined, observe the home office for such a setup
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if the chair is in front of a computer in the home office")

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(chair_2118, desk_261)walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(desk_261)exp(chair_138, desk_261)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(desk_261)exp(chair_263, desk_261)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(desk_261)exp(chair_374, desk_261)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(desk_261)
Find mat_237. Find chair_263. Find drawing_238. Robot is inside bedroom_220. Robot is close desk_261. Robot is close floor_223. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(chair_2118, desk_261)
Fail to find chair_2118 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_263)exp(chair_2118, chair_263)walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)exp(chair_138, chair_263)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)exp(chair_374, chair_263)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is no longer close desk_261.Robot is no longer close floor_223.
##############################
From agent.py
exp(chair_2118, chair_263)
Fail to find chair_2118 around chair_263. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_379)exp(chair_2118, computer_379)walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(computer_379)exp(chair_138, computer_379)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(computer_379)exp(chair_374, computer_379)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(computer_379)
Find chair_374. Find mouse_380. Find keyboard_382. Robot is inside bedroom_327. Robot is close computer_379. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
exp(chair_2118, computer_379)
Fail to find chair_2118 around computer_379. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(chair_2118, table_123)walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(table_123)exp(chair_138, table_123)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer inside bedroom_327.Robot is no longer close computer_379.
##############################
From agent.py
exp(chair_2118, table_123)
Fail to find chair_2118 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(chair_2118, home_office_161)walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(home_office_161)exp(chair_138, home_office_161)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
exp(chair_2118, home_office_161)
Find chair_2118. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_2118)obs(chair_2118, Check if the chair is in front of a computer in the home office)walk_executor(home_office_161)exp(chair_138, home_office_161)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. 
##############################
From agent.py
obs(chair_2118, Check if the chair is in front of a computer in the home office)
Get this information:  chair_2118 is close to table_193. chair_2118 is close to computer_2110. chair_2118 is close to character_219. chair_2118 is inside home_office_161. chair_2118 is CLEAN. chair_2118 is PLUGGED_IN.
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer close chair_2118.
##############################
From agent.py
exp(chair_138, home_office_161)
Fail to find chair_138 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(chair_138, table_127)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer inside home_office_161.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find chair_138 ?
Answer: To find chair_138, go to dining_room_1. Inside, locate fridge_140 and wall_7, which are both close to chair_138. Also, find the section of floor_22 near them. Chair_138 should be positioned close to these three elements: fridge_140, wall_7, and floor_22.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find chair_138, go to dining_room_1. Inside, locate fridge_140 and wall_7, which are both close to chair_138. Also, find the section of floor_22 near them. Chair_138 should be positioned close to these three elements: fridge_140, wall_7, and floor_22.

Human Guidance: Get close to the computer in the home office, then sit on the chair in front of the computer.
The actions you have taken:
Action 1: Walk to desk_261.
Action 2: look for chair_2118 around desk_261.
Action 3: Walk to chair_263.
Action 4: look for chair_2118 around chair_263.
Action 5: Walk to computer_379.
Action 6: look for chair_2118 around computer_379.
Action 7: Walk to table_123.
Action 8: look for chair_2118 around table_123.
Action 9: Walk to home_office_161.
Action 10: look for chair_2118 around home_office_161.
Action 11: Walk to chair_2118.
Action 12: Observe around chair_2118 with the question of Check if the chair is in front of a computer in the home office.
Action 13: Walk to home_office_161.
Action 14: look for chair_138 around home_office_161.
Action 15: Walk to table_127.

##############################
From agent.py
exp(chair_138, table_127)
Fail to find chair_138 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(chair_138, fridge_140)walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close mat_115.Robot is no longer close floor_20.Robot is no longer close table_127.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(chair_138, fridge_140)
Find chair_138. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_138)obs(chair_138, Check if the chair is in front of a computer in the home office)walk_executor(chair_263)obs(chair_263, Check if the chair is in front of a computer in the home office)walk_executor(chair_374)obs(chair_374, Check if the chair is in front of a computer in the home office)
##############################
From agent.py
walk_executor(chair_138)
Robot is inside dining_room_1. Robot is close chair_138. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
obs(chair_138, Check if the chair is in front of a computer in the home office)
Get this information:  chair_138 is close to fridge_140. chair_138 is close to floor_22. chair_138 is close to wall_7. chair_138 is close to character_219. chair_138 is inside dining_room_1. chair_138 is CLEAN.
##############################
From agent.py
walk_executor(chair_263)
Robot is inside bedroom_220. Robot is close chair_263. Robot is no longer inside dining_room_1.Robot is no longer close chair_138.
##############################
From agent.py
obs(chair_263, Check if the chair is in front of a computer in the home office)
Get this information:  chair_263 is close to floor_224. chair_263 is close to bookshelf_260. chair_263 is close to desk_261. chair_263 is close to wall_231. chair_263 is close to wall_232. chair_263 is close to wall_233. chair_263 is close to mat_237. chair_263 is close to photoframe_246. chair_263 is close to floor_221. chair_263 is close to floor_222. chair_263 is close to floor_223. chair_263 is close to character_219. chair_263 is inside bedroom_220. chair_263 is CLEAN.
##############################
From agent.py
walk_executor(chair_374)
Find drawing_387. Robot is inside bedroom_327. Robot is close chair_374. Robot is no longer inside bedroom_220.Robot is no longer close chair_263.
##############################
From agent.py
obs(chair_374, Check if the chair is in front of a computer in the home office)
Get this information:  chair_374 is inside bedroom_327. chair_374 is facing drawing_387. chair_374 is close to ceiling_355. chair_374 is close to floor_332. chair_374 is close to floor_333. chair_374 is close to floor_336. chair_374 is close to floor_337. chair_374 is close to desk_375. chair_374 is close to wall_345. chair_374 is close to computer_379. chair_374 is close to mouse_380. chair_374 is close to mousepad_381. chair_374 is close to keyboard_382. chair_374 is close to cpuscreen_383. chair_374 is close to character_219. chair_374 is CLEAN.
##############################
From agent.py
Human Instruction: You need to ensure that you sit on the chair in front of the computer in the home office. Even though you identified chair_2118 as being close to a computer in the home office, the actions do not indicate that you actually sat on the chair. Please proceed to sit on chair_2118 in the home office to complete the sub-task.

Human Guidance: Get close to the computer in the home office, then sit on the chair in front of the computer.
The actions you have taken:
Action 1: Walk to desk_261.
Action 2: look for chair_2118 around desk_261.
Action 3: Walk to chair_263.
Action 4: look for chair_2118 around chair_263.
Action 5: Walk to computer_379.
Action 6: look for chair_2118 around computer_379.
Action 7: Walk to table_123.
Action 8: look for chair_2118 around table_123.
Action 9: Walk to home_office_161.
Action 10: look for chair_2118 around home_office_161.
Action 11: Walk to chair_2118.
Action 12: Observe around chair_2118 with the question of Check if the chair is in front of a computer in the home office.
Action 13: Walk to home_office_161.
Action 14: look for chair_138 around home_office_161.
Action 15: Walk to table_127.
Action 16: look for chair_138 around table_127.
Action 17: Walk to fridge_140.
Action 18: Switch off fridge_140.
Action 19: Open fridge_140.
Action 20: look for chair_138 around fridge_140.
Action 21: Walk to chair_138.
Action 22: Observe around chair_138 with the question of Check if the chair is in front of a computer in the home office.
Action 23: Walk to chair_263.
Action 24: Observe around chair_263 with the question of Check if the chair is in front of a computer in the home office.
Action 25: Walk to chair_374.
Action 26: Observe around chair_374 with the question of Check if the chair is in front of a computer in the home office.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and id[chair] == 2118 and inside(chair, home_office)
        # Select the chair with id 2118 in the home office

        sit_on_chair(chair)
        # Sit on the chair

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind chair_2118: item where:
            is_chair(chair_2118) and inside(chair_2118, home_office)
        
        sit_on_chair(chair_2118)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office) and id[chair] == 2118
        # Select chair with ID 2118 in the home office

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_crayon_2020_around_bookshelf_137(crayon:item):
    goal: not unknown(crayon)
    body:
        assert is_crayon(crayon)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(crayon,bookshelf_instance)
        else:
            exp(crayon,bookshelf_instance)
    eff:
        unknown[crayon]=False
        close[crayon,bookshelf_instance]=True
        close[bookshelf_instance,crayon]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve_on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select chair with ID 2118

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_on_char not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select chair with ID 2118

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select chair with ID 2118

        sit_on_chair(chair)
        # Sit on the chair in front of the computer in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(chair_2118)sit_executor(chair_2118)
##############################
From agent.py
walk_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. Robot is no longer inside bedroom_327.Robot is no longer close chair_374.
##############################
From agent.py
sit_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. Robot is on chair_2118. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior approach_computer_and_touch_mouse(mouse: item, computer: item):
    body:
        achieve close_char(char, computer)
        # Ensure the character is close to the specified computer
        achieve close(mouse, computer)
        # Ensure the mouse is close to the specified computer
        touch(mouse)
        # Touch the mouse to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select an instance of a computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select an instance of a mouse that is close to the computer

        approach_computer_and_touch_mouse(mouse, computer)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_to_turn_on(mouse: item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        
        touch_mouse_to_turn_on(mouse)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. touch the mouse near the computer to turn it on." ?
Answer: Get close to the computer in the home office and touch the mouse to turn it on.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Get close to the computer in the home office and touch the mouse to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_mouse_380(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse(mouse: item):
    body:
        touch(mouse)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select chair with ID 2118

        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_mouse_380(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_remote_control_2081_around_keyboard_382(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==382
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(remote_control,keyboard_instance)
        else:
            exp(remote_control,keyboard_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,keyboard_instance]=True
        close[keyboard_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the specific chair

behavior get_close_to_computer_and_turn_on_mouse(computer: item, mouse: item):
    body:
        achieve close_char(char, computer)
        # Approach the computer
        touch(mouse)
        # Touch the mouse to turn it on

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select chair with ID 2118

        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select a computer inside the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        sit_on_chair(chair)
        # Sit on the chair 2118

        get_close_to_computer_and_turn_on_mouse(computer, mouse)
        # Get closer to the computer and touch the mouse

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_mouse_380(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_to_turn_on(mouse: item):
    body:
        achieve is_on(mouse)

behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select the chair with ID 2118
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair) and inside(mouse, home_office)
        # Select the mouse that is close to chair 2118 in the home office

        sit_on_chair(chair)
        # Sit on the selected chair

        touch_mouse_to_turn_on(mouse)
        # Touch the mouse to turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_mouse_380(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_dvd_player_2085_around_bookshelf_188(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(dvd_player,bookshelf_instance)
        else:
            exp(dvd_player,bookshelf_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,bookshelf_instance]=True
        close[bookshelf_instance,dvd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_to_turn_on(mouse: item):
    body:
        touch(mouse)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        
        achieve on_char(char, chair) # Ensure the character is sitting on chair_2118
        achieve close_char(char, computer) # Ensure the character gets close to the computer
        touch_mouse_to_turn_on(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_to_turn_on(mouse: item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select an instance of a computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select an instance of a mouse that is close to the computer
        
        touch_mouse_to_turn_on(mouse)
        # Touch the mouse to turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_mouse_380(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(phone,mouse_instance)
        else:
            exp(phone,mouse_instance)
    eff:
        unknown[phone]=False
        close[phone,mouse_instance]=True
        close[mouse_instance,phone]=True
    

behavior find_headset_2086_around_mouse_380(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==380
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(headset,mouse_instance)
        else:
            exp(headset,mouse_instance)
    eff:
        unknown[headset]=False
        close[headset,mouse_instance]=True
        close[mouse_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior approach_chair_and_turn_on_computer(char: character, chair: item, computer: item, mouse: item):
    body:
        achieve on_char(char, chair)
        achieve close(mouse, computer)
        touch(mouse)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select the chair with ID 2118

        bind computer: item where:
            is_computer(computer) and id[computer] == 379
        # Select the computer with ID 379

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        approach_chair_and_turn_on_computer(char, chair, computer, mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior approach_chair_and_turn_on_computer(char: character, chair: item, computer: item, mouse: item):
    body:
        achieve on_char(char, chair)
        achieve close(mouse, computer)
        touch(mouse)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair] == 2118
        # Select the chair with ID 2118

        bind computer: item where:
            is_computer(computer) and id[computer] == 379
        # Select the computer with ID 379

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        approach_chair_and_turn_on_computer(char, chair, computer, mouse)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_380)touch_executor(mouse_380)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_161. Robot is close chair_2118. Robot is on chair_2118. 
##############################
From agent.py
walk_executor(mouse_380)
Find glue_2013. Robot is inside bedroom_327. Robot is close mouse_380. Robot is close mousepad_381. Robot is close desk_375. Robot is on chair_2118. Robot is no longer inside home_office_161.Robot is no longer close chair_2118.
##############################
From agent.py
touch_executor(mouse_380)
Robot is inside bedroom_327. Robot is close mouse_380. Robot is close mousepad_381. Robot is close desk_375. Robot is on chair_2118. 
##############################
