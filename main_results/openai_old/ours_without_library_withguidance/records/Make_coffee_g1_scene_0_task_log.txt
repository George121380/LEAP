From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_coffee(cofffmaker: item, cup: item):
    body:
        achieve is_on(coffe_maker)
        achieve inside(cup, coffeemaker)
        achieve has_water(coffe_maker)

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffemaker)
        # Select an instance of the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        prepare_coffee(coffeemaker, cup)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffe_maker; available variables: [Variable<cofffmaker: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior prepare_coffee(coffeemaker: item, cup: item):
    body:
        achieve is_on(coffeemaker)
        achieve inside(cup, coffeemaker)
        achieve has_water(coffeemaker)

behavior __goal__():
    body:
        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)
        # Select an instance of the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        prepare_coffee(coffeemaker, cup)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_cup_2063_around_table_107(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior pour_coffee(cup: item, coffee_maker: item):
    body:
        achieve has_water(cup) 
        # Use this as a substitute for indicating the cup has coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        fill_coffee_maker_with_water(coffee_maker)
        start_coffee_maker(coffee_maker)
        pour_coffee(cup, coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing coffee

behavior pour_coffee(cup: item, coffee_maker: item):
    body:
        achieve has_water(cup) 
        # Use this as a substitute for indicating the cup has coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        fill_coffee_maker_with_water(coffee_maker)
        start_coffee_maker(coffee_maker)
        pour_coffee(cup, coffee_maker)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(coffe_maker_290)switchon_executor(coffe_maker_290)switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)exp(cup_2063, coffe_maker_290)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
walk_executor(faucet_232)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchon_executor(faucet_232)
Find drawing_174. Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot is inside dining_room_201. Robot is close faucet_232. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. Robot is no longer close faucet_232.
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
exp(cup_2063, coffe_maker_290)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)
##############################
From agent.py
close_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close coffe_maker_290. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Robot is no longer close coffe_maker_290.
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker is filled with water before starting it. You also need to pour the coffee into cup_2063.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to coffe_maker_290.
Action 5: Switch on coffe_maker_290.
Action 6: Switch off coffe_maker_290.
Action 7: Open coffe_maker_290.
Action 8: look for cup_2063 around coffe_maker_290.
Action 9: Close coffe_maker_290.
Action 10: Switch on coffe_maker_290.
Action 11: Walk to cup_2063.
Action 12: Grab cup_2063.
Action 13: Walk to faucet_43.
Action 14: Switch on faucet_43.
Action 15: Switch off faucet_43.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        if has_water_source(coffee_maker):
            achieve_inside(coffee_maker, faucet)
            achieve_once is_on(faucet)
            # Turn on faucet to fill the coffee maker
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet afterward

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup)
        # Pour coffee into the designated cup

behavior __goal__():
    body:
        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290)

        bind faucet: item where:
            is_faucet(faucet)

        bind cup_2063: item where:
            is_cup(cup_2063)

        fill_coffee_maker_with_water(coffe_maker_290, faucet)
        brew_coffee(coffe_maker_290)
        pour_coffee_into_cup(coffe_maker_290, cup_2063)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function achieve_inside not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        if has_water_source(coffee_maker):
            achieve inside(coffee_maker, faucet)
            achieve_once is_on(faucet)
            # Turn on faucet to fill the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet afterward

behavior brew_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup)
        # Pour coffee into the designated cup

behavior __goal__():
    body:
        bind coffe_maker_290: item where:
            is_coffe_maker(coffe_maker_290)

        bind faucet: item where:
            is_faucet(faucet)

        bind cup_2063: item where:
            is_cup(cup_2063)

        fill_coffee_maker_with_water(coffe_maker_290, faucet)
        brew_coffee(coffe_maker_290)
        pour_coffee_into_cup(coffe_maker_290, cup_2063)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_filled_with_water(coffee_maker: item):
    # Function to check if the coffee maker is filled with water
    symbol has_water = has_water(coffee_maker)
    return has_water

behavior fill_coffee_maker_with_water(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior make_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew the coffee

behavior pour_coffee_into_cup(cup: item, coffee_maker: item):
    body:
        achieve has_water(cup)
        # Pour the brewed coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        if not is_coffee_maker_filled_with_water(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker)
        # Fill the coffee maker with water if needed

        make_coffee(coffee_maker)
        # Brew the coffee using the coffee maker

        pour_coffee_into_cup(cup, coffee_maker)
        # Pour the brewed coffee into the specified cup

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_freecup_in_coffeemaker(coffe_maker:item):
    # Check if theres a free cup inside the coffee maker
    symbol has_freecup = exists freecup: item : is_cup(freecup) and inside(freecup, coffe_maker)
    return has_freecup

behavior prepare_coffee(cup: item, coffe_maker: item):
    body:
        achieve inside(cup, coffe_maker)
        # Place the cup inside the coffeemaker

        achieve is_on(coffe_maker)
        # Turn on the coffeemaker to prepare coffee

        achieve has_water(coffe_maker)
        # Ensure the coffee maker has water before starting

behavior pour_coffee(cup: item, destination: item):
    body:
        achieve on(cup, destination)
        # Pour coffee into the specified cup

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        if has_freecup_in_coffeemaker(coffe_maker):
            bind cup: item where:
                is_cup(cup) and inside(cup, coffe_maker)
            # Select the cup inside the coffee maker

            prepare_coffee(cup, coffe_maker)
            # Start preparing coffee in the provided cup

        else:
            bind cup: item where:
                is_cup(cup) and id[cup] == 2063
            # Select the specified cup for pouring

            prepare_coffee(cup, coffe_maker)
            # Prepare coffee using the selected cup

        pour_coffee(cup, coffe_maker)
        # Pour the prepared coffee into cup 2063

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_freecup_in_coffeemaker(coffe_maker:item):
    # Check if theres a free cup inside the coffee maker
    symbol has_freecup = exists freecup: item : is_cup(freecup) and inside(freecup, coffe_maker)
    return has_freecup

behavior prepare_coffee(cup: item, coffe_maker: item):
    body:
        achieve inside(cup, coffe_maker)
        # Place the cup inside the coffeemaker

        achieve is_on(coffe_maker)
        # Turn on the coffeemaker to prepare coffee

        achieve has_water(coffe_maker)
        # Ensure the coffee maker has water before starting

behavior pour_coffee(cup: item, destination: item):
    body:
        achieve on(cup, destination)
        # Pour coffee into the specified cup

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        if has_freecup_in_coffeemaker(coffe_maker):
            bind cup: item where:
                is_cup(cup) and inside(cup, coffe_maker)
            # Select the cup inside the coffee maker

            prepare_coffee(cup, coffe_maker)
            # Start preparing coffee in the provided cup

            pour_coffee(cup, cup)

        else:
            bind cup: item where:
                is_cup(cup) and id[cup] == 2063
            # Select the specified cup for pouring

            prepare_coffee(cup, coffe_maker)
            # Prepare coffee using the selected cup

            pour_coffee(cup, cup_2063)
            # Pour the prepared coffee into cup 2063

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup_2063; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_freecup_in_coffeemaker(coffe_maker:item):
    # Check if theres a free cup inside the coffee maker
    symbol has_freecup = exists freecup: item : is_cup(freecup) and inside(freecup, coffe_maker)
    return has_freecup

behavior prepare_coffee(cup: item, coffe_maker: item):
    body:
        achieve inside(cup, coffe_maker)
        # Place the cup inside the coffeemaker

        achieve is_on(coffe_maker)
        # Turn on the coffeemaker to prepare coffee

        achieve has_water(coffe_maker)
        # Ensure the coffee maker has water before starting

behavior pour_coffee(cup: item, destination: item):
    body:
        achieve on(cup, destination)
        # Pour coffee into the specified cup

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker

        if has_freecup_in_coffeemaker(coffe_maker):
            bind cup: item where:
                is_cup(cup) and inside(cup, coffe_maker)
            # Select the cup inside the coffee maker

            prepare_coffee(cup, coffe_maker)
            # Start preparing coffee in the provided cup

            pour_coffee(cup, cup)

        else:
            bind cup: item where:
                is_cup(cup) and id[cup] == 2063
            # Select the specified cup for pouring

            prepare_coffee(cup, coffe_maker)
            # Prepare coffee using the selected cup

            pour_coffee(cup, cup)
            # Pour the prepared coffee into the specified cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior place_cup_in_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup_2063: item where:
            is_cup(cup_2063) and id[cup_2063] == 2063
        # Select the cup with ID 2063

        fill_coffee_maker_with_water(coffee_maker)
        # Ensure the coffee maker has water

        place_cup_in_coffee_maker(cup_2063, coffee_maker)
        # Place the cup inside coffee maker

        start_coffee_maker(coffee_maker)
        # Start the coffee maker

        pour_coffee_into_cup(cup_2063)
        # Pour the coffee into cup 2063
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a cup inside the coffee maker and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_in_coffe_maker(cup: item, coffe_maker: item):
    body:
        achieve inside(cup, coffe_maker)

behavior turn_on_coffe_maker(coffe_maker: item):
    body:
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select an instance of a coffe_maker

        place_cup_in_coffe_maker(cup, coffe_maker)
        turn_on_coffe_maker(coffe_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2028_around_fridge_289(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_inside_coffeemaker_and_turn_on(cup: item, coffeemaker: item):
    body:
        achieve inside(cup, coffeemaker)
        # Put the cup inside the coffee maker
        achieve is_on(coffeemaker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffeemaker: item where:
            is_coffe_maker(coffeemaker)

        put_cup_inside_coffeemaker_and_turn_on(cup, coffeemaker)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put a cup inside the coffee maker and turn it on." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        assert has_switch(coffee_maker)
        # Ensure the coffee maker has a switch
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063

        place_cup_in_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a cup inside the coffee maker and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        place_cup_in_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cup_inside_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        place_cup_inside_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        start_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put a cup inside the coffee maker and turn it on." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_snack_2038_around_fridge_289(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_inside_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of the coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063

        put_cup_inside_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select coffee maker with ID 290

        put_cup_in_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)
 
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a cup inside the coffee maker and turn it on to make a cup of coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

behavior put_cup_in_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve inside(cup, coffee_maker)
        # Put the cup inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063

        fill_coffee_maker_with_water(coffee_maker)
        put_cup_in_coffee_maker(coffee_maker, cup)
        turn_on_coffee_maker(coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_water_in_coffee_maker(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)

behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        
        ensure_water_in_coffee_maker(coffee_maker)
        place_cup_in_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a cup inside the coffee maker and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water(coffe_maker:item):
    # Determine if there is water in the coffee maker
    symbol has_water_content=has_water(coffe_maker)
    return has_water_content

behavior place_cup_and_turn_on(coffe_maker: item, cup: item):
    body:
        achieve inside(cup, coffe_maker)
        # Place the cup inside the coffee maker
        
        if not has_water(coffe_maker):
            observe(coffe_maker, "Check if the coffee maker has water")

        assert has_water(coffe_maker)
        achieve is_on(coffe_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 290
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        
        place_cup_and_turn_on(coffe_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_sugar_2039_around_cupboard_229(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_sugar,cupboard_instance)
        else:
            exp(food_sugar,cupboard_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,cupboard_instance]=True
        close[cupboard_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_inside_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn the coffee maker on

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 290
        # Select coffee maker with ID 290

        put_cup_inside_coffee_maker(cup, coffee_maker)
        turn_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
