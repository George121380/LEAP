From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Prepare a cup of hot milk and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(book_2066, bookshelf_233)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(bookshelf_233)
Find mouse_166. Find keyboard_168. Find chair_103. Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. 
##############################
From agent.py
exp(book_2066, bookshelf_233)
Fail to find book_2066 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_101)open_executor(bookshelf_101)exp(book_2066, bookshelf_101)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_101)
Find drawing_174. Find drawing_176. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. Robot is no longer inside dining_room_201.Robot is no longer close bookshelf_233.Robot is no longer close floor_207.
##############################
From agent.py
open_executor(bookshelf_101)
Find towel_rack_32. Find towel_rack_31. Robot is inside bedroom_67. Robot is close floor_72. Robot is close photoframe_185. Robot is close bookshelf_101. 
##############################
From agent.py
exp(book_2066, bookshelf_101)
Fail to find book_2066 around bookshelf_101. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_354)open_executor(bookshelf_354)exp(book_2066, bookshelf_354)walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(bookshelf_354)
Find drawing_402. Find drawing_403. Find drawing_404. Find book_2066. Find book_2067. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. Robot is no longer inside bedroom_67.Robot is no longer close floor_72.Robot is no longer close photoframe_185.Robot is no longer close bookshelf_101.
##############################
From agent.py
open_executor(bookshelf_354)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_241. Find keyboard_415. Find headset_2076. Find hanger_369. Find remote_control_2052. Find drawing_243. Find hanger_361. Find spectacles_2082. Find hanger_372. Find drawing_242. Find cat_2055. Find clothes_jacket_2047. Find chair_356. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find hanger_365. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close floor_320. Robot is close bookshelf_354. Robot is close photoframe_430. 
##############################
From agent.py
exp(book_2066, bookshelf_354)
Find book_2066. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2066)grab_executor(book_2066)walk_executor(coffee_table_2068)put_executor(book_2066, coffee_table_2068)
##############################
From agent.py
walk_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. Robot is no longer close floor_320.Robot is no longer close photoframe_430.
##############################
From agent.py
grab_executor(book_2066)
Robot is inside home_office_319. Robot is close bookshelf_354. Robot is close book_2066. Grabbing book_2066 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. Robot is no longer close bookshelf_354.
##############################
From agent.py
put_executor(book_2066, coffee_table_2068)
Robot is inside home_office_319. Robot is close book_2066. Robot is close coffee_table_2068. book_2066 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_cup_2063_around_desk_104(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_coffee_table(table: item, home_office: item):
    # Check if the table is a coffee table inside the home office
    symbol is_home_office_coffee_table = is_coffee_table(table) and inside(table, home_office)
    return is_home_office_coffee_table

behavior prepare_hot_milk(milk: item, cup: item):
    body:
        achieve_once inhand(milk)
        # Temporarily hold the milk to pour it into the cup

        achieve is_milk(milk)
        # Ensure the item is milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Specify the kitchen location

        bind stove: item where:
            is_stove(stove) and inside(stove, kitchen)
        # Select a stove inside the kitchen

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_on(stove_faucet)
            # Turn on the stove

        achieve has_water(cup)
        # Pour milk into the cup to make hot milk

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_off(stove_faucet)
            # Turn off the stove

behavior place_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to fill with hot milk

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and is_home_office_coffee_table(coffee_table, home_office)
        # Select the coffee table inside the home office

        prepare_hot_milk(milk, cup)
        # Prepare the hot milk in the cup

        place_cup_on_coffee_table(cup, coffee_table)
        # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'plugged') at line 5967, column 20.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def is_home_office_coffee_table(table: item, home_office: item):
    # Check if the table is a coffee table inside the home office
    symbol is_home_office_coffee_table = is_coffee_table(table) and inside(table, home_office)
    return is_home_office_coffee_table

behavior prepare_hot_milk(milk: item, cup: item):
    body:
        achieve_once inhand(milk)
        # Temporarily hold the milk to pour it into the cup

        achieve is_milk(milk)
        # Ensure the item is milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Specify the kitchen location

        bind stove: item where:
            is_stove(stove) and inside(stove, kitchen)
        # Select a stove inside the kitchen

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_on(stove_faucet)
            # Turn on the stove

        achieve has_water(cup)
        # Pour milk into the cup to make hot milk

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_off(stove_faucet)
            # Turn off the stove

behavior place_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to fill with hot milk

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_home_office_coffee_table(coffee_table, home_office)
        # Select the coffee table inside the home office

        prepare_hot_milk(milk, cup)
        # Prepare the hot milk in the cup

        place_cup_on_coffee_table(cup, coffee_table)
        # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'plugged') at line 5949, column 20.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_desk_104(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2064_around_coffe_maker_290(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==290
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

#goal_representation
 
def is_home_office_coffee_table(table: item, home_office: item):
    # Check if the table is a coffee table inside the home office
    symbol is_home_office_coffee_table = is_coffee_table(table) and inside(table, home_office)
    return is_home_office_coffee_table

def has_water(cup: item):
    # Check if a cup has water, which implies the cup has hot milk after milk is poured in
    symbol has_water = exists o: item : is_water(o) and inside(o, cup)
    return has_water

behavior prepare_hot_milk(milk: item, cup: item):
    body:
        achieve_once inhand(milk)
        # Temporarily hold the milk to pour it into the cup

        achieve is_milk(milk)
        # Ensure the item is milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Specify the kitchen location

        bind stove: item where:
            is_stove(stove) and inside(stove, kitchen)
        # Select a stove inside the kitchen

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_on(stove_faucet)
            # Turn on the stove

        if not has_water(cup):
            achieve has_water(cup)
            # Pour milk into the cup to make hot milk

        if achieve plugged(stove):
            bind stove_faucet: item where:
                is_faucet(stove_faucet) and close(stove_faucet, stove)
            achieve_once is_off(stove_faucet)
            # Turn off the stove

behavior place_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the hot milk cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup to fill with hot milk

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and is_home_office_coffee_table(coffee_table, home_office)
        # Select the coffee table inside the home office

        prepare_hot_milk(milk, cup)
        # Prepare the hot milk in the cup

        place_cup_on_coffee_table(cup, coffee_table)
        # Place the cup of hot milk on the coffee table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_desk_104(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2063_around_desk_104(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk(cup: item):
    # Function to check if the cup has milk in it
    symbol milk_exists=exists o: item : is_milk(o) and inside(o, cup)
    return milk_exists

behavior prepare_hot_milk(cup: item):
    body:
        if not has_milk(cup):
            achieve has_water(cup) # Ensure the cup is filled (ideally with milk)
            # Note: In a real scenario, you should ensure its filled with milk instead of water

behavior place_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        prepare_hot_milk(cup)
        # Prepare a cup of hot milk

        place_on_coffee_table(cup, coffee_table)
        # Place the cup with hot milk on the coffee table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<coffee_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2063_around_desk_104(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cup,desk_instance)
        else:
            exp(cup,desk_instance)
    eff:
        unknown[cup]=False
        close[cup,desk_instance]=True
        close[desk_instance,cup]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_milk(cup: item):
    # Function to check if the cup has milk in it
    symbol milk_exists=exists o: item : is_milk(o) and inside(o, cup)
    return milk_exists

behavior prepare_hot_milk(cup: item):
    body:
        if not has_milk(cup):
            achieve has_water(cup) # Ensure the cup is filled (ideally with milk)
            # Note: In a real scenario, you should ensure its filled with milk instead of water

behavior place_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        prepare_hot_milk(cup)
        # Prepare a cup of hot milk

        place_on_coffee_table(cup, coffee_table)
        # Place the cup with hot milk on the coffee table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_milk(cup: item):
    # Function to check if the cup has milk in it
    symbol milk_exists=exists o: item : is_milk(o) and inside(o, cup)
    return milk_exists

behavior prepare_hot_milk(cup: item):
    body:
        if not has_milk(cup):
            achieve has_water(cup) # Ensure the cup is filled (ideally with milk)
            # Note: In a real scenario, you should ensure its filled with milk instead of water

behavior place_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table in the home office

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        prepare_hot_milk(cup)
        # Prepare a cup of hot milk

        place_on_coffee_table(cup, coffee_table)
        # Place the cup with hot milk on the coffee table

##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(cup_2063, desk_104)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(desk_104)
Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer inside home_office_319.Robot is no longer close book_2066.Robot is no longer close coffee_table_2068.
##############################
From agent.py
exp(cup_2063, desk_104)
Fail to find cup_2063 around desk_104. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(cup_2063, cupboard_229)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bedroom_67.Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(cup_2063, cupboard_229)
Fail to find cup_2063 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(cup_2063, fridge_289)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(cup_2063, fridge_289)
Fail to find cup_2063 around fridge_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cup_2063, kitchen_counter_230)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find drawing_238. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
exp(cup_2063, kitchen_counter_230)
Find cup_2063. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. 
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close cup_2063. Robot is close coffee_table_2068. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
put_executor(cup_2063, coffee_table_2068)
Robot is inside home_office_319. Robot is close cup_2063. Robot is close coffee_table_2068. cup_2063 released by right hand. 
##############################
From agent.py
Human Instruction: You need to prepare a cup of hot milk. Currently, the cup on the coffee table only has water in it. Replace the water with milk and ensure it is hot before placing it back on the coffee table in the home office.

The actions you have taken:
Action 1: Walk to bookshelf_233.
Action 2: Open bookshelf_233.
Action 3: look for book_2066 around bookshelf_233.
Action 4: Walk to bookshelf_101.
Action 5: Open bookshelf_101.
Action 6: look for book_2066 around bookshelf_101.
Action 7: Walk to bookshelf_354.
Action 8: Open bookshelf_354.
Action 9: look for book_2066 around bookshelf_354.
Action 10: Walk to book_2066.
Action 11: Grab book_2066.
Action 12: Walk to coffee_table_2068.
Action 13: Put book_2066 on coffee_table_2068.
Action 14: Walk to desk_104.
Action 15: look for cup_2063 around desk_104.
Action 16: Walk to cupboard_229.
Action 17: Open cupboard_229.
Action 18: look for cup_2063 around cupboard_229.
Action 19: Walk to fridge_289.
Action 20: Switch off fridge_289.
Action 21: Open fridge_289.
Action 22: look for cup_2063 around fridge_289.
Action 23: Walk to kitchen_counter_230.
Action 24: look for cup_2063 around kitchen_counter_230.
Action 25: Walk to cup_2063.
Action 26: Grab cup_2063.
Action 27: Walk to faucet_43.
Action 28: Switch on faucet_43.
Action 29: Switch off faucet_43.
Action 30: Walk to coffee_table_2068.
Action 31: Put cup_2063 on coffee_table_2068.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_cup_with_water(cup: item):
    # Determine if the cup has water
    symbol has_water_cup = has_water(cup)
    return has_water_cup

def replace_water_with_hot_milk(cup: item):
    # Ensure water is removed and hot milk is prepared in the cup
    if is_cup_with_water(cup):
        achieve clean(cup)
    # Prepare hot milk
    symbol milk = exists o: item : is_milk(o) and within_kitchen(o)
    return milk

behavior prepare_hot_milk(cup: item):
    body:
        symbol milk = replace_water_with_hot_milk(cup)
        achieve has_milk(cup)
        # Ensure the milk in the cup is hot

behavior put_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of the cup

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        prepare_hot_milk(cup)
        # Prepare the cup with hot milk

        put_cup_on_coffee_table(cup, coffee_table)
        # Put the cup on the coffee table in the home office

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function within_kitchen not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
def is_cup_with_water(cup: item):
    # Determine if the cup has water
    symbol has_water_cup = has_water(cup)
    return has_water_cup

def replace_water_with_hot_milk(cup: item):
    # Ensure water is removed and hot milk is prepared in the cup
    if is_cup_with_water(cup):
        achieve clean(cup)
    # Prepare hot milk
    symbol milk = exists o: item : is_milk(o) and close(o, cup)
    return milk

behavior prepare_hot_milk(cup: item, milk: item):
    body:
        achieve inside(milk, cup)
        achieve has_milk(cup)
        # Ensure the milk in the cup is hot

behavior put_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of the cup

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk close to the cup

        prepare_hot_milk(cup, milk)
        # Prepare the cup with hot milk

        put_cup_on_coffee_table(cup, coffee_table)
        # Put the cup on the coffee table in the home office
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_milk_nearby(cup: item):
    # Determine if milk is close to the cup
    symbol milk_nearby = exists o: item : is_milk(o) and close(o, cup)
    return milk_nearby

behavior clean_cup(cup: item):
    body:
        if has_water(cup):
            achieve clean(cup)
        # Clean the cup if it contains water

behavior prepare_hot_milk(cup: item, milk: item):
    body:
        achieve inside(milk, cup)
        achieve has_milk(cup)
        # Ensure the milk in the cup is hot
        assert is_on(faucet) # Assumption: heating is simulated with faucet

behavior place_cup_on_coffee_table(cup: item, coffee_table: item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of the cup

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        clean_cup(cup)
        # Clean the cup if necessary

        if has_milk_nearby(cup):
            prepare_hot_milk(cup, milk)
            # Prepare hot milk in the cup
        
        place_cup_on_coffee_table(cup, coffee_table)
        # Place the cup on the coffee table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk(fridge: item):
    # Determine if there is milk in a specified fridge
    symbol has_milk=exists milk: item : is_milk(milk) and inside(milk, fridge)
    return has_milk

behavior prepare_hot_milk(cup: item, milk: item):
    body:
        achieve_once inhand(cup)
        # Hold the cup to pour milk into it

        if not has_water(cup):
            achieve inside(milk, cup)
            # Pour milk into the cup if it doesnt contain water

        achieve is_on(stove)
        # Turn on stove to heat the milk

        achieve_once is_off(stove)
        # Turn off stove after heating milk

behavior put_cup_on_table(cup: item, table: item):
    body:
        achieve on(cup, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with a given ID

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with a given ID

        bind fridge: item where:
            is_fridge(fridge)

        if has_milk(fridge):
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
            prepare_hot_milk(cup, milk)
            put_cup_on_table(cup, coffee_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<cup: item>, Variable<milk: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2056_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation
 
def has_milk(fridge: item):
    # Determine if there is milk in a specified fridge
    symbol has_milk=exists milk: item : is_milk(milk) and inside(milk, fridge)
    return has_milk

behavior prepare_hot_milk(cup: item, milk: item, stove: item):
    body:
        achieve_once inhand(cup)
        # Hold the cup to pour milk into it

        if not has_water(cup):
            achieve inside(milk, cup)
            # Pour milk into the cup if it doesnt contain water

        achieve is_on(stove)
        # Turn on stove to heat the milk

        achieve_once is_off(stove)
        # Turn off stove after heating milk

behavior put_cup_on_table(cup: item, table: item):
    body:
        achieve on(cup, table)

behavior __goal__():
    body:
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select the coffee table with a given ID

        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with a given ID

        bind fridge: item where:
            is_fridge(fridge)

        if has_milk(fridge):
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
                
            bind stove: item where:
                is_stove(stove)
            # Select the stove needed to heat the milk

            prepare_hot_milk(cup, milk, stove)
            put_cup_on_table(cup, coffee_table)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. prepare a cup of hot milk and put it on the coffee table in the home office." ?
Answer: Find the milk in the fridge, put it in a cup, put the cup in the microwave. Turn on the microwave. Finally put the cup on the coffee table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
def has_milk_in_fridge(fridge:item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

def has_microwave_in_kitchen(kitchen:item):
    # Function to check if there is a microwave in the kitchen
    symbol has_microwave = exists microwave: item : is_microwave(microwave) and inside(microwave, kitchen)
    return has_microwave

behavior prepare_hot_milk(milk:item, cup:item, microwave:item):
    body:
        achieve inside(milk, cup)
        # Fill the cup with milk

        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and has_milk_in_fridge(fridge)
        # Select fridge that contains milk
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Bind specific milk instance from the fridge

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select coffee table with ID 2068

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select an instance of a cup with water to replace with milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Bind kitchen instance

        observe(cup, "Check for milk and prepare if not present")
        # Observe the current state of the cup and prepare hot milk if necessary

        if has_microwave_in_kitchen(kitchen):
            bind microwave: item where:
                is_microwave(microwave) and inside(microwave, kitchen)
            prepare_hot_milk(milk, cup, microwave)

        achieve on(cup, coffee_table)
        # Place the cup with hot milk on the coffee table in the home office
#goal_representation_end

##############################
From agent.py->reset_sub_goal
def has_milk_in_fridge(fridge:item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

def has_microwave_in_kitchen(kitchen:item):
    # Function to check if there is a microwave in the kitchen
    symbol has_microwave = exists microwave: item : is_microwave(microwave) and inside(microwave, kitchen)
    return has_microwave

behavior prepare_hot_milk(milk:item, cup:item, microwave:item):
    body:
        achieve inside(milk, cup)
        # Fill the cup with milk

        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and has_milk_in_fridge(fridge)
        # Select fridge that contains milk
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Bind specific milk instance from the fridge

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select coffee table with ID 2068

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select an instance of a cup with water to replace with milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Bind kitchen instance

        observe(cup, "Check for milk and prepare if not present")
        # Observe the current state of the cup and prepare hot milk if necessary

        if has_microwave_in_kitchen(kitchen):
            bind microwave: item where:
                is_microwave(microwave) and inside(microwave, kitchen)
            prepare_hot_milk(milk, cup, microwave)

        achieve on(cup, coffee_table)
        # Place the cup with hot milk on the coffee table in the home office
##############################
From agent.py-> find a plan in act()
obs(cup_2063, Check for milk and prepare if not present)walk_executor(milk_2043)grab_executor(milk_2043)walk_executor(cup_2063)putin_executor(milk_2043, cup_2063)walk_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(microwave_297)putin_executor(cup_2063, microwave_297)close_executor(microwave_297)switchon_executor(microwave_297)switchoff_executor(microwave_297)open_executor(microwave_297)walk_executor(cup_2063)grab_executor(cup_2063)walk_executor(coffee_table_2068)put_executor(cup_2063, coffee_table_2068)
##############################
From agent.py
obs(cup_2063, Check for milk and prepare if not present)
Get this information:  cup_2063 is close to character_65. cup_2063 is close to coffee_table_2068. cup_2063 is on coffee_table_2068. cup_2063 is inside bathroom_1.
##############################
From agent.py
walk_executor(milk_2043)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close milk_2043. Robot is no longer inside home_office_319.Robot is no longer close coffee_table_2068.Robot is no longer close cup_2063.
##############################
From agent.py
grab_executor(milk_2043)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside bathroom_1. Robot is close milk_2043. Robot is close coffee_table_2068. Robot is close cup_2063. Robot is no longer inside dining_room_201.Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(milk_2043, cup_2063)
Robot is inside bathroom_1. Robot is close milk_2043. Robot is close coffee_table_2068. Robot is close cup_2063. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot is inside dining_room_201. Robot is close microwave_297. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close milk_2043.Robot is no longer close coffee_table_2068.Robot is no longer close cup_2063.
##############################
From agent.py
switchoff_executor(microwave_297)
Robot is inside dining_room_201. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot is inside dining_room_201. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside bathroom_1. Robot is close coffee_table_2068. Robot is close cup_2063. Robot is no longer inside dining_room_201.Robot is no longer close microwave_297.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside bathroom_1. Robot is close coffee_table_2068. Robot is close cup_2063. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close coffee_table_2068.
##############################
From agent.py
putin_executor(cup_2063, microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. cup_2063 released by right hand. 
##############################
From agent.py
close_executor(microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchoff_executor(microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
open_executor(microwave_297)
Robot is inside dining_room_201. Robot is close cup_2063. Robot is close microwave_297. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(cup_2063)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close microwave_297. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(cup_2063)
Robot is inside bathroom_1. Robot is close cup_2063. Robot is close microwave_297. Grabbing cup_2063 by right hand. 
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close cup_2063. Robot is close coffee_table_2068. Robot is no longer inside bathroom_1.Robot is no longer close microwave_297.
##############################
From agent.py
put_executor(cup_2063, coffee_table_2068)
Robot is inside home_office_319. Robot is close cup_2063. Robot is close coffee_table_2068. cup_2063 released by right hand. 
##############################
