From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select a fridge instance

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Store the chicken back in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def locate_knife():
    # Function to check if there is a knife available
    symbol has_knife=exists k: item : is_knife(k)
    return has_knife

behavior cut_chicken_with_knife(chicken: item, knife: item):
    body:
        achieve cut(chicken)

behavior place_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        if locate_knife():
            bind knife: item where:
                is_knife(knife)
            # Bind a knife instance to use for cutting
            cut_chicken_with_knife(chicken, knife)
            # Cut the chicken using the knife instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        place_chicken_in_fridge(chicken, fridge)
        # Place the chicken back in the fridge

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the chicken into pieces, then put it back in the fridge." ?
Answer: Cut the chicken into pieces, then put it back in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Place the chicken back in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior place_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken inside the fridge

behavior close_fridge_door(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door after placing the chicken inside

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of the fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        place_chicken_in_fridge(chicken, fridge)
        # Place the cut chicken in the fridge

        close_fridge_door(fridge)
        # Close the fridge door

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut into pieces

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Put the cut chicken back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of a chicken item

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge
        
        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Store the cut chicken in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item, knife: item):
    body:
        achieve_once inhand(knife)
        # Hold the knife in hand to cut the chicken
        achieve cut(chicken)
        # Ensure the chicken is cut

behavior place_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind knife: item where:
            is_knife(knife)
        # Select an instance of a knife

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken, knife)
        # Cut the chicken into pieces

        place_in_fridge(chicken, fridge)
        # Put back the cut chicken in the fridge

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the chicken into pieces, then put it back in the fridge." ?
Answer: Cut the chicken into pieces, then put it back in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior close_fridge(fridge: item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Put the cut chicken back in the fridge

        close_fridge(fridge)
        # Close the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2064_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Store the chicken in the fridge

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind fridge: item where:
            is_fridge(fridge)

        cut_chicken(chicken)
        store_chicken_in_fridge(chicken, fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item, cutting_board: item):
    body:
        achieve inside(chicken, cutting_board) 
        # Ensure the chicken is on the cutting board for cutting
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Store the cut chicken back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the instance of the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select the instance of the fridge

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the instance of the cutting board

        cut_chicken(chicken, cutting_board)
        store_in_fridge(chicken, fridge)


#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the chicken into pieces, then put it back in the fridge." ?
Answer: Cut the chicken into pieces, then put it back in the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of a chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken)
        # Cut the chicken

        store_chicken_in_fridge(chicken, fridge)
        # Put the chicken back in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior store_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of a chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_in_fridge(chicken, fridge)
        # Store the cut chicken in the fridge

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Store the chicken inside the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the item representing the chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge where the chicken will be stored

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Place the cut chicken back inside the fridge
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board_available():
    # Function to check if a cutting board is available in the kitchen counter
    symbol has_cutting_board=exists o: item : is_cutting_board(o) and on(o, kitchen_counter)
    return has_cutting_board

behavior cut_chicken(chicken:item, kitchen_counter:item):
    body:
        if has_cutting_board_available():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            achieve on(chicken, cutting_board)
            # Place the chicken on the cutting board for cutting
            achieve cut(chicken)
            # Cut the chicken

behavior place_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Place the cut chicken back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select an instance of a kitchen counter

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken, kitchen_counter)
        # Cut the chicken on the kitchen counter

        place_chicken_in_fridge(chicken, fridge)
        # Place the chicken back in the fridge

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
 
def has_cutting_board_available():
    # Function to check if a cutting board is available on the kitchen counter
    symbol has_cutting_board=exists o: item : is_cutting_board(o) and on(o, kitchen_counter)
    return has_cutting_board

behavior cut_chicken(chicken:item, kitchen_counter:item):
    body:
        if has_cutting_board_available():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            achieve on(chicken, cutting_board)
            # Place the chicken on the cutting board for cutting
            achieve cut(chicken)
            # Cut the chicken

behavior place_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Place the cut chicken back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select an instance of a kitchen counter

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken, kitchen_counter)
        # Cut the chicken on the kitchen counter

        place_chicken_in_fridge(chicken, fridge)
        # Place the chicken back in the fridge

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: kitchen_counter; available variables: [Variable<o: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#goal_representation
 
def has_cutting_board_available():
    # Function to check if a cutting board is available on the kitchen counter
    symbol has_cutting_board=exists o: item : is_cutting_board(o) and on(o, kitchen_counter)
    return has_cutting_board

behavior cut_chicken(chicken:item, kitchen_counter:item):
    body:
        if has_cutting_board_available():
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and on(cutting_board, kitchen_counter)
            achieve on(chicken, cutting_board)
            # Place the chicken on the cutting board for cutting
            achieve cut(chicken)
            # Cut the chicken

behavior place_chicken_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Place the cut chicken back in the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select an instance of a kitchen counter

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken, kitchen_counter)
        # Cut the chicken on the kitchen counter

        place_chicken_in_fridge(chicken, fridge)
        # Place the chicken back in the fridge

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
