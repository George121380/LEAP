From agent.py
Reset goals: The sub-goals are: 
['1. Find a cup and milk.', '2. Pour the milk into the cup.', '3. Heat the cup of milk using the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cup_and_milk(cup: item, milk: item):
    body:
        achieve visited(cup)
        achieve visited(milk)

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup):
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup

        if exists milk: item : is_milk(milk):
            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

        if exists cup and exists milk:
            find_cup_and_milk(cup, milk)
        else:
            if not exists cup:
                foreach cup: item:
                    if is_cup(cup) and not visited(cup):
                        observe(cup, "Identify and locate a cup")
            if not exists milk:
                foreach milk: item:
                    if is_milk(milk) and not visited(milk):
                        observe(milk, "Identify and locate milk")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('AND', 'and') at line 5898, column 23.
Expected one of: 
	* COLON
	* IN
Previous tokens: [Token('VARNAME', 'cup')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
behavior find_cup_and_milk(cup: item, milk: item):
    body:
        achieve visited(cup)
        achieve visited(milk)

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup):
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup

        if exists milk: item : is_milk(milk):
            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

        if exists cup and exists milk:
            find_cup_and_milk(cup, milk)
        else:
            if not exists cup:
                foreach cup: item:
                    if is_cup(cup) and not visited(cup):
                        observe(cup, "Identify and locate a cup")
            if not exists milk:
                foreach milk: item:
                    if is_milk(milk) and not visited(milk):
                        observe(milk, "Identify and locate milk")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('AND', 'and') at line 5898, column 23.
Expected one of: 
	* COLON
	* IN
Previous tokens: [Token('VARNAME', 'cup')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
behavior find_cup_and_milk(cup: item, milk: item):
    body:
        achieve visited(cup)
        achieve visited(milk)

behavior __goal__():
    body:
        if exists cup: item : is_cup(cup):
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup

        if exists milk: item : is_milk(milk):
            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

        if exists cup and exists milk:
            find_cup_and_milk(cup, milk)
        else:
            if not exists cup:
                foreach cup: item:
                    if is_cup(cup) and not visited(cup):
                        observe(cup, "Identify and locate a cup")
            if not exists milk:
                foreach milk: item:
                    if is_milk(milk) and not visited(milk):
                        observe(milk, "Identify and locate milk")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_in_fridge(fridge:item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        if has_milk_in_fridge(fridge):
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk")
                    if has_milk_in_fridge(fridge):
                        bind milk: item where:
                            is_milk(milk) and inside(milk, fridge)
                        break

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        achieve inside(milk, cup)
        # Fill the cup with milk

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<fridge: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
def has_milk_in_fridge(fridge:item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        if has_milk_in_fridge(fridge):
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk")
                    if has_milk_in_fridge(fridge):
                        bind milk: item where:
                            is_milk(milk) and inside(milk, fridge)
                        break

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        achieve inside(milk, cup)
        # Fill the cup with milk

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<fridge: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def has_milk_in_fridge(fridge: item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        if has_milk_in_fridge(fridge):
            bind milk: item where:
                is_milk(milk) and inside(milk, fridge)
        else:
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk")
                    if has_milk_in_fridge(fridge):
                        bind milk: item where:
                            is_milk(milk) and inside(milk, fridge)
                        break

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        achieve inside(milk, cup)
        # Fill the cup with milk

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find a cup and milk." ?
Answer: To find a cup and milk, locate where kitchen items are stored to find the cup, and check the refrigerator for milk.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def has_cup_or_milk():
    # Function to check if there is a cup and milk available
    symbol has_cup=exists cup: item : is_cup(cup)
    symbol has_milk=exists milk: item : is_milk(milk)
    return has_cup and has_milk

behavior __goal__():
    body:
        if has_cup_or_milk():
            # If there is already a known cup and milk, select them
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup

            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

            achieve visited(cup)
            achieve visited(milk)
        
        else:
            # Inspect unvisited items to locate a cup and milk
            foreach item: item:
                if is_cup(item) and not visited(item):
                    observe(item, "Locate a cup to use")
                elif is_milk(item) and not visited(item):
                    observe(item, "Locate milk to use")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_milk') at line 5907, column 22.
Expected one of: 
	* EQUAL
	* __ANON_7
	* MORETHAN
	* __ANON_4
	* MINUS
	* __ANON_8
	* IF
	* PERCENT
	* _NEWLINE
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* LESS_EQ
	* GREATER_EQ
	* PLUS
	* STAR
	* SLASH
	* OR
	* SEMICOLON
	* NOT_EQ
	* RSHIFT
	* COMMA
	* FLOORDIV
	* __ANON_2
	* __ANON_0
	* DOUBLE_EQUAL
	* VBAR
	* AND
	* CIRCUMFLEX
	* __ANON_3
	* AT
	* __ANON_1
	* LESSTHAN
	* AMPERSAND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_cup_and_milk():
    # Function to check if there is a cup and milk available
    symbol has_cup=exists cup: item : is_cup(cup)
    symbol has_milk=exists milk: item : is_milk(milk)
    return has_cup and has_milk

behavior __goal__():
    body:
        if has_cup_and_milk():
            # If there is already a known cup and milk, select them
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup

            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

            achieve visited(cup)
            achieve visited(milk)
        
        else:
            # Inspect unvisited items to locate a cup and milk
            foreach item: item:
                if is_cup(item) and not visited(item):
                    observe(item, "Locate a cup to use")
                elif is_milk(item) and not visited(item):
                    observe(item, "Locate milk to use")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_milk') at line 5907, column 22.
Expected one of: 
	* EQUAL
	* __ANON_7
	* MORETHAN
	* __ANON_4
	* MINUS
	* __ANON_8
	* IF
	* PERCENT
	* _NEWLINE
	* LSHIFT
	* __ANON_5
	* __ANON_6
	* LESS_EQ
	* GREATER_EQ
	* PLUS
	* STAR
	* SLASH
	* OR
	* SEMICOLON
	* NOT_EQ
	* RSHIFT
	* COMMA
	* FLOORDIV
	* __ANON_2
	* __ANON_0
	* DOUBLE_EQUAL
	* VBAR
	* AND
	* CIRCUMFLEX
	* __ANON_3
	* AT
	* __ANON_1
	* LESSTHAN
	* AMPERSAND

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def has_cup_and_milk():
    # Function to check if there is a cup and milk available
    symbol has_cup=exists cup: item : is_cup(cup)
    symbol has_milk=exists milk: item : is_milk(milk)
    return has_cup and has_milk

behavior __goal__():
    body:
        if has_cup_and_milk():
            # If there is already a known cup and milk, select them
            bind cup: item where:
                is_cup(cup)
            # Select an instance of a cup
            
            bind milk: item where:
                is_milk(milk)
            # Select an instance of milk

            achieve visited(cup)
            achieve visited(milk)
        
        else:
            # Inspect unvisited items to locate a cup and milk
            foreach item: item:
                if is_cup(item) and not visited(item):
                    observe(item, "Locate a cup to use")
                elif is_milk(item) and not visited(item):
                    observe(item, "Locate milk to use")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior find_cup_and_milk(cup: item, milk: item):
    body:
        achieve close_char(char, cup)
        # Get close to the cup

        achieve inside(milk, cup)
        # Place the milk inside the cup

behavior __goal__():
    body:
        if exists cup: item where is_cup(cup) and visited(cup):
            # If a cup has already been visited, bind it for use
            bind cup: item where:
                is_cup(cup) and visited(cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Identify a cup")

        if exists milk: item where is_milk(milk) and visited(milk):
            # If milk has already been visited, bind it for use
            bind milk: item where:
                is_milk(milk) and visited(milk)
        else:
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Identify milk")

        find_cup_and_milk(cup, milk)
        # Perform actions to find and use the cup and milk
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'is_cup') at line 5890, column 35.
Expected one of: 
	* COLON
Previous tokens: [Token('WHERE', 'where')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2087_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
behavior find_cup_and_milk(cup: item, milk: item):
    body:
        achieve close_char(char, cup)
        # Get close to the cup

        achieve inside(milk, cup)
        # Place the milk inside the cup

behavior __goal__():
    body:
        if exists cup: item where is_cup(cup) and visited(cup):
            # If a cup has already been visited, bind it for use
            bind cup: item where:
                is_cup(cup) and visited(cup)
        else:
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Identify a cup")

        if exists milk: item where is_milk(milk) and visited(milk):
            # If milk has already been visited, bind it for use
            bind milk: item where:
                is_milk(milk) and visited(milk)
        else:
            foreach milk: item:
                if is_milk(milk) and not visited(milk):
                    observe(milk, "Identify milk")

        find_cup_and_milk(cup, milk)
        # Perform actions to find and use the cup and milk

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'is_cup') at line 5909, column 35.
Expected one of: 
	* COLON
Previous tokens: [Token('WHERE', 'where')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        achieve close_char(char, cup)
        # Get close to the cup

        achieve inside(milk, cup)
        # Place the milk inside the cup
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and take a cup from where kitchen items are stored.', '2. Retrieve milk from the refrigerator.', '3. Pour the milk into the cup.', '4. Heat the milk in the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_cup_in_storage(cup: item, storage: item):
    # Function to check if there is a cup in the specified storage area
    symbol has_cup = exists o: item : is_cup(o) and inside(o, storage)
    return has_cup

behavior find_and_take_cup(cup: item, storage: item):
    body:
        achieve inside(cup, storage) # Initially, the cup should be inside the storage
        achieve visited(storage) # Ensure the storage area is visited

behavior __goal__():
    body:
        if exists storage: item : has_cup_in_storage(cup, storage):
            # If a cup is known to be in a storage area, retrieve it
            bind storage: item where:
                has_cup_in_storage(cup, storage)
            bind cup: item where:
                is_cup(cup) and inside(cup, storage)
            find_and_take_cup(cup, storage)
            # Find and take the cup from the storage area

        else:
            # If no known cup location, search through all unvisited storage areas
            foreach storage: item:
                if not visited(storage):
                    observe(storage, "Locate and retrieve cup from storage")
                    # Observe storage to find and take any available cups

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: cup; available variables: [Variable<storage: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def has_cup_in_storage(storage: item):
    # Function to check if there is a cup in the specified storage area
    symbol has_cup = exists o: item : is_cup(o) and inside(o, storage)
    return has_cup

behavior find_and_take_cup(cup: item, storage: item):
    body:
        achieve inside(cup, storage) # Initially, the cup should be inside the storage
        achieve visited(storage) # Ensure the storage area is visited

behavior __goal__():
    body:
        if exists storage: item : has_cup_in_storage(storage):
            # If a cup is known to be in a storage area, retrieve it
            bind storage: item where:
                has_cup_in_storage(storage)
            bind cup: item where:
                is_cup(cup) and inside(cup, storage)
            find_and_take_cup(cup, storage)
            # Find and take the cup from the storage area

        else:
            # If no known cup location, search through all unvisited storage areas
            foreach storage: item:
                if not visited(storage):
                    observe(storage, "Locate and retrieve cup from storage")
                    # Observe storage to find and take any available cups

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_cup_location(kitchen_item_location:item):
    # Function to check if there is a cup in the specified kitchen item location
    symbol contains_cup = exists o: item : is_cup(o) and inside(o, kitchen_item_location)
    return contains_cup

behavior locate_and_take_cup(kitchen_item_location: item):
    body:
        if has_cup_location(kitchen_item_location):
            bind cup: item where:
                is_cup(cup) and inside(cup, kitchen_item_location)
            achieve_once inhand(cup)
            # Take hold of the cup if it is found in the kitchen item location

behavior __goal__():
    body:
        foreach kitchen_location: item:
            if is_cupboard(kitchen_location) and not visited(kitchen_location):
                observe(kitchen_location, "Check if there is a cup in the storage location")
                if has_cup_location(kitchen_location):
                    locate_and_take_cup(kitchen_location)
                    break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<kitchen_location: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#goal_representation
 
def has_cup_location(kitchen_item_location:item):
    # Function to check if there is a cup in the specified kitchen item location
    symbol contains_cup = exists o: item : is_cup(o) and inside(o, kitchen_item_location)
    return contains_cup

behavior locate_and_take_cup(kitchen_item_location: item):
    body:
        if has_cup_location(kitchen_item_location):
            bind cup: item where:
                is_cup(cup) and inside(cup, kitchen_item_location)
            achieve_once inhand(cup)
            # Take hold of the cup if it is found in the kitchen item location

behavior __goal__():
    body:
        foreach kitchen_location: item:
            if is_cupboard(kitchen_location) and not visited(kitchen_location):
                observe(kitchen_location, "Check if there is a cup in the storage location")
                if has_cup_location(kitchen_location):
                    locate_and_take_cup(kitchen_location)
                    return

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n\n#goal_representation_end\n') at line 5919, column 27.
Expected one of: 
	* LSQB
	* BATCHED
	* ELLIPSIS
	* TRUE
	* MINUS
	* STRING
	* NOT
	* NONE
	* EXISTS
	* FLOAT_NUMBER
	* DO
	* LPAR
	* FINDALL
	* FALSE
	* HEX_NUMBER
	* PLUS
	* OCT_NUMBER
	* TILDE
	* BIN_NUMBER
	* VARNAME
	* IMAG_NUMBER
	* DEC_NUMBER
	* FINDONE
	* FORALL
	* COLON
	* LONG_STRING

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2006_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#goal_representation
 
def has_cup_location(kitchen_item_location:item):
    # Function to check if there is a cup in the specified kitchen item location
    symbol contains_cup = exists o: item : is_cup(o) and inside(o, kitchen_item_location)
    return contains_cup

behavior locate_and_take_cup(kitchen_item_location: item):
    body:
        if has_cup_location(kitchen_item_location):
            bind cup: item where:
                is_cup(cup) and inside(cup, kitchen_item_location)
            achieve_once inhand(cup)
            # Take hold of the cup if it is found in the kitchen item location

behavior __goal__():
    body:
        foreach kitchen_location: item:
            if is_cupboard(kitchen_location) and not visited(kitchen_location):
                observe(kitchen_location, "Check if there is a cup in the storage location")
                if has_cup_location(kitchen_location):
                    locate_and_take_cup(kitchen_location)
                    return

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find and take a cup from where kitchen items are stored." ?
Answer: Identify the location where kitchen items are stored, locate a cup, and take the cup.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Identify the location where kitchen items are stored, locate a cup, and take the cup.', '2. Pour milk into the cup.', '3. Heat the cup of milk using the microwave.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_take_cup(cup: item):
    body:
        achieve_once inhand(cup)
        # Identify and take the cup

behavior __goal__():
    body:
        if exists location: item : is_cupboard(location) or is_kitchen_counter(location):
            # In this example, check for known potential storage places for cups
            bind cup: item where:
                is_cup(cup)
            find_and_take_cup(cup)
        else:
            foreach location: item:
                if is_cupboard(location) or is_kitchen_counter(location) and not visited(location):
                    observe(location, "Check if there are any cups available")
                    # Observe the kitchen storage locations for the presence of a cup to be taken
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(cupboard_131)
Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(sink_307)
Find detergent_2108. Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer inside dining_room_1.Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
exp(cup_2087, sink_307)
Fail to find cup_2087 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_counter_306.Robot is no longer close sink_307.
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Locate dining_room_1 and find table_123. Cup_2087 is on table_123. Use the proximity to table_123 to identify cup_2087.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate dining_room_1 and find table_123. Cup_2087 is on table_123. Use the proximity to table_123 to identify cup_2087.

Human Guidance: Identify the location where kitchen items are stored, locate a cup, and take the cup.
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for cup_2087 around kitchen_counter_128.
Action 3: Walk to cupboard_131.
Action 4: Open cupboard_131.
Action 5: look for cup_2087 around cupboard_131.
Action 6: Walk to cupboard_130.
Action 7: look for cup_2087 around cupboard_130.
Action 8: Walk to sink_307.
Action 9: look for cup_2087 around sink_307.
Action 10: Walk to kitchen_counter_129.
Action 11: look for cup_2087 around kitchen_counter_129.
Action 12: Walk to kitchen_counter_132.

##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_cup_2006_around_table_193(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        achieve inside(milk, cup)
        # Fill the cup with milk

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        achieve inside(milk, cup)
        # Fill the cup with milk

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close cup_2087. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close table_123.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)putin_executor(milk_2074, cup_2087)
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing milk_2074 by left hand. 
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. milk_2074 released by left hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave
##############################
From agent.py-> find a plan in act()
walk_executor(microwave_149)open_executor(microwave_149)putin_executor(cup_2087, microwave_149)close_executor(microwave_149)switchon_executor(microwave_149)
##############################
From agent.py
walk_executor(microwave_149)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close microwave_149. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
open_executor(microwave_149)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From agent.py
putin_executor(cup_2087, microwave_149)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close microwave_149. cup_2087 released by right hand. 
##############################
From agent.py
close_executor(microwave_149)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
From agent.py
switchon_executor(microwave_149)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close microwave_149. 
##############################
