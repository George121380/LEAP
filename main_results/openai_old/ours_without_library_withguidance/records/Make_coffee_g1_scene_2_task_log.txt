From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_128(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2087_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup)
        achieve close(cup, coffee_maker)
        achieve has_a_free_hand(char)
        achieve has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        plug_in_coffee_maker(coffee_maker)
        # Plug in the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

        make_coffee(coffee_maker, cup)
        # Make a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_coffee_maker(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve has_water(cup)
        achieve close(cup, coffee_maker)
        achieve has_a_free_hand(char)
        achieve has_water(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        plug_in_coffee_maker(coffee_maker)
        # Plug in the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

        make_coffee(coffee_maker, cup)
        # Make a cup of coffee using the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer inside home_office_161.
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close table_123.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(cup_2087, coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure that the cup and the coffee maker both have water, and the coffee maker needs to be plugged in. So far, the coffee maker was turned on, and the cup was placed near the coffee maker, but water has not been added to the coffee maker or the cup, and there is no indication that the coffee maker is plugged in.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_128.
Action 4: look for cup_2087 around kitchen_counter_128.
Action 5: Walk to table_123.
Action 6: look for cup_2087 around table_123.
Action 7: Walk to cup_2087.
Action 8: Grab cup_2087.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.
Action 11: Walk to coffe_maker_147.
Action 12: Put cup_2087 on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_coffee_filter_2035_around_wallshelf_191(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

def is_coffee_maker_plugged(coffee_maker: item):
    # Determine if the coffee maker is plugged in
    symbol plugged_in = plugged(coffee_maker)
    return plugged_in

behavior fill_water_reservoir(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior check_and_plug_in_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        if not is_coffee_maker_plugged(coffee_maker):
            achieve plugged(coffee_maker)
            # Plug in the coffee maker

behavior start_coffee_making(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket for plugging in the coffee maker

        fill_water_reservoir(coffee_maker)
        # Fill the water reservoir of the coffee maker

        fill_cup_with_water(cup, sink)
        # Fill the cup with water

        check_and_plug_in_coffee_maker(coffee_maker, power_socket)
        # Ensure the coffee maker is plugged in

        start_coffee_making(coffee_maker)
        # Start the coffee making process

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

def is_coffee_maker_plugged(coffee_maker: item):
    # Determine if the coffee maker is plugged in
    symbol plugged_in = plugged(coffee_maker)
    return plugged_in

behavior fill_water_reservoir(coffee_maker: item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee maker with water

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior check_and_plug_in_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        if not is_coffee_maker_plugged(coffee_maker):
            achieve plugged(coffee_maker)
            # Plug in the coffee maker

behavior start_coffee_making(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Start the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket for plugging in the coffee maker

        fill_water_reservoir(coffee_maker)
        # Fill the water reservoir of the coffee maker

        fill_cup_with_water(cup, sink)
        # Fill the cup with water

        check_and_plug_in_coffee_maker(coffee_maker, power_socket)
        # Ensure the coffee maker is plugged in

        start_coffee_making(coffee_maker)
        # Start the coffee making process

##############################
From agent.py-> find a plan in act()
grab_executor(cup_2087)walk_executor(sink_133)putin_executor(cup_2087, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
putin_executor(cup_2087, sink_133)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close sink_133. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.Robot is no longer close cup_2087.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close sink_133. Robot is close cup_2087. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close sink_133. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
Human Instruction: You need to ensure that water is added to both the coffee maker and the cup. Additionally, there is no indication that the coffee maker is plugged in, so verify and plug it in if necessary. After completing these steps, you can proceed with starting the coffee-making process.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_128.
Action 4: look for cup_2087 around kitchen_counter_128.
Action 5: Walk to table_123.
Action 6: look for cup_2087 around table_123.
Action 7: Walk to cup_2087.
Action 8: Grab cup_2087.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.
Action 11: Walk to coffe_maker_147.
Action 12: Put cup_2087 on coffe_maker_147.
Action 13: Grab cup_2087.
Action 14: Walk to sink_133.
Action 15: Put cup_2087 into sink_133.
Action 16: Walk to faucet_134.
Action 17: Switch on faucet_134.
Action 18: Walk to cup_2087.
Action 19: Grab cup_2087.
Action 20: Walk to faucet_134.
Action 21: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_coffee_filter_2035_around_wallshelf_187(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==187
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def needs_plugging_in(coffe_maker:item):
    # Determine whether the coffee maker needs to be plugged in
    symbol needs_plug = not plugged(coffe_maker)
    return needs_plug

def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior plug_in_coffee_maker(coffe_maker:item):
    body:
        achieve plugged(coffe_maker)

behavior fill_coffee_maker_with_water(coffe_maker:item):
    body:
        achieve has_water(coffe_maker)

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior start_coffee_making(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133

        if needs_plugging_in(coffe_maker):
            plug_in_coffee_maker(coffe_maker)
        
        fill_coffee_maker_with_water(coffe_maker)
        fill_cup_with_water(cup, sink)
        start_coffee_making(coffe_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def needs_plugging_in(coffe_maker:item):
    # Determine whether the coffee maker needs to be plugged in
    symbol needs_plug = not plugged(coffe_maker)
    return needs_plug

def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior plug_in_coffee_maker(coffe_maker:item):
    body:
        achieve plugged(coffe_maker)

behavior fill_coffee_maker_with_water(coffe_maker:item):
    body:
        achieve has_water(coffe_maker)

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior start_coffee_making(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133

        if needs_plugging_in(coffe_maker):
            plug_in_coffee_maker(coffe_maker)
        
        fill_coffee_maker_with_water(coffe_maker)
        fill_cup_with_water(cup, sink)
        start_coffee_making(coffe_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)putin_executor(cup_2087, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(sink_133)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close faucet_134.
##############################
From agent.py
putin_executor(cup_2087, sink_133)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close sink_133. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.Robot is no longer close cup_2087.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close sink_133. Robot is close cup_2087. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close sink_133. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
