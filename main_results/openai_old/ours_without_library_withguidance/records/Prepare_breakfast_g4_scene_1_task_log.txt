From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta separately.', '2. Combine the cooked chicken and pasta in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_for_cooking_stove(stove: item):
    # Function to check if there is a faucet near the stove that can supply water for cooking
    symbol has_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, stove)
    return has_faucet

behavior cook_chicken(chicken: item, stove: item):
    body:
        achieve inside(chicken, stove)
        # Place the chicken inside the stove
        achieve is_on(stove)
        # Turn on the stove for cooking the chicken

behavior cook_pasta(pasta: item, pot: item, stove: item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        if has_water_for_cooking_stove(stove):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, stove)
            achieve_once is_on(faucet)
            # Turn on the faucet for water
            achieve has_water(pot)
            # Ensure pot has water for cooking pasta
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an item identified as chicken
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select an item identified as dry pasta
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        cook_chicken(chicken, stove)
        cook_pasta(pasta, pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2064_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_oil_2149_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior cook(chicken:item, pasta:item, stove:item):
    body:
        if has_faucet():
            bind faucet:item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            fill_with_water(pasta, sink)
            achieve_once is_off(faucet)

        achieve inside(chicken, pan)
        achieve inside(cooking_oil, pan)
        achieve plugged(stove)
        achieve is_on(stove)

behavior remove_from_stove(item:item, stove:item):
    body:
        if plugged(stove) and is_on(stove):
            achieve unplugged(stove)
            achieve is_off(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_food_steak(pan) and grabbable(pan)

        cook(chicken, dry_pasta, stove)
        remove_from_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 0 vs 1. Args: (), Types: (ObjectType<item>,)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior cook(chicken:item, pasta:item, stove:item, pan:item, sink:item):
    body:
        if has_faucet(sink):
            bind faucet:item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            fill_with_water(pasta, sink)
            achieve_once is_off(faucet)

        achieve inside(chicken, pan)
        achieve inside(cooking_oil, pan)
        achieve plugged(stove)
        achieve is_on(stove)

behavior remove_from_stove(item:item, stove:item):
    body:
        if plugged(stove) and is_on(stove):
            achieve unplugged(stove)
            achieve is_off(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind sink: item where:
            is_sink(sink)

        cook(chicken, dry_pasta, stove, pan, sink)
        remove_from_stove(stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_with_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2046_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_oil_2013_around_cupboard_117(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_with_water(pasta:item, sink:item):
    body:
        achieve inside(pasta, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve_once is_off(faucet)

behavior cook(chicken:item, pasta:item, stove:item, pan:item, sink:item):
    body:
        fill_with_water(pasta, sink)
        achieve inside(chicken, pan)
        achieve inside(cooking_oil, pan)
        achieve plugged(stove)
        achieve is_on(stove)

behavior remove_from_stove(item:item, stove:item):
    body:
        if plugged(stove) and is_on(stove):
            achieve unplugged(stove)
            achieve is_off(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        bind stove: item where:
            is_stove(stove)
        bind pan: item where:
            is_fryingpan(pan)
        bind sink: item where:
            is_sink(sink)

        cook(chicken, dry_pasta, stove, pan, sink)
        remove_from_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. cook the chicken and pasta separately." ?
Answer: Boil some pasta. Cook some chicken.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_food_2064_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation

behavior cook_chicken_and_pasta(chicken:item, pasta:item, stove:item, pot:item):
    body:
        if is_food_chicken(chicken):
            achieve inside(chicken, pan) # Cook the chicken in a pan
        
        if is_dry_pasta(pasta):
            achieve inside(pasta, pot) # Place the pasta in a pot

        bind burner: item where:
            is_stove(burner) and close(burner, stove)
        achieve is_on(burner) # Turn on the stove to cook the items
        achieve is_off(burner) # Ensure the stove is turned off when cooking is done

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as an item
        
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta as an item
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling pasta
        
        cook_chicken_and_pasta(chicken, pasta, stove, pot)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pan; available variables: [Variable<chicken: item>, Variable<pasta: item>, Variable<stove: item>, Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#goal_representation
behavior cook_chicken_and_pasta(chicken:item, pasta:item, stove:item, pot:item, pan:item):
    body:
        if is_food_chicken(chicken):
            achieve inside(chicken, pan) # Cook the chicken in a pan

        if is_dry_pasta(pasta):
            achieve inside(pasta, pot) # Place the pasta in a pot

        bind burner: item where:
            is_stove(burner) and close(burner, stove)
        achieve is_on(burner) # Turn on the stove to cook the items
        achieve is_off(burner) # Ensure the stove is turned off when cooking is done

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken as an item

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta as an item

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling pasta

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan for cooking chicken

        cook_chicken_and_pasta(chicken, pasta, stove, pot, pan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_fryingpan_2154_around_cupboard_117(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot:item):
    # Function to check if a pot is on the stove for boiling pasta
    symbol on_stove=exists stove: item : is_stove(stove) and on(pot, stove)
    return on_stove

def is_pan_on_stove(pan:item):
    # Function to check if a frying pan is on the stove for cooking chicken
    symbol on_stove=exists stove: item : is_stove(stove) and on(pan, stove)
    return on_stove

behavior boil_pasta(dry_pasta:item, pot:item):
    body:
        achieve inside(dry_pasta, pot) # Place the dry pasta inside the pot for boiling

behavior cook_chicken(chicken:item, pan:item):
    body:
        achieve inside(chicken, pan) # Place the chicken inside the pan for cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_pot_on_stove(pot)
        # Select a pot on the stove
        
        bind pan: item where:
            is_fryingpan(pan) and is_pan_on_stove(pan)
        # Select a frying pan on the stove

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        boil_pasta(dry_pasta, pot) # Boil some pasta in the pot
        cook_chicken(chicken, pan) # Cook some chicken in the pan

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Combine the cooked pasta and chicken on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_food_2094_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind pasta:item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot:item where:
            is_pot(pot) and is_stove(on) and has_water(pot)
        # Select a pot on the stove that has water

        achieve_once is_on(pot)
        # Ensure the pot is heated to boil the pasta

        achieve inside(pasta, pot)
        # Place the dry pasta inside the boiling pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: on; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_food_2094_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#goal_representation

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if exists stove: item : is_stove(stove):
            bind stove: item where:
                is_stove(stove)
            achieve_once is_on(stove)
            # Turn on the stove if it exists

        achieve has_water(pot)
        # Ensure the pot has water

        achieve inside(pasta, pot)
        # Place the dry pasta inside the pot

#goal_representation_end

##############################
From agent.py->reset_goal

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if exists stove: item : is_stove(stove):
            bind stove: item where:
                is_stove(stove)
            achieve_once is_on(stove)
            # Turn on the stove if it exists

        achieve has_water(pot)
        # Ensure the pot has water

        achieve inside(pasta, pot)
        # Place the dry pasta inside the pot

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2135)switchon_executor(stove_2135)walk_executor(kitchen_counter_123)exp(pot_2138, kitchen_counter_123)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(stove_2135)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
exp(pot_2138, kitchen_counter_123)
Find pot_2138. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(cupboard_117)exp(dry_pasta_2114, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
exp(dry_pasta_2114, cupboard_117)
Fail to find dry_pasta_2114 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(dry_pasta_2114, desk_272)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(desk_272)
Find headset_2146. Find stamp_2043. Find stamp_2022. Find chair_271. Find phone_2147. Find mouse_280. Find keyboard_278. Robot is inside home_office_241. Robot is close pot_2138. Robot is close desk_272. Robot is close floor_263. Robot is no longer inside dining_room_41.Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(dry_pasta_2114, desk_272)
Fail to find dry_pasta_2114 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_191)open_executor(window_191)exp(dry_pasta_2114, window_191)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(window_191)
Find mat_203. Find drawing_201. Robot is inside bedroom_162. Robot is close pot_2138. Robot is close window_191. Robot is no longer inside home_office_241.Robot is no longer close desk_272.Robot is no longer close floor_263.
##############################
From agent.py
open_executor(window_191)
Robot is inside bedroom_162. Robot is close pot_2138. Robot is close window_191. 
##############################
From agent.py
exp(dry_pasta_2114, window_191)
Fail to find dry_pasta_2114 around window_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(dry_pasta_2114, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer inside bedroom_162.Robot is no longer close window_191.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(dry_pasta_2114, cupboard_118)
Fail to find dry_pasta_2114 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)exp(dry_pasta_2114, bowl_2140)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close bowl_2140. Robot is close kitchen_counter_119. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(dry_pasta_2114, bowl_2140)
Fail to find dry_pasta_2114 around bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(dry_pasta_2114, fridge_126)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close bowl_2140.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchoff_executor(fridge_126)
Find mouse_213. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2114 ?
Answer: The target item, dry_pasta_2114, can be found inside the dining_room_41, specifically within the table_114. Look for table_114 in the dining room, and you will find dry_pasta_2114 inside it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, dry_pasta_2114, can be found inside the dining_room_41, specifically within the table_114. Look for table_114 in the dining room, and you will find dry_pasta_2114 inside it.

Human Guidance: Boil some pasta. Cook some chicken.
The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Switch on stove_2135.
Action 3: Walk to kitchen_counter_123.
Action 4: look for pot_2138 around kitchen_counter_123.
Action 5: Walk to pot_2138.
Action 6: Grab pot_2138.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Switch off faucet_20.
Action 10: Walk to cupboard_117.
Action 11: look for dry_pasta_2114 around cupboard_117.
Action 12: Walk to desk_272.
Action 13: look for dry_pasta_2114 around desk_272.
Action 14: Walk to window_191.
Action 15: Open window_191.
Action 16: look for dry_pasta_2114 around window_191.
Action 17: Walk to cupboard_118.
Action 18: Open cupboard_118.
Action 19: look for dry_pasta_2114 around cupboard_118.
Action 20: Walk to bowl_2140.
Action 21: look for dry_pasta_2114 around bowl_2140.
Action 22: Walk to fridge_126.
Action 23: Switch off fridge_126.
Action 24: Open fridge_126.

##############################
From agent.py
exp(dry_pasta_2114, fridge_126)
Fail to find dry_pasta_2114 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(dry_pasta_2114, table_114)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close pot_2138. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
exp(dry_pasta_2114, table_114)
Find dry_pasta_2114. 
##############################
From agent.py-> find a plan in act()
open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. 
##############################
From agent.py
walk_executor(dry_pasta_2114)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close table_114. Robot is close dry_pasta_2114. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(dry_pasta_2114)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close table_114. Robot is close dry_pasta_2114. Grabbing dry_pasta_2114 by left hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close dry_pasta_2114. Robot is no longer close table_114.
##############################
From agent.py
putin_executor(dry_pasta_2114, pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close dry_pasta_2114. dry_pasta_2114 released by left hand. 
##############################
From agent.py
Human Instruction: You need to bring the pot of water and pasta to the stove and ensure the pasta is boiled. The actions needed to actually boil the pasta, such as waiting for the water to boil and checking that the pasta is cooked, have not been completed.

Human Guidance: Boil some pasta. Cook some chicken.
The actions you have taken:
Action 1: Walk to stove_2135.
Action 2: Switch on stove_2135.
Action 3: Walk to kitchen_counter_123.
Action 4: look for pot_2138 around kitchen_counter_123.
Action 5: Walk to pot_2138.
Action 6: Grab pot_2138.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Switch off faucet_20.
Action 10: Walk to cupboard_117.
Action 11: look for dry_pasta_2114 around cupboard_117.
Action 12: Walk to desk_272.
Action 13: look for dry_pasta_2114 around desk_272.
Action 14: Walk to window_191.
Action 15: Open window_191.
Action 16: look for dry_pasta_2114 around window_191.
Action 17: Walk to cupboard_118.
Action 18: Open cupboard_118.
Action 19: look for dry_pasta_2114 around cupboard_118.
Action 20: Walk to bowl_2140.
Action 21: look for dry_pasta_2114 around bowl_2140.
Action 22: Walk to fridge_126.
Action 23: Switch off fridge_126.
Action 24: Open fridge_126.
Action 25: look for dry_pasta_2114 around fridge_126.
Action 26: Walk to table_114.
Action 27: look for dry_pasta_2114 around table_114.
Action 28: Open pot_2138.
Action 29: Walk to dry_pasta_2114.
Action 30: Grab dry_pasta_2114.
Action 31: Walk to pot_2138.
Action 32: Put dry_pasta_2114 into pot_2138.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
def water_is_boiling(pot:item):
    # Function to check if the water in the pot is boiling
    symbol water_boiling=exists stove: item : is_stove(stove) and on(pot, stove) and is_on(stove)
    return water_boiling

def pasta_is_cooked(pasta:item):
    # Function to check if the pasta is cooked
    # Here, cooking happens if water has boiled the pasta inside the pot
    return water_is_boiling(pot) and inside(pasta, pot)

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Ensure pasta is in the pot for boiling
        
        if not is_on(stove):
            achieve is_on(stove)
            # Ensure the stove is turned on
        
        if not water_is_boiling(pot):
            observe(pot, "Check if the water in the pot starts boiling")
            # Observe to know when water starts boiling

        while not pasta_is_cooked(pasta):
            observe(pasta, "Check if the pasta is cooked")
            # Observe to know when pasta gets cooked

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Bind to the specific stove used
        
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Bind to the specific pot used
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and id[dry_pasta]==2114
        # Bind to the specific dry pasta used

        boil_pasta(dry_pasta, pot, stove)
        # Invoke the boil_pasta behavior with the specified items

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: pot; available variables: [Variable<pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_food_2094_around_food_bread_2084(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_bread_instance:item where:
            is_food_bread(food_bread_instance) and id[food_bread_instance]==2084
        achieve close_char(char,food_bread_instance)
        if can_open(food_bread_instance):
            achieve_once open(food_bread_instance)
            exp(food_food,food_bread_instance)
        else:
            exp(food_food,food_bread_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_bread_instance]=True
        close[food_bread_instance,food_food]=True
    

#goal_representation
 
def water_is_boiling(pot:item):
    # Function to check if the water in the pot is boiling
    symbol water_boiling=exists stove: item : is_stove(stove) and on(pot, stove) and is_on(stove)
    return water_boiling

def pasta_is_cooked(pasta:item, pot:item):
    # Function to check if the pasta is cooked
    # Here, cooking happens if water has boiled the pasta inside the pot
    return water_is_boiling(pot) and inside(pasta, pot)

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Ensure pasta is in the pot for boiling
        
        if not is_on(stove):
            achieve is_on(stove)
            # Ensure the stove is turned on
        
        if not water_is_boiling(pot):
            observe(pot, "Check if the water in the pot starts boiling")
            # Observe to know when water starts boiling

        while not pasta_is_cooked(pasta, pot):
            observe(pasta, "Check if the pasta is cooked")
            # Observe to know when pasta gets cooked

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Bind to the specific stove used
        
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Bind to the specific pot used
        
        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and id[dry_pasta]==2114
        # Bind to the specific dry pasta used

        boil_pasta(dry_pasta, pot, stove)
        # Invoke the boil_pasta behavior with the specified items

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_turkey_2112_around_oven_127(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_turkey,oven_instance)
        else:
            exp(food_turkey,oven_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,oven_instance]=True
        close[oven_instance,food_turkey]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot

        assert_hold has_water(pot)
        # Verify that the pot has water inside

        achieve is_on(stove)
        # Ensure the stove is turned on to boil the pasta

        achieve clean(pasta)
        # Ensure the pasta is properly cooked

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        boil_pasta(pasta, pot, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the pasta." ?
Answer: Boil some pasta.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_measuring_cup_2012_around_kitchen_counter_122(measuring_cup:item):
    goal: not unknown(measuring_cup)
    body:
        assert is_measuring_cup(measuring_cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(measuring_cup,kitchen_counter_instance)
        else:
            exp(measuring_cup,kitchen_counter_instance)
    eff:
        unknown[measuring_cup]=False
        close[measuring_cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,measuring_cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) 
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_pasta(pot:item, dry_pasta:item):
    body:
        achieve has_water(pot)
        achieve inside(dry_pasta, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on

        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)
        # Ensure there is a pot present in the kitchen

        bind sink: item where:
            is_sink(sink) and has_faucet(sink)
        # Ensure there is a faucet in the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Ensure the faucet is close to the sink

        ensure_water_in_pot(pot, faucet)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and on(dry_pasta, kitchen_counter)
        # Ensure the dry pasta is on the kitchen counter

        achieve inside(dry_pasta, pot)

        boil_pasta(pot, dry_pasta)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<dry_pasta: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) 
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_pasta(pot:item, dry_pasta:item, stove:item):
    body:
        achieve has_water(pot)
        achieve inside(dry_pasta, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on

        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)
        # Ensure there is a pot present in the kitchen

        bind sink: item where:
            is_sink(sink) and has_faucet(sink)
        # Ensure there is a faucet in the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Ensure the faucet is close to the sink

        ensure_water_in_pot(pot, faucet)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and on(dry_pasta, kitchen_counter)
        # Ensure the dry pasta is on the kitchen counter

        achieve inside(dry_pasta, pot)

        boil_pasta(pot, dry_pasta, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2154_around_oven_127(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(fryingpan,oven_instance)
        else:
            exp(fryingpan,oven_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,oven_instance]=True
        close[oven_instance,fryingpan]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior ensure_water_in_pot(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) 
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_pasta(pot:item, dry_pasta:item, stove:item):
    body:
        achieve has_water(pot)
        achieve inside(dry_pasta, pot)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on

        bind pot: item where:
            is_pot(pot) and inside(pot, kitchen)
        # Ensure there is a pot present in the kitchen

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Bind kitchen instance to use it for relationships

        bind sink: item where:
            is_sink(sink) and has_faucet(sink) and inside(sink, kitchen)
        # Ensure there is a faucet in the sink and the sink is in the kitchen

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Ensure the faucet is close to the sink

        ensure_water_in_pot(pot, faucet)

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and on(dry_pasta, kitchen_counter)
        # Ensure the dry pasta is on the kitchen counter

        achieve inside(dry_pasta, pot)

        boil_pasta(pot, dry_pasta, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def water_boiling(pot: item):
    # Function to check if there is water in the pot and its on the stove
    symbol has_water_on_stove=has_water(pot) and is_on(stove_2135)
    return has_water_on_stove

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior bring_water_to_boil(pot:item):
    body:
        achieve_once inside(pot, stove_2135)
        if not has_water(pot):
            bind sink: item where:
                is_sink(sink) and close(pot, sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                achieve has_water(pot)
                achieve_once is_off(faucet)

behavior cook_pasta(pot:item, dry_pasta:item):
    body:
        achieve inside(dry_pasta, pot)
        # Confirm pasta is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot_2138)            
        bring_water_to_boil(pot)
        # Bring water in the pot to boil

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and close(dry_pasta, pot)
        cook_pasta(pot, dry_pasta)
        # Cook the pasta in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_oven_127(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(wooden_spoon,oven_instance)
        else:
            exp(wooden_spoon,oven_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,oven_instance]=True
        close[oven_instance,wooden_spoon]=True
    

#goal_representation
 
def water_boiling(pot: item, stove: item):
    # Function to check if there is water in the pot and its on the stove
    symbol has_water_on_stove=has_water(pot) and is_on(stove)
    return has_water_on_stove

def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior bring_water_to_boil(pot: item, stove: item, sink: item):
    body:
        achieve_once inside(pot, stove)
        if not has_water(pot):
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                achieve_once is_on(faucet)
                achieve has_water(pot)
                achieve_once is_off(faucet)

behavior cook_pasta(pot: item, dry_pasta: item):
    body:
        achieve inside(dry_pasta, pot)
        # Confirm pasta is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot_2138)            
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        bring_water_to_boil(pot, stove, faucet_20)
        # Bring water in the pot to boil

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and close(dry_pasta, pot)
        cook_pasta(pot, dry_pasta)
        # Cook the pasta in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_2138; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_wooden_spoon_2000_around_kitchen_counter_122(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(wooden_spoon,kitchen_counter_instance)
        else:
            exp(wooden_spoon,kitchen_counter_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,wooden_spoon]=True
    

behavior find_pot_2040_around_sink_19(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

#goal_representation
 
def water_boiling(pot: item, stove: item):
    # Function to check if there is water in the pot and its on the stove
    symbol has_water_on_stove=has_water(pot) and is_on(stove)
    return has_water_on_stove

def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior bring_water_to_boil(pot: item, stove: item, sink: item):
    body:
        achieve_once inside(pot, stove)
        if not has_water(pot):
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet, sink)
                achieve_once is_on(faucet)
                achieve has_water(pot)
                achieve_once is_off(faucet)

behavior cook_pasta(pot: item, dry_pasta: item):
    body:
        achieve inside(dry_pasta, pot)
        # Confirm pasta is placed inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and close_char(char, pot)
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        bring_water_to_boil(pot, stove, faucet_20)
        # Bring water in the pot to boil

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and close(dry_pasta, pot)
        cook_pasta(pot, dry_pasta)
        # Cook the pasta in the pot

#goal_representation_end

##############################
