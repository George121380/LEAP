From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and add some sliced kiwi inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_cup_of_kiwi_water(cup:item, faucet:item, kiwi:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

        achieve cut(kiwi)
        # Slice the kiwi

        achieve inside(kiwi, cup)
        # Add sliced kiwi to the cup of water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind kiwi: item where:
            is_food_kiwi(kiwi)
        # Select a kiwi fruit

        prepare_cup_of_kiwi_water(cup, faucet, kiwi)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and add some sliced kiwi inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_kitchen_counter_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_129(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior slice_kiwi(kiwi:item, cutting_board:item):
    body:
        achieve cut(kiwi)
        # Achieve the state of the kiwi being sliced

behavior add_sliced_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve inside(kiwi, cup)
        # Place the sliced kiwi inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind kiwi: item where:
            is_food_kiwi(kiwi) and not cut(kiwi)
        # Select the kiwi

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for slicing

        fill_cup_with_water(cup, faucet)
        slice_kiwi(kiwi, cutting_board)
        add_sliced_kiwi_to_cup(kiwi, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior slice_kiwi(kiwi:item, cutting_board:item):
    body:
        achieve cut(kiwi)
        # Achieve the state of the kiwi being sliced

behavior add_sliced_kiwi_to_cup(kiwi:item, cup:item):
    body:
        achieve inside(kiwi, cup)
        # Place the sliced kiwi inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind kiwi: item where:
            is_food_kiwi(kiwi) and not cut(kiwi)
        # Select the kiwi

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board for slicing

        fill_cup_with_water(cup, faucet)
        slice_kiwi(kiwi, cutting_board)
        add_sliced_kiwi_to_cup(kiwi, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(cup_2087, kitchen_counter_129)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_kiwi_2060, fridge_140)walk_executor(kitchen_counter_129)exp(cutting_board_2080, kitchen_counter_129)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cutting_board_2080)put_executor(food_kiwi_2060, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)walk_executor(washing_machine_2041)put_executor(cup_2087, washing_machine_2041)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(cup_2087, kitchen_counter_129)
Fail to find cup_2087 around kitchen_counter_129. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and add some sliced kiwi inside.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_sink_307(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_kiwi_2060_around_fridge_140(food_kiwi:item):
    goal: not unknown(food_kiwi)
    body:
        assert is_food_kiwi(food_kiwi)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_kiwi,fridge_instance)
        else:
            exp(food_kiwi,fridge_instance)
    eff:
        unknown[food_kiwi]=False
        close[food_kiwi,fridge_instance]=True
        close[fridge_instance,food_kiwi]=True
    

behavior find_cutting_board_2080_around_tablelamp_359(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==359
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(cutting_board,tablelamp_instance)
        else:
            exp(cutting_board,tablelamp_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,tablelamp_instance]=True
        close[tablelamp_instance,cutting_board]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_kiwi(kiwi:item, surface:item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is appropriate for slicing

        achieve_once inhand(kiwi)
        # Temporarily hold the kiwi to simulate slicing

        achieve cut(kiwi)
        # Achieve the state of the kiwi being sliced

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior mix_kiwi_with_water(cup:item, kiwi:item):
    body:
        achieve inside(kiwi, cup)
        # Add sliced kiwi to the cup of water

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind kiwi: item where:
            is_food_kiwi(kiwi)

        bind surface: item where:
            surfaces(surface)

        fill_cup_with_water(cup, faucet)
        slice_kiwi(kiwi, surface)
        mix_kiwi_with_water(cup, kiwi)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior slice_kiwi(kiwi:item, surface:item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is appropriate for slicing

        achieve_once inhand(kiwi)
        # Temporarily hold the kiwi to simulate slicing

        achieve cut(kiwi)
        # Achieve the state of the kiwi being sliced

behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior mix_kiwi_with_water(cup:item, kiwi:item):
    body:
        achieve inside(kiwi, cup)
        # Add sliced kiwi to the cup of water

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind kiwi: item where:
            is_food_kiwi(kiwi)

        bind surface: item where:
            surfaces(surface)

        fill_cup_with_water(cup, faucet)
        slice_kiwi(kiwi, surface)
        mix_kiwi_with_water(cup, kiwi)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(cup_2087, sink_307)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_kiwi_2060, fridge_140)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(tablelamp_359)exp(cutting_board_2080, tablelamp_359)walk_executor(cutting_board_2080)put_executor(food_kiwi_2060, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)walk_executor(washing_machine_2041)put_executor(cup_2087, washing_machine_2041)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(sink_307)
Find detergent_2108. Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_129.
##############################
From agent.py
exp(cup_2087, sink_307)
Fail to find cup_2087 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_kiwi_2060, fridge_140)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(kitchen_counter_128)exp(cutting_board_2080, kitchen_counter_128)walk_executor(cutting_board_2080)put_executor(food_kiwi_2060, cutting_board_2080)walk_executor(knifeblock_52)exp(knife_2036, knifeblock_52)walk_executor(knife_2036)grab_executor(knife_2036)walk_executor(food_kiwi_2060)cut_executor(food_kiwi_2060)walk_executor(washing_machine_2041)put_executor(cup_2087, washing_machine_2041)walk_executor(food_kiwi_2060)grab_executor(food_kiwi_2060)walk_executor(cup_2087)putin_executor(food_kiwi_2060, cup_2087)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_counter_306.Robot is no longer close sink_307.
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
