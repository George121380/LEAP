From agent.py
Reset goals: The sub-goals are: 
['Slice and toast bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_cupboard_229(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread: item, surface: item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is suitable for slicing

        achieve_once inhand(bread)
        # Temporarily hold the bread to simulate slicing

        achieve cut(bread)
        # Achieve the state of the bread being sliced

behavior toast_bread(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Ensure the bread is placed inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to slice and toast

        bind surface: item where:
            surfaces(surface)
        # Select a suitable surface for slicing

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, surface)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice and toast bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_cupboard_229(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, cutting_board:item):
    body:
        assert is_cutting_board(cutting_board) or surfaces(cutting_board)
        # Ensure the cutting_board is appropriate for slicing

        achieve_once inhand(bread)
        # Temporarily hold the bread to simulate slicing

        achieve cut(bread)
        # Achieve the state of the bread being sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster)
        # Ensure the toaster is plugged in

        assert_hold has_switch(toaster)
        # Ensure the toaster has a switch to operate

        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a suitable cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread, cutting_board)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior slice_bread(bread:item, cutting_board:item):
    body:
        assert is_cutting_board(cutting_board) or surfaces(cutting_board)
        # Ensure the cutting_board is appropriate for slicing

        achieve_once inhand(bread)
        # Temporarily hold the bread to simulate slicing

        achieve cut(bread)
        # Achieve the state of the bread being sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster)
        # Ensure the toaster is plugged in

        assert_hold has_switch(toaster)
        # Ensure the toaster has a switch to operate

        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a suitable cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        slice_bread(bread, cutting_board)
        toast_bread(bread, toaster)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_bread_2012, cupboard_229)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(cupboard_229)
Find tray_296. Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(food_bread_2012, cupboard_229)
Fail to find food_bread_2012 around cupboard_229. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice and toast bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_wallshelf_234(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(food_bread,wallshelf_instance)
        else:
            exp(food_bread,wallshelf_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,wallshelf_instance]=True
        close[wallshelf_instance,food_bread]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cuttable_food_on_surface(surface:item):
    # Determine if theres cuttable food on the surface
    symbol has_cuttable_food=exists food: item : is_food(food) and on(food, surface) and cuttable(food)
    return has_cuttable_food

behavior slice_bread(bread:item, surface:item):
    body:
        achieve cut(bread)
        # Achieve the state of the bread being sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Ensure the toaster is turned on

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread

        bind surface: item where:
            surfaces(surface) and has_cuttable_food_on_surface(surface)
        # Select a surface with cuttable food

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, surface)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
