From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_closetdrawer_394(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(vacuum_cleaner,closetdrawer_instance)
        else:
            exp(vacuum_cleaner,closetdrawer_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,closetdrawer_instance]=True
        close[closetdrawer_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve close_char(char, vacuum_cleaner)
        # Move close to the vacuum cleaner

behavior start_vacuuming(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior __goal__():
    body:
        if exists vacuum_cleaner: item : is_vacuum_cleaner(vacuum_cleaner):
            # Check if there is any known vacuum cleaner
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner)
            locate_vacuum_cleaner(vacuum_cleaner)
            start_vacuuming(vacuum_cleaner)
        else:
            # If no known vacuum cleaner, explore the area to locate one
            foreach vacuum_cleaner: item:
                if is_vacuum_cleaner(vacuum_cleaner) and not visited(vacuum_cleaner):
                    observe(vacuum_cleaner, "Locate and start the vacuum cleaner")


#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve close_char(char, vacuum_cleaner)
        # Move close to the vacuum cleaner

behavior start_vacuuming(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior __goal__():
    body:
        if exists vacuum_cleaner: item : is_vacuum_cleaner(vacuum_cleaner):
            # Check if there is any known vacuum cleaner
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner)
            locate_vacuum_cleaner(vacuum_cleaner)
            start_vacuuming(vacuum_cleaner)
        else:
            # If no known vacuum cleaner, explore the area to locate one
            foreach vacuum_cleaner: item:
                if is_vacuum_cleaner(vacuum_cleaner) and not visited(vacuum_cleaner):
                    observe(vacuum_cleaner, "Locate and start the vacuum cleaner")


##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_394)exp(vacuum_cleaner_2070, closetdrawer_394)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(closetdrawer_394)
Find hanger_361. Find hanger_372. Find hanger_363. Find hanger_374. Find hanger_375. Find hanger_367. Find hanger_359. Find hanger_369. Find hanger_365. Find hanger_376. Robot is inside home_office_319. Robot is close closetdrawer_394. Robot is close dresser_358. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(vacuum_cleaner_2070, closetdrawer_394)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. Robot is no longer close closetdrawer_394.Robot is no longer close dresser_358.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
Human Instruction: You need to move the vacuum cleaner over the floor to actually vacuum it, as switching on the vacuum cleaner alone does not complete the task of vacuuming the floor.

The actions you have taken:
Action 1: Walk to closetdrawer_394.
Action 2: look for vacuum_cleaner_2070 around closetdrawer_394.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Plug in vacuum_cleaner_2070.
Action 5: Switch on vacuum_cleaner_2070.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_mat_237_around_coffee_table_2068(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(mat,coffee_table_instance)
        else:
            exp(mat,coffee_table_instance)
    eff:
        unknown[mat]=False
        close[mat,coffee_table_instance]=True
        close[coffee_table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve close(vacuum_cleaner, floor)
        # Move the vacuum cleaner closer to the floor

behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to be cleaned

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        observe(floor, "Determine the state of the floor")
        observe(vacuum_cleaner, "Check the proximity to the floor")
        
        move_vacuum_cleaner(vacuum_cleaner, floor)
        vacuum_the_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve close(vacuum_cleaner, floor)
        # Move the vacuum cleaner closer to the floor

behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to be cleaned

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        observe(floor, "Determine the state of the floor")
        observe(vacuum_cleaner, "Check the proximity to the floor")
        
        move_vacuum_cleaner(vacuum_cleaner, floor)
        vacuum_the_floor(vacuum_cleaner, floor)

##############################
From agent.py-> find a plan in act()
walk_executor(floor_2)obs(floor_2, Determine the state of the floor)walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Check the proximity to the floor)grab_executor(vacuum_cleaner_2070)walk_executor(floor_2)put_executor(vacuum_cleaner_2070, floor_2)wash_executor(floor_2)
##############################
From agent.py
walk_executor(floor_2)
Robot is inside bathroom_1. Robot is close floor_2. Robot is no longer inside home_office_319.Robot is no longer close vacuum_cleaner_2070.
##############################
From agent.py
obs(floor_2, Determine the state of the floor)
Get this information:  floor_2 is facing drawing_174. floor_2 is close to towel_rack_32. floor_2 is close to light_64. floor_2 is close to floor_3. floor_2 is close to floor_4. floor_2 is close to bookshelf_101. floor_2 is close to floor_6. floor_2 is close to floor_72. floor_2 is close to bathroom_counter_41. floor_2 is close to sink_42. floor_2 is close to faucet_43. floor_2 is close to wall_12. floor_2 is close to wall_9. floor_2 is close to door_44. floor_2 is close to wall_79. floor_2 is close to drawing_176. floor_2 is close to mat_22. floor_2 is close to walllamp_28. floor_2 is close to towel_rack_31. floor_2 is close to character_65. floor_2 is inside bathroom_1. floor_2 is DIRTY.
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. Robot is no longer inside bathroom_1.Robot is no longer close floor_2.
##############################
From agent.py
obs(vacuum_cleaner_2070, Check the proximity to the floor)
Get this information:  vacuum_cleaner_2070 is inside home_office_319. vacuum_cleaner_2070 is close to couch_352. vacuum_cleaner_2070 is close to character_65. vacuum_cleaner_2070 is CLEAN. vacuum_cleaner_2070 is ON. vacuum_cleaner_2070 is PLUGGED_IN.
##############################
From agent.py
grab_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. Robot is close couch_352. Grabbing vacuum_cleaner_2070 by right hand. 
##############################
From agent.py
walk_executor(floor_2)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close floor_2. Robot is no longer inside home_office_319.Robot is no longer close couch_352.
##############################
From agent.py
put_executor(vacuum_cleaner_2070, floor_2)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close floor_2. vacuum_cleaner_2070 released by right hand. 
##############################
From agent.py
wash_executor(floor_2)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close floor_2. 
##############################
From agent.py
Human Instruction: You need to move the vacuum cleaner over floor_2 to actually vacuum it, as switching it on and washing the floor with a different method does not complete the task of vacuuming the floor.

The actions you have taken:
Action 1: Walk to closetdrawer_394.
Action 2: look for vacuum_cleaner_2070 around closetdrawer_394.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Plug in vacuum_cleaner_2070.
Action 5: Switch on vacuum_cleaner_2070.
Action 6: Walk to floor_2.
Action 7: Observe around floor_2 with the question of Determine the state of the floor.
Action 8: Walk to vacuum_cleaner_2070.
Action 9: Observe around vacuum_cleaner_2070 with the question of Check the proximity to the floor.
Action 10: Grab vacuum_cleaner_2070.
Action 11: Walk to floor_2.
Action 12: Put vacuum_cleaner_2070 on floor_2.
Action 13: Wash floor_2.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_mat_173_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is turned on

        bind floor: item where:
            is_floor(floor) and id[floor] == 2
        # Select the floor with ID 2

        achieve on(vacuum_cleaner, floor)
        # Move the vacuum cleaner over the floor_2 to vacuum it

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve on(vacuum_cleaner, floor)
        # Ensure that the vacuum cleaner is on the floor during vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor_2: item where:
            is_floor(floor_2) and id[floor_2] == 2
        # Select floor_2

        vacuum_floor(vacuum_cleaner, floor_2)
        # Execute the task of vacuuming the floor

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve on(vacuum_cleaner, floor)
        # Ensure that the vacuum cleaner is on the floor during vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor_2: item where:
            is_floor(floor_2) and id[floor_2] == 2
        # Select floor_2

        vacuum_floor(vacuum_cleaner, floor_2)
        # Execute the task of vacuuming the floor

##############################
From agent.py-> find a plan in act()
grab_executor(vacuum_cleaner_2070)walk_executor(washing_machine_2007)put_executor(vacuum_cleaner_2070, washing_machine_2007)
##############################
From agent.py
grab_executor(vacuum_cleaner_2070)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close floor_2. Grabbing vacuum_cleaner_2070 by right hand. 
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close washing_machine_2007. Robot is no longer close floor_2.
##############################
From agent.py
put_executor(vacuum_cleaner_2070, washing_machine_2007)
Robot is inside bathroom_1. Robot is close vacuum_cleaner_2070. Robot is close washing_machine_2007. vacuum_cleaner_2070 released by right hand. 
##############################
