From agent.py
Reset goals: The sub-goals are: 
['1. Locate milk, turkey, egg, fish, and chicken.', '2. Place all items on the table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_milk_turkey_egg_fish_chicken(item: item):
    # Function to check if there is milk, turkey, egg, fish, or chicken near the specified item
    symbol found_item = exists o: item : (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and close(o, item)
    return found_item

behavior __goal__():
    body:
        if exists item: item : has_milk_turkey_egg_fish_chicken(item):
            # If we have already found items based on the available information
            bind fridge: item where:
                is_fridge(fridge)
            # Select the fridge
            observe(fridge, "Check if there are milk, turkey, egg, fish, or chicken close to the fridge")

        else:
            # Check around the scene for milk, turkey, egg, fish, or chicken
            foreach item: item:
                if not visited(item):
                    observe(item, "Look for milk, turkey, egg, fish, or chicken nearby")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2021_around_fridge_289(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
behavior locate_item(item:item):
    body:
        achieve close_char(char, item)
        # Move close to the identified item for examination

behavior __goal__():
    body:
        if exists item: item : is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
            # Check if there is any known item of milk, turkey, egg, fish, or chicken
            foreach item: item:
                if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not visited(item):
                    locate_item(item)
        else:
            # If no known items, explore the area to locate the items
            foreach item: item:
                if not visited(item):
                    observe(item, "Look for milk, turkey, egg, fish, or chicken nearby")
#goal_representation_end

##############################
From agent.py->reset_goal
behavior locate_item(item:item):
    body:
        achieve close_char(char, item)
        # Move close to the identified item for examination

behavior __goal__():
    body:
        if exists item: item : is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
            # Check if there is any known item of milk, turkey, egg, fish, or chicken
            foreach item: item:
                if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not visited(item):
                    locate_item(item)
        else:
            # If no known items, explore the area to locate the items
            foreach item: item:
                if not visited(item):
                    observe(item, "Look for milk, turkey, egg, fish, or chicken nearby")
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)walk_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)walk_executor(fridge_289)exp(food_fish_2021, fridge_289)walk_executor(food_fish_2021)walk_executor(fridge_289)exp(food_turkey_2040, fridge_289)walk_executor(food_turkey_2040)walk_executor(fridge_289)exp(milk_2043, fridge_289)walk_executor(milk_2043)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Locate milk, turkey, egg, fish, and chicken within the kitchen.', '2. Place milk, turkey, egg, fish, and chicken on the dining room table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_cupboard_229(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
def has_milk_turkey_egg_fish_chicken(item: item):
    # Function to check if there is milk, turkey, egg, fish, or chicken near the specified item
    symbol found_item = exists o: item : (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and close(o, item)
    return found_item

behavior __goal__():
    body:
        if exists item: item : has_milk_turkey_egg_fish_chicken(item):
            # If we have already found items based on the available information
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check if there are milk, turkey, egg, fish, or chicken close to the fridge")

        else:
            # Check around the scene for milk, turkey, egg, fish or chicken
            foreach item: item:
                if not visited(item):
                    observe(item, "Look for milk, turkey, egg, fish, or chicken nearby")
#goal_representation_end

##############################
From agent.py->reset_goal
def has_milk_turkey_egg_fish_chicken(item: item):
    # Function to check if there is milk, turkey, egg, fish, or chicken near the specified item
    symbol found_item = exists o: item : (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and close(o, item)
    return found_item

behavior __goal__():
    body:
        if exists item: item : has_milk_turkey_egg_fish_chicken(item):
            # If we have already found items based on the available information
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check if there are milk, turkey, egg, fish, or chicken close to the fridge")

        else:
            # Check around the scene for milk, turkey, egg, fish or chicken
            foreach item: item:
                if not visited(item):
                    observe(item, "Look for milk, turkey, egg, fish, or chicken nearby")
##############################
From agent.py-> find a plan in act()
obs(fridge_289, Check if there are milk, turkey, egg, fish, or chicken close to the fridge)
##############################
From agent.py
obs(fridge_289, Check if there are milk, turkey, egg, fish, or chicken close to the fridge)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is PLUGGED_IN. fridge_289 is OPEN. fridge_289 is CLEAN. fridge_289 is OFF.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table in the dining room

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place the item on the table in the dining room

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table inside the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        place_on_table(milk, table)
        place_on_table(turkey, table)
        place_on_table(egg, table)
        place_on_table(fish, table)
        place_on_table(chicken, table)

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2043)walk_executor(table_226)put_executor(milk_2043, table_226)walk_executor(food_turkey_2040)grab_executor(food_turkey_2040)walk_executor(table_226)put_executor(food_turkey_2040, table_226)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(table_226)put_executor(food_egg_2020, table_226)walk_executor(food_fish_2021)grab_executor(food_fish_2021)walk_executor(table_226)put_executor(food_fish_2021, table_226)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(table_226)put_executor(food_chicken_2017, table_226)
##############################
From agent.py
grab_executor(milk_2043)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing milk_2043 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Find coffee_filter_2000. Find bowl_2071. Find drawing_2003. Find bowl_2072. Find mat_236. Find fork_2080. Find drawing_241. Find fork_2081. Find drawing_238. Find drawing_242. Find drawing_243. Find mat_237. Robot is inside dining_room_201. Robot is close milk_2043. Robot is close table_226. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.
##############################
From agent.py
put_executor(milk_2043, table_226)
Find drawing_402. Find drawing_403. Robot is inside dining_room_201. Robot is close milk_2043. Robot is close table_226. milk_2043 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2040)
Robot is inside dining_room_201. Robot is close food_turkey_2040. Robot is close fridge_289. Robot is no longer close table_226.Robot is no longer close milk_2043.
##############################
From agent.py
grab_executor(food_turkey_2040)
Robot is inside dining_room_201. Robot is close food_turkey_2040. Robot is close fridge_289. Grabbing food_turkey_2040 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot is inside dining_room_201. Robot is close food_turkey_2040. Robot is close table_226. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_turkey_2040, table_226)
Robot is inside dining_room_201. Robot is close food_turkey_2040. Robot is close table_226. food_turkey_2040 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_egg_2020. Robot is no longer close food_turkey_2040.Robot is no longer close table_226.
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close table_226. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_egg_2020, table_226)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close table_226. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2021)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_fish_2021. Robot is no longer close table_226.Robot is no longer close food_egg_2020.
##############################
From agent.py
grab_executor(food_fish_2021)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_fish_2021. Grabbing food_fish_2021 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot is inside dining_room_201. Robot is close food_fish_2021. Robot is close table_226. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_fish_2021, table_226)
Robot is inside dining_room_201. Robot is close food_fish_2021. Robot is close table_226. food_fish_2021 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close table_226.Robot is no longer close food_fish_2021.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(table_226)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close table_226. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_chicken_2017, table_226)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close table_226. food_chicken_2017 released by right hand. 
##############################
