From agent.py
Reset goals: The sub-goals are: 
['1. Locate the cat in the environment.', '2. Gently touch the cat once found.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_coffee_table_2068(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cat,coffee_table_instance)
        else:
            exp(cat,coffee_table_instance)
    eff:
        unknown[cat]=False
        close[cat,coffee_table_instance]=True
        close[coffee_table_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_cat(cat:item):
    body:
        achieve close_char(char, cat)
        # Move close to the cat to locate it

behavior __goal__():
    body:
        if exists cat: item : is_cat(cat):
            # Check if there is any known cat
            bind cat: item where:
                is_cat(cat)
            locate_cat(cat)
        else:
            # If no known cat, explore the area to locate one
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Check if this is the cat you are looking for")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior locate_cat(cat:item):
    body:
        achieve close_char(char, cat)
        # Move close to the cat to locate it

behavior __goal__():
    body:
        if exists cat: item : is_cat(cat):
            # Check if there is any known cat
            bind cat: item where:
                is_cat(cat)
            locate_cat(cat)
        else:
            # If no known cat, explore the area to locate one
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Check if this is the cat you are looking for")

##############################
From agent.py-> find a plan in act()
walk_executor(coffee_table_2068)exp(cat_2055, coffee_table_2068)walk_executor(cat_2055)
##############################
From agent.py
walk_executor(coffee_table_2068)
Robot is inside home_office_319. Robot is close coffee_table_2068. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(cat_2055, coffee_table_2068)
Find cat_2055. 
##############################
From agent.py-> find a plan in act()
walk_executor(cat_2055)
##############################
From agent.py
walk_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. Robot is no longer close coffee_table_2068.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_the_cat(cat: item):
    body:
        touch(cat)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055
        touch_the_cat(cat)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior touch_the_cat(cat: item):
    body:
        touch(cat)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2055
        # Select the cat with ID 2055
        touch_the_cat(cat)

##############################
From agent.py-> find a plan in act()
touch_executor(cat_2055)
##############################
From agent.py
touch_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. 
##############################
