From agent.py
Reset goals: The sub-goals are: 
['1. Find the rice and eggs.', '2. Cook the rice and scramble the eggs separately.', '3. Mix the cooked rice and scrambled eggs together in a pan and fry them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior locate_rice_and_eggs(rice: item, eggs: item):
    body:
        achieve close_char(char, rice)
        # Move close to the rice to locate it

        achieve close_char(char, eggs)
        # Move close to the eggs to locate them

behavior __goal__():
    body:
        if exists rice: item : is_food_rice(rice):
            # Check if there is any known rice
            bind rice: item where:
                is_food_rice(rice)
            # Bind rice instance
        else:
            # If no known rice, explore the area to locate rice
            foreach rice: item:
                if is_food_rice(rice) and not visited(rice):
                    observe(rice, "Locate the rice")

        if exists eggs: item : is_food_egg(eggs):
            # Check if there are any known eggs
            bind eggs: item where:
                is_food_egg(eggs)
            # Bind eggs instance
        else:
            # If no known eggs, explore the area to locate eggs
            foreach eggs: item:
                if is_food_egg(eggs) and not visited(eggs):
                    observe(eggs, "Locate the eggs")

        locate_rice_and_eggs(rice, eggs)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: rice; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
behavior locate_rice_and_eggs(rice: item, eggs: item):
    body:
        achieve close_char(char, rice)
        # Move close to the rice to locate it

        achieve close_char(char, eggs)
        # Move close to the eggs to locate them

behavior __goal__():
    body:
        if exists rice: item : is_food_rice(rice):
            # Check if there is any known rice
            bind rice: item where:
                is_food_rice(rice)
            # Bind rice instance
        else:
            # If no known rice, explore the area to locate rice
            foreach rice: item:
                if is_food_rice(rice) and not visited(rice):
                    observe(rice, "Locate the rice")

        if exists eggs: item : is_food_egg(eggs):
            # Check if there are any known eggs
            bind eggs: item where:
                is_food_egg(eggs)
            # Bind eggs instance
        else:
            # If no known eggs, explore the area to locate eggs
            foreach eggs: item:
                if is_food_egg(eggs) and not visited(eggs):
                    observe(eggs, "Locate the eggs")

        locate_rice_and_eggs(rice, eggs)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: rice; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
behavior locate_rice_and_eggs(rice: item, eggs: item):
    body:
        achieve close_char(char, rice)
        # Move close to the rice to locate it

        achieve close_char(char, eggs)
        # Move close to the eggs to locate them

behavior __goal__():
    body:
        if exists rice: item : is_food_rice(rice):
            # Check if there is any known rice
            bind rice: item where:
                is_food_rice(rice)
            # Bind rice instance
        else:
            # If no known rice, explore the area to locate rice
            foreach rice: item:
                if is_food_rice(rice) and not visited(rice):
                    observe(rice, "Locate the rice")

        if exists eggs: item : is_food_egg(eggs):
            # Check if there are any known eggs
            bind eggs: item where:
                is_food_egg(eggs)
            # Bind eggs instance
        else:
            # If no known eggs, explore the area to locate eggs
            foreach eggs: item:
                if is_food_egg(eggs) and not visited(eggs):
                    observe(eggs, "Locate the eggs")

        locate_rice_and_eggs(rice, eggs)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_kitchen_counter_119(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_egg,kitchen_counter_instance)
        else:
            exp(food_egg,kitchen_counter_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_egg]=True
    

behavior find_food_rice_2108_around_kitchen_counter_119(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior locate_rice(rice:item):
    body:
        achieve close_char(char, rice)
        # Move close to the rice to locate it

behavior locate_eggs(eggs:item):
    body:
        achieve close_char(char, eggs)
        # Move close to the eggs to locate them

behavior __goal__():
    body:
        if exists rice: item : is_food_rice(rice) and not visited(rice):
            # Check if there is any known rice
            bind rice: item where:
                is_food_rice(rice) and not visited(rice)
            locate_rice(rice)
        else:
            # If no known rice, explore the area to locate it
            foreach rice: item:
                if is_food_rice(rice) and not visited(rice):
                    observe(rice, "Locate the rice")

        if exists eggs: item : is_food_egg(eggs) and not visited(eggs):
            # Check if there are any known eggs
            bind eggs: item where:
                is_food_egg(eggs) and not visited(eggs)
            locate_eggs(eggs)
        else:
            # If no known eggs, explore the area to locate them
            foreach eggs: item:
                if is_food_egg(eggs) and not visited(eggs):
                    observe(eggs, "Locate the eggs")
#goal_representation_end

##############################
From agent.py->reset_goal
behavior locate_rice(rice:item):
    body:
        achieve close_char(char, rice)
        # Move close to the rice to locate it

behavior locate_eggs(eggs:item):
    body:
        achieve close_char(char, eggs)
        # Move close to the eggs to locate them

behavior __goal__():
    body:
        if exists rice: item : is_food_rice(rice) and not visited(rice):
            # Check if there is any known rice
            bind rice: item where:
                is_food_rice(rice) and not visited(rice)
            locate_rice(rice)
        else:
            # If no known rice, explore the area to locate it
            foreach rice: item:
                if is_food_rice(rice) and not visited(rice):
                    observe(rice, "Locate the rice")

        if exists eggs: item : is_food_egg(eggs) and not visited(eggs):
            # Check if there are any known eggs
            bind eggs: item where:
                is_food_egg(eggs) and not visited(eggs)
            locate_eggs(eggs)
        else:
            # If no known eggs, explore the area to locate them
            foreach eggs: item:
                if is_food_egg(eggs) and not visited(eggs):
                    observe(eggs, "Locate the eggs")
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(food_rice_2108, kitchen_counter_119)walk_executor(food_rice_2108)walk_executor(kitchen_counter_119)exp(food_egg_2092, kitchen_counter_119)walk_executor(food_egg_2092)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(food_rice_2108, kitchen_counter_119)
Fail to find food_rice_2108 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2142)exp(food_rice_2108, bowl_2142)walk_executor(food_rice_2108)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)
##############################
From agent.py
walk_executor(bowl_2142)
Find iron_2161. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2142. 
##############################
From agent.py
exp(food_rice_2108, bowl_2142)
Fail to find food_rice_2108 around bowl_2142. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(food_rice_2108)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close bowl_2142.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice.', '3. Fry the rice with eggs together in a pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation

behavior find_and_wash_ingredients(rice:item, egg:item, sink:item):
    body:
        achieve clean(rice)
        achieve clean(egg)
        # Ensure both rice and eggs are clean

def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        
        observe(fridge, "Check for rice and eggs")

        bind rice: item where:
            is_food_rice(rice) and close(rice, fridge)
        # Select rice close to the fridge

        bind egg: item where:
            is_food_egg(egg) and close(egg, fridge)
        # Select eggs close to the fridge

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        find_and_wash_ingredients(rice, egg, sink)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior find_and_wash_ingredients(rice:item, egg:item, sink:item):
    body:
        achieve clean(rice)
        achieve clean(egg)
        # Ensure both rice and eggs are clean

def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge
        
        observe(fridge, "Check for rice and eggs")

        bind rice: item where:
            is_food_rice(rice) and close(rice, fridge)
        # Select rice close to the fridge

        bind egg: item where:
            is_food_egg(egg) and close(egg, fridge)
        # Select eggs close to the fridge

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        find_and_wash_ingredients(rice, egg, sink)

##############################
From agent.py-> find a plan in act()
obs(fridge_126, Check for rice and eggs)
##############################
From agent.py
obs(fridge_126, Check for rice and eggs)
Get this information:  fridge_126 is close to food_onion_2048. fridge_126 is close to wall_179. fridge_126 is close to ceilinglamp_137. fridge_126 is close to ceiling_53. fridge_126 is close to ceiling_54. fridge_126 is close to food_food_2073. fridge_126 is close to basket_for_clothes_2078. fridge_126 is close to washing_machine_2079. fridge_126 is close to food_steak_2080. fridge_126 is close to food_apple_2081. fridge_126 is close to food_bacon_2082. fridge_126 is close to food_banana_2083. fridge_126 is close to floor_163. fridge_126 is close to food_cake_2085. fridge_126 is close to food_carrot_2086. fridge_126 is close to food_cereal_2087. fridge_126 is close to food_cheese_2088. fridge_126 is close to food_chicken_2089. fridge_126 is close to food_dessert_2090. fridge_126 is close to food_donut_2091. fridge_126 is close to food_egg_2092. fridge_126 is close to food_fish_2093. fridge_126 is close to food_food_2094. fridge_126 is close to food_fruit_2095. fridge_126 is close to food_hamburger_2096. fridge_126 is close to food_ice_cream_2097. fridge_126 is close to food_jam_2098. fridge_126 is close to food_kiwi_2099. fridge_126 is close to food_lemon_2100. fridge_126 is close to food_noodles_2101. fridge_126 is close to food_oatmeal_2102. fridge_126 is close to food_orange_2103. fridge_126 is close to food_onion_2104. fridge_126 is close to food_peanut_butter_2105. fridge_126 is close to food_pizza_2106. fridge_126 is close to food_potato_2107. fridge_126 is close to food_rice_2108. fridge_126 is close to food_salt_2109. fridge_126 is close to food_snack_2110. fridge_126 is close to food_sugar_2111. fridge_126 is close to food_turkey_2112. fridge_126 is close to food_vegetable_2113. fridge_126 is close to floor_164. fridge_126 is close to door_61. fridge_126 is close to doorjamb_190. fridge_126 is close to desk_193. fridge_126 is close to wall_66. fridge_126 is close to wall_67. fridge_126 is close to powersocket_72. fridge_126 is close to light_73. fridge_126 is close to computer_209. fridge_126 is close to cpuscreen_210. fridge_126 is close to floor_169. fridge_126 is close to keyboard_211. fridge_126 is close to light_212. fridge_126 is close to mouse_213. fridge_126 is close to mousepad_214. fridge_126 is close to food_food_2001. fridge_126 is close to floor_44. fridge_126 is close to floor_45. fridge_126 is close to sauce_2148. fridge_126 is close to food_food_1000. fridge_126 is close to wall_175. fridge_126 is close to food_food_2046. fridge_126 is close to character_240. food_onion_2048 is inside fridge_126. food_peanut_butter_2105 is inside fridge_126. food_fruit_2095 is inside fridge_126. food_pizza_2106 is inside fridge_126. fridge_126 is inside dining_room_41. food_cereal_2087 is inside fridge_126. food_jam_2098 is inside fridge_126. food_lemon_2100 is inside fridge_126. food_dessert_2090 is inside fridge_126. food_salt_2109 is inside fridge_126. food_bacon_2082 is inside fridge_126. food_fish_2093 is inside fridge_126. food_turkey_2112 is inside fridge_126. fridge_126 is on floor_44. food_food_2046 is inside fridge_126. food_cake_2085 is inside fridge_126. food_onion_2104 is inside fridge_126. food_potato_2107 is inside fridge_126. food_hamburger_2096 is inside fridge_126. sauce_2148 is inside fridge_126. food_kiwi_2099 is inside fridge_126. food_snack_2110 is inside fridge_126. food_donut_2091 is inside fridge_126. food_noodles_2101 is inside fridge_126. food_oatmeal_2102 is inside fridge_126. food_banana_2083 is inside fridge_126. food_food_2094 is inside fridge_126. food_vegetable_2113 is inside fridge_126. food_carrot_2086 is inside fridge_126. food_food_2001 is inside fridge_126. food_cheese_2088 is inside fridge_126. food_chicken_2089 is inside fridge_126. food_ice_cream_2097 is inside fridge_126. food_rice_2108 is inside fridge_126. food_apple_2081 is inside fridge_126. food_steak_2080 is inside fridge_126. food_sugar_2111 is inside fridge_126. food_food_2073 is inside fridge_126. food_egg_2092 is inside fridge_126. food_orange_2103 is inside fridge_126. fridge_126 is PLUGGED_IN. fridge_126 is OPEN. fridge_126 is CLEAN. fridge_126 is OFF.
##############################
From agent.py
Human Instruction: You need to wash the rice and eggs to ensure they are clean. Locate a sink to perform the washing action.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to bowl_2142.
Action 4: look for food_rice_2108 around bowl_2142.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_rice_2108 around fridge_126.
Action 9: Observe around fridge_126 with the question of Check for rice and eggs.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2007_around_cupboard_117(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_pot_2040_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_egg_nearby(location: item):
    # Determine if rice and egg are close to the specified location
    symbol has_rice_egg=exists o: item : (is_food_rice(o) or is_food_egg(o)) and close_char(char, o)
    return has_rice_egg

behavior wash_item(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Place the item inside the sink
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        if not exists sink: item : visited(sink):
            observe(fridge_126, "Check for rice and eggs")
            # Continue observation for potential sinks to wash items

        bind sink: item where:
            is_sink(sink)
        
        if not is_rice_egg_nearby(kitchen_counter_119):
            observe(kitchen_counter_119, "Check for rice and egg")
        
        if not is_rice_egg_nearby(bowl_2142):
            observe(bowl_2142, "Check for rice and egg")
        
        if is_rice_egg_nearby(fridge_126):
            bind rice: item where:
                is_food_rice(rice) and close_char(char, rice)
            wash_item(rice, sink)

            bind egg: item where:
                is_food_egg(egg) and close_char(char, egg)
            wash_item(egg, sink)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'sink') at line 5773, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2007_around_oven_127(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
def is_rice_egg_nearby(location: item):
    # Determine if rice and egg are close to the specified location
    symbol has_rice_egg = exists o: item : (is_food_rice(o) or is_food_egg(o)) and close_char(char, o)
    return has_rice_egg

behavior wash_item(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Place the item inside the sink
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        if not exists sink: item : visited(sink) and is_sink(sink):
            observe(fridge_126, "Check for rice and eggs")
            # Continue observation for potential sinks to wash items

        bind sink: item where:
            is_sink(sink)
        
        if not is_rice_egg_nearby(kitchen_counter_119):
            observe(kitchen_counter_119, "Check for rice and egg")
        
        if not is_rice_egg_nearby(bowl_2142):
            observe(bowl_2142, "Check for rice and egg")
        
        if is_rice_egg_nearby(fridge_126):
            bind rice: item where:
                is_food_rice(rice) and close_char(char, rice)
            wash_item(rice, sink)

            bind egg: item where:
                is_food_egg(egg) and close_char(char, egg)
            wash_item(egg, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'sink') at line 5773, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2074_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_cup_2133_around_sink_19(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_food_butter_2007_around_cupboard_118(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#goal_representation
 
def is_rice_egg_nearby(location: item):
    # Determine if rice and egg are close to the specified location
    symbol has_rice_egg = exists o: item : (is_food_rice(o) or is_food_egg(o)) and close_char(char, o)
    return has_rice_egg

behavior wash_item(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Place the item inside the sink
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        if not exists sink: item : visited(sink) and is_sink(sink):
            observe(fridge_126, "Check for rice and eggs")
            # Continue observation for potential sinks to wash items

        bind sink: item where:
            is_sink(sink)

        if not is_rice_egg_nearby(kitchen_counter_119):
            observe(kitchen_counter_119, "Check for rice and egg")

        if not is_rice_egg_nearby(bowl_2142):
            observe(bowl_2142, "Check for rice and egg")

        if is_rice_egg_nearby(fridge_126):
            bind rice: item where:
                is_food_rice(rice) and close_char(char, rice)
            wash_item(rice, sink)

            bind egg: item where:
                is_food_egg(egg) and close_char(char, egg)
            wash_item(egg, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2103_around_microwave_135(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_orange,microwave_instance)
        else:
            exp(food_orange,microwave_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,microwave_instance]=True
        close[microwave_instance,food_orange]=True
    

behavior find_cup_2049_around_sink_19(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def locate_rice_or_egg(item: item):
    # Function to check if the specified item is either food_rice or food_egg
    symbol is_rice_or_egg= is_food_rice(item) or is_food_egg(item)
    return is_rice_or_egg

behavior wash_item(item:item, sink:item):
    body:
        achieve close(item, sink)
        # Move the item close to the sink

        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind to the kitchen counter

        bind bowl: item where:
            is_bowl(bowl)
        # Bind to the bowl

        bind fridge: item where:
            is_fridge(fridge)
        # Bind to the fridge

        bind sink: item where:
            is_sink(sink)
        # Bind to the sink for washing

        if exists item: item : locate_rice_or_egg(item) and (close(item, kitchen_counter) or close(item, bowl) or close(item, fridge)):
            # If theres rice or egg close to either kitchen_counter, bowl, or fridge
            foreach item: item:
                if locate_rice_or_egg(item) and (close(item, kitchen_counter) or close(item, bowl) or close(item, fridge)):
                    wash_item(item, sink)
        else:
            # If neither is found near the known locations, observe each potential container area
            foreach location: item:
                if (is_kitchen_counter(location) or is_bowl(location) or is_fridge(location)) and not visited(location):
                    observe(location, "Check for rice and eggs")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def locate_rice_or_egg(item: item):
    # Function to check if the specified item is either food_rice or food_egg
    symbol is_rice_or_egg= is_food_rice(item) or is_food_egg(item)
    return is_rice_or_egg

behavior wash_item(item:item, sink:item):
    body:
        achieve close(item, sink)
        # Move the item close to the sink

        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Bind to the kitchen counter

        bind bowl: item where:
            is_bowl(bowl)
        # Bind to the bowl

        bind fridge: item where:
            is_fridge(fridge)
        # Bind to the fridge

        bind sink: item where:
            is_sink(sink)
        # Bind to the sink for washing

        if exists item: item : locate_rice_or_egg(item) and (close(item, kitchen_counter) or close(item, bowl) or close(item, fridge)):
            # If theres rice or egg close to either kitchen_counter, bowl, or fridge
            foreach item: item:
                if locate_rice_or_egg(item) and (close(item, kitchen_counter) or close(item, bowl) or close(item, fridge)):
                    wash_item(item, sink)
        else:
            # If neither is found near the known locations, observe each potential container area
            foreach location: item:
                if (is_kitchen_counter(location) or is_bowl(location) or is_fridge(location)) and not visited(location):
                    observe(location, "Check for rice and eggs")

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(sink_19)put_executor(food_egg_2092, sink_19)walk_executor(food_egg_2092)wash_executor(food_egg_2092)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(sink_19)put_executor(food_rice_2108, sink_19)walk_executor(food_rice_2108)wash_executor(food_rice_2108)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
put_executor(food_egg_2092, sink_19)
Robot is inside bathroom_1. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From agent.py
wash_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close sink_19. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Robot is no longer close sink_19.Robot is no longer close food_egg_2092.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close fridge_126.
##############################
From agent.py
put_executor(food_rice_2108, sink_19)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From agent.py
wash_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_butter_2007_around_cupboard_118(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_food_2046_around_oven_127(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_food,oven_instance)
        else:
            exp(food_food,oven_instance)
    eff:
        unknown[food_food]=False
        close[food_food,oven_instance]=True
        close[oven_instance,food_food]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice_with_pot(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice_with_pot(pot, stove, rice)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice_with_pot(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice_with_pot(pot, stove, rice)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close sink_19.Robot is no longer close food_rice_2108.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close stove_2135. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close stove_2135. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_rice_2108. Robot is no longer inside bathroom_1.Robot is no longer close pot_2138.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_rice_2108. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close stove_2135. Robot is no longer inside dining_room_41.Robot is no longer close sink_19.
##############################
From agent.py
putin_executor(food_rice_2108, pot_2138)
Robot is inside bathroom_1. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close stove_2135. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close stove_2135. Robot is close kitchen_counter_119. Robot is no longer inside bathroom_1.Robot is no longer close pot_2138.Robot is no longer close food_rice_2108.
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close stove_2135. Robot is close kitchen_counter_119. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, pan:item):
    body:
        achieve inside(rice, pan)
        # Put the cooked rice inside the pan
        achieve inside(eggs, pan)
        # Put the eggs inside the pan
        achieve is_on(pan)
        # Ensure the pan is on the stove and frying the contents

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2108
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs) and id[eggs] == 2092
        # Select the washed eggs

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan

        fry_rice_with_eggs(rice, eggs, pan)
        # Fry the rice with the eggs in the pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, pan:item, stove:item):
    body:
        achieve inside(rice, pan)
        # Ensure rice is placed inside the pan

        achieve inside(eggs, pan)
        # Ensure eggs are also in the pan

        achieve on(pan, stove)
        # Place the pan on the stove

        achieve is_on(stove)
        # Turn on the stove to fry the rice with eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_rice_with_eggs(rice, eggs, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_rice_with_eggs(rice:item, eggs:item, pan:item, stove:item):
    body:
        achieve inside(rice, pan)
        # Ensure rice is placed inside the pan

        achieve inside(eggs, pan)
        # Ensure eggs are also in the pan

        achieve on(pan, stove)
        # Place the pan on the stove

        achieve is_on(stove)
        # Turn on the stove to fry the rice with eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_rice_with_eggs(rice, eggs, pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(fryingpan_2154, cupboard_118)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(fryingpan_2154, cupboard_118)
Fail to find fryingpan_2154 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(fryingpan_2154, cupboard_117)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(fryingpan_2154, cupboard_117)
Fail to find fryingpan_2154 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(fryingpan_2154, desk_272)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(desk_272)
Find headset_2146. Find stamp_2043. Find stamp_2022. Find chair_271. Find phone_2147. Find mouse_280. Find keyboard_278. Robot is inside home_office_241. Robot is close desk_272. Robot is close floor_263. Robot is no longer inside dining_room_41.Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(fryingpan_2154, desk_272)
Fail to find fryingpan_2154 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(fryingpan_2154, kitchen_counter_123)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer inside home_office_241.Robot is no longer close desk_272.Robot is no longer close floor_263.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find fryingpan_2154 ?
Answer: The fryingpan_2154 is located on the kitchen_counter_122 inside the dining_room_41. You can find it next to or very close to the kitchen_counter_122. Look for the kitchen_counter as a key marker to locate the fryingpan.
Re-decompose: None

##############################
From agent.py
Human Instruction: You need to wash the rice and eggs to ensure they are clean. Locate a sink to perform the washing action.
The fryingpan_2154 is located on the kitchen_counter_122 inside the dining_room_41. You can find it next to or very close to the kitchen_counter_122. Look for the kitchen_counter as a key marker to locate the fryingpan.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to bowl_2142.
Action 4: look for food_rice_2108 around bowl_2142.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_rice_2108 around fridge_126.
Action 9: Observe around fridge_126 with the question of Check for rice and eggs.
Action 10: Grab food_egg_2092.
Action 11: Walk to sink_19.
Action 12: Put food_egg_2092 on sink_19.
Action 13: Walk to food_egg_2092.
Action 14: Wash food_egg_2092.
Action 15: Walk to food_rice_2108.
Action 16: Grab food_rice_2108.
Action 17: Walk to sink_19.
Action 18: Put food_rice_2108 on sink_19.
Action 19: Walk to food_rice_2108.
Action 20: Wash food_rice_2108.
Action 21: Walk to pot_2138.
Action 22: Grab pot_2138.
Action 23: Walk to faucet_20.
Action 24: Switch on faucet_20.
Action 25: Switch off faucet_20.
Action 26: Walk to stove_2135.
Action 27: Put pot_2138 on stove_2135.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Walk to stove_2135.
Action 35: Switch on stove_2135.
Action 36: Walk to cupboard_118.
Action 37: Open cupboard_118.
Action 38: look for fryingpan_2154 around cupboard_118.
Action 39: Walk to cupboard_117.
Action 40: look for fryingpan_2154 around cupboard_117.
Action 41: Walk to desk_272.
Action 42: look for fryingpan_2154 around desk_272.
Action 43: Walk to kitchen_counter_123.

##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_123)
Fail to find fryingpan_2154 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(fryingpan_2154, kitchen_counter_122)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
exp(fryingpan_2154, kitchen_counter_122)
Find fryingpan_2154. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_rice_2108. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close food_rice_2108. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. Robot is no longer close pot_2138.
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. food_rice_2108 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_egg_2092. Robot is no longer close fryingpan_2154.Robot is no longer close food_rice_2108.Robot is no longer close kitchen_counter_122.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. Robot is no longer close sink_19.
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. food_egg_2092 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_egg_2092.Robot is no longer close kitchen_counter_122.
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to switch on the stove to fry the rice with eggs.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to bowl_2142.
Action 4: look for food_rice_2108 around bowl_2142.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_rice_2108 around fridge_126.
Action 9: Observe around fridge_126 with the question of Check for rice and eggs.
Action 10: Grab food_egg_2092.
Action 11: Walk to sink_19.
Action 12: Put food_egg_2092 on sink_19.
Action 13: Walk to food_egg_2092.
Action 14: Wash food_egg_2092.
Action 15: Walk to food_rice_2108.
Action 16: Grab food_rice_2108.
Action 17: Walk to sink_19.
Action 18: Put food_rice_2108 on sink_19.
Action 19: Walk to food_rice_2108.
Action 20: Wash food_rice_2108.
Action 21: Walk to pot_2138.
Action 22: Grab pot_2138.
Action 23: Walk to faucet_20.
Action 24: Switch on faucet_20.
Action 25: Switch off faucet_20.
Action 26: Walk to stove_2135.
Action 27: Put pot_2138 on stove_2135.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Walk to stove_2135.
Action 35: Switch on stove_2135.
Action 36: Walk to cupboard_118.
Action 37: Open cupboard_118.
Action 38: look for fryingpan_2154 around cupboard_118.
Action 39: Walk to cupboard_117.
Action 40: look for fryingpan_2154 around cupboard_117.
Action 41: Walk to desk_272.
Action 42: look for fryingpan_2154 around desk_272.
Action 43: Walk to kitchen_counter_123.
Action 44: look for fryingpan_2154 around kitchen_counter_123.
Action 45: Walk to kitchen_counter_122.
Action 46: look for fryingpan_2154 around kitchen_counter_122.
Action 47: Walk to food_rice_2108.
Action 48: Grab food_rice_2108.
Action 49: Walk to fryingpan_2154.
Action 50: Put food_rice_2108 into fryingpan_2154.
Action 51: Walk to food_egg_2092.
Action 52: Grab food_egg_2092.
Action 53: Walk to fryingpan_2154.
Action 54: Put food_egg_2092 into fryingpan_2154.
Action 55: Grab fryingpan_2154.
Action 56: Walk to stove_2135.
Action 57: Put fryingpan_2154 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oven_127(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(oil,oven_instance)
        else:
            exp(oil,oven_instance)
    eff:
        unknown[oil]=False
        close[oil,oven_instance]=True
        close[oven_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(rice, fryingpan)
        # Place rice inside the frying pan
        achieve inside(eggs, fryingpan)
        # Place eggs inside the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_rice_with_eggs(rice, eggs, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior switch_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior fry_rice_with_egg(fryingpan: item, stove: item, rice: item, egg: item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is inside the frying pan
        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        fry_rice_with_egg(fryingpan, stove, rice, egg)
        switch_on_stove(stove)
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the rice with eggs together in a pan." ?
Answer: Put rice, egg, and oil in the pan. Put the pan on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(pan:item, stove:item, rice:item, eggs:item, oil:item):
    body:
        achieve inside(rice, pan)
        achieve inside(eggs, pan)
        achieve inside(oil, pan)
        achieve on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the prepared rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(pan, stove, rice, eggs, oil)
        achieve is_on(stove)
        # Ensure the stove is switched on

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fry_rice_with_eggs(pan:item, stove:item, rice:item, eggs:item, oil:item):
    body:
        achieve inside(rice, pan)
        achieve inside(eggs, pan)
        achieve inside(oil, pan)
        achieve on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind rice: item where:
            is_food_rice(rice)
        # Select the prepared rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(pan, stove, rice, eggs, oil)
        achieve is_on(stove)
        # Ensure the stove is switched on

##############################
From agent.py-> find a plan in act()
walk_executor(oil_2149)grab_executor(oil_2149)walk_executor(fryingpan_2154)putin_executor(oil_2149, fryingpan_2154)
##############################
From agent.py
walk_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Robot is no longer close fryingpan_2154.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(oil_2149)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close oil_2149. Grabbing oil_2149 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close kitchen_counter_123.
##############################
From agent.py
putin_executor(oil_2149, fryingpan_2154)
Robot is inside dining_room_41. Robot is close oil_2149. Robot is close fryingpan_2154. Robot is close stove_2135. oil_2149 released by right hand. 
##############################
From agent.py
Human Instruction: You need to turn on the stove after placing the frying pan with rice, eggs, and oil on it.

Human Guidance: Put rice, egg, and oil in the pan. Put the pan on the stove and turn on the stove.
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for food_rice_2108 around kitchen_counter_119.
Action 3: Walk to bowl_2142.
Action 4: look for food_rice_2108 around bowl_2142.
Action 5: Walk to fridge_126.
Action 6: Switch off fridge_126.
Action 7: Open fridge_126.
Action 8: look for food_rice_2108 around fridge_126.
Action 9: Observe around fridge_126 with the question of Check for rice and eggs.
Action 10: Grab food_egg_2092.
Action 11: Walk to sink_19.
Action 12: Put food_egg_2092 on sink_19.
Action 13: Walk to food_egg_2092.
Action 14: Wash food_egg_2092.
Action 15: Walk to food_rice_2108.
Action 16: Grab food_rice_2108.
Action 17: Walk to sink_19.
Action 18: Put food_rice_2108 on sink_19.
Action 19: Walk to food_rice_2108.
Action 20: Wash food_rice_2108.
Action 21: Walk to pot_2138.
Action 22: Grab pot_2138.
Action 23: Walk to faucet_20.
Action 24: Switch on faucet_20.
Action 25: Switch off faucet_20.
Action 26: Walk to stove_2135.
Action 27: Put pot_2138 on stove_2135.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Walk to stove_2135.
Action 35: Switch on stove_2135.
Action 36: Walk to cupboard_118.
Action 37: Open cupboard_118.
Action 38: look for fryingpan_2154 around cupboard_118.
Action 39: Walk to cupboard_117.
Action 40: look for fryingpan_2154 around cupboard_117.
Action 41: Walk to desk_272.
Action 42: look for fryingpan_2154 around desk_272.
Action 43: Walk to kitchen_counter_123.
Action 44: look for fryingpan_2154 around kitchen_counter_123.
Action 45: Walk to kitchen_counter_122.
Action 46: look for fryingpan_2154 around kitchen_counter_122.
Action 47: Walk to food_rice_2108.
Action 48: Grab food_rice_2108.
Action 49: Walk to fryingpan_2154.
Action 50: Put food_rice_2108 into fryingpan_2154.
Action 51: Walk to food_egg_2092.
Action 52: Grab food_egg_2092.
Action 53: Walk to fryingpan_2154.
Action 54: Put food_egg_2092 into fryingpan_2154.
Action 55: Grab fryingpan_2154.
Action 56: Walk to stove_2135.
Action 57: Put fryingpan_2154 on stove_2135.
Action 58: Walk to oil_2149.
Action 59: Grab oil_2149.
Action 60: Walk to fryingpan_2154.
Action 61: Put oil_2149 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_egg(rice:item, egg:item, oil:item, fryingpan:item, stove:item):
    body:
        achieve inside(rice, fryingpan)
        # Put rice into the frying pan

        achieve inside(egg, fryingpan)
        # Put egg into the frying pan

        achieve inside(oil, fryingpan)
        # Add oil into the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn the stove on for frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind stove: item where:
            is_stove(stove)
        # Select stove

        fry_rice_with_egg(rice, egg, oil, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(rice, fryingpan)
        # Place the rice into the fryingpan
        
        achieve inside(eggs, fryingpan)
        # Place the eggs into the fryingpan
        
        achieve inside(oil, fryingpan)
        # Add oil into the fryingpan
        
        achieve on(fryingpan, stove)
        # Place the fryingpan on the stove
        
        achieve is_on(stove)
        # Turn on the stove to fry the rice and eggs together

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind oil: item where:
            is_oil(oil)
        # Select oil
        
        fry_rice_with_eggs(rice, eggs, fryingpan, stove, oil)
        # Fry the rice with eggs using the fryingpan on the stove

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the rice with eggs together in a pan." ?
Answer: Put rice, egg, oil in the pan. Put the pan on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(rice, fryingpan)
        # Place the rice inside the frying pan
        
        achieve inside(egg, fryingpan)
        # Place the eggs inside the frying pan
        
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to fry the rice and eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fry_rice_with_eggs(rice, egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior fry_rice_with_eggs(rice: item, eggs: item, fryingpan: item, stove: item, oil: item):
    body:
        achieve inside(rice, fryingpan)
        # Place the rice in the frying pan

        achieve inside(eggs, fryingpan)
        # Place the eggs in the frying pan

        achieve inside(oil, fryingpan)
        # Add oil to the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(rice, eggs, fryingpan, stove, oil)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_sink_120(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(oil,sink_instance)
        else:
            exp(oil,sink_instance)
    eff:
        unknown[oil]=False
        close[oil,sink_instance]=True
        close[sink_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(rice, fryingpan)
        # Place rice inside the frying pan
        achieve inside(eggs, fryingpan)
        # Place eggs inside the frying pan
        achieve inside(oil, fryingpan)
        # Add oil to the frying pan
        achieve on(fryingpan, stove)
        # Place frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to begin frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(rice, eggs, fryingpan, stove, oil)
        # Fry the rice with eggs using the selected frying pan, stove, and oil

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, egg:item, pan:item, stove:item, oil:item):
    body:
        achieve inside(rice, pan)
        # Place the rice inside the frying pan
        achieve inside(egg, pan)
        # Place the eggs inside the frying pan
        achieve inside(oil, pan)
        # Add oil to the frying pan
        achieve on(pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the eggs

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(rice, egg, pan, stove, oil)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. fry the rice with eggs together in a pan." ?
Answer: Put rice, egg, and oil in the pan. Put the pan on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior combine_rice_and_egg_in_pan(rice: item, egg: item, pan: item, oil: item):
    body:
        achieve inside(rice, pan)
        # Place the rice inside the frying pan
        achieve inside(egg, pan)
        # Place the egg inside the frying pan
        achieve inside(oil, pan)
        # Pour oil into the frying pan

behavior fry_rice_and_egg(pan: item, stove: item):
    body:
        achieve on(pan, stove)
        # Put the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and close_char(char, rice)
        # Select the rice that is close to you

        bind egg: item where:
            is_food_egg(egg) and close_char(char, egg)
        # Select the egg that is close to you

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        bind oil: item where:
            is_oil(oil)
        # Select oil

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_rice_and_egg_in_pan(rice, egg, pan, oil)
        fry_rice_and_egg(pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(pan:item, stove:item, rice:item, egg:item, oil:item):
    body:
        achieve inside(rice, pan)
        # Place the rice inside the pan
        
        achieve inside(egg, pan)
        # Place the egg inside the pan
        
        achieve inside(oil, pan)
        # Add oil to the pan
        
        achieve on(pan, stove)
        # Place the pan on the stove
        
        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind oil: item where:
            is_oil(oil)
        # Select oil

        fry_rice_with_eggs(fryingpan, stove, rice, egg, oil)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_egg(rice:item, egg:item, oil:item, frying_pan:item, stove:item):
    body:
        achieve inside(rice, frying_pan)
        # Place the rice inside the frying pan
        achieve inside(egg, frying_pan)
        # Place the egg inside the frying pan
        achieve inside(oil, frying_pan)
        # Add oil inside the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to fry the rice with eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fry_rice_with_egg(rice, egg, oil, frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, eggs:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(rice, fryingpan)
        # Place rice inside the frying pan
        
        achieve inside(eggs, fryingpan)
        # Place eggs inside the frying pan

        achieve inside(oil, fryingpan)
        # Pour oil into the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Turn on the stove to fry the rice and eggs

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind eggs: item where:
            is_food_egg(eggs)
        # Select the eggs

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(rice, eggs, fryingpan, stove, oil)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2149_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_rice_with_eggs(rice:item, egg:item, fryingpan:item, stove:item, oil:item):
    body:
        achieve inside(rice, fryingpan)
        # Ensure the rice is in the frying pan
        achieve inside(egg, fryingpan)
        # Ensure the eggs are in the frying pan
        achieve inside(oil, fryingpan)
        # Add oil to the frying pan

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the contents of the frying pan

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oil: item where:
            is_oil(oil)
        # Select the oil

        fry_rice_with_eggs(rice, egg, fryingpan, stove, oil)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_microwave_135(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(oil,microwave_instance)
        else:
            exp(oil,microwave_instance)
    eff:
        unknown[oil]=False
        close[oil,microwave_instance]=True
        close[microwave_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fry_egg_with_rice(rice: item, egg: item, oil: item, fryingpan: item, stove: item):
    body:
        achieve inside(rice, fryingpan)
        # Place the rice inside the frying pan
        achieve inside(egg, fryingpan)
        # Crack the egg and place it inside the frying pan
        achieve inside(oil, fryingpan)
        # Add oil to the frying pan for frying

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start frying the rice and egg

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice to be fried

        bind egg: item where:
            is_food_egg(egg)
        # Select egg to be fried
        
        bind oil: item where:
            is_oil(oil)
        # Select oil for frying
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        fry_egg_with_rice(rice, egg, oil, fryingpan, stove)

#goal_representation_end

##############################
