From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken.', '2. Mix the cooked chicken with the pasta.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation
behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve has_water(pot)
        # Ensure the pot contains water for boiling
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken(chicken:item, pan:item, stove:item):
    body:
        achieve on(chicken, pan)
        # Place the chicken on the pan
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil pasta

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan to cook chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)
        cook_chicken(chicken, pan, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve has_water(pot)
        # Ensure the pot contains water for boiling
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the pasta

behavior cook_chicken(chicken:item, pan:item, stove:item):
    body:
        achieve on(chicken, pan)
        # Place the chicken on the pan
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot to boil pasta

        bind pan: item where:
            is_fryingpan(pan)
        # Select a pan to cook chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)
        cook_chicken(chicken, pan, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(pot_2069, kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)put_executor(food_chicken_2017, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(pot_2069, kitchen_counter_230)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)put_executor(food_chicken_2017, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
exp(dry_pasta_2042, kitchen_counter_230)
Fail to find dry_pasta_2042 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)put_executor(food_chicken_2017, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(dry_pasta_2042, cupboard_229)
Fail to find dry_pasta_2042 around cupboard_229. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and the chicken separately.', '2. Combine the cooked pasta and chicken on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_stovefan_288(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==288
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(dry_pasta,stovefan_instance)
        else:
            exp(dry_pasta,stovefan_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,stovefan_instance]=True
        close[stovefan_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta_and_cook_chicken(pasta:item, pot:item, chicken:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta and chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta_and_cook_chicken(pasta, pot, chicken, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in the specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta_and_cook_chicken(pasta:item, pot:item, chicken:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta and chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta_and_cook_chicken(pasta, pot, chicken, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stovefan_288)exp(dry_pasta_2042, stovefan_288)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Find basket_for_clothes_2006. Find towel_rack_34. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchon_executor(faucet_43)
Find drawing_176. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close pot_2069. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(stovefan_288)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stovefan_288. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
exp(dry_pasta_2042, stovefan_288)
Fail to find dry_pasta_2042 around stovefan_288. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathtub_30)exp(dry_pasta_2042, bathtub_30)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(bathtub_30)
Find towel_rack_33. Robot is inside bathroom_1. Robot is close pot_2069. Robot is close floor_5. Robot is close bathtub_30. Robot is no longer inside dining_room_201.Robot is no longer close stovefan_288.
##############################
From agent.py
exp(dry_pasta_2042, bathtub_30)
Fail to find dry_pasta_2042 around bathtub_30. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_39)open_executor(curtain_39)exp(dry_pasta_2042, curtain_39)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(curtain_39)
Robot is inside bathroom_1. Robot is close pot_2069. Robot is close shower_38. Robot is close curtain_39. Robot is no longer close floor_5.Robot is no longer close bathtub_30.
##############################
From agent.py
open_executor(curtain_39)
Robot is inside bathroom_1. Robot is close pot_2069. Robot is close shower_38. Robot is close curtain_39. 
##############################
From agent.py
exp(dry_pasta_2042, curtain_39)
Fail to find dry_pasta_2042 around curtain_39. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the chicken and pasta.', '2. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2042_around_tray_296(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(dry_pasta,tray_instance)
        else:
            exp(dry_pasta,tray_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,tray_instance]=True
        close[tray_instance,dry_pasta]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_chicken_and_pasta_to_pot(chicken: item, pasta: item, pot: item):
    body:
        achieve inside(chicken, pot)
        # Place the chicken inside the pot
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_chicken_and_pasta_to_pot(chicken, dry_pasta, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_chicken_and_pasta_to_pot(chicken: item, pasta: item, pot: item):
    body:
        achieve inside(chicken, pot)
        # Place the chicken inside the pot
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select the dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_chicken_and_pasta_to_pot(chicken, dry_pasta, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(tray_296)exp(dry_pasta_2042, tray_296)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.Robot is no longer close shower_38.Robot is no longer close curtain_39.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close stove_2065.Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(pot_2069)putin_executor(food_chicken_2017, pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close pot_2069. Robot is no longer inside dining_room_201.Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
open_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close pot_2069. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer inside bathroom_1.Robot is no longer close stove_2065.Robot is no longer close pot_2069.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close pot_2069. Robot is no longer inside dining_room_201.Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_chicken_2017, pot_2069)
Robot is inside bathroom_1. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close pot_2069. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close dry_pasta_2042. Robot is no longer inside bathroom_1.Robot is no longer close food_chicken_2017.Robot is no longer close pot_2069.Robot is no longer close stove_2065.
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close dry_pasta_2042. Robot is close food_chicken_2017. Robot is close pot_2069. Robot is close stove_2065. Robot is no longer inside dining_room_201.Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot is inside bathroom_1. Robot is close dry_pasta_2042. Robot is close food_chicken_2017. Robot is close pot_2069. Robot is close stove_2065. dry_pasta_2042 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to ensure that the water in the pot is boiling and the stove is turned on for the cooking process to begin. The current actions only show that the chicken and pasta have been placed into the pot and the stove was turned on earlier, but there is no confirmation that the ingredients have started cooking. Ensure the stove is on and confirm the boiling process to complete the cooking of the chicken and pasta.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: look for dry_pasta_2042 around kitchen_counter_230.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for dry_pasta_2042 around cupboard_229.
Action 7: Walk to pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stovefan_288.
Action 13: look for dry_pasta_2042 around stovefan_288.
Action 14: Walk to bathtub_30.
Action 15: look for dry_pasta_2042 around bathtub_30.
Action 16: Walk to curtain_39.
Action 17: Open curtain_39.
Action 18: look for dry_pasta_2042 around curtain_39.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to fridge_289.
Action 23: Switch off fridge_289.
Action 24: Open fridge_289.
Action 25: look for food_chicken_2017 around fridge_289.
Action 26: Walk to pot_2069.
Action 27: Open pot_2069.
Action 28: Walk to food_chicken_2017.
Action 29: Grab food_chicken_2017.
Action 30: Walk to pot_2069.
Action 31: Put food_chicken_2017 into pot_2069.
Action 32: Walk to dry_pasta_2042.
Action 33: Grab dry_pasta_2042.
Action 34: Walk to pot_2069.
Action 35: Put dry_pasta_2042 into pot_2069.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_394(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==394
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_stove_on_and_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on

        observe(pot, "Check if the water in the pot is boiling")
        # Make sure the water is boiling in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        ensure_stove_on_and_boiling(pot, stove)
        # Ensure the stove is on and the water in the pot is boiling

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_stove_on_and_boiling(pot:item, stove:item):
    body:
        achieve is_on(stove)
        # Ensure the stove is on

        observe(pot, "Check if the water in the pot is boiling")
        # Make sure the water is boiling in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        ensure_stove_on_and_boiling(pot, stove)
        # Ensure the stove is on and the water in the pot is boiling

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if the water in the pot is boiling)
##############################
From agent.py
obs(pot_2069, Check if the water in the pot is boiling)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_chicken_2017. pot_2069 is close to character_65. pot_2069 is close to dry_pasta_2042. food_chicken_2017 is inside pot_2069. pot_2069 is inside bathroom_1. dry_pasta_2042 is inside pot_2069. pot_2069 is OPEN.
##############################
From agent.py
Human Instruction: The robot needs to confirm that the water in the pot is boiling to complete the cooking process for the chicken and pasta. Although the ingredients are in the pot and the stove was turned on earlier, there is no confirmation of boiling, which is essential for cooking. Ensure the water is boiling before moving to the next sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: look for dry_pasta_2042 around kitchen_counter_230.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for dry_pasta_2042 around cupboard_229.
Action 7: Walk to pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stovefan_288.
Action 13: look for dry_pasta_2042 around stovefan_288.
Action 14: Walk to bathtub_30.
Action 15: look for dry_pasta_2042 around bathtub_30.
Action 16: Walk to curtain_39.
Action 17: Open curtain_39.
Action 18: look for dry_pasta_2042 around curtain_39.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to fridge_289.
Action 23: Switch off fridge_289.
Action 24: Open fridge_289.
Action 25: look for food_chicken_2017 around fridge_289.
Action 26: Walk to pot_2069.
Action 27: Open pot_2069.
Action 28: Walk to food_chicken_2017.
Action 29: Grab food_chicken_2017.
Action 30: Walk to pot_2069.
Action 31: Put food_chicken_2017 into pot_2069.
Action 32: Walk to dry_pasta_2042.
Action 33: Grab dry_pasta_2042.
Action 34: Walk to pot_2069.
Action 35: Put dry_pasta_2042 into pot_2069.
Action 36: Observe around pot_2069 with the question of Check if the water in the pot is boiling.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior confirm_boiling_water(pot:item):
    body:
        observe(pot, "Check if the water in the pot is boiling")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot that is currently on the stove

        confirm_boiling_water(pot)
        # Confirm that the water in the pot is boiling to complete the cooking process

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_382(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==382
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#goal_representation

behavior confirm_boiling_water(pot:item):
    body:
        observe(pot, "Check if the water in the pot is boiling")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is currently on the stove with ID 2065

        confirm_boiling_water(pot)
        # Confirm that the water in the pot is boiling to complete the cooking process

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2000_around_coffee_table_2068(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(coffee_filter,coffee_table_instance)
        else:
            exp(coffee_filter,coffee_table_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,coffee_table_instance]=True
        close[coffee_table_instance,coffee_filter]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation
behavior confirm_boiling_water(pot:item, stove: item):
    body:
        assert on(pot, stove)
        observe(pot, "Check if the water in the pot is boiling")

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the pot on the stove with ID 2065 and confirm that the water is boiling

        confirm_boiling_water(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior check_water_boiling(pot:item):
    body:
        observe(pot, "Check if the water in the pot is boiling")
        # Observe to ensure the water in the pot is boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on the stove

        check_water_boiling(pot)
        # Check if the water in the pot is boiling

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior check_water_boiling(pot:item):
    body:
        observe(pot, "Check if the water in the pot is boiling")
        # Observe to ensure the water in the pot is boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2065)
        # Select the pot that is on the stove

        check_water_boiling(pot)
        # Check if the water in the pot is boiling

##############################
From agent.py-> find a plan in act()
obs(pot_2069, Check if the water in the pot is boiling)
##############################
From agent.py
obs(pot_2069, Check if the water in the pot is boiling)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_chicken_2017. pot_2069 is close to character_65. pot_2069 is close to dry_pasta_2042. food_chicken_2017 is inside pot_2069. pot_2069 is inside bathroom_1. dry_pasta_2042 is inside pot_2069. pot_2069 is OPEN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food(chicken_pasta) and id[chicken_pasta] == 2042
        # Select the prepared chicken pasta

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        place_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that contains cooked chicken pasta

        bind chicken_pasta: item where:
            is_food(chicken_pasta) and inside(chicken_pasta, pot)
        # Select the cooked chicken pasta inside the pot

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_chicken_pasta_on_plate(chicken_pasta, plate)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that contains cooked chicken pasta

        bind chicken_pasta: item where:
            is_food(chicken_pasta) and inside(chicken_pasta, pot)
        # Select the cooked chicken pasta inside the pot

        bind plate: item where:
            is_plate(plate)
        # Select a plate

        put_chicken_pasta_on_plate(chicken_pasta, plate)

##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. Robot is no longer inside bathroom_1.Robot is no longer close food_chicken_2017.Robot is no longer close dry_pasta_2042.Robot is no longer close pot_2069.Robot is no longer close stove_2065.
##############################
From agent.py
open_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: The target item, plate_1000, is located inside dining_room_201. It is on top of sink_231 or very close to it, making it easy to spot once you reach the dining room.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot needs to confirm that the water in the pot is boiling to complete the cooking process for the chicken and pasta. Although the ingredients are in the pot and the stove was turned on earlier, there is no confirmation of boiling, which is essential for cooking. Ensure the water is boiling before moving to the next sub-task.
The target item, plate_1000, is located inside dining_room_201. It is on top of sink_231 or very close to it, making it easy to spot once you reach the dining room.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: look for dry_pasta_2042 around kitchen_counter_230.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for dry_pasta_2042 around cupboard_229.
Action 7: Walk to pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stovefan_288.
Action 13: look for dry_pasta_2042 around stovefan_288.
Action 14: Walk to bathtub_30.
Action 15: look for dry_pasta_2042 around bathtub_30.
Action 16: Walk to curtain_39.
Action 17: Open curtain_39.
Action 18: look for dry_pasta_2042 around curtain_39.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to fridge_289.
Action 23: Switch off fridge_289.
Action 24: Open fridge_289.
Action 25: look for food_chicken_2017 around fridge_289.
Action 26: Walk to pot_2069.
Action 27: Open pot_2069.
Action 28: Walk to food_chicken_2017.
Action 29: Grab food_chicken_2017.
Action 30: Walk to pot_2069.
Action 31: Put food_chicken_2017 into pot_2069.
Action 32: Walk to dry_pasta_2042.
Action 33: Grab dry_pasta_2042.
Action 34: Walk to pot_2069.
Action 35: Put dry_pasta_2042 into pot_2069.
Action 36: Observe around pot_2069 with the question of Check if the water in the pot is boiling.
Action 37: Observe around pot_2069 with the question of Check if the water in the pot is boiling.
Action 38: Walk to dishwasher_1001.
Action 39: Open dishwasher_1001.

##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Find plate_1000. Find soap_2054. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close sink_231. Robot is no longer close dishwasher_1001.
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close pot_2069. Robot is no longer close kitchen_counter_230.Robot is no longer close sink_231.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close pot_2069. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close plate_1000. Robot is close sink_231. Robot is no longer close pot_2069.
##############################
From agent.py
put_executor(food_chicken_2017, plate_1000)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close plate_1000. Robot is close sink_231. food_chicken_2017 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to transfer the pasta from the pot to the plate. Ensure that both the chicken and pasta are placed on the plate together to complete the task.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for pot_2069 around kitchen_counter_230.
Action 3: look for dry_pasta_2042 around kitchen_counter_230.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for dry_pasta_2042 around cupboard_229.
Action 7: Walk to pot_2069.
Action 8: Grab pot_2069.
Action 9: Walk to faucet_43.
Action 10: Switch on faucet_43.
Action 11: Switch off faucet_43.
Action 12: Walk to stovefan_288.
Action 13: look for dry_pasta_2042 around stovefan_288.
Action 14: Walk to bathtub_30.
Action 15: look for dry_pasta_2042 around bathtub_30.
Action 16: Walk to curtain_39.
Action 17: Open curtain_39.
Action 18: look for dry_pasta_2042 around curtain_39.
Action 19: Walk to stove_2065.
Action 20: Put pot_2069 on stove_2065.
Action 21: Switch on stove_2065.
Action 22: Walk to fridge_289.
Action 23: Switch off fridge_289.
Action 24: Open fridge_289.
Action 25: look for food_chicken_2017 around fridge_289.
Action 26: Walk to pot_2069.
Action 27: Open pot_2069.
Action 28: Walk to food_chicken_2017.
Action 29: Grab food_chicken_2017.
Action 30: Walk to pot_2069.
Action 31: Put food_chicken_2017 into pot_2069.
Action 32: Walk to dry_pasta_2042.
Action 33: Grab dry_pasta_2042.
Action 34: Walk to pot_2069.
Action 35: Put dry_pasta_2042 into pot_2069.
Action 36: Observe around pot_2069 with the question of Check if the water in the pot is boiling.
Action 37: Observe around pot_2069 with the question of Check if the water in the pot is boiling.
Action 38: Walk to dishwasher_1001.
Action 39: Open dishwasher_1001.
Action 40: look for plate_1000 around dishwasher_1001.
Action 41: Walk to sink_231.
Action 42: look for plate_1000 around sink_231.
Action 43: Walk to food_chicken_2017.
Action 44: Grab food_chicken_2017.
Action 45: Walk to plate_1000.
Action 46: Put food_chicken_2017 on plate_1000.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_35(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate)
        # Ensure the chicken pasta is placed on the plate together

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_food(chicken_pasta) and id[chicken_pasta]==2017
        # Select the chicken pasta (considering ID refers to cooked item here)

        bind plate: item where:
            is_plate(plate) and id[plate]==1000
        # Select a specific plate to place the chicken pasta on

        put_chicken_pasta_on_plate(chicken_pasta, plate)
        # Place the chicken pasta on the plate

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve inside(chicken_pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot containing the chicken pasta

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the specific plate with ID 1000

        observe(pot, "Are both chicken and pasta in the pot")
        # Check if both chicken and pasta are in the pot

        put_chicken_pasta_on_plate(pot, plate)
        # Transfer the chicken pasta from the pot to the plate
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve inside(chicken_pasta, plate)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot containing the chicken pasta

        bind plate: item where:
            is_plate(plate) and id[plate] == 1000
        # Select the specific plate with ID 1000

        observe(pot, "Are both chicken and pasta in the pot")
        # Check if both chicken and pasta are in the pot

        put_chicken_pasta_on_plate(pot, plate)
        # Transfer the chicken pasta from the pot to the plate
 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)obs(pot_2069, Are both chicken and pasta in the pot)grab_executor(pot_2069)walk_executor(plate_1000)putin_executor(pot_2069, plate_1000)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close dry_pasta_2042. Robot is close pot_2069. Robot is no longer inside dining_room_201.Robot is no longer close plate_1000.Robot is no longer close food_chicken_2017.Robot is no longer close sink_231.
##############################
From agent.py
obs(pot_2069, Are both chicken and pasta in the pot)
Get this information:  pot_2069 is on stove_2065. pot_2069 is close to stove_2065. pot_2069 is close to food_chicken_2017. pot_2069 is close to dry_pasta_2042. pot_2069 is close to character_65. pot_2069 is inside bathroom_1. dry_pasta_2042 is inside pot_2069. pot_2069 is OPEN.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside bathroom_1. Robot is close stove_2065. Robot is close dry_pasta_2042. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close plate_1000. Robot is close sink_231. Robot is no longer inside bathroom_1.Robot is no longer close stove_2065.Robot is no longer close dry_pasta_2042.
##############################
From agent.py
putin_executor(pot_2069, plate_1000)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close plate_1000. Robot is close sink_231. pot_2069 released by right hand. 
##############################
