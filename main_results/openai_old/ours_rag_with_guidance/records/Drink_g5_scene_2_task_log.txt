From agent.py
Reset goals: The sub-goals are: 
['Use the pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_kitchen_counter_132(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(needle,kitchen_counter_instance)
        else:
            exp(needle,kitchen_counter_instance)
    eff:
        unknown[needle]=False
        close[needle,kitchen_counter_instance]=True
        close[kitchen_counter_instance,needle]=True
    

behavior find_pot_54_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(pot_2093, kitchen_counter_128)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, kitchen_counter_128)
Fail to find pot_2093 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to fill the pot_2093 with water before placing it on the stove and turning it on.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_2093 around kitchen_counter_128.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_walllamp_44(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==44
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(needle,walllamp_instance)
        else:
            exp(needle,walllamp_instance)
    eff:
        unknown[needle]=False
        close[needle,walllamp_instance]=True
        close[walllamp_instance,needle]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: You need to turn on the stove to start boiling the water in pot_2093.

The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for pot_2093 around kitchen_counter_128.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.
Action 14: Grab pot_2093.
Action 15: Walk to faucet_134.
Action 16: Switch on faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to stove_2090.
Action 19: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_dishwasher_143(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(needle,dishwasher_instance)
        else:
            exp(needle,dishwasher_instance)
    eff:
        unknown[needle]=False
        close[needle,dishwasher_instance]=True
        close[dishwasher_instance,needle]=True
    

behavior find_food_fruit_2056_around_fridge_140(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fruit,fridge_instance)
        else:
            exp(food_fruit,fridge_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,fridge_instance]=True
        close[fridge_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the specific pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select a faucet with ID 134 to fill the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_knifeblock_52(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(needle,knifeblock_instance)
        else:
            exp(needle,knifeblock_instance)
    eff:
        unknown[needle]=False
        close[needle,knifeblock_instance]=True
        close[knifeblock_instance,needle]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with the ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with the ID 134 to fill the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with the ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "use the pot to boil some water." ?
Answer: Fill the pot with water. Then put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_pot_54(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(needle,pot_instance)
        else:
            exp(needle,pot_instance)
    eff:
        unknown[needle]=False
        close[needle,pot_instance]=True
        close[pot_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_oil_2102(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(needle,oil_instance)
        else:
            exp(needle,oil_instance)
    eff:
        unknown[needle]=False
        close[needle,oil_instance]=True
        close[oil_instance,needle]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn the stove on to start boiling the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_fryingpan_2107(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2107
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(needle,fryingpan_instance)
        else:
            exp(needle,fryingpan_instance)
    eff:
        unknown[needle]=False
        close[needle,fryingpan_instance]=True
        close[fryingpan_instance,needle]=True
    

behavior find_food_apple_2043_around_food_orange_2008(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2008
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_apple,food_orange_instance)
        else:
            exp(food_apple,food_orange_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,food_orange_instance]=True
        close[food_orange_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_pot_54(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(needle,pot_instance)
        else:
            exp(needle,pot_instance)
    eff:
        unknown[needle]=False
        close[needle,pot_instance]=True
        close[pot_instance,needle]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and close_char(char, faucet)
        # Select a faucet to fill the pot

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water." ?
Answer: Fill the pot with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_cereal_2048_around_fridge_140(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the specific pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the specific faucet with ID 134

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water and then turn on the stove to boil it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_cupboard_131(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(needle,cupboard_instance)
        else:
            exp(needle,cupboard_instance)
    eff:
        unknown[needle]=False
        close[needle,cupboard_instance]=True
        close[cupboard_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select a faucet close to the pot to fill it with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_knifeblock_52(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(needle,knifeblock_instance)
        else:
            exp(needle,knifeblock_instance)
    eff:
        unknown[needle]=False
        close[needle,knifeblock_instance]=True
        close[knifeblock_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134 to fill the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "fill the pot with water and then turn on the stove to boil it." ?
Answer: Fill the pot with water. Put the pot on the stove. Turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, pot)
        # Select a faucet close to the pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_knifeblock_52(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(needle,knifeblock_instance)
        else:
            exp(needle,knifeblock_instance)
    eff:
        unknown[needle]=False
        close[needle,knifeblock_instance]=True
        close[knifeblock_instance,needle]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet nearby
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select a pot with ID 2093
        
        bind faucet: item where:
            is_faucet(faucet) 
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(stove)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, put it on the stove, and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_toaster_144(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(needle,toaster_instance)
        else:
            exp(needle,toaster_instance)
    eff:
        unknown[needle]=False
        close[needle,toaster_instance]=True
        close[toaster_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with the specified ID 2093

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_knifeblock_52(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(needle,knifeblock_instance)
        else:
            exp(needle,knifeblock_instance)
    eff:
        unknown[needle]=False
        close[needle,knifeblock_instance]=True
        close[knifeblock_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Put the pot on the stove.', '3. Turn on the stove to boil the water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_cutting_board_2080(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(needle,cutting_board_instance)
        else:
            exp(needle,cutting_board_instance)
    eff:
        unknown[needle]=False
        close[needle,cutting_board_instance]=True
        close[cutting_board_instance,needle]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Execute filling the pot with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        # Execute filling the pot with water

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_oil_2102(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(needle,oil_instance)
        else:
            exp(needle,oil_instance)
    eff:
        unknown[needle]=False
        close[needle,oil_instance]=True
        close[oil_instance,needle]=True
    

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_dresser_377(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(needle,dresser_instance)
        else:
            exp(needle,dresser_instance)
    eff:
        unknown[needle]=False
        close[needle,dresser_instance]=True
        close[dresser_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the pot on the stove." ?
Answer: Place the pot on the stove after filling it with water.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_sauce_2101_around_dishwasher_143(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(sauce,dishwasher_instance)
        else:
            exp(sauce,dishwasher_instance)
    eff:
        unknown[sauce]=False
        close[sauce,dishwasher_instance]=True
        close[dishwasher_instance,sauce]=True
    

behavior find_needle_2024_around_cutting_board_2080(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(needle,cutting_board_instance)
        else:
            exp(needle,cutting_board_instance)
    eff:
        unknown[needle]=False
        close[needle,cutting_board_instance]=True
        close[cutting_board_instance,needle]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093, which is already filled with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        # Execute placing the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093 which contains water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        # Execute placing the pot on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_sauce_2101_around_fridge_140(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_pot_54(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(needle,pot_instance)
        else:
            exp(needle,pot_instance)
    eff:
        unknown[needle]=False
        close[needle,pot_instance]=True
        close[pot_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_pot_54(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(needle,pot_instance)
        else:
            exp(needle,pot_instance)
    eff:
        unknown[needle]=False
        close[needle,pot_instance]=True
        close[pot_instance,needle]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        achieve is_on(stove)
        # Turn on the stove
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_pot_54(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(needle,pot_instance)
        else:
            exp(needle,pot_instance)
    eff:
        unknown[needle]=False
        close[needle,pot_instance]=True
        close[pot_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_needle_2024_around_bench_124(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(needle,bench_instance)
        else:
            exp(needle,bench_instance)
    eff:
        unknown[needle]=False
        close[needle,bench_instance]=True
        close[bench_instance,needle]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093 which you have already filled with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        # Execute placing the pot on the stove

#goal_representation_end

##############################
