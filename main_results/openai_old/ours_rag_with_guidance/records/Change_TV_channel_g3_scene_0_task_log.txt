From agent.py
Reset goals: The sub-goals are: 
['1. Find the couch and sit on it.', '2. Locate the remote control and turn on the TV.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_sittable_couch(couch: item):
    # Function to check if there is a sitting couch
    symbol is_sittable_couch=sittable(couch) and is_couch(couch)
    return is_sittable_couch

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and find_sittable_couch(couch):
            # If we have already found a sitable couch, we can directly approach it
            bind couch: item where:
                is_couch(couch) and find_sittable_couch(couch)
            achieve close_char(char, couch)
            achieve on_char(char, couch)

        else:
            # Check all couches in the scene that have not been visited
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch,"Check if this couch is sittable")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def find_sittable_couch(couch: item):
    # Function to check if there is a sitting couch
    symbol is_sittable_couch=sittable(couch) and is_couch(couch)
    return is_sittable_couch

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and find_sittable_couch(couch):
            # If we have already found a sitable couch, we can directly approach it
            bind couch: item where:
                is_couch(couch) and find_sittable_couch(couch)
            achieve close_char(char, couch)
            achieve on_char(char, couch)

        else:
            # Check all couches in the scene that have not been visited
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch,"Check if this couch is sittable")

##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)sit_executor(couch_352)
##############################
From agent.py
walk_executor(couch_352)
Find mat_401. Find remote_control_2052. Find clothes_jacket_2047. Find cat_2055. Find pillow_405. Find drawing_400. Find pillow_406. Find hairbrush_2002. Find vacuum_cleaner_2070. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is no longer inside bathroom_1.
##############################
From agent.py
sit_executor(couch_352)
Find headset_2062. Find hanger_363. Find hanger_374. Find drawing_404. Find keyboard_415. Find headset_2076. Find hanger_369. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find chair_356. Find book_2066. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_coffee_table_2068(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(phone,coffee_table_instance)
        else:
            exp(phone,coffee_table_instance)
    eff:
        unknown[phone]=False
        close[phone,coffee_table_instance]=True
        close[coffee_table_instance,phone]=True
    

behavior find_cd_player_2060_around_coffee_table_2068(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(cd_player,coffee_table_instance)
        else:
            exp(cd_player,coffee_table_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,coffee_table_instance]=True
        close[coffee_table_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control is located

behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)
        # Turn the TV on using the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television set

        locate_remote_control(remote_control)
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior locate_remote_control(remote_control:item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control is located

behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)
        # Turn the TV on using the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind tv: item where:
            is_television(tv)
        # Select the television set

        locate_remote_control(remote_control)
        turn_on_tv(tv, remote_control)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(remote_control_2052)obs(remote_control_2052, look around this place)standup_executor(char)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
From agent.py
walk_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Robot is no longer close mat_401.Robot is no longer facing television_410.
##############################
From agent.py
obs(remote_control_2052, look around this place)
Get this information:  remote_control_2052 is close to couch_352. remote_control_2052 is close to character_65. remote_control_2052 is inside home_office_319. remote_control_2052 is on couch_352. remote_control_2052 is OFF.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_pillow_405(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind pillow_instance:item where:
            is_pillow(pillow_instance) and id[pillow_instance]==405
        achieve close_char(char,pillow_instance)
        if can_open(pillow_instance):
            achieve_once open(pillow_instance)
            exp(pillow,pillow_instance)
        else:
            exp(pillow,pillow_instance)
    eff:
        unknown[pillow]=False
        close[pillow,pillow_instance]=True
        close[pillow_instance,pillow]=True
    

behavior find_wall_clock_249_around_walllamp_350(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind walllamp_instance:item where:
            is_walllamp(walllamp_instance) and id[walllamp_instance]==350
        achieve close_char(char,walllamp_instance)
        if can_open(walllamp_instance):
            achieve_once open(walllamp_instance)
            exp(wall_clock,walllamp_instance)
        else:
            exp(wall_clock,walllamp_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,walllamp_instance]=True
        close[walllamp_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
def has_switch_on_remote(remote:item):
    # Check if the remote has a switch Its presumed that if visited, it has a switch discovered previously
    return visited(remote)

behavior locate_remote_control(char:character, remote:item):
    body:
        achieve close_char(char, remote)
        # Approach the remote control

behavior turn_on_tv(char:character, remote:item, tv:item):
    body:
        assert has_switch(remote)
        achieve_once inhand(remote)
        # Temporarily hold the remote
        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Define the couch where youre sitting
        
        bind remote: item where:
            is_remote_control(remote)
        # Define the remote
        
        bind tv: item where:
            is_television(tv)
        # Define the television

        locate_remote_control(char, remote)
        turn_on_tv(char, remote, tv)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_switch_on_remote(remote:item):
    # Check if the remote has a switch Its presumed that if visited, it has a switch discovered previously
    return visited(remote)

behavior locate_remote_control(char:character, remote:item):
    body:
        achieve close_char(char, remote)
        # Approach the remote control

behavior turn_on_tv(char:character, remote:item, tv:item):
    body:
        assert has_switch(remote)
        achieve_once inhand(remote)
        # Temporarily hold the remote
        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Define the couch where youre sitting
        
        bind remote: item where:
            is_remote_control(remote)
        # Define the remote
        
        bind tv: item where:
            is_television(tv)
        # Define the television

        locate_remote_control(char, remote)
        turn_on_tv(char, remote, tv)

##############################
From agent.py-> find a plan in act()
grab_executor(remote_control_2052)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
grab_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Grabbing remote_control_2052 by right hand. 
##############################
From agent.py
walk_executor(television_248)
Find mat_236. Find drawing_241. Find drawing_242. Find drawing_243. Find phone_247. Find cd_2075. Find cd_player_2060. Find wall_clock_249. Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. Robot is no longer inside home_office_319.Robot is no longer close couch_352.
##############################
From agent.py
switchon_executor(television_248)
Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. 
##############################
