From agent.py
Reset goals: The sub-goals are: 
['1. Locate the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send the e-mail.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_chair_and_sit(chair: item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair that is in the home office

        observe(chair, "Identify the chair in front of the computer")
        locate_chair_and_sit(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and close(chair, is_computer)
        # Select the chair close to the computer in the home office

        locate_chair_and_sit(chair)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: is_computer; available variables: [Variable<chair: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_415_around_desk_104(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
behavior locate_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer in the home office

        bind computer: item where:
            is_computer(computer)
        # Select the computer

        locate_chair_and_sit(chair)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer; available variables: [Variable<chair: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#goal_representation
behavior locate_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer in the home office

        locate_chair_and_sit(chair)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. locate the chair in front of the computer in the home office and sit on it." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_and_sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair in front of the computer

        achieve close_char(char, computer)
        locate_and_sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_chair_and_sit(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in front of the computer in the home office
        
        achieve close_char(char, chair)
        # Get close to the chair

        locate_chair_and_sit(chair)
        # Sit on the chair

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Get close to the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse to turn on the computer.', '4. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_168_around_home_office_319(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_414(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Find chair_356. Find mouse_413. Find keyboard_415. Robot is inside home_office_319. Robot is close computer_417. Robot is no longer inside bathroom_1.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with this specific identifier

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with this specific identifier

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)

##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)sit_executor(chair_356)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer close computer_417.
##############################
From agent.py
sit_executor(chair_356)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_404. Find headset_2076. Find hanger_369. Find remote_control_2052. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find cat_2055. Find clothes_jacket_2047. Find book_2066. Find phone_2077. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior power_on_computer(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        # Turn on the computer using the mouse

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        power_on_computer(mouse, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior power_on_computer(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        # Turn on the computer using the mouse

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        power_on_computer(mouse, computer)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(computer_417)switchon_executor(computer_417)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
From agent.py
walk_executor(computer_417)
Robot is inside home_office_319. Robot is close computer_417. Robot is on chair_356. Robot is no longer close chair_356.Robot is no longer facing computer_417.
##############################
From agent.py
switchon_executor(computer_417)
Robot is inside home_office_319. Robot is close computer_417. Robot is on chair_356. 
##############################
From agent.py
Human Instruction: You need to touch the mouse to power on the computer. The action of switching on the computer was performed, but there is no indication that the mouse was touched to achieve this. Please ensure that the mouse is interacted with to complete the sub-task as specified.

The actions you have taken:
Action 1: Walk to computer_417.
Action 2: Walk to chair_356.
Action 3: Sit on chair_356.
Action 4: char stand up.
Action 5: Walk to computer_417.
Action 6: Switch on computer_417.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select the computer with ID 417

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select the computer with ID 417

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)
 
##############################
From agent.py-> find a plan in act()
walk_executor(mouse_413)touch_executor(mouse_413)
##############################
From agent.py
walk_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_356. Robot is no longer close computer_417.
##############################
From agent.py
touch_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_356. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_415_around_keyboard_415(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==415
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior type_email_on_keyboard(keyboard:item):
    body:
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select a keyboard

        achieve is_on(computer_417)
        # Ensure the computer is on before typing

        type_email_on_keyboard(keyboard)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer_417; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#goal_representation
 
behavior type_email_on_keyboard(keyboard:item, computer:item):
    body:
        achieve is_on(computer)
        # Ensure the computer is on before typing
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select a keyboard

        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select computer_417

        type_email_on_keyboard(keyboard, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior type_email_on_keyboard(keyboard:item, computer:item):
    body:
        achieve is_on(computer)
        # Ensure the computer is on before typing
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select a keyboard

        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select computer_417

        type_email_on_keyboard(keyboard, computer)

##############################
From agent.py-> find a plan in act()
walk_executor(computer_170)exp(keyboard_168, computer_170)walk_executor(keyboard_168)type_executor(keyboard_168)
##############################
From agent.py
walk_executor(computer_170)
Find mouse_166. Find chair_103. Find keyboard_168. Find hanger_112. Find hanger_115. Find hanger_113. Robot is inside bedroom_67. Robot is close computer_170. Robot is on chair_356. Robot is no longer inside home_office_319.Robot is no longer close mousepad_414.Robot is no longer close desk_357.Robot is no longer close mouse_413.
##############################
From agent.py
exp(keyboard_168, computer_170)
Find keyboard_168. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_168)type_executor(keyboard_168)
##############################
From agent.py
walk_executor(keyboard_168)
Find drawing_175. Robot is inside bedroom_67. Robot is close keyboard_168. Robot is close desk_104. Robot is on chair_356. Robot is no longer close computer_170.
##############################
From agent.py
type_executor(keyboard_168)
Robot is inside bedroom_67. Robot is close keyboard_168. Robot is close desk_104. Robot is on chair_356. 
##############################
