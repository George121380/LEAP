From agent.py
Reset goals: The sub-goals are: 
['1. Find the cat and bring it to the bathtub.', '2. Shower the cat in the bathtub.', '3. Use a towel to dry the cat.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2082_around_bed_376(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def is_cat_found(cat:item):
    # Function to determine if a cat has been found
    symbol is_found=visited(cat) and is_cat(cat)
    return is_found

behavior bring_cat_to_bathtub(cat:item, bathtub:item):
    body:
        achieve inside(cat, bathtub)
        # Bring the cat inside the bathtub

behavior __goal__():
    body:
        # Check if the cat has been found and can be brought to the bathtub
        if exists cat: item : is_cat(cat) and is_cat_found(cat):
            # If the cat is already found, bring it close
            bind cat: item where:
                is_cat(cat) and is_cat_found(cat)
            
            bind bathtub: item where:
                is_bathtub(bathtub)
            
            bring_cat_to_bathtub(cat, bathtub)
        
        else:
            # If cat is not yet found, check all unvisited areas
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Locate the cat to bring to the bathtub")


#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_cat_found(cat:item):
    # Function to determine if a cat has been found
    symbol is_found=visited(cat) and is_cat(cat)
    return is_found

behavior bring_cat_to_bathtub(cat:item, bathtub:item):
    body:
        achieve inside(cat, bathtub)
        # Bring the cat inside the bathtub

behavior __goal__():
    body:
        # Check if the cat has been found and can be brought to the bathtub
        if exists cat: item : is_cat(cat) and is_cat_found(cat):
            # If the cat is already found, bring it close
            bind cat: item where:
                is_cat(cat) and is_cat_found(cat)
            
            bind bathtub: item where:
                is_bathtub(bathtub)
            
            bring_cat_to_bathtub(cat, bathtub)
        
        else:
            # If cat is not yet found, check all unvisited areas
            foreach cat: item:
                if is_cat(cat) and not visited(cat):
                    observe(cat, "Locate the cat to bring to the bathtub")


##############################
From agent.py-> find a plan in act()
walk_executor(bed_376)exp(cat_2082, bed_376)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(bed_376)
Find mat_386. Find drawing_389. Find drawing_388. Find pillow_368. Find pillow_370. Robot is inside bedroom_327. Robot is close bed_376. Robot is close floor_330. Robot is close mat_386. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(cat_2082, bed_376)
Fail to find cat_2082 around bed_376. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_264)exp(cat_2082, bed_264)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(bed_264)
Find mat_237. Find clothes_dress_2075. Find pillow_240. Find clothes_jacket_2078. Find drawing_238. Find clothes_scarf_2079. Find pillow_239. Robot is inside bedroom_220. Robot is close bed_264. Robot is no longer inside bedroom_327.Robot is no longer close bed_376.Robot is no longer close floor_330.Robot is no longer close mat_386.
##############################
From agent.py
exp(cat_2082, bed_264)
Fail to find cat_2082 around bed_264. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathtub_297)exp(cat_2082, bathtub_297)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(bathtub_297)
Find drawing_296. Find towel_rack_299. Find towel_rack_300. Find basket_for_clothes_2040. Robot is inside bathroom_265. Robot is close bathtub_297. Robot is no longer inside bedroom_220.Robot is no longer close bed_264.
##############################
From agent.py
exp(cat_2082, bathtub_297)
Fail to find cat_2082 around bathtub_297. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_246)exp(cat_2082, photoframe_246)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(photoframe_246)
Find chair_263. Robot is inside bedroom_220. Robot is close bookshelf_260. Robot is close photoframe_246. Robot is no longer inside bathroom_265.Robot is no longer close bathtub_297.
##############################
From agent.py
exp(cat_2082, photoframe_246)
Fail to find cat_2082 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_125)exp(cat_2082, bench_125)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(bench_125)
Find drawing_118. Find mat_115. Robot is inside dining_room_1. Robot is close bench_125. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close photoframe_246.
##############################
From agent.py
exp(cat_2082, bench_125)
Fail to find cat_2082 around bench_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_303)exp(cat_2082, shower_303)walk_executor(cat_2082)obs(cat_2082, Locate the cat to bring to the bathtub)
##############################
From agent.py
walk_executor(shower_303)
Robot is inside bathroom_265. Robot is close shower_303. Robot is no longer inside dining_room_1.Robot is no longer close bench_125.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cat_2082 ?
Answer: The target item, cat_2082, is located inside the home office room, specifically on couch_192. To aid in its identification, look for a couch that is closely associated with cat_2082, as the two are very close to each other.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, cat_2082, is located inside the home office room, specifically on couch_192. To aid in its identification, look for a couch that is closely associated with cat_2082, as the two are very close to each other.

The actions you have taken:
Action 1: Walk to bed_376.
Action 2: look for cat_2082 around bed_376.
Action 3: Walk to bed_264.
Action 4: look for cat_2082 around bed_264.
Action 5: Walk to bathtub_297.
Action 6: look for cat_2082 around bathtub_297.
Action 7: Walk to photoframe_246.
Action 8: look for cat_2082 around photoframe_246.
Action 9: Walk to bench_125.
Action 10: look for cat_2082 around bench_125.
Action 11: Walk to shower_303.

##############################
From agent.py
exp(cat_2082, shower_303)
Fail to find cat_2082 around shower_303. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the cat and place it in the bathtub for a shower.', '2. Use a towel to dry the cat after the shower.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2082_around_couch_192(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
def is_target_cat_close_to_couch(couch:item, cat:item):
    symbol is_close=close(cat, couch) and is_cat(cat)
    return is_close

behavior place_cat_in_bathtub(cat:item, bathtub:item):
    body:
        achieve inside(cat, bathtub)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room
        
        bind couch: item where:
            is_couch(couch) and inside(couch, home_office) and id[couch]==192
        # Select couch in home office based on its id

        foreach obj: item:
            if is_cat(obj) and not visited(obj):
                observe(obj, "Check if it is cat_2082 and if it belongs to me")
        # Check for any cats I have not yet visited around the couch and see if its the target cat

        if exists cat: item : is_cat(cat) and is_target_cat_close_to_couch(couch, cat) and close_char(char, couch):
            bind cat: item where:
                is_cat(cat) and is_target_cat_close_to_couch(couch, cat)
            # Select the cat that is close to the couch
            
            bind bathtub: item where:
                is_bathtub(bathtub) and inside(bathtub, home_office)
            # Select a bathtub in the home office

            place_cat_in_bathtub(cat, bathtub)
            # Place the cat in the bathtub

        else:
            # Check all couches in the scene that have not been visited
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch,"Check is there a cat close to this couch")
                    # Observe whether each couch is close to my cat

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_target_cat_close_to_couch(couch:item, cat:item):
    symbol is_close=close(cat, couch) and is_cat(cat)
    return is_close

behavior place_cat_in_bathtub(cat:item, bathtub:item):
    body:
        achieve inside(cat, bathtub)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room
        
        bind couch: item where:
            is_couch(couch) and inside(couch, home_office) and id[couch]==192
        # Select couch in home office based on its id

        foreach obj: item:
            if is_cat(obj) and not visited(obj):
                observe(obj, "Check if it is cat_2082 and if it belongs to me")
        # Check for any cats I have not yet visited around the couch and see if its the target cat

        if exists cat: item : is_cat(cat) and is_target_cat_close_to_couch(couch, cat) and close_char(char, couch):
            bind cat: item where:
                is_cat(cat) and is_target_cat_close_to_couch(couch, cat)
            # Select the cat that is close to the couch
            
            bind bathtub: item where:
                is_bathtub(bathtub) and inside(bathtub, home_office)
            # Select a bathtub in the home office

            place_cat_in_bathtub(cat, bathtub)
            # Place the cat in the bathtub

        else:
            # Check all couches in the scene that have not been visited
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch,"Check is there a cat close to this couch")
                    # Observe whether each couch is close to my cat

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(cat_2082, couch_192)walk_executor(cat_2082)obs(cat_2082, Check if it is cat_2082 and if it belongs to me)walk_executor(couch_192)obs(couch_192, Check is there a cat close to this couch)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. Robot is no longer inside bathroom_265.Robot is no longer close shower_303.
##############################
From agent.py
exp(cat_2082, couch_192)
Find cat_2082. 
##############################
From agent.py-> find a plan in act()
walk_executor(cat_2082)obs(cat_2082, Check if it is cat_2082 and if it belongs to me)walk_executor(couch_192)obs(couch_192, Check is there a cat close to this couch)
##############################
From agent.py
walk_executor(cat_2082)
Robot is inside home_office_161. Robot is close couch_192. Robot is close cat_2082. 
##############################
From agent.py
obs(cat_2082, Check if it is cat_2082 and if it belongs to me)
Get this information:  cat_2082 is on couch_192. cat_2082 is inside home_office_161. cat_2082 is close to couch_192. cat_2082 is close to character_219.
##############################
From agent.py
walk_executor(couch_192)
Robot is inside home_office_161. Robot is close couch_192. Robot is no longer close cat_2082.
##############################
From agent.py
obs(couch_192, Check is there a cat close to this couch)
Get this information:  cat_2082 is on couch_192. couch_192 is close to floor_224. couch_192 is close to table_193. couch_192 is close to cat_2082. couch_192 is close to light_258. couch_192 is close to pillow_195. couch_192 is close to drawing_196. couch_192 is close to floor_164. couch_192 is close to floor_165. couch_192 is close to orchid_200. couch_192 is close to wall_232. couch_192 is close to wall_170. couch_192 is close to door_234. couch_192 is close to vacuum_cleaner_2094. couch_192 is close to wall_174. couch_192 is close to ceiling_179. couch_192 is close to doorjamb_182. couch_192 is close to television_216. couch_192 is close to character_219. couch_192 is inside home_office_161. couch_192 is CLEAN.
##############################
From agent.py
Human Instruction: You need to place the cat in the bathtub for the shower.

The actions you have taken:
Action 1: Walk to bed_376.
Action 2: look for cat_2082 around bed_376.
Action 3: Walk to bed_264.
Action 4: look for cat_2082 around bed_264.
Action 5: Walk to bathtub_297.
Action 6: look for cat_2082 around bathtub_297.
Action 7: Walk to photoframe_246.
Action 8: look for cat_2082 around photoframe_246.
Action 9: Walk to bench_125.
Action 10: look for cat_2082 around bench_125.
Action 11: Walk to shower_303.
Action 12: look for cat_2082 around shower_303.
Action 13: Walk to couch_192.
Action 14: look for cat_2082 around couch_192.
Action 15: Walk to cat_2082.
Action 16: Observe around cat_2082 with the question of Check if it is cat_2082 and if it belongs to me.
Action 17: Walk to couch_192.
Action 18: Observe around couch_192 with the question of Check is there a cat close to this couch.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_my_cat(cat:item):
    # Function to check if the found cat is the one that belongs to me
    symbol is_my_cat=exists c: item : is_cat(c) and id[c] == id[cat]
    return is_my_cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and is_my_cat(cat)
        # Bind the cat that belongs to me

        bind bathtub: item where:
            is_bathtub(bathtub)
        # Bind the bathtub

        achieve close(cat, bathtub)
        # Get the cat close to the bathtub

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_my_cat(cat:item):
    # Function to check if the found cat is the one that belongs to me
    symbol is_my_cat=exists c: item : is_cat(c) and id[c] == id[cat]
    return is_my_cat

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and is_my_cat(cat)
        # Bind the cat that belongs to me

        bind bathtub: item where:
            is_bathtub(bathtub)
        # Bind the bathtub

        achieve close(cat, bathtub)
        # Get the cat close to the bathtub

##############################
From agent.py-> find a plan in act()
walk_executor(cat_2082)grab_executor(cat_2082)walk_executor(bathtub_297)put_executor(cat_2082, bathtub_297)
##############################
From agent.py
walk_executor(cat_2082)
Robot is inside home_office_161. Robot is close couch_192. Robot is close cat_2082. 
##############################
From agent.py
grab_executor(cat_2082)
Robot is inside home_office_161. Robot is close couch_192. Robot is close cat_2082. Grabbing cat_2082 by right hand. 
##############################
From agent.py
walk_executor(bathtub_297)
Robot is inside bathroom_265. Robot is close cat_2082. Robot is close bathtub_297. Robot is no longer inside home_office_161.Robot is no longer close couch_192.
##############################
From agent.py
put_executor(cat_2082, bathtub_297)
Robot is inside bathroom_265. Robot is close cat_2082. Robot is close bathtub_297. cat_2082 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_300(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==300
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior dry_cat(towel:item, cat:item):
    body:
        achieve clean(cat)
        # The goal is to ensure the cat is clean after using the towel to dry it

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Identify the cat, which has been placed in the bathtub

        bind towel: item where:
            is_towel(towel)
        # Identify the towel to be used for drying the cat

        dry_cat(towel, cat)
        # Dry the cat using the towel

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior dry_cat(towel:item, cat:item):
    body:
        achieve clean(cat)
        # The goal is to ensure the cat is clean after using the towel to dry it

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Identify the cat, which has been placed in the bathtub

        bind towel: item where:
            is_towel(towel)
        # Identify the towel to be used for drying the cat

        dry_cat(towel, cat)
        # Dry the cat using the towel

##############################
From agent.py-> find a plan in act()
wash_executor(cat_2082)
##############################
From agent.py
wash_executor(cat_2082)
Robot is inside bathroom_265. Robot is close cat_2082. Robot is close bathtub_297. 
##############################
From agent.py
Human Instruction: You need to use a towel to dry the cat after the shower.

The actions you have taken:
Action 1: Walk to bed_376.
Action 2: look for cat_2082 around bed_376.
Action 3: Walk to bed_264.
Action 4: look for cat_2082 around bed_264.
Action 5: Walk to bathtub_297.
Action 6: look for cat_2082 around bathtub_297.
Action 7: Walk to photoframe_246.
Action 8: look for cat_2082 around photoframe_246.
Action 9: Walk to bench_125.
Action 10: look for cat_2082 around bench_125.
Action 11: Walk to shower_303.
Action 12: look for cat_2082 around shower_303.
Action 13: Walk to couch_192.
Action 14: look for cat_2082 around couch_192.
Action 15: Walk to cat_2082.
Action 16: Observe around cat_2082 with the question of Check if it is cat_2082 and if it belongs to me.
Action 17: Walk to couch_192.
Action 18: Observe around couch_192 with the question of Check is there a cat close to this couch.
Action 19: Walk to cat_2082.
Action 20: Grab cat_2082.
Action 21: Walk to bathtub_297.
Action 22: Put cat_2082 on bathtub_297.
Action 23: Wash cat_2082.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_300(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==300
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
bind bathtub: item where:
    is_bathtub(bathtub) and id[bathtub]==297

bind cat: item where:
    is_cat(cat) and close(cat, bathtub)

bind towel: item where:
    is_towel(towel)

behavior dry_cat(cat:item, towel:item, bathtub:item):
    body:
        achieve close(cat, bathtub)
        achieve_once inhand(towel)
        wipe(cat)
        achieve clean(cat)

behavior __goal__():
    body:
        dry_cat(cat, towel, bathtub)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BIND', 'bind') at line 5995, column 1.
Expected one of: 
	* CONTROLLER
	* DEF
	* IMPORT
	* _PRAGMA_KEYWORD
	* FEATURE
	* UNDIRECTED_GENERATOR
	* INCLUDE
	* _NEWLINE
	* $END
	* INIT
	* GENERATOR
	* BEHAVIOR
	* OBJECTS
	* GOAL
	* TYPEDEF
	* DOMAIN
Previous tokens: [Token('_NEWLINE', '\n    \n\n#exp_behavior_end\n\n#goal_representation\n \n')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_rack_300_around_towel_rack_300(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==300
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

behavior find_towel_2083_around_towel_rack_300(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==300
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation
 
behavior dry_cat(cat:item, towel:item, bathtub:item):
    body:
        achieve close(cat, bathtub)
        achieve_once inhand(towel)
        wipe(cat)
        achieve clean(cat)

behavior __goal__():
    body:
        bind bathtub: item where:
            is_bathtub(bathtub) and id[bathtub]==297

        bind cat: item where:
            is_cat(cat) and close(cat, bathtub)

        bind towel: item where:
            is_towel(towel)

        dry_cat(cat, towel, bathtub)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior dry_cat(cat:item, towel:item, bathtub:item):
    body:
        achieve close(cat, bathtub)
        achieve_once inhand(towel)
        wipe(cat)
        achieve clean(cat)

behavior __goal__():
    body:
        bind bathtub: item where:
            is_bathtub(bathtub) and id[bathtub]==297

        bind cat: item where:
            is_cat(cat) and close(cat, bathtub)

        bind towel: item where:
            is_towel(towel)

        dry_cat(cat, towel, bathtub)

##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_300)exp(towel_2083, towel_rack_300)walk_executor(towel_2083)grab_executor(towel_2083)walk_executor(cat_2082)wipe_executor(cat_2082)
##############################
From agent.py
walk_executor(towel_rack_300)
Robot is inside bathroom_265. Robot is close towel_rack_300. Robot is no longer close bathtub_297.Robot is no longer close cat_2082.
##############################
From agent.py
exp(towel_2083, towel_rack_300)
Fail to find towel_2083 around towel_rack_300. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_299)exp(towel_2083, towel_rack_299)walk_executor(towel_2083)grab_executor(towel_2083)walk_executor(cat_2082)wipe_executor(cat_2082)
##############################
From agent.py
walk_executor(towel_rack_299)
Robot is inside bathroom_265. Robot is close towel_rack_299. Robot is no longer close towel_rack_300.
##############################
From agent.py
exp(towel_2083, towel_rack_299)
Fail to find towel_2083 around towel_rack_299. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_counter_306)exp(towel_2083, bathroom_counter_306)walk_executor(towel_2083)grab_executor(towel_2083)walk_executor(cat_2082)wipe_executor(cat_2082)
##############################
From agent.py
walk_executor(bathroom_counter_306)
Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is no longer close towel_rack_299.
##############################
From agent.py
exp(towel_2083, bathroom_counter_306)
Fail to find towel_2083 around bathroom_counter_306. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_298)exp(towel_2083, towel_rack_298)walk_executor(towel_2083)grab_executor(towel_2083)walk_executor(cat_2082)wipe_executor(cat_2082)
##############################
From agent.py
walk_executor(towel_rack_298)
Find towel_2083. Robot is inside bathroom_265. Robot is close towel_rack_298. Robot is no longer close bathroom_counter_306.
##############################
From agent.py
exp(towel_2083, towel_rack_298)
Find towel_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_2083)grab_executor(towel_2083)walk_executor(cat_2082)wipe_executor(cat_2082)
##############################
From agent.py
walk_executor(towel_2083)
Robot is inside bathroom_265. Robot is close towel_rack_298. Robot is close towel_2083. 
##############################
From agent.py
grab_executor(towel_2083)
Robot is inside bathroom_265. Robot is close towel_rack_298. Robot is close towel_2083. Grabbing towel_2083 by right hand. 
##############################
From agent.py
walk_executor(cat_2082)
Robot is inside home_office_161. Robot is close towel_2083. Robot is close bathtub_297. Robot is close cat_2082. Robot is no longer inside bathroom_265.Robot is no longer close towel_rack_298.
##############################
From agent.py
wipe_executor(cat_2082)
Robot is inside home_office_161. Robot is close towel_2083. Robot is close bathtub_297. Robot is close cat_2082. 
##############################
