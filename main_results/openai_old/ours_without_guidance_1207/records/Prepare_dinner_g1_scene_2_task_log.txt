From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_mat_386_around_kitchen_counter_132(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

behavior find_food_rice_2067_around_kitchen_counter_129(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_rice(pot:item, stove:item):
    body:
        achieve inside(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # Turn on faucet to add water
            
            achieve has_water(pot)
            # Ensure that the pot has water

            achieve_once is_off(faucet)

        achieve plugged(stove)
        # Ensure the stove is plugged in
        
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        boil_rice(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2093_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_mat_115_around_stove_2090(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(mat,stove_instance)
        else:
            exp(mat,stove_instance)
    eff:
        unknown[mat]=False
        close[mat,stove_instance]=True
        close[stove_instance,mat]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_rice(pot:item, stove:item, sink:item):
    body:
        achieve inside(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # Turn on faucet to add water
            
            achieve has_water(pot)
            # Ensure that the pot has water

            achieve_once is_off(faucet)

        achieve plugged(stove)
        # Ensure the stove is plugged in
        
        achieve is_on(stove)
        # Ensure the stove is on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        boil_rice(pot, stove, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_132(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_mat_201_around_kitchen_counter_132(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_food_rice_2067_around_kitchen_counter_132(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_filled_pot(pot:item):
    # Function to check if a pot is filled with water
    symbol filled_with_water=has_water(pot)
    return filled_with_water

def is_stove_available(stove:item):
    # Function to determine if there is a stove available to use
    return is_on(stove) or is_off(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve has_water(pot) 
        # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) 
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) 
        # Turn the stove on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_filled_pot(pot):
            fill_pot_with_water(pot, faucet)
        
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_filled_pot(pot:item):
    # Function to check if a pot is filled with water
    symbol filled_with_water=has_water(pot)
    return filled_with_water

def is_stove_available(stove:item):
    # Function to determine if there is a stove available to use
    return is_on(stove) or is_off(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inhand(pot)
        achieve has_water(pot) 
        # Ensure the pot is filled with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) 
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) 
        # Turn the stove on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_filled_pot(pot):
            fill_pot_with_water(pot, faucet)
        
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(pot_2093, kitchen_counter_132)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, kitchen_counter_132)
Failed to find pot_2093 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: The robot needs to fill the pot with water to properly boil the rice. After ensuring the pot contains water, it should follow through with placing it on the stove and turning on the stove to complete the task of boiling rice.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_mat_201_around_toilet_302(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==302
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(mat,toilet_instance)
        else:
            exp(mat,toilet_instance)
    eff:
        unknown[mat]=False
        close[mat,toilet_instance]=True
        close[toilet_instance,mat]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_clothes_pants_2113_around_washing_machine_2041(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Check if the sink has a faucet nearby
    symbol faucet_exists = exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
         Ensure the pot is positioned inside the sink for filling

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
             Turn on the faucet to fill the pot with water

        achieve has_water(pot)
         Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
             Turn off the faucet once the pot is filled

behavior prepare_stove_for_cooking(stove:item, pot:item):
    body:
        achieve on(pot, stove)
         Place the pot on the stove

        achieve is_on(stove)
         Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
         Select the pot with the specified ID

        bind sink: item where:
            is_sink(sink) and id[sink] == 134
         Select the sink with the specified ID

        fill_pot_with_water(pot, sink)
         Fill the selected pot with water at the selected sink

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
         Select the stove with the specified ID

        prepare_stove_for_cooking(stove, pot)
         Place the pot on the stove and turn it on

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_INDENT', '         ') at line 5946, column 39.
Expected one of: 
	* BATCHED
	* CRITICAL
	* VARNAME
	* EXISTS
	* STAR
	* SYMBOL
	* UNTRACK
	* IMAG_NUMBER
	* DO
	* FALSE
	* TILDE
	* DEC_NUMBER
	* WHILE
	* FORALL
	* NOT
	* ACHIEVE
	* ALTERNATIVE
	* FINDALL
	* OCT_NUMBER
	* BIN_NUMBER
	* _DEDENT
	* PACHIEVE_ONCE
	* BIND
	* ASSERT_ONCE
	* _LLSQB
	* STRING
	* LONG_STRING
	* PLUS
	* PACHIEVE
	* UNORDERED
	* LSQB
	* NONE
	* LPAR
	* COMMIT
	* COLON
	* FLOAT_NUMBER
	* ACHIEVE_ONCE
	* PACHIEVE_HOLD
	* ACHIEVE_HOLD
	* FOREACH
	* SEQUENTIAL
	* HEX_NUMBER
	* ASSERT
	* LET
	* IF
	* PREAMBLE
	* TRUE
	* PROMOTABLE
	* PASS
	* ASSERT_HOLD
	* RETURN
	* MINUS
	* ELLIPSIS
	* FINDONE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_apple_2043_around_fridge_140(food_apple:item):
    goal: not unknown(food_apple)
    body:
        assert is_food_apple(food_apple)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_apple,fridge_instance)
        else:
            exp(food_apple,fridge_instance)
    eff:
        unknown[food_apple]=False
        close[food_apple,fridge_instance]=True
        close[fridge_instance,food_apple]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_clothes_pants_2113_around_washing_machine_2041(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Check if the sink has a faucet nearby
    symbol faucet_exists = exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Ensure the pot is positioned inside the sink for filling

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet once the pot is filled

behavior prepare_stove_for_cooking(stove:item, pot:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with the specified ID

        bind sink: item where:
            is_sink(sink) and id[sink] == 134
        # Select the sink with the specified ID

        fill_pot_with_water(pot, sink)
        # Fill the selected pot with water at the selected sink

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with the specified ID

        prepare_stove_for_cooking(stove, pot)
        # Place the pot on the stove and turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_292_around_bathtub_297(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(mat,bathtub_instance)
        else:
            exp(mat,bathtub_instance)
    eff:
        unknown[mat]=False
        close[mat,bathtub_instance]=True
        close[bathtub_instance,mat]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    # Fill the pot with water by placing it under the faucet
    body:
        achieve_once inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)
        else:
            achieve has_water(pot)

behavior boil_rice_on_stove(pot:item, stove:item):
    # Ensure the pot is on the stove and the stove is turned on
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_pot_with_water(pot, sink)
        boil_rice_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    # Fill the pot with water by placing it under the faucet
    body:
        achieve_once inside(pot, sink)
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)
        else:
            achieve has_water(pot)

behavior boil_rice_on_stove(pot:item, stove:item):
    # Ensure the pot is on the stove and the stove is turned on
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_pot_with_water(pot, sink)
        boil_rice_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
putin_executor(pot_2093, sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close pot_2093.Robot is no longer close sink_133.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure the pot contains water before putting it on the stove. Currently, it is unclear whether the pot was filled with water as required for boiling rice. Make sure the pot is properly filled with water by leaving it under a running faucet until full before placing it back on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.
Action 14: Grab pot_2093.
Action 15: Walk to sink_133.
Action 16: Put pot_2093 into sink_133.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Walk to pot_2093.
Action 20: Grab pot_2093.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_hat_2076_around_bathroom_cabinet_305(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(clothes_hat,bathroom_cabinet_instance)
        else:
            exp(clothes_hat,bathroom_cabinet_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,clothes_hat]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_bread_2016_around_fridge_140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_pot_has_water(pot:item):
    # Function to check if the pot has water
    symbol pot_with_water=has_water(pot)
    return pot_with_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once inside(pot, faucet)
        # Place the pot under the faucet

        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water
        
        achieve_once is_off(faucet)
        # Turn off the faucet after filling

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the pot of water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and is_food_rice(pot)
        # Select the rice pot

        if not ensure_pot_has_water(pot):
            bind faucet: item where:
                is_faucet(faucet)
            # Select the faucet
            fill_pot_with_water(pot, faucet)

        bind stove: item where:
            is_stove(stove)
        # Select the stove
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink
    
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if the sink has one

        achieve has_water(pot)
        # Fill pot with water
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet if it was turned on

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve has_water(pot) 
        # Ensure pot has water
        achieve_once inside(rice, pot)
        # Put the rice inside the pot
        achieve on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove) 
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot
        bind sink: item where:
            is_sink(sink) and is_kitchen_counter(sink)
        # Select a kitchen sink
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        fill_pot_with_water(pot, sink)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_clothes_hat_2076_around_couch_192(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==192
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(clothes_hat,couch_instance)
        else:
            exp(clothes_hat,couch_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,couch_instance]=True
        close[couch_instance,clothes_hat]=True
    

behavior find_clothes_pants_2113_around_washing_machine_2041(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_pants,washing_machine_instance)
        else:
            exp(clothes_pants,washing_machine_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,washing_machine_instance]=True
        close[washing_machine_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink: item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet near the sink

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<pot: item>, Variable<faucet: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#goal_representation
 
def has_faucet(sink: item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet near the sink

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<pot: item>, Variable<faucet: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_clothes_socks_2115_around_washing_machine_2041(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_socks,washing_machine_instance)
        else:
            exp(clothes_socks,washing_machine_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,washing_machine_instance]=True
        close[washing_machine_instance,clothes_socks]=True
    

#goal_representation
 
def has_faucet(sink: item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet near the sink

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink: item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet near the sink

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close stove_2090.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure that the pot is filled with water under a running faucet until full before placing it back on the stove to boil the rice. Make sure the pot contains water before turning the stove on.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.
Action 14: Grab pot_2093.
Action 15: Walk to sink_133.
Action 16: Put pot_2093 into sink_133.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Walk to pot_2093.
Action 20: Grab pot_2093.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_2093 on stove_2090.
Action 25: Walk to faucet_134.
Action 26: Switch on faucet_134.
Action 27: Walk to pot_2093.
Action 28: Grab pot_2093.
Action 29: Walk to faucet_134.
Action 30: Switch off faucet_134.
Action 31: Walk to stove_2090.
Action 32: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Ensure the pot is placed inside the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water
        
        achieve has_water(pot)
        # Ensure that the pot has water inside
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot without water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_pot_with_water(pot, sink)
        # Fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        start_stove(stove)
        # Start the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Ensure the pot is placed inside the sink
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water
        
        achieve has_water(pot)
        # Ensure that the pot has water inside
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot without water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        fill_pot_with_water(pot, sink)
        # Fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        start_stove(stove)
        # Start the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
putin_executor(pot_2093, sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close pot_2093.Robot is no longer close sink_133.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: The pot has been moved to the stove, but the faucet was never confirmed to be on while the pot was inside the sink, and there is no indication that the pot has been filled with water. You need to ensure the pot contains water before proceeding to boil the rice.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for pot_2093 around kitchen_counter_132.
Action 3: Walk to stove_2090.
Action 4: Open stove_2090.
Action 5: look for pot_2093 around stove_2090.
Action 6: Walk to pot_2093.
Action 7: Grab pot_2093.
Action 8: Walk to faucet_134.
Action 9: Switch off faucet_134.
Action 10: Walk to stove_2090.
Action 11: Put pot_2093 on stove_2090.
Action 12: Close stove_2090.
Action 13: Switch on stove_2090.
Action 14: Grab pot_2093.
Action 15: Walk to sink_133.
Action 16: Put pot_2093 into sink_133.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Walk to pot_2093.
Action 20: Grab pot_2093.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_2093 on stove_2090.
Action 25: Walk to faucet_134.
Action 26: Switch on faucet_134.
Action 27: Walk to pot_2093.
Action 28: Grab pot_2093.
Action 29: Walk to faucet_134.
Action 30: Switch off faucet_134.
Action 31: Walk to stove_2090.
Action 32: Put pot_2093 on stove_2090.
Action 33: Grab pot_2093.
Action 34: Walk to sink_133.
Action 35: Put pot_2093 into sink_133.
Action 36: Walk to faucet_134.
Action 37: Switch on faucet_134.
Action 38: Walk to pot_2093.
Action 39: Grab pot_2093.
Action 40: Walk to faucet_134.
Action 41: Switch off faucet_134.
Action 42: Walk to stove_2090.
Action 43: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_rice_in_pot(pot:item, stove:item, sink:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                # Fill the pot with water
                achieve has_water(pot)
                achieve_once is_off(faucet)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind sink: item where:
            is_sink(sink) and id[sink]==133
        # Select the sink with ID 133

        boil_rice_in_pot(pot, stove, sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior boil_rice_in_pot(pot:item, stove:item, sink:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, sink)
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                # Fill the pot with water
                achieve has_water(pot)
                achieve_once is_off(faucet)
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind sink: item where:
            is_sink(sink) and id[sink]==133
        # Select the sink with ID 133

        boil_rice_in_pot(pot, stove, sink)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
putin_executor(pot_2093, sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close pot_2093.Robot is no longer close sink_133.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
