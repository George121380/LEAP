From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients needed for fried rice with egg.', '2. Cook rice and scramble the egg.', '3. Fry the cooked rice with the scrambled egg and any other ingredients.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_cupboard_118(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_onion_2009_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_117(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

def has_ingredient_on_kitchen_counter(ingredient:item):
    # Function to check if there is an ingredient on the kitchen counter
    symbol has_ingredient=exists o: item : is_food(o) and on(o, ingredient)
    return has_ingredient

def is_kitchen_counter(counter:item):
    # Function to check if an item is a kitchen counter
    symbol is_counter=is_kitchen_counter(counter)
    return is_counter

behavior __goal__():
    body:
        foreach counter: item where:
            is_kitchen_counter(counter) and not visited(counter):
            observe(counter,"Check for ingredients on the kitchen counter")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('WHERE', 'where') at line 5586, column 31.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_salt_2109_around_cupboard_118(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_onion_2009_around_kitchen_counter_123(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
def has_ingredient_on_kitchen_counter(counter:item):
    # Function to check if there is an ingredient on the kitchen counter
    symbol has_ingredient=exists o: item : is_food(o) and on(o, counter)
    return has_ingredient

def is_kitchen_counter(counter:item):
    # Function to check if an item is a kitchen counter
    return is_kitchen_counter(counter)

behavior __goal__():
    body:
        foreach counter: item:
            if is_kitchen_counter(counter) and not visited(counter):
                observe(counter,"Check for ingredients on the kitchen counter")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_ingredient_on_kitchen_counter(counter:item):
    # Function to check if there is an ingredient on the kitchen counter
    symbol has_ingredient=exists o: item : is_food(o) and on(o, counter)
    return has_ingredient

def is_kitchen_counter(counter:item):
    # Function to check if an item is a kitchen counter
    return is_kitchen_counter(counter)

behavior __goal__():
    body:
        foreach counter: item:
            if is_kitchen_counter(counter) and not visited(counter):
                observe(counter,"Check for ingredients on the kitchen counter")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Check for ingredients on the kitchen counter)walk_executor(kitchen_counter_122)obs(kitchen_counter_122, Check for ingredients on the kitchen counter)walk_executor(kitchen_counter_123)obs(kitchen_counter_123, Check for ingredients on the kitchen counter)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
obs(kitchen_counter_119, Check for ingredients on the kitchen counter)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
obs(kitchen_counter_122, Check for ingredients on the kitchen counter)
Get this information:  fryingpan_2154 is on kitchen_counter_122. toaster_132 is on kitchen_counter_122. kitchen_counter_122 is close to tray_128. kitchen_counter_122 is close to dishwasher_129. kitchen_counter_122 is close to coffe_maker_130. kitchen_counter_122 is close to trashcan_99. kitchen_counter_122 is close to toaster_132. kitchen_counter_122 is close to wall_68. kitchen_counter_122 is close to wall_64. kitchen_counter_122 is close to microwave_135. kitchen_counter_122 is close to spectacles_2153. kitchen_counter_122 is close to fryingpan_2154. kitchen_counter_122 is close to walllamp_139. kitchen_counter_122 is close to walllamp_141. kitchen_counter_122 is close to floor_46. kitchen_counter_122 is close to pot_78. kitchen_counter_122 is close to floor_51. kitchen_counter_122 is close to cupboard_118. kitchen_counter_122 is close to stovefan_125. kitchen_counter_122 is close to oven_127. kitchen_counter_122 is close to character_240. spectacles_2153 is on kitchen_counter_122. microwave_135 is on kitchen_counter_122. kitchen_counter_122 is inside dining_room_41. coffe_maker_130 is on kitchen_counter_122. kitchen_counter_122 is DIRTY. kitchen_counter_122 is CLOSED.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
obs(kitchen_counter_123, Check for ingredients on the kitchen counter)
Get this information:  kitchen_counter_123 is inside dining_room_41. oil_2149 is on kitchen_counter_123. knife_2035 is on kitchen_counter_123. food_kiwi_2054 is on kitchen_counter_123. food_orange_2027 is on kitchen_counter_123. kitchen_counter_123 is on floor_45. kitchen_counter_123 is close to desk_193. kitchen_counter_123 is close to floor_163. kitchen_counter_123 is close to wall_67. kitchen_counter_123 is close to floor_164. kitchen_counter_123 is close to oil_2149. kitchen_counter_123 is close to food_kiwi_2054. kitchen_counter_123 is close to food_orange_2027. kitchen_counter_123 is close to floor_45. kitchen_counter_123 is close to wall_175. kitchen_counter_123 is close to cpuscreen_210. kitchen_counter_123 is close to keyboard_211. kitchen_counter_123 is close to knife_2035. kitchen_counter_123 is close to cupboard_117. kitchen_counter_123 is close to tray_2068. kitchen_counter_123 is close to kitchen_counter_119. kitchen_counter_123 is close to sink_120. kitchen_counter_123 is close to character_240. tray_2068 is on kitchen_counter_123. kitchen_counter_123 is CLEAN. kitchen_counter_123 is CLOSED.
##############################
From agent.py
Human Instruction: You need to ensure all specific ingredients for making fried rice with egg have been identified. While you have gathered several items, it is not clear if you found all necessary ingredients like rice, eggs, and any vegetables or additional flavors typically used in fried rice. Re-check each kitchen counter to confirm the presence of these key ingredients.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_food_salt_2041(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_salt,food_salt_instance)
        else:
            exp(food_salt,food_salt_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,food_salt_instance]=True
        close[food_salt_instance,food_salt]=True
    

behavior find_sauce_2148_around_cupboard_117(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(sauce,cupboard_instance)
        else:
            exp(sauce,cupboard_instance)
    eff:
        unknown[sauce]=False
        close[sauce,cupboard_instance]=True
        close[cupboard_instance,sauce]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def is_ingredient_found(ingredient:item):
    # Function to check if the ingredient has been found
    symbol ingredient_found=visited(ingredient)
    return ingredient_found

behavior find_ingredients(ingredient:item, kitchen_counter:item):
    body:
        if not is_ingredient_found(ingredient):
            observe(kitchen_counter, "Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        foreach kitchen_counter: item:
            if is_kitchen_counter(kitchen_counter):
                # Check each kitchen counter for the necessary ingredients
                find_ingredients(rice, kitchen_counter)
                find_ingredients(egg, kitchen_counter)
                find_ingredients(vegetables, kitchen_counter)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_ingredient_found(ingredient:item):
    # Function to check if the ingredient has been found
    symbol ingredient_found=visited(ingredient)
    return ingredient_found

behavior find_ingredients(ingredient:item, kitchen_counter:item):
    body:
        if not is_ingredient_found(ingredient):
            observe(kitchen_counter, "Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces")

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        foreach kitchen_counter: item:
            if is_kitchen_counter(kitchen_counter):
                # Check each kitchen counter for the necessary ingredients
                find_ingredients(rice, kitchen_counter)
                find_ingredients(egg, kitchen_counter)
                find_ingredients(vegetables, kitchen_counter)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)walk_executor(kitchen_counter_122)obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)walk_executor(kitchen_counter_123)obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
obs(kitchen_counter_119, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(kitchen_counter_122)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  fryingpan_2154 is on kitchen_counter_122. toaster_132 is on kitchen_counter_122. kitchen_counter_122 is close to tray_128. kitchen_counter_122 is close to dishwasher_129. kitchen_counter_122 is close to coffe_maker_130. kitchen_counter_122 is close to trashcan_99. kitchen_counter_122 is close to toaster_132. kitchen_counter_122 is close to wall_68. kitchen_counter_122 is close to wall_64. kitchen_counter_122 is close to microwave_135. kitchen_counter_122 is close to spectacles_2153. kitchen_counter_122 is close to fryingpan_2154. kitchen_counter_122 is close to walllamp_139. kitchen_counter_122 is close to walllamp_141. kitchen_counter_122 is close to floor_46. kitchen_counter_122 is close to pot_78. kitchen_counter_122 is close to floor_51. kitchen_counter_122 is close to cupboard_118. kitchen_counter_122 is close to stovefan_125. kitchen_counter_122 is close to oven_127. kitchen_counter_122 is close to character_240. spectacles_2153 is on kitchen_counter_122. microwave_135 is on kitchen_counter_122. kitchen_counter_122 is inside dining_room_41. coffe_maker_130 is on kitchen_counter_122. kitchen_counter_122 is DIRTY. kitchen_counter_122 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  fryingpan_2154 is on kitchen_counter_122. toaster_132 is on kitchen_counter_122. kitchen_counter_122 is close to tray_128. kitchen_counter_122 is close to dishwasher_129. kitchen_counter_122 is close to coffe_maker_130. kitchen_counter_122 is close to trashcan_99. kitchen_counter_122 is close to toaster_132. kitchen_counter_122 is close to wall_68. kitchen_counter_122 is close to wall_64. kitchen_counter_122 is close to microwave_135. kitchen_counter_122 is close to spectacles_2153. kitchen_counter_122 is close to fryingpan_2154. kitchen_counter_122 is close to walllamp_139. kitchen_counter_122 is close to walllamp_141. kitchen_counter_122 is close to floor_46. kitchen_counter_122 is close to pot_78. kitchen_counter_122 is close to floor_51. kitchen_counter_122 is close to cupboard_118. kitchen_counter_122 is close to stovefan_125. kitchen_counter_122 is close to oven_127. kitchen_counter_122 is close to character_240. spectacles_2153 is on kitchen_counter_122. microwave_135 is on kitchen_counter_122. kitchen_counter_122 is inside dining_room_41. coffe_maker_130 is on kitchen_counter_122. kitchen_counter_122 is DIRTY. kitchen_counter_122 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_122, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  fryingpan_2154 is on kitchen_counter_122. toaster_132 is on kitchen_counter_122. kitchen_counter_122 is close to tray_128. kitchen_counter_122 is close to dishwasher_129. kitchen_counter_122 is close to coffe_maker_130. kitchen_counter_122 is close to trashcan_99. kitchen_counter_122 is close to toaster_132. kitchen_counter_122 is close to wall_68. kitchen_counter_122 is close to wall_64. kitchen_counter_122 is close to microwave_135. kitchen_counter_122 is close to spectacles_2153. kitchen_counter_122 is close to fryingpan_2154. kitchen_counter_122 is close to walllamp_139. kitchen_counter_122 is close to walllamp_141. kitchen_counter_122 is close to floor_46. kitchen_counter_122 is close to pot_78. kitchen_counter_122 is close to floor_51. kitchen_counter_122 is close to cupboard_118. kitchen_counter_122 is close to stovefan_125. kitchen_counter_122 is close to oven_127. kitchen_counter_122 is close to character_240. spectacles_2153 is on kitchen_counter_122. microwave_135 is on kitchen_counter_122. kitchen_counter_122 is inside dining_room_41. coffe_maker_130 is on kitchen_counter_122. kitchen_counter_122 is DIRTY. kitchen_counter_122 is CLOSED.
##############################
From agent.py
walk_executor(kitchen_counter_123)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  kitchen_counter_123 is inside dining_room_41. oil_2149 is on kitchen_counter_123. knife_2035 is on kitchen_counter_123. food_kiwi_2054 is on kitchen_counter_123. food_orange_2027 is on kitchen_counter_123. kitchen_counter_123 is on floor_45. kitchen_counter_123 is close to desk_193. kitchen_counter_123 is close to floor_163. kitchen_counter_123 is close to wall_67. kitchen_counter_123 is close to floor_164. kitchen_counter_123 is close to oil_2149. kitchen_counter_123 is close to food_kiwi_2054. kitchen_counter_123 is close to food_orange_2027. kitchen_counter_123 is close to floor_45. kitchen_counter_123 is close to wall_175. kitchen_counter_123 is close to cpuscreen_210. kitchen_counter_123 is close to keyboard_211. kitchen_counter_123 is close to knife_2035. kitchen_counter_123 is close to cupboard_117. kitchen_counter_123 is close to tray_2068. kitchen_counter_123 is close to kitchen_counter_119. kitchen_counter_123 is close to sink_120. kitchen_counter_123 is close to character_240. tray_2068 is on kitchen_counter_123. kitchen_counter_123 is CLEAN. kitchen_counter_123 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  kitchen_counter_123 is inside dining_room_41. oil_2149 is on kitchen_counter_123. knife_2035 is on kitchen_counter_123. food_kiwi_2054 is on kitchen_counter_123. food_orange_2027 is on kitchen_counter_123. kitchen_counter_123 is on floor_45. kitchen_counter_123 is close to desk_193. kitchen_counter_123 is close to floor_163. kitchen_counter_123 is close to wall_67. kitchen_counter_123 is close to floor_164. kitchen_counter_123 is close to oil_2149. kitchen_counter_123 is close to food_kiwi_2054. kitchen_counter_123 is close to food_orange_2027. kitchen_counter_123 is close to floor_45. kitchen_counter_123 is close to wall_175. kitchen_counter_123 is close to cpuscreen_210. kitchen_counter_123 is close to keyboard_211. kitchen_counter_123 is close to knife_2035. kitchen_counter_123 is close to cupboard_117. kitchen_counter_123 is close to tray_2068. kitchen_counter_123 is close to kitchen_counter_119. kitchen_counter_123 is close to sink_120. kitchen_counter_123 is close to character_240. tray_2068 is on kitchen_counter_123. kitchen_counter_123 is CLEAN. kitchen_counter_123 is CLOSED.
##############################
From agent.py
obs(kitchen_counter_123, Check for specific ingredients for fried rice with egg including rice, egg, vegetables, sauces)
Get this information:  kitchen_counter_123 is inside dining_room_41. oil_2149 is on kitchen_counter_123. knife_2035 is on kitchen_counter_123. food_kiwi_2054 is on kitchen_counter_123. food_orange_2027 is on kitchen_counter_123. kitchen_counter_123 is on floor_45. kitchen_counter_123 is close to desk_193. kitchen_counter_123 is close to floor_163. kitchen_counter_123 is close to wall_67. kitchen_counter_123 is close to floor_164. kitchen_counter_123 is close to oil_2149. kitchen_counter_123 is close to food_kiwi_2054. kitchen_counter_123 is close to food_orange_2027. kitchen_counter_123 is close to floor_45. kitchen_counter_123 is close to wall_175. kitchen_counter_123 is close to cpuscreen_210. kitchen_counter_123 is close to keyboard_211. kitchen_counter_123 is close to knife_2035. kitchen_counter_123 is close to cupboard_117. kitchen_counter_123 is close to tray_2068. kitchen_counter_123 is close to kitchen_counter_119. kitchen_counter_123 is close to sink_120. kitchen_counter_123 is close to character_240. tray_2068 is on kitchen_counter_123. kitchen_counter_123 is CLEAN. kitchen_counter_123 is CLOSED.
##############################
From agent.py
Human Instruction: You need to ensure all specific ingredients for making fried rice with egg have been identified. Currently, there is no mention of finding essential ingredients such as rice, egg, and vegetables. You should revisit the kitchen counters and confirm the presence of these key ingredients for the task to be considered complete.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.
Action 7: Walk to kitchen_counter_119.
Action 8: Invalid parameter input.
Action 9: Invalid parameter input.
Action 10: Invalid parameter input.
Action 11: Walk to kitchen_counter_122.
Action 12: Invalid parameter input.
Action 13: Invalid parameter input.
Action 14: Invalid parameter input.
Action 15: Walk to kitchen_counter_123.
Action 16: Invalid parameter input.
Action 17: Invalid parameter input.
Action 18: Invalid parameter input.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_food_salt_2041(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_salt,food_salt_instance)
        else:
            exp(food_salt,food_salt_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,food_salt_instance]=True
        close[food_salt_instance,food_salt]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_essential_ingredients():
    # Function to check if essential ingredients like rice, egg, and vegetables are present
    symbol ingredients_present=exists rice: item : is_food_rice(rice) and exists egg: item : is_food_egg(egg) and exists vegetables: item : is_food_vegetable(vegetables)
    return ingredients_present

behavior __goal__():
    body:
        if not has_essential_ingredients():
            # If essential ingredients are not confirmed, observe the kitchen counters
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for essential ingredients like rice, egg, and vegetables")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'egg') at line 5617, column 82.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#goal_representation
 
def has_essential_ingredients():
    # Function to check if essential ingredients like rice, egg, and vegetables are present
    symbol ingredients_present=exists rice: item : is_food_rice(rice) and exists eg: item : is_food_egg(eg) and exists vegetables: item : is_food_vegetable(vegetables)
    return ingredients_present

behavior __goal__():
    body:
        if not has_essential_ingredients():
            # If essential ingredients are not confirmed, observe the kitchen counters
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for essential ingredients like rice, egg, and vegetables")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'eg') at line 5599, column 82.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#goal_representation
 
def has_essential_ingredients():
    # Function to check if essential ingredients like rice, egg, and vegetables are present
    symbol ingredients_present = exists rice: item : is_food_rice(rice) and exists egg: item : is_food_egg(egg) and exists vegetables: item : is_food_vegetable(vegetables)
    return ingredients_present

behavior __goal__():
    body:
        if not has_essential_ingredients():
            # If essential ingredients are not confirmed, observe the kitchen counters
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for essential ingredients like rice, egg, and vegetables")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_ingredients_on_counter(counter:item):
    # Check if the counter has rice, egg, or vegetables
    symbol ingredients_exist=exists ingredient: item : (is_food_rice(ingredient) or is_food_egg(ingredient) or is_food_vegetable(ingredient)) and on(ingredient, counter)
    return ingredients_exist

behavior __goal__():
    body:
        foreach counter: item:
            if is_kitchen_counter(counter) and not visited(counter):
                observe(counter, "Check for rice, egg, or vegetables on the counter")
                # Observe to check for key ingredients

        foreach counter: item:
            if is_kitchen_counter(counter) and has_ingredients_on_counter(counter):
                # If a counter with the necessary ingredients is found, approach it
                achieve close_char(char, counter)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the rice and eggs needed for the dish and prepare them. ', '2. Cook the rice and eggs together to make fried rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_rice_present():
    # Function to check if rice is available
    symbol rice_existence=exists rice: item: is_food_rice(rice)
    return rice_existence

def is_food_egg_present():
    # Function to check if eggs are available
    symbol egg_existence=exists egg: item: is_food_egg(egg)
    return egg_existence

behavior __goal__():
    body:
        if is_food_rice_present() and is_food_egg_present():
            # If both rice and eggs are known to exist, find and approach them
            bind rice: item where:
                is_food_rice(rice)
            bind eggs: item where:
                is_food_egg(eggs)
            achieve close_char(char, rice)
            achieve close_char(char, eggs)
        else:
            # If the presence of rice and eggs is not confirmed, explore the environment to locate them
            foreach item: item:
                if (is_food_rice(item) or is_food_egg(item)) and not visited(item):
                    observe(item, "Locate the rice and eggs for cooking")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_bowl_2140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_egg,bowl_instance)
        else:
            exp(food_egg,bowl_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,bowl_instance]=True
        close[bowl_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_vegetable_2113_around_cupboard_118(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_essential_ingredients(kitchen_counter:item):
    # Function to check if there are essential ingredients on a specified kitchen counter
    symbol has_ingredients=exists o: item : (is_food_rice(o) or is_food_egg(o) or is_food_vegetable(o)) and on(o, kitchen_counter)
    return has_ingredients

behavior __goal__():
    body:
        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_essential_ingredients(kitchen_counter):
            # Check if there is a kitchen counter with essential ingredients based on the available information
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_essential_ingredients(kitchen_counter) 
            # Select a kitchen counter that has essential ingredients
            achieve close_char(char, kitchen_counter)
            # Move the character closer to the kitchen counter with essential ingredients

        else: 
           # If no kitchen counter with essential ingredients is found, initiate exploration to locate one
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    # Check all unvisited kitchen counters
                    observe(kitchen_counter,"Check for essential ingredients on the kitchen counter")
                    # Observe whether each kitchen counter has essential ingredients

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the ingredients needed for fried rice with egg.', '2. Cook the rice and scramble the egg.', '3. Mix the scrambled egg with the cooked rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2109_around_cupboard_118(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_salt,cupboard_instance)
        else:
            exp(food_salt,cupboard_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,cupboard_instance]=True
        close[cupboard_instance,food_salt]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior find_ingredients_for_fried_rice_with_egg(kitchen_counter:item):
    body:
        observe(kitchen_counter,"Check for ingredients on the kitchen counter")

behavior __goal__():
    body:
        foreach kitchen_counter: item:
            if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                find_ingredients_for_fried_rice_with_egg(kitchen_counter)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2041_around_food_salt_2041(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(food_salt,food_salt_instance)
        else:
            exp(food_salt,food_salt_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,food_salt_instance]=True
        close[food_salt_instance,food_salt]=True
    

behavior find_food_onion_2104_around_bowl_2140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_oatmeal_2102_around_cupboard_118(food_oatmeal:item):
    goal: not unknown(food_oatmeal)
    body:
        assert is_food_oatmeal(food_oatmeal)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_oatmeal,cupboard_instance)
        else:
            exp(food_oatmeal,cupboard_instance)
    eff:
        unknown[food_oatmeal]=False
        close[food_oatmeal,cupboard_instance]=True
        close[cupboard_instance,food_oatmeal]=True
    

behavior find_food_carrot_2015_around_bowl_2140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2108_around_fridge_126(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior identify_ingredients(kitchen_counter:item):
    body:
        observe(kitchen_counter, "Check for ingredients on the kitchen counter")

behavior __goal__():
    body:
        foreach kitchen_counter: item:
            if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                identify_ingredients(kitchen_counter)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Gather the rice and eggs from the appropriate storage locations.', '2. Cook the rice.', '3. Fry the eggs and mix them with the cooked rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_rice_or_eggs_on_counter(counter:item):
    # Function to check if there is rice or eggs on a specified counter
    symbol has_item=exists o: item : (is_food_rice(o) or is_food_egg(o)) and on(o, counter)
    return has_item

behavior __goal__():
    body:
        if exists counter: item : is_kitchen_counter(counter) and has_rice_or_eggs_on_counter(counter):
            # If we have already found the kitchen counter with rice or eggs, we can directly approach it
            bind counter: item where:
                is_kitchen_counter(counter) and has_rice_or_eggs_on_counter(counter)
            achieve close_char(char, counter)

        else:
            # If no known kitchen counter with rice or eggs exists, explore the environment for one
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for rice and eggs on the kitchen counter")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_essential_ingredients(counter:item):
    # Function to check if there are essential ingredients like rice and egg on the counter
    symbol has_ingredients=exists o: item : (is_food_rice(o) or is_food_egg(o) or is_food_vegetable(o)) and inside(o, counter)
    return has_ingredients

behavior observe_ingredients_at_counter(counter:item):
    body:
        observe(counter, "Check for ingredients on the kitchen counter")

behavior __goal__():
    body:
        foreach counter: item:
            if is_kitchen_counter(counter) and not visited(counter):
                # Check all unvisited kitchen counters
                observe_ingredients_at_counter(counter)
                # Observe the counter for ingredients

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the rice and scramble the eggs separately.', '2. Stir-fry the cooked rice with the scrambled eggs together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_egg_2092_around_fridge_126(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_rice_2108_around_cupboard_118(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
def has_essential_ingredients():
    # Function to check if essential ingredients for fried rice with egg are present
    symbol has_rice=exists rice: item : is_food_rice(rice)
    symbol has_egg=exists egg: item : is_food_egg(egg)
    symbol has_vegetables=exists vegetables: item : is_food_vegetable(vegetables)
    return has_rice and has_egg and has_vegetables

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Place rice inside the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to cook the rice

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan) # Place egg inside the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        if not has_essential_ingredients():
            # If essential ingredients are not confirmed, observe kitchen counters
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for ingredients on the kitchen counter")

        if has_essential_ingredients():
            # If all essential ingredients are present, proceed to cook
            bind rice: item where:
                is_food_rice(rice)
            # Select the rice

            bind egg: item where:
                is_food_egg(egg)
            # Select the egg

            bind vegetables: item where:
                is_food_vegetable(vegetables)
            # Select the vegetables

            bind pot: item where:
                is_pot(pot) and not has_water(pot)
            # Select a pot

            bind stove: item where:
                is_stove(stove)
            # Select the stove
            
            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            # Select the frying pan

            cook_rice(rice, pot, stove) # Proceed to cook rice
            scramble_eggs(egg, fryingpan, stove) # Proceed to scramble eggs

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_essential_ingredients():
    # Function to check if essential ingredients for fried rice with egg are present
    symbol has_rice=exists rice: item : is_food_rice(rice)
    symbol has_egg=exists egg: item : is_food_egg(egg)
    symbol has_vegetables=exists vegetables: item : is_food_vegetable(vegetables)
    return has_rice and has_egg and has_vegetables

behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Place rice inside the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to cook the rice

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan) # Place egg inside the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        if not has_essential_ingredients():
            # If essential ingredients are not confirmed, observe kitchen counters
            foreach counter: item:
                if is_kitchen_counter(counter) and not visited(counter):
                    observe(counter, "Check for ingredients on the kitchen counter")

        if has_essential_ingredients():
            # If all essential ingredients are present, proceed to cook
            bind rice: item where:
                is_food_rice(rice)
            # Select the rice

            bind egg: item where:
                is_food_egg(egg)
            # Select the egg

            bind vegetables: item where:
                is_food_vegetable(vegetables)
            # Select the vegetables

            bind pot: item where:
                is_pot(pot) and not has_water(pot)
            # Select a pot

            bind stove: item where:
                is_stove(stove)
            # Select the stove
            
            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            # Select the frying pan

            cook_rice(rice, pot, stove) # Proceed to cook rice
            scramble_eggs(egg, fryingpan, stove) # Proceed to scramble eggs

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_rice_2108, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(food_rice_2108, cupboard_118)
Fail to find food_rice_2108 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_rice_2108, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(food_rice_2108, cupboard_117)
Fail to find food_rice_2108 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_rice_2108, fridge_126)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(fridge_126)exp(food_egg_2092, fridge_126)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
switchoff_executor(fridge_126)
Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_rice_2108, fridge_126)
Find food_rice_2108. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)grab_executor(fryingpan_2154)walk_executor(stove_2135)put_executor(fryingpan_2154, stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close fridge_126. Grabbing food_rice_2108 by right hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_rice_2108, pot_2138)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close kitchen_counter_119. food_rice_2108 released by right hand. 
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_rice_2108.
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fridge_126. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. food_egg_2092 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close kitchen_counter_122. Grabbing fryingpan_2154 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_egg_2092.Robot is no longer close kitchen_counter_122.
##############################
From agent.py
put_executor(fryingpan_2154, stove_2135)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close kitchen_counter_119. Robot is close stove_2135. fryingpan_2154 released by right hand. 
##############################
From agent.py
Human Instruction: The robot has placed rice in a pot on the stove to cook it and has placed an egg in a frying pan on the stove, but it hasn't confirmed that the rice is cooked or scrambled the eggs yet. Ensure the rice is cooked and the eggs are scrambled separately as required by the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.
Action 7: Walk to kitchen_counter_119.
Action 8: Invalid parameter input.
Action 9: Invalid parameter input.
Action 10: Invalid parameter input.
Action 11: Walk to kitchen_counter_122.
Action 12: Invalid parameter input.
Action 13: Invalid parameter input.
Action 14: Invalid parameter input.
Action 15: Walk to kitchen_counter_123.
Action 16: Invalid parameter input.
Action 17: Invalid parameter input.
Action 18: Invalid parameter input.
Action 19: Walk to cupboard_118.
Action 20: Open cupboard_118.
Action 21: look for food_rice_2108 around cupboard_118.
Action 22: Walk to cupboard_117.
Action 23: look for food_rice_2108 around cupboard_117.
Action 24: Walk to fridge_126.
Action 25: Switch off fridge_126.
Action 26: Open fridge_126.
Action 27: look for food_rice_2108 around fridge_126.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Grab pot_2138.
Action 35: Walk to stove_2135.
Action 36: Put pot_2138 on stove_2135.
Action 37: Switch on stove_2135.
Action 38: Walk to food_egg_2092.
Action 39: Grab food_egg_2092.
Action 40: Walk to fryingpan_2154.
Action 41: Put food_egg_2092 into fryingpan_2154.
Action 42: Grab fryingpan_2154.
Action 43: Walk to stove_2135.
Action 44: Put fryingpan_2154 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

behavior find_cup_2133_around_bowl_2140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_rice_cooked(pot:item):
    # Function to check if the rice in the pot is cooked
    # This function relies on the assumption that the observe method will confirm the rices cooking state
    observe(pot, "Check if rice is cooked")
    symbol rice_cooked=exists rice: item: is_food_rice(rice) and inside(rice, pot) and cooked(rice)
    return rice_cooked

behavior scramble_eggs(pan:item, egg:item):
    body:
        achieve cooked(egg) # Scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)
        # Select the pot on the stove
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Confirm the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove
        
        if not is_rice_cooked(pot):
            # Check if the rice is not yet cooked
            achieve is_on(stove)
            # Ensure the stove is turned on to cook the rice
        
        scramble_eggs(pan, egg)
        # Scramble the eggs separately

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_shoe_rack_2044_around_basket_for_clothes_2078(shoe_rack:item):
    goal: not unknown(shoe_rack)
    body:
        assert is_shoe_rack(shoe_rack)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoe_rack,basket_for_clothes_instance)
        else:
            exp(shoe_rack,basket_for_clothes_instance)
    eff:
        unknown[shoe_rack]=False
        close[shoe_rack,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoe_rack]=True
    

#goal_representation
 
def is_rice_cooked(pot:item):
    # Function to check if the rice in the pot is cooked
    # This function relies on the assumption that the observe method will confirm the rices cooking state
    observe(pot, "Check if rice is cooked")
    symbol rice_cooked=exists rice: item: is_food_rice(rice) and inside(rice, pot) and is_on(stove_2135)
    return rice_cooked

behavior scramble_eggs(pan:item, egg:item):
    body:
        achieve inside(egg, pan) and is_on(stove_2135)
        # Ensure the egg is scrambled inside the pan on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2135)
        # Select the pot on the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Confirm the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan on the stove
        
        if not is_rice_cooked(pot):
            # Check if the rice is not yet cooked
            achieve is_on(stove)
            # Ensure the stove is turned on to cook the rice
        
        scramble_eggs(pan, egg)
        # Scramble the eggs separately

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: stove_2135; available variables: [Variable<pot: item>, Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def is_rice_cooked(pot:item):
    # Function to check if the rice in the pot is cooked
    # This function relies on the assumption that the observe method will confirm the rices cooking state
    observe(pot, "Check if rice is cooked")
    symbol rice_cooked=exists rice: item: is_food_rice(rice) and inside(rice, pot) and is_on(stove)
    return rice_cooked

behavior scramble_eggs(pan:item, egg:item):
    body:
        achieve inside(egg, pan) and is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        
        if not is_rice_cooked(pot):
            achieve is_on(stove)
        
        scramble_eggs(pan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(pot:item, stove:item):
    # Function to check if the pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

def is_pot_switch_on(stove:item):
    # Function to check if the stove is on
    symbol stove_on=is_on(stove)
    return stove_on

def is_egg_scrambled(egg:item):
    # Function to check if the egg is scrambled
    symbol egg_scrambled=cut(egg)
    return egg_scrambled

behavior cook_rice(pot:item, stove:item):
    body:
        if not is_pot_on_stove(pot, stove):
            achieve_once inhand(pot)
            achieve on(pot, stove)
        
        if not is_pot_switch_on(stove):
            achieve is_on(stove)
        
        achieve has_water(pot) # Assuming water is needed for cooking rice
        observe(pot, "Check if the rice is cooked")

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve_once inhand(egg)
        achieve inside(egg, fryingpan)
        
        if not is_pot_on_stove(fryingpan, stove):
            achieve on(fryingpan, stove)
        
        if not is_pot_switch_on(stove):
            achieve is_on(stove)
        
        if not is_egg_scrambled(egg):
            achieve cut(egg) # Scramble the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        
        bind stove: item where:
            is_stove(stove)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        
        cook_rice(pot, stove)
        scramble_eggs(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice and scramble the eggs simultaneously.', '3. Combine the rice and eggs by frying them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_bowl_2140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_toilet_paper_2076_around_toilet_15(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==15
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(toilet_paper,toilet_instance)
        else:
            exp(toilet_paper,toilet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,toilet_instance]=True
        close[toilet_instance,toilet_paper]=True
    

behavior find_food_onion_2048_around_bowl_2140(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_onion,bowl_instance)
        else:
            exp(food_onion,bowl_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,bowl_instance]=True
        close[bowl_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior confirm_rice_and_egg_preparation(rice:item, pot:item, stove:item, egg:item, fryingpan:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is inside the pot

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan

        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        confirm_rice_and_egg_preparation(rice, pot, stove, egg, fryingpan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_counter_18(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(tooth_paste,bathroom_counter_instance)
        else:
            exp(tooth_paste,bathroom_counter_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_counter_instance]=True
        close[bathroom_counter_instance,tooth_paste]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_cooked_rice_and_scrambled_egg(rice:item, egg:item, pot:item, stove:item):
    body:
        achieve cooked(rice) # Ensure the rice is cooked
        achieve scrambled(egg) # Ensure the egg is scrambled

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select a pot containing rice

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select a stove with the pot on it and turned on

        ensure_cooked_rice_and_scrambled_egg(rice, egg, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2138_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
behavior ensure_cooked_rice_and_scrambled_egg(rice:item, egg:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Ensure the rice is inside the pot
        achieve on(pot, stove) and is_on(stove) # Ensure the pot is on the stove and the stove is on
        achieve cut(egg) # Ensure the egg is scrambled

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select a pot containing rice

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select a stove with the pot on it and turned on

        ensure_cooked_rice_and_scrambled_egg(rice, egg, pot, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior ensure_cooked_rice_and_scrambled_egg(rice:item, egg:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Ensure the rice is inside the pot
        achieve on(pot, stove) and is_on(stove) # Ensure the pot is on the stove and the stove is on
        achieve cut(egg) # Ensure the egg is scrambled

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select a pot containing rice

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select a stove with the pot on it and turned on

        ensure_cooked_rice_and_scrambled_egg(rice, egg, pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(knife_2035)grab_executor(knife_2035)walk_executor(food_egg_2092)cut_executor(food_egg_2092)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close food_egg_2092. Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close fryingpan_2154. Robot is close food_egg_2092. Grabbing food_egg_2092 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer close fryingpan_2154.
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot is inside dining_room_41. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. food_egg_2092 released by right hand. 
##############################
From agent.py
walk_executor(knife_2035)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close knife_2035. Robot is no longer close cutting_board_2123.Robot is no longer close food_egg_2092.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
grab_executor(knife_2035)
Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close knife_2035. Grabbing knife_2035 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. Robot is no longer close kitchen_counter_123.
##############################
From agent.py
cut_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. 
##############################
From agent.py
Human Instruction: The robot needs to wash the rice before cooking it. Although the rice is inside the pot on the stove and the egg is cut, it has not been confirmed that either item has been washed before being prepared.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.
Action 7: Walk to kitchen_counter_119.
Action 8: Invalid parameter input.
Action 9: Invalid parameter input.
Action 10: Invalid parameter input.
Action 11: Walk to kitchen_counter_122.
Action 12: Invalid parameter input.
Action 13: Invalid parameter input.
Action 14: Invalid parameter input.
Action 15: Walk to kitchen_counter_123.
Action 16: Invalid parameter input.
Action 17: Invalid parameter input.
Action 18: Invalid parameter input.
Action 19: Walk to cupboard_118.
Action 20: Open cupboard_118.
Action 21: look for food_rice_2108 around cupboard_118.
Action 22: Walk to cupboard_117.
Action 23: look for food_rice_2108 around cupboard_117.
Action 24: Walk to fridge_126.
Action 25: Switch off fridge_126.
Action 26: Open fridge_126.
Action 27: look for food_rice_2108 around fridge_126.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Grab pot_2138.
Action 35: Walk to stove_2135.
Action 36: Put pot_2138 on stove_2135.
Action 37: Switch on stove_2135.
Action 38: Walk to food_egg_2092.
Action 39: Grab food_egg_2092.
Action 40: Walk to fryingpan_2154.
Action 41: Put food_egg_2092 into fryingpan_2154.
Action 42: Grab fryingpan_2154.
Action 43: Walk to stove_2135.
Action 44: Put fryingpan_2154 on stove_2135.
Action 45: Walk to food_egg_2092.
Action 46: Grab food_egg_2092.
Action 47: Walk to cutting_board_2123.
Action 48: Put food_egg_2092 on cutting_board_2123.
Action 49: Walk to knife_2035.
Action 50: Grab knife_2035.
Action 51: Walk to food_egg_2092.
Action 52: Cut food_egg_2092.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_items(rice:item, egg:item, sink:item):
    body:
        achieve_once inside(rice, sink)
        # Place rice in the sink to wash

        achieve_once inside(egg, sink)
        # Place egg in the sink to wash, even if its cut

        wash(rice)
        wash(egg)

        achieve clean(rice)
        achieve clean(egg)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select egg, which is already cut

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        find_and_wash_items(rice, egg, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2095_around_bowl_2140(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_fruit,bowl_instance)
        else:
            exp(food_fruit,bowl_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,bowl_instance]=True
        close[bowl_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        # Place the food item inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if present

        wash(food)
        # Wash the food item

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet if present

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        clean_food(rice, sink)
        clean_food(egg, sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_food(food:item, sink:item):
    body:
        achieve_once inside(food, sink)
        # Place the food item inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if present

        wash(food)
        # Wash the food item

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet if present

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        clean_food(rice, sink)
        clean_food(egg, sink)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(sink_19)putin_executor(food_rice_2108, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(food_rice_2108)wash_executor(food_rice_2108)walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(sink_19)putin_executor(food_egg_2092, sink_19)walk_executor(food_egg_2092)wash_executor(food_egg_2092)
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close pot_2138. Robot is close food_rice_2108. Robot is no longer close cutting_board_2123.Robot is no longer close food_egg_2092.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close pot_2138. Robot is close food_rice_2108. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close pot_2138.
##############################
From agent.py
putin_executor(food_rice_2108, sink_19)
Robot is inside bathroom_1. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close bathroom_counter_18. Robot is close sink_19. food_rice_2108 released by left hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close knife_2035. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close food_rice_2108.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close knife_2035. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close sink_19. Robot is close food_rice_2108. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
wash_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close sink_19. Robot is close food_rice_2108. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. Robot is no longer close sink_19.Robot is no longer close food_rice_2108.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close cutting_board_2123.
##############################
From agent.py
putin_executor(food_egg_2092, sink_19)
Robot is inside bathroom_1. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close bathroom_counter_18. Robot is close sink_19. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.
##############################
From agent.py
wash_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_banana_2083_around_bowl_2140(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_banana,bowl_instance)
        else:
            exp(food_banana,bowl_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,bowl_instance]=True
        close[bowl_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Function to check if the sink has a faucet
    symbol faucet_exists=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior wash_and_prepare_rice_egg(rice:item, egg:item, sink:item, stove:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(rice)
            wash(egg)
            achieve_once is_off(faucet)
        
        achieve inside(rice, pot)
        achieve inside(egg, fryingpan)
        achieve on(pot, stove)
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select the pot containing rice

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(egg, fryingpan)
        # Select the frying pan containing egg

        wash_and_prepare_rice_egg(rice, egg, sink, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<rice: item>, Variable<egg: item>, Variable<sink: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Function to check if the sink has a faucet
    symbol faucet_exists=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior wash_and_prepare_rice_egg(rice:item, egg:item, sink:item, stove:item, pot:item, fryingpan:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(rice)
            wash(egg)
            achieve_once is_off(faucet)
        
        achieve inside(rice, pot)
        achieve inside(egg, fryingpan)
        achieve on(pot, stove)
        achieve on(fryingpan, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select the pot containing rice

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(egg, fryingpan)
        # Select the frying pan containing egg

        wash_and_prepare_rice_egg(rice, egg, sink, stove, pot, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_wooden_spoon_2000_around_knifeblock_76(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(wooden_spoon,knifeblock_instance)
        else:
            exp(wooden_spoon,knifeblock_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,knifeblock_instance]=True
        close[knifeblock_instance,wooden_spoon]=True
    

behavior find_drawing_202_around_drawing_33(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==33
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_on_stove(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Put rice inside the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn the stove on to cook the rice

behavior scramble_eggs_in_fryingpan(eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(eggs, fryingpan) # Put eggs inside the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn the stove on to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select clean rice

        bind eggs: item where:
            is_food_egg(eggs) and clean(eggs) and cut(eggs)
        # Select cut and clean eggs

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_on_stove(rice, pot, stove)
        scramble_eggs_in_fryingpan(eggs, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_food_food_2021_around_food_orange_2027(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_orange_instance:item where:
            is_food_orange(food_orange_instance) and id[food_orange_instance]==2027
        achieve close_char(char,food_orange_instance)
        if can_open(food_orange_instance):
            achieve_once open(food_orange_instance)
            exp(food_food,food_orange_instance)
        else:
            exp(food_food,food_orange_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_orange_instance]=True
        close[food_orange_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs(pot:item, stove:item, rice:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is inside the pot
        achieve on(pot, stove)
        # Ensure the pot with rice is placed on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the rice

behavior scramble_eggs(fryingpan:item, stove:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan
        achieve on(fryingpan, stove)
        # Ensure the frying pan is placed on the stove
        achieve is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has water

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        cook_rice_and_scramble_eggs(pot, stove, rice)
        scramble_eggs(fryingpan, stove, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot) # Place the rice inside the pot
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior scramble_eggs(egg:item, cutting_board:item, stove:item, fryingpan:item):
    body:
        achieve cut(egg) # Cut the egg
        achieve inside(egg, fryingpan) # Place the egg in the frying pan
        achieve on(fryingpan, stove) # Place the pan on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select the rice that is clean

        bind egg: item where:
            is_food_egg(egg) and clean(egg) and cut(egg)
        # Select the egg that is clean and cut

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        cook_rice(rice, pot, stove)
        scramble_eggs(egg, cutting_board, stove, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_bowl_2140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_carrot,bowl_instance)
        else:
            exp(food_carrot,bowl_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,bowl_instance]=True
        close[bowl_instance,food_carrot]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice(rice:item, pot:item, stove:item):
    body:
        achieve inside(rice, pot)
        # Rice is placed inside the pot
        achieve on(pot, stove)
        # The pot is placed on the stove
        achieve is_on(stove)
        # The stove is turned on to cook the rice

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Egg is placed inside the frying pan
        achieve on(fryingpan, stove)
        # The frying pan is placed on the stove
        achieve is_on(stove)
        # The stove is turned on to scramble the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select cut egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice(rice, pot, stove)
        # Rice is cooked

        scramble_eggs(egg, fryingpan, stove)
        # Egg is scrambled

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior cook_rice_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) 
        # Place the pot on the stove
        achieve is_on(stove) 
        # Turn on the stove

behavior scramble_eggs_in_fryingpan(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select the clean rice
        
        bind egg: item where:
            is_food_egg(egg) and cut(egg) and clean(egg)
        # Select the clean and cut egg

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)
        
        achieve inside(rice, pot)
        # Place rice inside the pot

        achieve inside(egg, fryingpan)
        # Place egg inside the frying pan
        
        cook_rice_on_stove(pot, stove)
        scramble_eggs_in_fryingpan(fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_eggs_simultaneously(rice:item, pot:item, stove:item, egg:item, fryingpan:item):
    body:
        achieve inside(rice, pot) # Ensure the rice is inside the pot
        achieve inside(egg, fryingpan) # Ensure the egg is inside the fryingpan
        achieve on(pot, stove) # Place the pot on the stove
        achieve on(fryingpan, stove) # Place the fryingpan on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and clean(rice)
        # Select the cleaned rice

        bind egg: item where:
            is_food_egg(egg) and clean(egg) and cut(egg)
        # Select the cleaned and cut egg

        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot 

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a fryingpan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_and_eggs_simultaneously(rice, pot, stove, egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs_simultaneously(rice:item, egg:item, pot:item, fryingpan:item, stove:item):
    body:
        achieve cut(egg) # Ensure the egg is cut before scrambling
        achieve inside(rice, pot)  # Ensure rice is inside the pot
        achieve on(pot, stove)  # Place the pot on the stove
        achieve on(fryingpan, stove)  # Place the frying pan on the stove
        achieve is_on(stove)  # Turn on the stove for cooking

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_and_scramble_eggs_simultaneously(rice, egg, pot, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_and_scramble_eggs_simultaneously(rice:item, egg:item, pot:item, fryingpan:item, stove:item):
    body:
        achieve cut(egg) # Ensure the egg is cut before scrambling
        achieve inside(rice, pot)  # Ensure rice is inside the pot
        achieve on(pot, stove)  # Place the pot on the stove
        achieve on(fryingpan, stove)  # Place the frying pan on the stove
        achieve is_on(stove)  # Turn on the stove for cooking

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_and_scramble_eggs_simultaneously(rice, egg, pot, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(food_egg_2092)cut_executor(food_egg_2092)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(pot_2138)putin_executor(food_rice_2108, pot_2138)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close sink_19. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer close sink_19.
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
cut_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close sink_19. Robot is close food_rice_2108. Robot is no longer close cutting_board_2123.Robot is no longer close food_egg_2092.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close sink_19. Robot is close food_rice_2108. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close stove_2135. Robot is no longer close sink_19.
##############################
From agent.py
putin_executor(food_rice_2108, pot_2138)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close pot_2138. Robot is close stove_2135. food_rice_2108 released by left hand. 
##############################
From agent.py
Human Instruction: Rice and eggs need to be cooked simultaneously, which requires the egg to be scrambled in the frying pan and the rice to be boiled in the pot on the stove. Ensure the stove is switched on while both the pot and frying pan are on it for the cooking process to occur.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.
Action 7: Walk to kitchen_counter_119.
Action 8: Invalid parameter input.
Action 9: Invalid parameter input.
Action 10: Invalid parameter input.
Action 11: Walk to kitchen_counter_122.
Action 12: Invalid parameter input.
Action 13: Invalid parameter input.
Action 14: Invalid parameter input.
Action 15: Walk to kitchen_counter_123.
Action 16: Invalid parameter input.
Action 17: Invalid parameter input.
Action 18: Invalid parameter input.
Action 19: Walk to cupboard_118.
Action 20: Open cupboard_118.
Action 21: look for food_rice_2108 around cupboard_118.
Action 22: Walk to cupboard_117.
Action 23: look for food_rice_2108 around cupboard_117.
Action 24: Walk to fridge_126.
Action 25: Switch off fridge_126.
Action 26: Open fridge_126.
Action 27: look for food_rice_2108 around fridge_126.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Grab pot_2138.
Action 35: Walk to stove_2135.
Action 36: Put pot_2138 on stove_2135.
Action 37: Switch on stove_2135.
Action 38: Walk to food_egg_2092.
Action 39: Grab food_egg_2092.
Action 40: Walk to fryingpan_2154.
Action 41: Put food_egg_2092 into fryingpan_2154.
Action 42: Grab fryingpan_2154.
Action 43: Walk to stove_2135.
Action 44: Put fryingpan_2154 on stove_2135.
Action 45: Walk to food_egg_2092.
Action 46: Grab food_egg_2092.
Action 47: Walk to cutting_board_2123.
Action 48: Put food_egg_2092 on cutting_board_2123.
Action 49: Walk to knife_2035.
Action 50: Grab knife_2035.
Action 51: Walk to food_egg_2092.
Action 52: Cut food_egg_2092.
Action 53: Walk to food_rice_2108.
Action 54: Grab food_rice_2108.
Action 55: Walk to sink_19.
Action 56: Put food_rice_2108 into sink_19.
Action 57: Walk to faucet_20.
Action 58: Switch on faucet_20.
Action 59: Walk to food_rice_2108.
Action 60: Wash food_rice_2108.
Action 61: Walk to food_egg_2092.
Action 62: Grab food_egg_2092.
Action 63: Walk to sink_19.
Action 64: Put food_egg_2092 into sink_19.
Action 65: Walk to food_egg_2092.
Action 66: Wash food_egg_2092.
Action 67: Grab food_egg_2092.
Action 68: Walk to cutting_board_2123.
Action 69: Put food_egg_2092 on cutting_board_2123.
Action 70: Walk to food_egg_2092.
Action 71: Cut food_egg_2092.
Action 72: Walk to food_rice_2108.
Action 73: Grab food_rice_2108.
Action 74: Walk to pot_2138.
Action 75: Put food_rice_2108 into pot_2138.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_stovefan_125(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==125
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(pot,stovefan_instance)
        else:
            exp(pot,stovefan_instance)
    eff:
        unknown[pot]=False
        close[pot,stovefan_instance]=True
        close[stovefan_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior cook_rice_and_scramble_egg(rice:item, egg:item, pot:item, fryingpan:item, stove:item):
    body:
        # Cook the rice in the pot
        achieve inside(rice, pot)
        achieve on(pot, stove)

        # Scramble the egg in the frying pan
        achieve inside(egg, fryingpan)
        achieve on(fryingpan, stove)

        # Turn on the stove to cook both items simultaneously
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot that has water

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_rice_and_scramble_egg(rice, egg, pot, fryingpan, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_rice_and_scramble_eggs(pot:item, fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select rice, which is already washed and placed inside the pot

        bind egg: item where:
            is_food_egg(egg) and inhand(egg)
        # Select egg

        bind pot: item where:
            is_pot(pot) and not inside(egg, pot)
        # Select pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        cook_rice_and_scramble_eggs(pot, fryingpan, stove, rice, egg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_food_food_2073_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

behavior find_cup_2133_around_bowl_2140(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(cup,bowl_instance)
        else:
            exp(cup,bowl_instance)
    eff:
        unknown[cup]=False
        close[cup,bowl_instance]=True
        close[bowl_instance,cup]=True
    

#goal_representation
behavior cook_rice_and_scramble_eggs(pot:item, fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not inside(egg, pot)
        # Select pot

        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select rice, which is already washed and placed inside the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind egg: item where:
            is_food_egg(egg) and inhand(egg)
        # Select egg

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        cook_rice_and_scramble_eggs(pot, fryingpan, stove, rice, egg)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: egg; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_tooth_paste_2059_around_bathroom_cabinet_17(tooth_paste:item):
    goal: not unknown(tooth_paste)
    body:
        assert is_tooth_paste(tooth_paste)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(tooth_paste,bathroom_cabinet_instance)
        else:
            exp(tooth_paste,bathroom_cabinet_instance)
    eff:
        unknown[tooth_paste]=False
        close[tooth_paste,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,tooth_paste]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

#goal_representation
 
behavior cook_rice_and_scramble_eggs(pot:item, fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot

        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select rice, which is already washed and placed inside the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        cook_rice_and_scramble_eggs(pot, fryingpan, stove, rice, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_rice_and_scramble_eggs(pot:item, fryingpan:item, stove:item, rice:item, egg:item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot

        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
        # Select rice, which is already washed and placed inside the pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select stove with ID 2135

        cook_rice_and_scramble_eggs(pot, fryingpan, stove, rice, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2092)grab_executor(food_egg_2092)walk_executor(fryingpan_2154)putin_executor(food_egg_2092, fryingpan_2154)
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. Robot is no longer close pot_2138.Robot is no longer close food_rice_2108.Robot is no longer close stove_2135.
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close cutting_board_2123. Robot is close food_egg_2092. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close cutting_board_2123.
##############################
From agent.py
putin_executor(food_egg_2092, fryingpan_2154)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close stove_2135. food_egg_2092 released by left hand. 
##############################
From agent.py
Human Instruction: The rice and egg have been placed in their respective cooking vessels and put on the stove, with the stove switched on. However, the eggs have not been scrambled in the frying pan. You need to scramble the eggs in the frying pan while the rice is being cooked.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check for ingredients on the kitchen counter.
Action 3: Walk to kitchen_counter_122.
Action 4: Observe around kitchen_counter_122 with the question of Check for ingredients on the kitchen counter.
Action 5: Walk to kitchen_counter_123.
Action 6: Observe around kitchen_counter_123 with the question of Check for ingredients on the kitchen counter.
Action 7: Walk to kitchen_counter_119.
Action 8: Invalid parameter input.
Action 9: Invalid parameter input.
Action 10: Invalid parameter input.
Action 11: Walk to kitchen_counter_122.
Action 12: Invalid parameter input.
Action 13: Invalid parameter input.
Action 14: Invalid parameter input.
Action 15: Walk to kitchen_counter_123.
Action 16: Invalid parameter input.
Action 17: Invalid parameter input.
Action 18: Invalid parameter input.
Action 19: Walk to cupboard_118.
Action 20: Open cupboard_118.
Action 21: look for food_rice_2108 around cupboard_118.
Action 22: Walk to cupboard_117.
Action 23: look for food_rice_2108 around cupboard_117.
Action 24: Walk to fridge_126.
Action 25: Switch off fridge_126.
Action 26: Open fridge_126.
Action 27: look for food_rice_2108 around fridge_126.
Action 28: Walk to pot_2138.
Action 29: Open pot_2138.
Action 30: Walk to food_rice_2108.
Action 31: Grab food_rice_2108.
Action 32: Walk to pot_2138.
Action 33: Put food_rice_2108 into pot_2138.
Action 34: Grab pot_2138.
Action 35: Walk to stove_2135.
Action 36: Put pot_2138 on stove_2135.
Action 37: Switch on stove_2135.
Action 38: Walk to food_egg_2092.
Action 39: Grab food_egg_2092.
Action 40: Walk to fryingpan_2154.
Action 41: Put food_egg_2092 into fryingpan_2154.
Action 42: Grab fryingpan_2154.
Action 43: Walk to stove_2135.
Action 44: Put fryingpan_2154 on stove_2135.
Action 45: Walk to food_egg_2092.
Action 46: Grab food_egg_2092.
Action 47: Walk to cutting_board_2123.
Action 48: Put food_egg_2092 on cutting_board_2123.
Action 49: Walk to knife_2035.
Action 50: Grab knife_2035.
Action 51: Walk to food_egg_2092.
Action 52: Cut food_egg_2092.
Action 53: Walk to food_rice_2108.
Action 54: Grab food_rice_2108.
Action 55: Walk to sink_19.
Action 56: Put food_rice_2108 into sink_19.
Action 57: Walk to faucet_20.
Action 58: Switch on faucet_20.
Action 59: Walk to food_rice_2108.
Action 60: Wash food_rice_2108.
Action 61: Walk to food_egg_2092.
Action 62: Grab food_egg_2092.
Action 63: Walk to sink_19.
Action 64: Put food_egg_2092 into sink_19.
Action 65: Walk to food_egg_2092.
Action 66: Wash food_egg_2092.
Action 67: Grab food_egg_2092.
Action 68: Walk to cutting_board_2123.
Action 69: Put food_egg_2092 on cutting_board_2123.
Action 70: Walk to food_egg_2092.
Action 71: Cut food_egg_2092.
Action 72: Walk to food_rice_2108.
Action 73: Grab food_rice_2108.
Action 74: Walk to pot_2138.
Action 75: Put food_rice_2108 into pot_2138.
Action 76: Walk to food_egg_2092.
Action 77: Grab food_egg_2092.
Action 78: Walk to fryingpan_2154.
Action 79: Put food_egg_2092 into fryingpan_2154.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2138_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_eggs(egg:item, fryingpan:item):
    body:
        achieve cut(egg) # Scramble the egg in the frying pan

behavior cook_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Ensure the stove is on for cooking

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select a pot with rice

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select the stove with the pot of rice on it

        scramble_eggs(egg, fryingpan)
        cook_rice(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_eggs(egg:item, fryingpan:item):
    body:
        achieve cut(egg) # Scramble the egg in the frying pan

behavior cook_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Ensure the stove is on for cooking

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot) and inside(rice, pot)
        # Select a pot with rice

        bind stove: item where:
            is_stove(stove) and on(pot, stove) and is_on(stove)
        # Select the stove with the pot of rice on it

        scramble_eggs(egg, fryingpan)
        cook_rice(pot, stove)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2092)walk_executor(cutting_board_2123)put_executor(food_egg_2092, cutting_board_2123)walk_executor(food_egg_2092)cut_executor(food_egg_2092)
##############################
From agent.py
grab_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close fryingpan_2154. Robot is close stove_2135. Grabbing food_egg_2092 by left hand. 
##############################
From agent.py
walk_executor(cutting_board_2123)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. Robot is no longer close fryingpan_2154.Robot is no longer close stove_2135.
##############################
From agent.py
put_executor(food_egg_2092, cutting_board_2123)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is close kitchen_counter_119. food_egg_2092 released by left hand. 
##############################
From agent.py
walk_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
cut_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

behavior find_pot_2138_around_bookshelf_275(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pot,bookshelf_instance)
        else:
            exp(pot,bookshelf_instance)
    eff:
        unknown[pot]=False
        close[pot,bookshelf_instance]=True
        close[bookshelf_instance,pot]=True
    

behavior find_food_food_2064_around_bowl_2140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_food,bowl_instance)
        else:
            exp(food_food,bowl_instance)
    eff:
        unknown[food_food]=False
        close[food_food,bowl_instance]=True
        close[bowl_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior combine_rice_and_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve close_char(char, stove)
        # Ensure the character is close to the stove to manage the cooking

        achieve inside(rice, fryingpan)
        # Ensure the cooked rice is placed inside the frying pan

        achieve inside(eggs, fryingpan)
        # Ensure the scrambled eggs are placed inside the frying pan

        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and cooked(rice)
        # Select the cooked rice

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_rice_and_eggs(rice, eggs, fryingpan, stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cooked not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_bread_2084_around_bowl_2140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2140
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_bread,bowl_instance)
        else:
            exp(food_bread,bowl_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,bowl_instance]=True
        close[bowl_instance,food_bread]=True
    

#goal_representation
 
behavior combine_rice_and_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve close_char(char, stove)
        # Ensure the character is close to the stove to manage the cooking

        achieve inside(rice, fryingpan)
        # Ensure the rice is placed inside the frying pan

        achieve inside(eggs, fryingpan)
        # Ensure the scrambled eggs are placed inside the frying pan

        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and inside(rice, container)
            # Select the rice that is inside a container (eg, pot)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_rice_and_eggs(rice, eggs, fryingpan, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: container; available variables: [Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_oil_2149_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#goal_representation

behavior combine_rice_and_eggs(rice:item, eggs:item, fryingpan:item, stove:item):
    body:
        achieve close_char(char, stove)
        # Ensure the character is close to the stove to manage the cooking

        achieve inside(rice, fryingpan)
        # Ensure the rice is placed inside the frying pan

        achieve inside(eggs, fryingpan)
        # Ensure the scrambled eggs are placed inside the frying pan

        achieve is_on(stove)
        # Turn on the stove to start frying

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice) and inside(rice, pot)
            # Select the rice that is inside a container (eg, pot)

        bind eggs: item where:
            is_food_egg(eggs) and cut(eggs)
        # Select the scrambled eggs

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        combine_rice_and_eggs(rice, eggs, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_pot_2040_around_sink_120(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(pot,sink_instance)
        else:
            exp(pot,sink_instance)
    eff:
        unknown[pot]=False
        close[pot,sink_instance]=True
        close[sink_instance,pot]=True
    

behavior find_oil_2013_around_oil_2149(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2149
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior scramble_eggs_in_pan(egg:item, fryingpan:item):
    body:
        achieve cut(egg) # Scramble the eggs

behavior combine_rice_and_eggs(rice:item, fryingpan:item):
    body:
        achieve inside(rice, fryingpan) # Fry the rice and eggs together

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        scramble_eggs_in_pan(egg, fryingpan)
        combine_rice_and_eggs(rice, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior scramble_eggs_in_pan(egg:item, fryingpan:item):
    body:
        achieve cut(egg) # Scramble the eggs

behavior combine_rice_and_eggs(rice:item, fryingpan:item):
    body:
        achieve inside(rice, fryingpan) # Fry the rice and eggs together

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        scramble_eggs_in_pan(egg, fryingpan)
        combine_rice_and_eggs(rice, fryingpan)

##############################
From agent.py-> find a plan in act()
cut_executor(food_egg_2092)walk_executor(food_rice_2108)grab_executor(food_rice_2108)walk_executor(fryingpan_2154)putin_executor(food_rice_2108, fryingpan_2154)
##############################
From agent.py
cut_executor(food_egg_2092)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_egg_2092. Robot is close cutting_board_2123. 
##############################
From agent.py
walk_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close pot_2138. Robot is close food_rice_2108. Robot is no longer close cutting_board_2123.Robot is no longer close food_egg_2092.
##############################
From agent.py
grab_executor(food_rice_2108)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close pot_2138. Robot is close food_rice_2108. Grabbing food_rice_2108 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2154)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close fryingpan_2154. Robot is close stove_2135. Robot is no longer close pot_2138.
##############################
From agent.py
putin_executor(food_rice_2108, fryingpan_2154)
Robot is inside dining_room_41. Robot is close knife_2035. Robot is close food_rice_2108. Robot is close fryingpan_2154. Robot is close stove_2135. food_rice_2108 released by left hand. 
##############################
