From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Put the bowl of water on the table in the home office.', '3. Find the cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind faucet: item where:
            is_faucet(faucet)
        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        bind faucet: item where:
            is_faucet(faucet)
        fill_bowl_with_water(bowl, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Failed to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Failed to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Failed to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl of water on the table in the home office.', '3. Find the cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve once inside(bowl, sink)
        # Ensure the bowl is inside the sink

        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl)
        # Ensure the bowl has water
        
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl to fill with water
        
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select faucet close to the sink

        fill_bowl_with_water(bowl, faucet)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5556, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2142_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item, sink:item):
    body:
        achieve inside(bowl, sink)
        # Ensure the bowl is inside the sink

        achieve_once is_on(faucet)
        # Turn on the faucet to fill the bowl with water
        achieve has_water(bowl)
        # Ensure the bowl has water
        
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the bowl to fill with water
        
        bind sink: item where:
            is_sink(sink)
        # Select the sink
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select faucet close to the sink

        fill_bowl_with_water(bowl, faucet, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2140_around_kitchen_counter_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve inside(bowl, sink)
        # Ensure the bowl is inside the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the bowl with water

        achieve has_water(bowl)
        # The bowl should have water after being placed under the faucet

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        fill_bowl_with_water(bowl, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl of water on the table in the home office.', '3. Find your cat and put it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_bowl():
    # Determine if there is a bowl available
    symbol has_bowl=exists bowl:item: is_bowl(bowl)
    return has_bowl

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl is filled with water
        achieve_once inhand(bowl)
        # Temporarily hold the bowl
        if is_faucet(faucet):
            achieve_once is_on(faucet)
            achieve inside(bowl, faucet)  # Place the bowl under the faucet to fill
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        if has_bowl():
            bind bowl: item where:
                is_bowl(bowl)
            # Select a bowl
            bind faucet: item where:
                is_faucet(faucet)
            # Select a faucet to fill the bowl
            fill_bowl_with_water(bowl, faucet)
        else:
            foreach o: item:
                if is_bowl(o) and not visited(o):
                    observe(o, "Check if this is a bowl")


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bacon_2082_around_fridge_126(food_bacon:item):
    goal: not unknown(food_bacon)
    body:
        assert is_food_bacon(food_bacon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bacon,fridge_instance)
        else:
            exp(food_bacon,fridge_instance)
    eff:
        unknown[food_bacon]=False
        close[food_bacon,fridge_instance]=True
        close[fridge_instance,food_bacon]=True
    

behavior find_bowl_2141_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def is_bowl_empty(bowl:item):
    # Check if the bowl is empty, ie, does not have water
    symbol bowl_empty=not has_water(bowl)
    return bowl_empty

behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve inside(bowl, faucet) # Place the bowl under the faucet
        achieve_once is_on(faucet) # Turn the faucet on to fill the bowl with water
        achieve has_water(bowl) # The bowl should now have water
        achieve_once is_off(faucet) # Turn the faucet off after filling the bowl

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and not visited(bowl)
        # Select an unvisited bowl
        
        if is_bowl_empty(bowl):
            # If the bowl is empty, proceed to fill it with water
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            observe(kitchen_counter, "Check for faucet presence on kitchen counter")
            
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, kitchen_counter)
            # Select a faucet near the kitchen counter
            
            fill_bowl_with_water(bowl, faucet)
        else:
            # If the bowl already has water, the subtask is complete
            achieve has_water(bowl)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
