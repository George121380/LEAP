From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2070_around_home_office_319(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(vacuum_cleaner,home_office_instance)
        else:
            exp(vacuum_cleaner,home_office_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,home_office_instance]=True
        close[home_office_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation

def is_floor_clean(room:item):
    # Function to check if the floor in a room is clean
    symbol floor_clean=exists floor: item : is_floor(floor) and clean(floor) and inside(floor, room)
    return floor_clean

def has_vacuum_cleaner(room:item):
    # Function to check if there is a vacuum cleaner in a room
    symbol vacuum_present=exists vacuum: item : is_vacuum_cleaner(vacuum) and inside(vacuum, room)
    return vacuum_present

behavior clean_floor(room:item, vacuum:item):
    body:
        assert is_vacuum_cleaner(vacuum)
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        foreach room: item:
            if not is_floor_clean(room):
                # Check if the floor is not clean
                if has_vacuum_cleaner(room):
                    bind vacuum: item where:
                        is_vacuum_cleaner(vacuum) and inside(vacuum, room)
                    clean_floor(room, vacuum)
                else:
                    foreach vacuum: item:
                        if is_vacuum_cleaner(vacuum) and not visited(vacuum):
                            observe(vacuum, "Locate the vacuum cleaner in unclean rooms")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: floor; available variables: [Variable<room: item>, Variable<vacuum: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_vacuum_cleaner_2070_around_home_office_319(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(vacuum_cleaner,home_office_instance)
        else:
            exp(vacuum_cleaner,home_office_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,home_office_instance]=True
        close[home_office_instance,vacuum_cleaner]=True
    

#goal_representation
 
def is_floor_clean(room:item):
    # Function to check if the floor in a room is clean
    symbol floor_clean=exists floor: item : is_floor(floor) and clean(floor) and inside(floor, room)
    return floor_clean

def has_vacuum_cleaner(room:item):
    # Function to check if there is a vacuum cleaner in a room
    symbol vacuum_present=exists vacuum: item : is_vacuum_cleaner(vacuum) and inside(vacuum, room)
    return vacuum_present

behavior clean_floor(room:item, floor:item, vacuum:item):
    body:
        assert is_vacuum_cleaner(vacuum)
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        foreach room: item:
            if not is_floor_clean(room):
                # Check if the floor is not clean
                if has_vacuum_cleaner(room):
                    bind floor: item where:
                        is_floor(floor) and inside(floor, room)
                    bind vacuum: item where:
                        is_vacuum_cleaner(vacuum) and inside(vacuum, room)
                    clean_floor(room, floor, vacuum)
                else:
                    foreach vacuum: item:
                        if is_vacuum_cleaner(vacuum) and not visited(vacuum):
                            observe(vacuum, "Locate the vacuum cleaner in unclean rooms")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_floor_clean(room:item):
    # Function to check if the floor in a room is clean
    symbol floor_clean=exists floor: item : is_floor(floor) and clean(floor) and inside(floor, room)
    return floor_clean

def has_vacuum_cleaner(room:item):
    # Function to check if there is a vacuum cleaner in a room
    symbol vacuum_present=exists vacuum: item : is_vacuum_cleaner(vacuum) and inside(vacuum, room)
    return vacuum_present

behavior clean_floor(room:item, floor:item, vacuum:item):
    body:
        assert is_vacuum_cleaner(vacuum)
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        foreach room: item:
            if not is_floor_clean(room):
                # Check if the floor is not clean
                if has_vacuum_cleaner(room):
                    bind floor: item where:
                        is_floor(floor) and inside(floor, room)
                    bind vacuum: item where:
                        is_vacuum_cleaner(vacuum) and inside(vacuum, room)
                    clean_floor(room, floor, vacuum)
                else:
                    foreach vacuum: item:
                        if is_vacuum_cleaner(vacuum) and not visited(vacuum):
                            observe(vacuum, "Locate the vacuum cleaner in unclean rooms")

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(vacuum_cleaner_2070, home_office_319)walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Locate the vacuum cleaner in unclean rooms)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(vacuum_cleaner_2070, home_office_319)
Find vacuum_cleaner_2070. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2070)obs(vacuum_cleaner_2070, Locate the vacuum cleaner in unclean rooms)
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
obs(vacuum_cleaner_2070, Locate the vacuum cleaner in unclean rooms)
Get this information:  vacuum_cleaner_2070 is inside home_office_319. vacuum_cleaner_2070 is close to couch_352. vacuum_cleaner_2070 is close to character_65. vacuum_cleaner_2070 is PLUGGED_OUT. vacuum_cleaner_2070 is OFF. vacuum_cleaner_2070 is CLEAN.
##############################
From agent.py
Human Instruction: Plug in and turn on the vacuum_cleaner_2070, then vacuum the floor in home_office_319 to complete the sub-task.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: look for vacuum_cleaner_2070 around home_office_319.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner in unclean rooms.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_plug_near_powersocket(vacuum_cleaner:item):
    # Check if there is a plug near a power socket
    symbol plug_nearby=exists socket: item : is_powersocket(socket) and close(vacuum_cleaner, socket)
    return plug_nearby

behavior plug_in_vacuum_cleaner(vacuum_cleaner:item, powersocket:item):
    body:
        if not plugged(vacuum_cleaner):
            if has_plug_near_powersocket(vacuum_cleaner):
                achieve plugged(vacuum_cleaner)

behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if plugged(vacuum_cleaner):
            achieve is_on(vacuum_cleaner)

behavior vacuum_room(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select a power socket

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        plug_in_vacuum_cleaner(vacuum_cleaner, powersocket)
        turn_on_vacuum_cleaner(vacuum_cleaner)
        vacuum_room(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_vacuum_found(vacuum:item):
    # Function to check if the vacuum cleaner has already been found
    symbol vacuum_found = visited(vacuum)
    return vacuum_found

behavior plug_in_and_turn_on_vacuum(vacuum:item):
    body:
        achieve plugged(vacuum) # Plug in the vacuum cleaner
        achieve is_on(vacuum) # Turn on the vacuum cleaner

behavior vacuum_floor(room:item, vacuum:item):
    body:
        achieve clean(room) # Vacuum the floor in the room

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home_office

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        if not is_vacuum_found(vacuum_cleaner):
            observe(home_office, "Locate the vacuum cleaner in unclean rooms")
            # If the vacuum cleaner is not found, observe in the home office

        plug_in_and_turn_on_vacuum(vacuum_cleaner)
        vacuum_floor(home_office, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vacuum_found(vacuum:item):
    # Function to check if the vacuum cleaner has already been found
    symbol vacuum_found = visited(vacuum)
    return vacuum_found

behavior plug_in_and_turn_on_vacuum(vacuum:item):
    body:
        achieve plugged(vacuum) # Plug in the vacuum cleaner
        achieve is_on(vacuum) # Turn on the vacuum cleaner

behavior vacuum_floor(room:item, vacuum:item):
    body:
        achieve clean(room) # Vacuum the floor in the room

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home_office

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        if not is_vacuum_found(vacuum_cleaner):
            observe(home_office, "Locate the vacuum cleaner in unclean rooms")
            # If the vacuum cleaner is not found, observe in the home office

        plug_in_and_turn_on_vacuum(vacuum_cleaner)
        vacuum_floor(home_office, vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)obs(home_office_319, Locate the vacuum cleaner in unclean rooms)walk_executor(vacuum_cleaner_2070)plugin_executor(vacuum_cleaner_2070)switchon_executor(vacuum_cleaner_2070)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer close vacuum_cleaner_2070.
##############################
From agent.py
obs(home_office_319, Locate the vacuum cleaner in unclean rooms)
Get this information:  ceilinglamp_349 is inside home_office_319. vacuum_cleaner_2070 is inside home_office_319. computer_417 is inside home_office_319. ceiling_341 is inside home_office_319. couch_352 is inside home_office_319. wall_330 is inside home_office_319. headset_2062 is inside home_office_319. curtain_409 is inside home_office_319. floor_322 is inside home_office_319. wall_333 is inside home_office_319. closetdrawer_382 is inside home_office_319. ceiling_344 is inside home_office_319. mat_401 is inside home_office_319. powersocket_412 is inside home_office_319. hanger_363 is inside home_office_319. hanger_374 is inside home_office_319. floor_325 is inside home_office_319. wall_336 is inside home_office_319. drawing_404 is inside home_office_319. table_355 is inside home_office_319. coffee_table_2068 is inside home_office_319. keyboard_415 is inside home_office_319. closetdrawer_377 is inside home_office_319. headset_2076 is inside home_office_319. floor_328 is inside home_office_319. ceiling_339 is inside home_office_319. curtain_407 is inside home_office_319. hanger_369 is inside home_office_319. doorjamb_347 is inside home_office_319. dresser_358 is inside home_office_319. wall_331 is inside home_office_319. floor_320 is inside home_office_319. closetdrawer_388 is inside home_office_319. walllamp_350 is inside home_office_319. remote_control_2052 is inside home_office_319. doorjamb_346 is between home_office_319. filing_cabinet_399 is inside home_office_319. television_410 is inside home_office_319. hanger_361 is inside home_office_319. spectacles_2082 is inside home_office_319. floor_323 is inside home_office_319. closetdrawer_380 is inside home_office_319. drawing_402 is inside home_office_319. tvstand_353 is inside home_office_319. ceiling_342 is inside home_office_319. hanger_372 is inside home_office_319. ceiling_345 is inside home_office_319. wall_334 is inside home_office_319. cat_2055 is inside home_office_319. clothes_jacket_2047 is inside home_office_319. closetdrawer_394 is inside home_office_319. floor_326 is inside home_office_319. home_office_319 is close to coffee_table_2068. chair_356 is inside home_office_319. book_2066 is inside home_office_319. phone_2077 is inside home_office_319. mouse_413 is inside home_office_319. hanger_375 is inside home_office_319. pencil_2001 is inside home_office_319. window_348 is inside home_office_319. ceiling_337 is inside home_office_319. cpuscreen_416 is inside home_office_319. pillow_405 is inside home_office_319. hanger_367 is inside home_office_319. wall_329 is inside home_office_319. ceiling_340 is inside home_office_319. hanger_359 is inside home_office_319. dvd_player_2061 is inside home_office_319. curtain_408 is inside home_office_319. floor_321 is inside home_office_319. wall_332 is inside home_office_319. drawing_400 is inside home_office_319. walllamp_351 is inside home_office_319. photoframe_430 is inside home_office_319. floor_324 is inside home_office_319. light_411 is inside home_office_319. ceiling_343 is inside home_office_319. wall_335 is inside home_office_319. closetdrawer_392 is inside home_office_319. drawing_403 is inside home_office_319. bookshelf_354 is inside home_office_319. hanger_365 is inside home_office_319. floor_327 is inside home_office_319. character_65 is inside home_office_319. closetdrawer_384 is inside home_office_319. doorjamb_346 is inside home_office_319. desk_357 is inside home_office_319. book_2067 is inside home_office_319. mousepad_414 is inside home_office_319. hanger_376 is inside home_office_319. pillow_406 is inside home_office_319. ceiling_338 is inside home_office_319. hairbrush_2002 is inside home_office_319. home_office_319 is CLEAN.
##############################
From agent.py
walk_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
plugin_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2070)
Robot is inside home_office_319. Robot is close vacuum_cleaner_2070. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor in the home_office_319 using the vacuum_cleaner_2070, which has already been found, plugged in, and turned on.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: look for vacuum_cleaner_2070 around home_office_319.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner in unclean rooms.
Action 5: Walk to home_office_319.
Action 6: Observe around home_office_319 with the question of Locate the vacuum cleaner in unclean rooms.
Action 7: Walk to vacuum_cleaner_2070.
Action 8: Plug in vacuum_cleaner_2070.
Action 9: Switch on vacuum_cleaner_2070.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_clean(room: item):
    # Function to check if the home office floor is clean
    symbol home_office_clean = exists floor: item : is_floor(floor) and inside(floor, room) and clean(floor)
    return home_office_clean

behavior vacuum_floor(vacuum_cleaner: item, room: item):
    body:
        achieve clean(vacuum_cleaner) 
        # Ensure that the vacuum cleaner is used to clean the floor

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner which is plugged in and turned on

        if not is_home_office_clean(home_office):
            vacuum_floor(vacuum_cleaner, home_office)
        # Vacuum the floor in the home office if it is not already clean

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)

behavior __goal__():
    body:
        bind home_office_319: item where:
            is_home_office(home_office_319)
        # Select the home office room with ID 319

        bind vacuum_cleaner_2070: item where:
            is_vacuum_cleaner(vacuum_cleaner_2070)
        # Select the vacuum cleaner with ID 2070

        vacuum_floor(vacuum_cleaner_2070, home_office_319)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_room(room:item):
    # Function to check if the room is the home office
    symbol home_office_exists=exists office: item : is_home_office(office) and id[office]==room
    return home_office_exists

behavior clean_floor_with_vacuum(vacuum:item, room:item):
    body:
        achieve clean(room) # Vacuum the floor to achieve cleanliness

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and is_home_office_room(home_office)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
        
        clean_floor_with_vacuum(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Invalid comparison: id(V::office) vs V::room
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_home_office_room(room:item):
    # Function to check if the room is the home office
    symbol home_office_exists=exists office: item : is_home_office(office) and id[office]==room
    return home_office_exists

behavior clean_floor_with_vacuum(vacuum:item, room:item):
    body:
        achieve clean(room) # Vacuum the floor to achieve cleanliness

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and is_home_office_room(home_office)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
        
        clean_floor_with_vacuum(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Invalid comparison: id(V::office) vs V::room
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#goal_representation
 
behavior clean_floor_with_vacuum(vacuum:item, room:item):
    body:
        achieve clean(room) # Vacuum the floor to achieve cleanliness

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
        
        clean_floor_with_vacuum(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_mat_236_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room) # The room floor needs to be cleaned

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select the vacuum cleaner with ID 2070

        vacuum_floor(vacuum_cleaner, home_office)
        # Clean the home office floor using the vacuum cleaner

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_floor_with_vacuum(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Make sure that the floor is clean

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select the vacuum cleaner with ID 2070

        bind floor: item where:
            is_floor(floor) and inside(floor, home_office)
        # Bind the floor inside the home office

        clean_floor_with_vacuum(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, room:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        assert is_home_office(room)
        achieve inside(vacuum_cleaner, room)
        achieve is_on(vacuum_cleaner)
        achieve plugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        vacuum_floor(vacuum_cleaner, home_office)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_mat_173_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)
        # Ensure the floor in the specified room is clean using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select the vacuum cleaner with ID 2070

        bind room: item where:
            is_home_office(room) and id[room]==319
        # Select the home office with ID 319

        vacuum_floor(vacuum_cleaner, room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner that is already plugged in and on
        
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        vacuum_floor(vacuum_cleaner, home_office)
        # Use the vacuum cleaner to clean the floor in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office(area: item):
    # Function to check if an area is a home office
    return is_home_office(area)

def has_operational_vacuum_cleaner(area: item):
    # Function to check if an operational vacuum cleaner is in the specified area
    symbol has_vacuum=exists vc: item : is_vacuum_cleaner(vc) and is_on(vc) and plugged(vc) and inside(vc, area)
    return has_vacuum

behavior vacuum_floor_with_cleaner(floor: item):
    body:
        achieve clean(floor) # Clean the floor effectively in the specified room

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office area
        
        if is_home_office(home_office) and has_operational_vacuum_cleaner(home_office):
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
            # Select the operational vacuum cleaner in the home office
            vacuum_floor_with_cleaner(home_office)
            # Vacuum the floor in the home office with the operational vacuum cleaner


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_the_floor(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)
        # The floor in the room is clean

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select the vacuum cleaner with ID 2070

        vacuum_the_floor(vacuum_cleaner, home_office)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_home_office_vacuum_cleaner_found():
    # Function to check if the vacuum cleaner in the home office has already been located
    symbol vacuum_found=exists vacuum_cleaner: item: is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
    return vacuum_found

behavior find_and_prepare_vacuum_cleaner(vacuum_cleaner:item, home_office:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        if not is_home_office_vacuum_cleaner_found():
            # If the vacuum cleaner hasnt been located, perform observations 
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner)
            observe(vacuum_cleaner, "Locate the vacuum cleaner in unclean rooms within the home office")
        else:
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
            find_and_prepare_vacuum_cleaner(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: home_office; available variables: [Variable<vacuum_cleaner: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_401_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_towel_2057_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#goal_representation
 
def is_home_office_vacuum_cleaner_found(home_office:item):
    # Function to check if the vacuum cleaner in the home office has already been located
    symbol vacuum_found=exists vacuum_cleaner: item: is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
    return vacuum_found

behavior find_and_prepare_vacuum_cleaner(vacuum_cleaner:item, home_office:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        if not is_home_office_vacuum_cleaner_found(home_office):
            # If the vacuum cleaner hasnt been located, perform observations 
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner)
            observe(vacuum_cleaner, "Locate the vacuum cleaner in unclean rooms within the home office")
        else:
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
            find_and_prepare_vacuum_cleaner(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_found(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner has already been found
    symbol vacuum_found=visited(vacuum_cleaner)
    return vacuum_found

behavior operate_vacuum_cleaner(vacuum_cleaner:item, home_office:item):
    body:
        achieve clean(home_office)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select vacuum cleaner with ID 2070

        if not is_vacuum_cleaner_found(vacuum_cleaner):
            # If the vacuum cleaner hasnt been found, observe the area
            observe(vacuum_cleaner, "Locate the vacuum cleaner in unclean rooms")

        operate_vacuum_cleaner(vacuum_cleaner, home_office)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_vacuum_cleaner_found(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner has already been found
    symbol vacuum_found=visited(vacuum_cleaner)
    return vacuum_found

behavior operate_vacuum_cleaner(vacuum_cleaner:item, home_office:item):
    body:
        achieve clean(home_office)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select vacuum cleaner with ID 2070

        if not is_vacuum_cleaner_found(vacuum_cleaner):
            # If the vacuum cleaner hasnt been found, observe the area
            observe(vacuum_cleaner, "Locate the vacuum cleaner in unclean rooms")

        operate_vacuum_cleaner(vacuum_cleaner, home_office)

##############################
From agent.py-> find a plan in act()
obs(vacuum_cleaner_2070, Locate the vacuum cleaner in unclean rooms)
##############################
From agent.py
obs(vacuum_cleaner_2070, Locate the vacuum cleaner in unclean rooms)
Get this information:  vacuum_cleaner_2070 is inside home_office_319. vacuum_cleaner_2070 is close to couch_352. vacuum_cleaner_2070 is close to character_65. vacuum_cleaner_2070 is ON. vacuum_cleaner_2070 is CLEAN. vacuum_cleaner_2070 is PLUGGED_IN.
##############################
From agent.py
Human Instruction: Vacuum the floor in home_office_319 using vacuum_cleaner_2070, ensuring the area becomes clean.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: look for vacuum_cleaner_2070 around home_office_319.
Action 3: Walk to vacuum_cleaner_2070.
Action 4: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner in unclean rooms.
Action 5: Walk to home_office_319.
Action 6: Observe around home_office_319 with the question of Locate the vacuum cleaner in unclean rooms.
Action 7: Walk to vacuum_cleaner_2070.
Action 8: Plug in vacuum_cleaner_2070.
Action 9: Switch on vacuum_cleaner_2070.
Action 10: Observe around vacuum_cleaner_2070 with the question of Locate the vacuum cleaner in unclean rooms.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
def is_room_dirty(room:item):
    # Function to check if a room is dirty
    symbol dirty_room=exists floor: item : is_floor(floor) and dirty(floor) and inside(floor, room)
    return dirty_room

behavior vacuum_room(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with ID 319
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select the vacuum cleaner with ID 2070

        if is_room_dirty(home_office):
            bind floor: item where:
                is_floor(floor) and inside(floor, home_office)
            vacuum_room(floor, vacuum_cleaner)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

behavior find_napkin_2005_around_trashcan_99(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_clean(x:item):
    # Function to check if the floor is clean
    symbol clean_floor=clean(x)
    return clean_floor

def is_vacuum_cleaner(x:item):
    # Function to check if x is a vacuum cleaner
    symbol vacuum_cleaner=exists y: item: is_vacuum_cleaner(y) and y==x
    return vacuum_cleaner

behavior operate_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        # Ensure that the object to be used is a vacuum cleaner

        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure the vacuum cleaner is turned on
        achieve clean(floor) # Ensure the floor is clean

behavior clean_floor():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and is_home_office(inside(floor))
        # Bind the floor inside home office

        operate_vacuum_cleaner(vacuum_cleaner, floor)

behavior __goal__():
    body:
        clean_floor()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 1 vs 2. Args: (VariableExpression<V::floor>,), Types: (ObjectType<item>, ObjectType<item>)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_towel_2058_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#goal_representation
 
def is_floor_clean(x:item):
    # Function to check if the floor is clean
    symbol clean_floor=clean(x)
    return clean_floor

def is_vacuum_cleaner(x:item):
    # Function to check if x is a vacuum cleaner
    symbol vacuum_cleaner=exists y: item: is_vacuum_cleaner(y) and y==x
    return vacuum_cleaner

behavior operate_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        # Ensure that the object to be used is a vacuum cleaner

        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure the vacuum cleaner is turned on
        achieve clean(floor) # Ensure the floor is clean

behavior clean_floor(vacuum_cleaner:item, floor:item):
    body:
        operate_vacuum_cleaner(vacuum_cleaner, floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and is_home_office(inside(floor))
        # Bind the floor inside home office

        clean_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Number of arguments does not match the number of types: 1 vs 2. Args: (VariableExpression<V::floor>,), Types: (ObjectType<item>, ObjectType<item>)
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_236_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_388(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#goal_representation
 
def is_floor_clean(x:item):
    # Function to check if the floor is clean
    symbol clean_floor=clean(x)
    return clean_floor

def is_vacuum_cleaner(x:item):
    # Function to check if x is a vacuum cleaner
    symbol vacuum_cleaner=exists y: item: is_vacuum_cleaner(y) and y==x
    return vacuum_cleaner

behavior operate_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        # Ensure that the object to be used is a vacuum cleaner

        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure the vacuum cleaner is turned on
        achieve clean(floor) # Ensure the floor is clean

behavior clean_floor(vacuum_cleaner:item, floor:item):
    body:
        operate_vacuum_cleaner(vacuum_cleaner, floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and is_home_office(floor)
        # Bind the floor inside home office

        clean_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def vacuum_room_clean(room:item, vacuum:item):
    body:
        achieve clean(room)

behavior __goal__():
    body:
        bind room: item where:
            is_home_office(room) and id[room] == 319
        # Select the home office with ID 319

        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum] == 2070
        # Select the vacuum cleaner with ID 2070

        vacuum_room_clean(room, vacuum)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5845, column 9.
Expected one of: 
	* NOT_EQ
	* SEMICOLON
	* AND
	* LSHIFT
	* AMPERSAND
	* __ANON_0
	* GREATER_EQ
	* OR
	* __ANON_5
	* STAR
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* RSHIFT
	* CIRCUMFLEX
	* _NEWLINE
	* MORETHAN
	* __ANON_4
	* __ANON_8
	* DOUBLE_EQUAL
	* PLUS
	* AT
	* FLOORDIV
	* COMMA
	* __ANON_3
	* VBAR
	* EQUAL
	* IF
	* __ANON_6
	* __ANON_2
	* LESS_EQ
	* MINUS
	* __ANON_7

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def vacuum_room_clean(room:item, vacuum:item):
    body:
        achieve clean(room)

behavior __goal__():
    body:
        bind room: item where:
            is_home_office(room) and id[room] == 319
        # Select the home office with ID 319

        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum] == 2070
        # Select the vacuum cleaner with ID 2070

        vacuum_room_clean(room, vacuum)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 5845, column 9.
Expected one of: 
	* NOT_EQ
	* SEMICOLON
	* AND
	* LSHIFT
	* AMPERSAND
	* __ANON_0
	* GREATER_EQ
	* OR
	* __ANON_5
	* STAR
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* RSHIFT
	* CIRCUMFLEX
	* _NEWLINE
	* MORETHAN
	* __ANON_4
	* __ANON_8
	* DOUBLE_EQUAL
	* PLUS
	* AT
	* FLOORDIV
	* COMMA
	* __ANON_3
	* VBAR
	* EQUAL
	* IF
	* __ANON_6
	* __ANON_2
	* LESS_EQ
	* MINUS
	* __ANON_7

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_237_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#goal_representation
 
behavior vacuum_room_clean(room:item, vacuum:item):
    body:
        achieve clean(room)
        # Ensure the room is clean by using the vacuum cleaner

behavior __goal__():
    body:
        bind room: item where:
            is_home_office(room) and id[room] == 319
        # Select the home office with ID 319

        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum] == 2070
        # Select the vacuum cleaner with ID 2070

        vacuum_room_clean(room, vacuum)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_vacuum(x:item):
    # Function to check if an item is a vacuum cleaner
    symbol is_vacuum = is_vacuum_cleaner(x)
    return is_vacuum

def has_power(x:item):
    # Function to check if the vacuum cleaner is plugged in and has power
    symbol power_ok = plugged(x) and is_on(x)
    return power_ok

behavior vacuum_floor(vacuum:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office where the floor needs to be cleaned

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
        # Select the vacuum cleaner located in the home office

        bind floor: item where:
            is_floor(floor) and inside(floor, home_office)
        # Select the floor in the home office

        if not has_power(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in and turned on

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_22_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation

behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve inside(vacuum_cleaner, floor)
        # Ensure the vacuum cleaner is in the location to be cleaned

        achieve clean(floor)
        # Achieve the goal of having a clean floor

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        bind floor: item where:
            is_floor(floor) and inside(floor, home_office)
        # Select the floor inside home_office_319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select vacuum_cleaner_2070
        
        vacuum_the_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_clean_vacuum_cleaner(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is clean
    symbol vacuum_cleaner_is_clean=clean(vacuum_cleaner)
    return vacuum_cleaner_is_clean

behavior clean_vacuum(vacuum_cleaner:item):
    body:
        scrub(vacuum_cleaner)
        wipe(vacuum_cleaner)
        # Scrub and wipe the vacuum cleaner to clean it

behavior start_vacuum(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        # Plug in and turn on the vacuum cleaner

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Achieve a clean state on the floor

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind to the home office
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and inside(vacuum_cleaner, home_office)
        # Bind to vacuum cleaner 2070 in home office 319
        bind floor: item where:
            is_floor(floor) and inside(floor, home_office)
        # Bind to the floor in the home office
        if not is_clean_vacuum_cleaner(vacuum_cleaner):
            clean_vacuum(vacuum_cleaner)
        start_vacuum(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_towel_2059_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_detergent_2084_around_bathroom_cabinet_40(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_found(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is already found
    symbol vacuum_cleaner_found=visited(vacuum_cleaner)
    return vacuum_cleaner_found

def is_home_office_clean(room:item):
    # Function to check if the home office is clean
    symbol room_clean=clean(room)
    return room_clean

behavior clean_home_office_with_vacuum(vacuum_cleaner:item, home_office:item):
    body:
        achieve clean(home_office) # Ensure the home office is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind home_office: item where:
            is_home_office(home_office) and id[home_office] == 319
        # Select the home office with the specific ID

        if not is_vacuum_cleaner_found(vacuum_cleaner):
            # If the vacuum cleaner hasnt been found yet, observe likely locations
            observe(vacuum_cleaner, "Locate the vacuum cleaner in home office and unclean rooms")

        if not is_home_office_clean(home_office):
            # If the home office isnt clean, perform cleaning
            clean_home_office_with_vacuum(vacuum_cleaner, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_cd_player_2060_around_dvd_player_2061(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2061
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(cd_player,dvd_player_instance)
        else:
            exp(cd_player,dvd_player_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,dvd_player_instance]=True
        close[dvd_player_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
behavior prepare_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

behavior clean_floor_with_vacuum(vacuum_cleaner:item, room:item):
    body:
        achieve clean(room)
        # Ensure the rooms floor is clean

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office room

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2070
        # Select the specific vacuum cleaner

        bind power_socket: item where:
            is_powersocket(power_socket) and close(power_socket, home_office)
        # Select a power socket close to home_office

        prepare_vacuum_cleaner(vacuum_cleaner)
        clean_floor_with_vacuum(vacuum_cleaner, home_office)
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_mat_401_around_mat_401(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==401
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_clothes_hat_2045_around_hanger_374(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind hanger_instance:item where:
            is_hanger(hanger_instance) and id[hanger_instance]==374
        achieve close_char(char,hanger_instance)
        if can_open(hanger_instance):
            achieve_once open(hanger_instance)
            exp(clothes_hat,hanger_instance)
        else:
            exp(clothes_hat,hanger_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,hanger_instance]=True
        close[hanger_instance,clothes_hat]=True
    

behavior find_oil_2079_around_kitchen_counter_230(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

behavior find_towel_2058_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

behavior find_detergent_2084_around_bathroom_counter_41(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(detergent,bathroom_counter_instance)
        else:
            exp(detergent,bathroom_counter_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_counter_instance]=True
        close[bathroom_counter_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior vacuum_floor(room:item, vacuum:item):
    body:
        achieve close_char(char, vacuum)
        achieve plugged(vacuum)
        achieve is_on(vacuum)
        # Ensure the vacuum cleaner is close, plugged in, and turned on

behavior ensure_floor_clean(room:item):
    body:
        observe(room, "Check if the floor is clean")
        # Inspect the room to ensure cleanliness

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select the vacuum cleaner with ID 2070

        vacuum_floor(home_office, vacuum_cleaner)
        ensure_floor_clean(home_office)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior vacuum_floor(room:item, vacuum:item):
    body:
        achieve close_char(char, vacuum)
        achieve plugged(vacuum)
        achieve is_on(vacuum)
        # Ensure the vacuum cleaner is close, plugged in, and turned on

behavior ensure_floor_clean(room:item):
    body:
        observe(room, "Check if the floor is clean")
        # Inspect the room to ensure cleanliness

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office) and id[home_office]==319
        # Select the home office with ID 319

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner]==2070
        # Select the vacuum cleaner with ID 2070

        vacuum_floor(home_office, vacuum_cleaner)
        ensure_floor_clean(home_office)
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)obs(home_office_319, Check if the floor is clean)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer close vacuum_cleaner_2070.
##############################
From agent.py
obs(home_office_319, Check if the floor is clean)
Get this information:  ceilinglamp_349 is inside home_office_319. vacuum_cleaner_2070 is inside home_office_319. computer_417 is inside home_office_319. ceiling_341 is inside home_office_319. couch_352 is inside home_office_319. wall_330 is inside home_office_319. headset_2062 is inside home_office_319. curtain_409 is inside home_office_319. floor_322 is inside home_office_319. wall_333 is inside home_office_319. closetdrawer_382 is inside home_office_319. ceiling_344 is inside home_office_319. mat_401 is inside home_office_319. powersocket_412 is inside home_office_319. hanger_363 is inside home_office_319. hanger_374 is inside home_office_319. floor_325 is inside home_office_319. wall_336 is inside home_office_319. drawing_404 is inside home_office_319. table_355 is inside home_office_319. coffee_table_2068 is inside home_office_319. keyboard_415 is inside home_office_319. closetdrawer_377 is inside home_office_319. headset_2076 is inside home_office_319. floor_328 is inside home_office_319. ceiling_339 is inside home_office_319. curtain_407 is inside home_office_319. hanger_369 is inside home_office_319. doorjamb_347 is inside home_office_319. dresser_358 is inside home_office_319. wall_331 is inside home_office_319. floor_320 is inside home_office_319. closetdrawer_388 is inside home_office_319. walllamp_350 is inside home_office_319. remote_control_2052 is inside home_office_319. doorjamb_346 is between home_office_319. filing_cabinet_399 is inside home_office_319. television_410 is inside home_office_319. hanger_361 is inside home_office_319. spectacles_2082 is inside home_office_319. floor_323 is inside home_office_319. closetdrawer_380 is inside home_office_319. drawing_402 is inside home_office_319. tvstand_353 is inside home_office_319. ceiling_342 is inside home_office_319. hanger_372 is inside home_office_319. ceiling_345 is inside home_office_319. wall_334 is inside home_office_319. cat_2055 is inside home_office_319. clothes_jacket_2047 is inside home_office_319. closetdrawer_394 is inside home_office_319. floor_326 is inside home_office_319. home_office_319 is close to coffee_table_2068. chair_356 is inside home_office_319. book_2066 is inside home_office_319. phone_2077 is inside home_office_319. mouse_413 is inside home_office_319. hanger_375 is inside home_office_319. pencil_2001 is inside home_office_319. window_348 is inside home_office_319. ceiling_337 is inside home_office_319. cpuscreen_416 is inside home_office_319. pillow_405 is inside home_office_319. hanger_367 is inside home_office_319. wall_329 is inside home_office_319. ceiling_340 is inside home_office_319. hanger_359 is inside home_office_319. dvd_player_2061 is inside home_office_319. curtain_408 is inside home_office_319. floor_321 is inside home_office_319. wall_332 is inside home_office_319. drawing_400 is inside home_office_319. walllamp_351 is inside home_office_319. photoframe_430 is inside home_office_319. floor_324 is inside home_office_319. light_411 is inside home_office_319. ceiling_343 is inside home_office_319. wall_335 is inside home_office_319. closetdrawer_392 is inside home_office_319. drawing_403 is inside home_office_319. bookshelf_354 is inside home_office_319. hanger_365 is inside home_office_319. floor_327 is inside home_office_319. character_65 is inside home_office_319. closetdrawer_384 is inside home_office_319. doorjamb_346 is inside home_office_319. desk_357 is inside home_office_319. book_2067 is inside home_office_319. mousepad_414 is inside home_office_319. hanger_376 is inside home_office_319. pillow_406 is inside home_office_319. ceiling_338 is inside home_office_319. hairbrush_2002 is inside home_office_319. home_office_319 is CLEAN.
##############################
