From agent.py
Reset goals: The sub-goals are: 
['1. Find the chicken and onion.', '2. Place the chicken and onion into the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_salt_2037_around_kitchen_counter_230(food_salt:item):
    goal: not unknown(food_salt)
    body:
        assert is_food_salt(food_salt)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_salt,kitchen_counter_instance)
        else:
            exp(food_salt,kitchen_counter_instance)
    eff:
        unknown[food_salt]=False
        close[food_salt,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_salt]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_found(item:item):
    # Function to check if the specified food item is already found
    symbol item_found=visited(item)
    return item_found

behavior find_food_item(food_item:item):
    body:
        if not is_item_found(food_item):
            # If the item is not found yet
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check for the food item inside")
            # Observe inside the fridge if the food item is there

            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            observe(kitchen_counter, "Check for the food item around the kitchen counter")
            # Observe around the kitchen counter if the food item is there

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        find_food_item(chicken)
        find_food_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_item_found(item:item):
    # Function to check if the specified food item is already found
    symbol item_found=visited(item)
    return item_found

behavior find_food_item(food_item:item):
    body:
        if not is_item_found(food_item):
            # If the item is not found yet
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check for the food item inside")
            # Observe inside the fridge if the food item is there

            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            observe(kitchen_counter, "Check for the food item around the kitchen counter")
            # Observe around the kitchen counter if the food item is there

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        find_food_item(chicken)
        find_food_item(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)obs(fridge_289, Check for the food item inside)walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check for the food item around the kitchen counter)walk_executor(fridge_289)obs(fridge_289, Check for the food item inside)walk_executor(kitchen_counter_230)obs(kitchen_counter_230, Check for the food item around the kitchen counter)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
obs(fridge_289, Check for the food item inside)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is OPEN. fridge_289 is OFF. fridge_289 is PLUGGED_IN. fridge_289 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
obs(kitchen_counter_230, Check for the food item around the kitchen counter)
Get this information:  pot_2069 is on kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2063 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. fryingpan_2083 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. stove_2065 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
From agent.py
walk_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
obs(fridge_289, Check for the food item inside)
Get this information:  food_fish_2021 is inside fridge_289. food_onion_2032 is inside fridge_289. milk_2043 is inside fridge_289. food_cake_2013 is inside fridge_289. food_potato_2035 is inside fridge_289. food_hamburger_2024 is inside fridge_289. food_cheese_2016 is inside fridge_289. food_kiwi_2027 is inside fridge_289. food_steak_2008 is inside fridge_289. food_donut_2019 is inside fridge_289. fridge_289 is facing drawing_239. food_snack_2038 is inside fridge_289. food_food_2022 is inside fridge_289. food_banana_2011 is inside fridge_289. food_oatmeal_2030 is inside fridge_289. food_vegetable_2041 is inside fridge_289. food_carrot_2014 is inside fridge_289. food_peanut_butter_2033 is inside fridge_289. food_ice_cream_2025 is inside fridge_289. food_rice_2036 is inside fridge_289. food_chicken_2017 is inside fridge_289. fridge_289 is close to cupboard_229. fridge_289 is close to floor_6. fridge_289 is close to floor_7. fridge_289 is close to kitchen_counter_230. fridge_289 is close to wall_11. fridge_289 is close to wall_14. fridge_289 is close to ceiling_18. fridge_289 is close to mat_22. fridge_289 is close to sauce_2078. fridge_289 is close to shower_36. fridge_289 is close to toilet_37. fridge_289 is close to microwave_297. fridge_289 is close to door_44. fridge_289 is close to doorjamb_45. fridge_289 is close to drawing_174. fridge_289 is close to drawing_239. fridge_289 is close to drawing_240. fridge_289 is close to ceiling_216. fridge_289 is close to floor_202. fridge_289 is close to floor_203. fridge_289 is close to floor_77. fridge_289 is close to wall_211. fridge_289 is close to wall_85. fridge_289 is close to ceiling_95. fridge_289 is close to food_steak_2008. fridge_289 is close to food_apple_2009. fridge_289 is close to food_bacon_2010. fridge_289 is close to food_banana_2011. fridge_289 is close to food_bread_2012. fridge_289 is close to food_cake_2013. fridge_289 is close to food_carrot_2014. fridge_289 is close to food_cereal_2015. fridge_289 is close to food_cheese_2016. fridge_289 is close to food_chicken_2017. fridge_289 is close to food_dessert_2018. fridge_289 is close to food_donut_2019. fridge_289 is close to food_egg_2020. fridge_289 is close to food_fish_2021. fridge_289 is close to food_food_2022. fridge_289 is close to food_fruit_2023. fridge_289 is close to food_hamburger_2024. fridge_289 is close to food_ice_cream_2025. fridge_289 is close to food_jam_2026. fridge_289 is close to food_kiwi_2027. fridge_289 is close to food_lemon_2028. fridge_289 is close to food_noodles_2029. fridge_289 is close to food_oatmeal_2030. fridge_289 is close to food_orange_2031. fridge_289 is close to food_onion_2032. fridge_289 is close to food_peanut_butter_2033. fridge_289 is close to food_pizza_2034. fridge_289 is close to food_potato_2035. fridge_289 is close to food_rice_2036. fridge_289 is close to food_salt_2037. fridge_289 is close to food_snack_2038. fridge_289 is close to food_sugar_2039. fridge_289 is close to food_turkey_2040. fridge_289 is close to food_vegetable_2041. fridge_289 is close to dry_pasta_2042. fridge_289 is close to milk_2043. fridge_289 is close to trashcan_99. fridge_289 is close to character_65. food_lemon_2028 is inside fridge_289. food_sugar_2039 is inside fridge_289. fridge_289 is on floor_202. fridge_289 is on floor_203. food_apple_2009 is inside fridge_289. food_egg_2020 is inside fridge_289. food_orange_2031 is inside fridge_289. food_bread_2012 is inside fridge_289. food_fruit_2023 is inside fridge_289. dry_pasta_2042 is inside fridge_289. food_cereal_2015 is inside fridge_289. food_pizza_2034 is inside fridge_289. food_dessert_2018 is inside fridge_289. food_jam_2026 is inside fridge_289. food_salt_2037 is inside fridge_289. fridge_289 is inside dining_room_201. food_bacon_2010 is inside fridge_289. food_noodles_2029 is inside fridge_289. sauce_2078 is inside fridge_289. food_turkey_2040 is inside fridge_289. fridge_289 is OPEN. fridge_289 is OFF. fridge_289 is PLUGGED_IN. fridge_289 is CLEAN.
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
obs(kitchen_counter_230, Check for the food item around the kitchen counter)
Get this information:  pot_2069 is on kitchen_counter_230. knife_2050 is on kitchen_counter_230. cup_2063 is on kitchen_counter_230. cup_2064 is on kitchen_counter_230. kitchen_counter_230 is close to knife_2050. kitchen_counter_230 is close to cutting_board_2051. kitchen_counter_230 is close to floor_7. kitchen_counter_230 is close to wall_11. kitchen_counter_230 is close to cup_2063. kitchen_counter_230 is close to cup_2064. kitchen_counter_230 is close to stove_2065. kitchen_counter_230 is close to wall_15. kitchen_counter_230 is close to pot_2069. kitchen_counter_230 is close to oil_2079. kitchen_counter_230 is close to stovefan_288. kitchen_counter_230 is close to fridge_289. kitchen_counter_230 is close to coffe_maker_290. kitchen_counter_230 is close to fryingpan_2083. kitchen_counter_230 is close to toaster_292. kitchen_counter_230 is close to toilet_37. kitchen_counter_230 is close to shower_36. kitchen_counter_230 is close to oven_295. kitchen_counter_230 is close to tray_296. kitchen_counter_230 is close to microwave_297. kitchen_counter_230 is close to drawing_174. kitchen_counter_230 is close to floor_202. kitchen_counter_230 is close to floor_203. kitchen_counter_230 is close to floor_204. kitchen_counter_230 is close to wall_211. kitchen_counter_230 is close to wall_212. kitchen_counter_230 is close to napkin_2005. kitchen_counter_230 is close to trashcan_99. kitchen_counter_230 is close to cupboard_229. kitchen_counter_230 is close to sink_231. kitchen_counter_230 is close to faucet_232. kitchen_counter_230 is close to drawing_239. kitchen_counter_230 is close to character_65. fryingpan_2083 is on kitchen_counter_230. kitchen_counter_230 is inside dining_room_201. stove_2065 is on kitchen_counter_230. sink_231 is inside kitchen_counter_230. microwave_297 is on kitchen_counter_230. faucet_232 is on kitchen_counter_230. coffe_maker_290 is on kitchen_counter_230. oil_2079 is on kitchen_counter_230. cutting_board_2051 is on kitchen_counter_230. toaster_292 is on kitchen_counter_230. napkin_2005 is on kitchen_counter_230. kitchen_counter_230 is facing drawing_238. kitchen_counter_230 is facing drawing_239. kitchen_counter_230 is facing drawing_240. kitchen_counter_230 is facing drawing_241. kitchen_counter_230 is facing drawing_242. kitchen_counter_230 is facing drawing_243. kitchen_counter_230 is CLEAN. kitchen_counter_230 is CLOSED.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_oven_295(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is inside the oven
        achieve inside(onion, oven)
        # Ensure the onion is inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) 
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion) 
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place the chicken and onion into the oven for roasting

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is inside the oven
        achieve inside(onion, oven)
        # Ensure the onion is inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) 
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion) 
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place the chicken and onion into the oven for roasting

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(stove_2065)putin_executor(food_chicken_2017, stove_2065)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(stove_2065)putin_executor(food_onion_2032, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close stove_2065. 
##############################
From agent.py
open_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close stove_2065. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_chicken_2017, stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Robot is no longer close food_chicken_2017.Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_onion_2032, stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. food_onion_2032 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure the chicken and onion are placed inside the correct appliance, the oven, and not the stove as they currently are. Transfer the chicken and onion from the stove to the oven to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: Observe around fridge_289 with the question of Check for the food item inside.
Action 5: Walk to kitchen_counter_230.
Action 6: Observe around kitchen_counter_230 with the question of Check for the food item around the kitchen counter.
Action 7: Walk to fridge_289.
Action 8: Observe around fridge_289 with the question of Check for the food item inside.
Action 9: Walk to kitchen_counter_230.
Action 10: Observe around kitchen_counter_230 with the question of Check for the food item around the kitchen counter.
Action 11: Walk to stove_2065.
Action 12: Open stove_2065.
Action 13: Walk to food_chicken_2017.
Action 14: Grab food_chicken_2017.
Action 15: Walk to stove_2065.
Action 16: Put food_chicken_2017 into stove_2065.
Action 17: Walk to food_onion_2032.
Action 18: Grab food_onion_2032.
Action 19: Walk to stove_2065.
Action 20: Put food_onion_2032 into stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_oil_2079(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(cd_player,oil_instance)
        else:
            exp(cd_player,oil_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,oil_instance]=True
        close[oil_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_oven_295(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cd_player,oven_instance)
        else:
            exp(cd_player,oven_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,oven_instance]=True
        close[oven_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_chicken_and_onion_to_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior close_oven(oven:item):
    body:
        achieve closed(oven)
        # Ensure the oven door is closed

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        move_chicken_and_onion_to_oven(chicken, onion, oven)
        close_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior move_chicken_and_onion_to_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior close_oven(oven:item):
    body:
        achieve closed(oven)
        # Ensure the oven door is closed

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        move_chicken_and_onion_to_oven(chicken, onion, oven)
        close_oven(oven)

##############################
From agent.py-> find a plan in act()
close_executor(stove_2065)
##############################
From agent.py
close_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
Human Instruction: You need to transfer the chicken and onion from the stove to the oven. Make sure both the chicken and onion are placed inside the oven to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_289.
Action 2: Switch off fridge_289.
Action 3: Open fridge_289.
Action 4: Observe around fridge_289 with the question of Check for the food item inside.
Action 5: Walk to kitchen_counter_230.
Action 6: Observe around kitchen_counter_230 with the question of Check for the food item around the kitchen counter.
Action 7: Walk to fridge_289.
Action 8: Observe around fridge_289 with the question of Check for the food item inside.
Action 9: Walk to kitchen_counter_230.
Action 10: Observe around kitchen_counter_230 with the question of Check for the food item around the kitchen counter.
Action 11: Walk to stove_2065.
Action 12: Open stove_2065.
Action 13: Walk to food_chicken_2017.
Action 14: Grab food_chicken_2017.
Action 15: Walk to stove_2065.
Action 16: Put food_chicken_2017 into stove_2065.
Action 17: Walk to food_onion_2032.
Action 18: Grab food_onion_2032.
Action 19: Walk to stove_2065.
Action 20: Put food_onion_2032 into stove_2065.
Action 21: Close stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place both the chicken and onion in the oven to roast
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_computer_417(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd_player,computer_instance)
        else:
            exp(cd_player,computer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,computer_instance]=True
        close[computer_instance,cd_player]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_roast_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_roast_in_oven(chicken, onion, oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior roast_chicken_and_onion(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is inside the oven
        achieve inside(onion, oven) # Ensure the onion is inside the oven 

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        roast_chicken_and_onion(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove)
        # Select the chicken currently inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove)
        # Select the onion currently inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        place_item_in_oven(chicken, oven) # Place the chicken in the oven
        place_item_in_oven(onion, oven) # Place the onion in the oven
        close_the_oven_door(oven) # Close the oven door

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove)
        # Select the chicken currently inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove)
        # Select the onion currently inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        place_item_in_oven(chicken, oven) # Place the chicken in the oven
        place_item_in_oven(onion, oven) # Place the onion in the oven
        close_the_oven_door(oven) # Close the oven door

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken

        bind onion: item where:
            is_food_onion(onion) # Select the onion

        bind oven: item where:
            is_oven(oven) # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven) # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven) and close(oven, stove)
        # Select the oven that is close to the stove with ID 2065

        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_cutting_board_2051(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(cd_player,cutting_board_instance)
        else:
            exp(cd_player,cutting_board_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,cutting_board_instance]=True
        close[cutting_board_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) 
        # Place the chicken inside the oven
        achieve inside(onion, oven) 
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        place_in_oven(chicken, onion, oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven) # Place the item inside the oven

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken) and inside(food_chicken, stove_2065)
        # Select the chicken inside the stove
        
        bind food_onion: item where:
            is_food_onion(food_onion) and inside(food_onion, stove_2065)
        # Select the onion inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(food_chicken, oven)
        place_in_oven(food_onion, oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_oven_295(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cd_player,oven_instance)
        else:
            exp(cd_player,oven_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,oven_instance]=True
        close[oven_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_stove(oven)
        # Select the oven

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        close_the_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve inside(food, oven)
        # Place the food item inside the oven

behavior close_oven_door(oven:item):
    body:
        achieve closed(oven)
        # Close the oven door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065 where the items are currently placed

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        close_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_tvstand_353(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        place_in_oven(chicken, onion, oven)
        # Place the chicken and onion into the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve inside(food, oven)
        # Place the food item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) 
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        # Place both the chicken and onion in the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

def in_stove(x:item):
    # Function to check if an item is in the stove
    symbol is_in_stove=exists oven: item : is_stove(oven) and inside(x, oven)
    return is_in_stove

behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, stove:item):
    body:
        achieve inside(chicken, stove)
        achieve inside(onion, stove)

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and in_stove(chicken)
        # Select chicken that is inside the stove
        
        bind onion: item where:
            is_food_onion(onion) and in_stove(onion)
        # Select onion that is inside the stove

        bind oven: item where:
            is_stove(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        close_the_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_microwave_297(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(cd_player,microwave_instance)
        else:
            exp(cd_player,microwave_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,microwave_instance]=True
        close[microwave_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken that is inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion that is inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove)
        # Select the chicken that is inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove)
        # Select the onion that is inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken that is inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion that is inside the stove

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_into_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_into_oven(chicken, onion, oven)
        # Place the chicken and onion into the oven to roast
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_tray_296(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_to_roast(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_to_roast(chicken, onion, oven)
        # Place the items to roast

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_oven_295(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cd_player,oven_instance)
        else:
            exp(cd_player,oven_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,oven_instance]=True
        close[oven_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve inside(food, oven)

behavior close_oven(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2017
        # Select the chicken with ID 2017

        bind onion: item where:
            is_food_onion(onion) and id[onion] == 2032
        # Select the onion with ID 2032

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        close_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven) # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and visited(chicken)
        # Select the chicken, ensuring it is visited

        bind onion: item where:
            is_food_onion(onion) and visited(onion)
        # Select the onion, ensuring it is visited

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        bind oven: item where:
            is_oven(oven)
        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion
        
        bind oven: item where:
            is_oven(oven)
        # Select an oven

        put_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior close_oven(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place chicken and onion into the oven

        close_oven(oven)
        # Close the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_oven_295(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(cd_player,oven_instance)
        else:
            exp(cd_player,oven_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,oven_instance]=True
        close[oven_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_microwave_297(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(cd_player,microwave_instance)
        else:
            exp(cd_player,microwave_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,microwave_instance]=True
        close[microwave_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is placed inside the oven
        
        achieve inside(onion, oven)
        # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_item_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)

behavior close_oven(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_item_in_oven(chicken, oven)
        place_item_in_oven(onion, oven)
        close_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_tvstand_353(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind onion: item where:
            is_food_onion(onion) # Select the onion
        bind oven: item where:
            is_oven(oven) # Select the oven
        place_items_in_oven(chicken, onion, oven)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_cupboard_229(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cd_player,cupboard_instance)
        else:
            exp(cd_player,cupboard_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,cupboard_instance]=True
        close[cupboard_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        achieve inside(onion, oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        place_items_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_in_oven(item:item, oven:item):
    body:
        achieve inside(item, oven)
        # Place the item inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven(chicken, oven)
        # Place the chicken in the oven

        place_in_oven(onion, oven)
        # Place the onion in the oven

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_tvstand_353(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve inside(food, oven) # Place the food inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_food_in_oven(food:item, oven:item):
    body:
        achieve inside(food, oven)

behavior close_the_oven_door(oven:item):
    body:
        achieve closed(oven)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind oven: item where:
            is_oven(oven)
        # Select the oven
        
        assert inside(chicken, stove)
        assert inside(onion, stove)
        
        place_food_in_oven(chicken, oven)
        place_food_in_oven(onion, oven)
        
        close_the_oven_door(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken inside stove_2065

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion inside stove_2065

        bind oven: item where:
            is_oven(oven)
        # Select an oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_spectacles_2082_around_oven_295(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(spectacles,oven_instance)
        else:
            exp(spectacles,oven_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,oven_instance]=True
        close[oven_instance,spectacles]=True
    

behavior find_bowl_2072_around_tray_296(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select a suitable oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place the chicken and onion inside the oven
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_computer_170(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(cd_player,computer_instance)
        else:
            exp(cd_player,computer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,computer_instance]=True
        close[computer_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_onion_in_oven(chicken, onion, oven)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_in_oven_and_roast(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_in_oven_and_roast(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven) and inside(oven, stove)
        # Select an oven that is inside the stove

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_items_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Place the chicken inside the oven
        achieve inside(onion, oven) # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_items_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven) # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065) # Select the chicken that is inside stove_2065

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065) # Select the onion that is inside stove_2065

        bind oven: item where:
            is_oven(oven) # Select an oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2071_around_oven_295(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(bowl,oven_instance)
        else:
            exp(bowl,oven_instance)
    eff:
        unknown[bowl]=False
        close[bowl,oven_instance]=True
        close[oven_instance,bowl]=True
    

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven) # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065) # Select the chicken that is inside stove_2065

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065) # Select the onion that is inside stove_2065

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065 # Declare the stove_2065

        bind oven: item where:
            is_oven(oven) # Select an oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven) # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven) # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove) # Select the chicken that is inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove) # Select the onion that is inside the stove

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065 # Declare the stove_2065

        bind oven: item where:
            is_oven(oven) # Select an oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
