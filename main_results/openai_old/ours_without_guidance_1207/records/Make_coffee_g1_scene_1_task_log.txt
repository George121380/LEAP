From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior brew_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker) # Ensure the coffee maker has water to brew
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve inside(cup, coffee_maker) # Ensure the coffee is brewed into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        brew_coffee_with_coffee_maker(coffee_maker, cup)
        # Brew coffee with the coffee maker into the selected cup
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2049_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation

behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve clean(coffee_maker) # Ensure the coffee maker is clean
        achieve inside(cup, coffee_maker) # Place the cup in the coffee maker
        achieve on(coffee_maker, kitchen_counter) # Place the coffee maker on the kitchen counter

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter; available variables: [Variable<coffee_maker: item>, Variable<cup: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation

behavior make_coffee(coffee_maker:item, cup:item, kitchen_counter:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve is_on(coffee_maker) # Turn on the coffee maker
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve clean(coffee_maker) # Ensure the coffee maker is clean
        achieve inside(cup, coffee_maker) # Place the cup in the coffee maker
        achieve on(coffee_maker, kitchen_counter) # Place the coffee maker on the kitchen counter

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select the kitchen counter

        make_coffee(coffee_maker, cup, kitchen_counter)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_scrabble_2031_around_bookshelf_124(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2133_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_coffee_maker_is_ready(coffee_maker:item):
    body:
        if not plugged(coffee_maker):
            achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in

behavior operate_coffee_maker(coffee_maker:item, water:item):
    body:
        if not has_water(coffee_maker) and has_water(water):
            achieve has_water(coffee_maker) # Add water to the coffee maker

        if has_switch(coffee_maker):
            achieve is_on(coffee_maker) # Turn on the coffee maker to start brewing coffee

def has_sufficient_water(water_source:item):
    # Function to check if the water source has water
    symbol sufficient_water=has_water(water_source)
    return sufficient_water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind water_source: item where:
            has_water(water_source)
        # Select a source with water

        ensure_coffee_maker_is_ready(coffee_maker)

        if has_sufficient_water(water_source):
            operate_coffee_maker(coffee_maker, water_source)
        # Operate the coffee maker if theres enough water available
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2132_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior add_water_to_coffe_maker(coffe_maker:item):
    body:
        achieve has_water(coffe_maker)
        # Ensure there is water in the coffee maker

behavior start_coffe_maker(coffe_maker:item):
    body:
        achieve is_on(coffe_maker)
        # Turn on the coffee maker to start brewing

behavior pour_coffee_in_cup(coffe:item, cup:item):
    body:
        achieve inside(coffe, cup)
        # Pour the coffee into the cup

behavior __goal__():
    body:
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        add_water_to_coffe_maker(coffe_maker)
        start_coffe_maker(coffe_maker)
        
        bind coffe: item where:
            is_tea(coffe) and inside(coffe, coffe_maker)
        # Select the brewed coffee

        pour_coffee_in_cup(coffe, cup)
#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_scrabble_2031_around_bookshelf_275(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2115_around_fridge_126(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)
        # Plug the coffee maker into the power socket

behavior fill_water_reservoir(coffee_maker:item, water:item):
    body:
        achieve_once inhand(water) # Grasp the water container temporarily
        achieve has_water(coffee_maker)
        # Fill the coffee makers water reservoir

behavior place_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker

behavior add_coffee_grounds(coffee:item, coffee_maker:item):
    body:
        achieve inside(coffee, coffee_maker)
        # Add the coffee grounds inside the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_in_coffee_maker(coffee_maker, power_socket)

        bind water: item where:
            achieve has_water(water)
        # Select a water container

        fill_water_reservoir(coffee_maker, water)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        place_coffee_filter(coffee_filter, coffee_maker)

        bind coffee: item where:
            is_food(food) and is_food_coffee(food)
        # Select coffee grounds

        add_coffee_grounds(coffee, coffee_maker)

        start_coffee_maker(coffee_maker)
        # Brew the coffee
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)
        # Plug the coffee maker into the power socket

behavior fill_water_reservoir(coffee_maker:item, water:item):
    body:
        achieve has_water(coffee_maker)
        # Fill the coffee makers water reservoir

behavior place_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker

behavior add_coffee_grounds(coffee:item, coffee_maker:item):
    body:
        achieve inside(coffee, coffee_maker)
        # Add the coffee grounds inside the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind power_socket: item where:
            is_powersocket(power_socket)
        # Select a power socket

        plug_in_coffee_maker(coffee_maker, power_socket)

        bind water: item where:
            achieve has_water(water)
        # Select a water container

        fill_water_reservoir(coffee_maker, water)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        place_coffee_filter(coffee_filter, coffee_maker)

        bind coffee: item where:
            is_food(coffee) and is_food_coffee(coffee)
        # Select coffee grounds

        add_coffee_grounds(coffee, coffee_maker)

        start_coffee_maker(coffee_maker)
        # Brew the coffee
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
behavior plug_in_coffee_maker(coffee_maker:item, power_socket:item):
    body:
        achieve plugged(coffee_maker)

behavior fill_water_reservoir(coffee_maker:item, water:item):
    body:
        achieve has_water(coffee_maker)

behavior place_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve inside(coffee_filter, coffee_maker)

behavior add_coffee_grounds(coffee:item, coffee_maker:item):
    body:
        achieve inside(coffee, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind power_socket: item where:
            is_powersocket(power_socket)

        plug_in_coffee_maker(coffee_maker, power_socket)

        bind water: item where:
            achieve has_water(water)

        fill_water_reservoir(coffee_maker, water)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        place_coffee_filter(coffee_filter, coffee_maker)

        bind coffee: item where:
            is_food(coffee) and is_food_coffee(coffee)

        add_coffee_grounds(coffee, coffee_maker)

        start_coffee_maker(coffee_maker)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_cup_2049_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior gather_ingredients(cup:item, coffee_maker:item, coffee_filter:item, water_container:item):
    body:
        achieve inside(coffee_filter, coffee_maker)
        # Place the coffee filter inside the coffee maker
        achieve has_water(water_container)
        # Ensure the water container has water

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker
        
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind water_container: item where:
            has_water(water_container)
        # Select a container with water
        
        gather_ingredients(cup, coffee_maker, coffee_filter, water_container)
        # Gather necessary ingredients and set up the coffee maker
        start_coffee_maker(coffee_maker)
        # Start the coffee maker


#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
