From agent.py
Reset goals: The sub-goals are: 
['1. Find a sink in the bathroom.', '2. Fill the sink with water and add soap to make it soapy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hairbrush_2002_around_bathroom_counter_41(hairbrush:item):
    goal: not unknown(hairbrush)
    body:
        assert is_hairbrush(hairbrush)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(hairbrush,bathroom_counter_instance)
        else:
            exp(hairbrush,bathroom_counter_instance)
    eff:
        unknown[hairbrush]=False
        close[hairbrush,bathroom_counter_instance]=True
        close[bathroom_counter_instance,hairbrush]=True
    

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_towel_2059_around_bathroom_counter_41(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel,bathroom_counter_instance)
        else:
            exp(towel,bathroom_counter_instance)
    eff:
        unknown[towel]=False
        close[towel,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                observe(sink, "Locate the sink")

        bind located_sink: item where:
            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)
        
        find_sink(located_sink)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                observe(sink, "Locate the sink")

        bind located_sink: item where:
            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)
        
        find_sink(located_sink)

##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Locate the sink)
##############################
From agent.py
walk_executor(sink_42)
Find basket_for_clothes_2006. Find towel_rack_34. Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. 
##############################
From agent.py
obs(sink_42, Locate the sink)
Get this information:  sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. soap_2053 is on sink_42. cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2053_around_soap_2053(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_mat_236_around_soap_2053(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2053
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(mat,soap_instance)
        else:
            exp(mat,soap_instance)
    eff:
        unknown[mat]=False
        close[mat,soap_instance]=True
        close[soap_instance,mat]=True
    

behavior find_soap_2054_around_bathroom_cabinet_40(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve inside(soap, sink)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind soap: item where:
            is_soap(soap)
        fill_sink_with_water_and_add_soap(sink, faucet, soap)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve inside(soap, sink)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind soap: item where:
            is_soap(soap)
        fill_sink_with_water_and_add_soap(sink, faucet, soap)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(soap_2053)grab_executor(soap_2053)walk_executor(sink_42)putin_executor(soap_2053, sink_42)
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer close sink_42.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(soap_2053)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
grab_executor(soap_2053)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Grabbing soap_2053 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is close bathroom_counter_41. 
##############################
From agent.py
putin_executor(soap_2053, sink_42)
Robot is inside bathroom_1. Robot is close sink_42. Robot is close soap_2053. Robot is close bathroom_counter_41. soap_2053 released by right hand. 
##############################
