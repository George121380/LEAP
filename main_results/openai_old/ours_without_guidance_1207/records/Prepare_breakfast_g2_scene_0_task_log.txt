From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve cut(egg) # Cut the egg into pieces for scrambling
        achieve inside(egg, fryingpan) # Place the egg inside the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        
        scramble_egg_in_fryingpan(egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve inhand(egg)
        # Hold the egg to crack it into the pan
        
        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan
        
        if has_switch(stove):
            achieve is_on(stove)
            # Turn on the stove to cook the egg
            
        if is_fryingpan(fryingpan) and surfaces(fryingpan): 
            achieve on(fryingpan, stove)
            # Ensure the frying pan is on the stove for consistent heating

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        scramble_egg_in_fryingpan(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Use the frying pan to scramble the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve inside(egg, fryingpan) 
        # Ensure the egg is inside the frying pan for scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve inside(egg, fryingpan) 
        # Ensure the egg is inside the frying pan for scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        scramble_egg(fryingpan, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. food_egg_2020 released by right hand. 
##############################
From agent.py
Human Instruction: You need to scramble the egg in the frying pan. Currently, the egg has been placed in the frying pan, but no action has been taken to actually scramble it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pencil_2001_around_closetdrawer_388(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

behavior find_hanger_374_around_closetdrawer_388(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_achievable(x: item):
    # Check if the x item is achievable as a frying pan
    symbol fryingpan_achievable = is_fryingpan(x) and on(food_egg_2020, x)
    return fryingpan_achievable

behavior use_fryingpan_to_scramble_egg(fryingpan: item):
    body:
        # Scramble the egg using the frying pan
        achieve dirty(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan_achievable(fryingpan)
        # Select the frying pan with the egg on it
        use_fryingpan_to_scramble_egg(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: food_egg_2020; available variables: [Variable<x: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation

def is_fryingpan_achievable(x: item, egg: item):
    symbol fryingpan_achievable = is_fryingpan(x) and on(egg, x)
    return fryingpan_achievable

behavior use_fryingpan_to_scramble_egg(fryingpan: item):
    body:
        achieve dirty(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan_achievable(fryingpan, food_egg_2020)
        use_fryingpan_to_scramble_egg(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg_2020; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pencil_2001_around_bookshelf_101(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(pencil,bookshelf_instance)
        else:
            exp(pencil,bookshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,bookshelf_instance]=True
        close[bookshelf_instance,pencil]=True
    

behavior find_cd_player_2060_around_television_248(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(cd_player,television_instance)
        else:
            exp(cd_player,television_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,television_instance]=True
        close[television_instance,cd_player]=True
    

#goal_representation
 
def is_fryingpan_achievable(x: item, egg: item):
    symbol fryingpan_achievable = is_fryingpan(x) and on(egg, x)
    return fryingpan_achievable

behavior use_fryingpan_to_scramble_egg(fryingpan: item, egg: item):
    body:
        achieve dirty(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        use_fryingpan_to_scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_television_248(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(cd_player,television_instance)
        else:
            exp(cd_player,television_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,television_instance]=True
        close[television_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
def scramble_egg(fryingpan: item):
    body:
        achieve dirty(fryingpan) # The frying pan will become dirty after scrambling the egg

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(food_egg_2020, fryingpan)
        # Select the frying pan with the egg inside it
        
        scramble_egg(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 6015, column 9.
Expected one of: 
	* NOT_EQ
	* SEMICOLON
	* AND
	* LSHIFT
	* AMPERSAND
	* __ANON_0
	* GREATER_EQ
	* OR
	* __ANON_5
	* STAR
	* __ANON_1
	* PERCENT
	* SLASH
	* LESSTHAN
	* RSHIFT
	* CIRCUMFLEX
	* _NEWLINE
	* MORETHAN
	* __ANON_4
	* __ANON_8
	* DOUBLE_EQUAL
	* PLUS
	* AT
	* FLOORDIV
	* COMMA
	* __ANON_3
	* VBAR
	* EQUAL
	* IF
	* __ANON_6
	* __ANON_2
	* LESS_EQ
	* MINUS
	* __ANON_7

##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior scramble_egg(fryingpan: item):
    body:
        achieve dirty(fryingpan) # The frying pan will become dirty after scrambling the egg

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and inside(food_egg_2020, fryingpan)
        # Select the frying pan with the egg inside it
        
        scramble_egg(fryingpan)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(fryingpan:item):
    body:
        achieve cut(food_egg_2020) # Scramble might include mixing, measured as cutting in this context

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083 # Identify fryingpan with the given ID
        scramble_egg(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg_2020; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_player_2060_around_television_248(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(cd_player,television_instance)
        else:
            exp(cd_player,television_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,television_instance]=True
        close[television_instance,cd_player]=True
    

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        scramble_egg(egg, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item):
    body:
        achieve cut(egg)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        scramble_egg(egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_stove_2065(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(cd_player,stove_instance)
        else:
            exp(cd_player,stove_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,stove_instance]=True
        close[stove_instance,cd_player]=True
    

behavior find_hanger_134_around_closetdrawer_388(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve cut(egg) # Scramble the egg placed in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)
        # Select the egg which is in the frying pan

        scramble_egg(fryingpan, egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior scramble_egg(fryingpan:item, egg:item):
    body:
        achieve cut(egg) # Scramble the egg placed in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)
        # Select the egg which is in the frying pan

        scramble_egg(fryingpan, egg)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close kitchen_counter_230. Robot is close cutting_board_2051. Robot is no longer close fryingpan_2083.
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close kitchen_counter_230. Robot is close cutting_board_2051. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close cutting_board_2051.Robot is no longer close food_egg_2020.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_egg_2020. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_egg_2020. 
##############################
From agent.py
Human Instruction: The egg needs to be scrambled in the frying pan. Currently, you have cut the egg, but the instruction requires you to scramble it. Ensure the egg is properly mixed or stirred in the frying pan to complete the scrambling process.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 into fryingpan_2083.
Action 10: Grab food_egg_2020.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_egg_2020 on cutting_board_2051.
Action 13: Walk to knife_2050.
Action 14: Grab knife_2050.
Action 15: Walk to food_egg_2020.
Action 16: Cut food_egg_2020.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_basket_for_clothes_2006_around_washing_machine_2007(basket_for_clothes:item):
    goal: not unknown(basket_for_clothes)
    body:
        assert is_basket_for_clothes(basket_for_clothes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(basket_for_clothes,washing_machine_instance)
        else:
            exp(basket_for_clothes,washing_machine_instance)
    eff:
        unknown[basket_for_clothes]=False
        close[basket_for_clothes,washing_machine_instance]=True
        close[washing_machine_instance,basket_for_clothes]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve close_char(char, fryingpan)
        # Approach the frying pan
        achieve cut(egg)
        # Ensure the egg is cut before stirring
        # Stir the egg inside the fryingpan to complete the scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan where the egg will be scrambled
        scramble_egg_in_fryingpan(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve close_char(char, fryingpan)
        # Approach the frying pan
        achieve cut(egg)
        # Ensure the egg is cut before stirring
        # Stir the egg inside the fryingpan to complete the scrambling

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan where the egg will be scrambled
        scramble_egg_in_fryingpan(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is no longer close cutting_board_2051.Robot is no longer close food_egg_2020.
##############################
From agent.py
Human Instruction: To complete the sub-task, you need to scramble the egg in the frying pan. You have cut the egg, but it needs to be mixed or stirred in the frying pan to be considered scrambled.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 into fryingpan_2083.
Action 10: Grab food_egg_2020.
Action 11: Walk to cutting_board_2051.
Action 12: Put food_egg_2020 on cutting_board_2051.
Action 13: Walk to knife_2050.
Action 14: Grab knife_2050.
Action 15: Walk to food_egg_2020.
Action 16: Cut food_egg_2020.
Action 17: Walk to fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_376_around_closetdrawer_388(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(frying_pan: item, egg: item):
    body:
        achieve on(egg, frying_pan)
        # Ensure the egg is on the frying pan
        achieve cut(egg)
        # Ensure the egg is cut
        observe(frying_pan, "Determine if the egg is scrambled")
        # Scramble the egg by mixing or stirring in the frying pan

behavior __goal__():
    body:
        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select the frying pan

        bind egg: item where:
            is_food_egg(egg) and on(egg, frying_pan) and cut(egg)
        # Select the egg that is cut and on the frying pan

        scramble_egg(frying_pan, egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_bathroom_counter_41(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_with_egg(fryingpan:item):
    symbol has_egg=exists egg: item : is_food_egg(egg) and inside(egg, fryingpan)
    return has_egg

behavior scramble_egg_in_fryingpan(fryingpan:item):
    body:
        achieve clean(fryingpan)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and is_fryingpan_with_egg(fryingpan)
        scramble_egg_in_fryingpan(fryingpan)

#goal_representation_end

##############################
