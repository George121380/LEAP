From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_114_around_trashcan_360(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(mat,trashcan_instance)
        else:
            exp(mat,trashcan_instance)
    eff:
        unknown[mat]=False
        close[mat,trashcan_instance]=True
        close[trashcan_instance,mat]=True
    

behavior find_vacuum_cleaner_2094_around_kitchen_counter_132(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(vacuum_cleaner,kitchen_counter_instance)
        else:
            exp(vacuum_cleaner,kitchen_counter_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,kitchen_counter_instance]=True
        close[kitchen_counter_instance,vacuum_cleaner]=True
    

behavior find_mat_115_around_table_193(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior start_vacuum_cleaning(vacuum_cleaner:item, floor:item):
    body:
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Vacuum the floor to achieve a clean state

behavior stop_vacuum_cleaning(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and has_plug(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select the floor that is dirty

        start_vacuum_cleaning(vacuum_cleaner, floor)
        stop_vacuum_cleaning(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior start_vacuum_cleaning(vacuum_cleaner:item, floor:item):
    body:
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Vacuum the floor to achieve a clean state

behavior stop_vacuum_cleaning(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and has_plug(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select the floor that is dirty

        start_vacuum_cleaning(vacuum_cleaner, floor)
        stop_vacuum_cleaning(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(vacuum_cleaner_2094, kitchen_counter_132)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_132)
Failed to find vacuum_cleaner_2094 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(vacuum_cleaner_2094, kitchen_counter_128)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_128)
Failed to find vacuum_cleaner_2094 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(vacuum_cleaner_2094, kitchen_counter_129)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_129)
Failed to find vacuum_cleaner_2094 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(vacuum_cleaner_2094, dishwasher_143)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(dishwasher_143)
Find knife_2036. Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
open_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. 
##############################
From agent.py
exp(vacuum_cleaner_2094, dishwasher_143)
Failed to find vacuum_cleaner_2094 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(ironing_board_2099)exp(vacuum_cleaner_2094, ironing_board_2099)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(ironing_board_2099)
Find iron_2117. Robot is inside bedroom_220. Robot is close ironing_board_2099. Robot is no longer inside dining_room_1.Robot is no longer close knife_2036.Robot is no longer close floor_21.Robot is no longer close dishwasher_143.
##############################
From agent.py
exp(vacuum_cleaner_2094, ironing_board_2099)
Failed to find vacuum_cleaner_2094 around ironing_board_2099. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(vacuum_cleaner_2094, fridge_140)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer inside bedroom_220.Robot is no longer close ironing_board_2099.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find vacuum_cleaner_2094 ?
Answer: Go to home_office_161. Inside, locate couch_192. The vacuum_cleaner_2094 will be nearby this couch.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to home_office_161. Inside, locate couch_192. The vacuum_cleaner_2094 will be nearby this couch.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.

##############################
From agent.py
exp(vacuum_cleaner_2094, fridge_140)
Failed to find vacuum_cleaner_2094 around fridge_140. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(vacuum_cleaner_2094, couch_192)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. Robot is no longer inside dining_room_1.Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
exp(vacuum_cleaner_2094, couch_192)
Find vacuum_cleaner_2094. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer close couch_192.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
walk_executor(floor_12)
Robot is inside dining_room_1. Robot is close floor_12. Robot is no longer inside home_office_161.Robot is no longer close vacuum_cleaner_2094.
##############################
From agent.py
wash_executor(floor_12)
Robot is inside dining_room_1. Robot is close floor_12. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer inside dining_room_1.Robot is no longer close floor_12.
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: You have washed the floor instead of vacuuming it. To complete the sub-task, you need to retry the process correctly by using the vacuum cleaner on the floor. After identifying the vacuum cleaner and turning it on, ensure you run the vacuum over the floor until it is clean, and then turn the vacuum cleaner off.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_on_floor(vacuum_cleaner:item):
    # Check if the vacuum cleaner is on the floor
    symbol on_floor = exists floor: item : is_floor(floor) and close(vacuum_cleaner, floor)
    return on_floor

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Vacuum the floor until it is clean

behavior turn_off_vacuum(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner
        
        bind floor: item where:
            is_floor(floor)
        # Select the floor

        if not is_vacuum_cleaner_on_floor(vacuum_cleaner):
            bind vacuum_cleaner_location: item where:
                close(vacuum_cleaner, vacuum_cleaner_location)
            observe(vacuum_cleaner_location, "Locate the vacuum cleaner and bring it to the floor")
        
        vacuum_floor(vacuum_cleaner, floor)
        turn_off_vacuum(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vacuum_cleaner_on_floor(vacuum_cleaner:item):
    # Check if the vacuum cleaner is on the floor
    symbol on_floor = exists floor: item : is_floor(floor) and close(vacuum_cleaner, floor)
    return on_floor

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Turn on the vacuum cleaner
        achieve clean(floor) # Vacuum the floor until it is clean

behavior turn_off_vacuum(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner) # Turn off the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner
        
        bind floor: item where:
            is_floor(floor)
        # Select the floor

        if not is_vacuum_cleaner_on_floor(vacuum_cleaner):
            bind vacuum_cleaner_location: item where:
                close(vacuum_cleaner, vacuum_cleaner_location)
            observe(vacuum_cleaner_location, "Locate the vacuum cleaner and bring it to the floor")
        
        vacuum_floor(vacuum_cleaner, floor)
        turn_off_vacuum(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)obs(couch_192, Locate the vacuum cleaner and bring it to the floor)walk_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(couch_192)
Robot is inside home_office_161. Robot is close couch_192. Robot is no longer close vacuum_cleaner_2094.
##############################
From agent.py
obs(couch_192, Locate the vacuum cleaner and bring it to the floor)
Get this information:  cat_2082 is on couch_192. couch_192 is close to floor_224. couch_192 is close to table_193. couch_192 is close to cat_2082. couch_192 is close to light_258. couch_192 is close to pillow_195. couch_192 is close to drawing_196. couch_192 is close to floor_164. couch_192 is close to floor_165. couch_192 is close to orchid_200. couch_192 is close to wall_232. couch_192 is close to wall_170. couch_192 is close to door_234. couch_192 is close to vacuum_cleaner_2094. couch_192 is close to wall_174. couch_192 is close to ceiling_179. couch_192 is close to doorjamb_182. couch_192 is close to television_216. couch_192 is close to character_219. couch_192 is inside home_office_161. couch_192 is CLEAN.
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer close couch_192.
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor correctly. Ensure the vacuum cleaner is turned on, and then use it to clean the floor until it is clean, before switching it off. You mistakenly washed the floor instead of vacuuming it, so this action needs to be redone.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_present():
    # Function to check if the vacuum cleaner is plugged in and turned on
    return is_on(vacuum_cleaner) and plugged(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned

        achieve_once is_off(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned off after cleaning

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        if is_vacuum_cleaner_present():
            vacuum_floor(vacuum_cleaner, floor)
        else:
            # This task is inferred from the scenario that requires the redone of vacuum
            observe(vacuum_cleaner, "Find and plug in the vacuum cleaner")
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
            vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: vacuum_cleaner; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_cup_2089_around_table_193(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_towel_2083_around_bathtub_297(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel,bathtub_instance)
        else:
            exp(towel,bathtub_instance)
    eff:
        unknown[towel]=False
        close[towel,bathtub_instance]=True
        close[bathtub_instance,towel]=True
    

behavior find_napkin_2014_around_trashcan_360(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#goal_representation
 
def is_vacuum_cleaner_present(vacuum_cleaner: item):
    # Function to check if the vacuum cleaner is plugged in and turned on
    return is_on(vacuum_cleaner) and plugged(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is cleaned

        achieve_once is_off(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned off after cleaning

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        if is_vacuum_cleaner_present(vacuum_cleaner):
            vacuum_floor(vacuum_cleaner, floor)
        else:
            # This task is inferred from the scenario that requires the redone of vacuum
            observe(vacuum_cleaner, "Find and plug in the vacuum cleaner")
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
            vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to be vacuumed
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)
        # Select the vacuum cleaner, ensuring it is plugged in and turned on
        
        vacuum_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_cup_2088_around_curtain_119(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==119
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(cup,curtain_instance)
        else:
            exp(cup,curtain_instance)
    eff:
        unknown[cup]=False
        close[cup,curtain_instance]=True
        close[curtain_instance,cup]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_napkin_2014_around_trashcan_360(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094
        # Select the vacuum cleaner with ID 2094

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the floor with ID 12

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is switched on

        achieve clean(floor)
        # Ensure the floor is clean

        achieve is_off(vacuum_cleaner)
        # Switch off the vacuum cleaner after cleaning

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_doorjamb_182(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==182
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(cleaning_solution,doorjamb_instance)
        else:
            exp(cleaning_solution,doorjamb_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,doorjamb_instance]=True
        close[doorjamb_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_on(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is currently on
    symbol cleaner_on=is_on(vacuum_cleaner)
    return cleaner_on

def is_floor_clean(floor:item):
    # Function to verify if the floor is clean
    symbol clean_floor=clean(floor)
    return clean_floor

def is_inhand_vacuum_cleaner():
    # Function to check if the vacuum cleaner is in hand (not permissible for standard use)
    return False

behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if not is_vacuum_cleaner_on(vacuum_cleaner):
            achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        assert_hold is_on(vacuum_cleaner)
        if not is_floor_clean(floor):
            achieve clean(floor)

behavior switch_off_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner available
        
        bind floor: item where:
            is_floor(floor) and id[floor]==12
        # Select the floor
        
        if not is_vacuum_cleaner_on(vacuum_cleaner):
            switch_on_vacuum_cleaner(vacuum_cleaner)
        
        vacuum_floor(vacuum_cleaner, floor)
        
        if is_vacuum_cleaner_on(vacuum_cleaner):
            switch_off_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_vacuum_cleaner_on(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is currently on
    symbol cleaner_on=is_on(vacuum_cleaner)
    return cleaner_on

def is_floor_clean(floor:item):
    # Function to verify if the floor is clean
    symbol clean_floor=clean(floor)
    return clean_floor

def is_inhand_vacuum_cleaner():
    # Function to check if the vacuum cleaner is in hand (not permissible for standard use)
    return False

behavior switch_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        if not is_vacuum_cleaner_on(vacuum_cleaner):
            achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        assert_hold is_on(vacuum_cleaner)
        if not is_floor_clean(floor):
            achieve clean(floor)

behavior switch_off_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner available
        
        bind floor: item where:
            is_floor(floor) and id[floor]==12
        # Select the floor
        
        if not is_vacuum_cleaner_on(vacuum_cleaner):
            switch_on_vacuum_cleaner(vacuum_cleaner)
        
        vacuum_floor(vacuum_cleaner, floor)
        
        if is_vacuum_cleaner_on(vacuum_cleaner):
            switch_off_vacuum_cleaner(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
switchon_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor. Make sure the vacuum cleaner is turned on when you are cleaning, and ensure the vacuuming action is carried out. The action to vacuum the floor was missing—washing the floor does not suffice.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.
Action 30: Switch on vacuum_cleaner_2094.
Action 31: Switch off vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_mat_292_around_mat_201(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==201
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_floor_dirty_or_vacuum_off(floor: item, vacuum_cleaner: item):
    # Function to check if the floor is dirty or the vacuum cleaner is off
    symbol condition_check = dirty(floor) or is_off(vacuum_cleaner)
    return condition_check

behavior achieve_clean_floor(floor: item, vacuum_cleaner: item):
    body:
        if is_floor_dirty_or_vacuum_off(floor, vacuum_cleaner):
            bind vacuum_cleaner: item where:
                is_vacuum_cleaner(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
            achieve clean(floor)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        achieve_clean_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable vacuum_cleaner already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cleaning_solution_2098_around_trashcan_360(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cleaning_solution,trashcan_instance)
        else:
            exp(cleaning_solution,trashcan_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,trashcan_instance]=True
        close[trashcan_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
def is_floor_dirty_or_vacuum_off(floor: item, vacuum_cleaner: item):
    # Function to check if the floor is dirty or the vacuum cleaner is off
    symbol condition_check = dirty(floor) or is_off(vacuum_cleaner)
    return condition_check

behavior achieve_clean_floor(floor: item, vacuum_cleaner: item):
    body:
        if is_floor_dirty_or_vacuum_off(floor, vacuum_cleaner):
            achieve is_on(vacuum_cleaner)
            achieve clean(floor)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        achieve_clean_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_floor_dirty_or_vacuum_off(floor: item, vacuum_cleaner: item):
    # Function to check if the floor is dirty or the vacuum cleaner is off
    symbol condition_check = dirty(floor) or is_off(vacuum_cleaner)
    return condition_check

behavior achieve_clean_floor(floor: item, vacuum_cleaner: item):
    body:
        if is_floor_dirty_or_vacuum_off(floor, vacuum_cleaner):
            achieve is_on(vacuum_cleaner)
            achieve clean(floor)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        achieve_clean_floor(floor, vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: The vacuuming action did not occur. You need to properly execute the vacuuming action by ensuring the vacuum cleaner is turned on and then vacuum the floor, as washing the floor is not sufficient to meet the goal of vacuuming.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.
Action 30: Switch on vacuum_cleaner_2094.
Action 31: Switch off vacuum_cleaner_2094.
Action 32: Switch on vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_trashcan_360(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cleaning_solution,trashcan_instance)
        else:
            exp(cleaning_solution,trashcan_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,trashcan_instance]=True
        close[trashcan_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior activate_vacuum(vacuum_cleaner:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        activate_vacuum(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_mat_386_around_mat_201(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==201
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_cd_player_2084_around_tvstand_135(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

behavior find_homework_2011_around_bookshelf_137(homework:item):
    goal: not unknown(homework)
    body:
        assert is_homework(homework)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(homework,bookshelf_instance)
        else:
            exp(homework,bookshelf_instance)
    eff:
        unknown[homework]=False
        close[homework,bookshelf_instance]=True
        close[bookshelf_instance,homework]=True
    

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_vacuuming(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Make sure the floor is clean by vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        ensure_vacuuming(vacuum_cleaner, floor)
        # Ensure that the floor is vacuumed and clean

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_and_turn_on_vacuum(vacuum_cleaner:item, socket:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind socket: item where:
            is_powersocket(socket) and close(socket, vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)

        plug_and_turn_on_vacuum(vacuum_cleaner, socket)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_clothes_hat_2076_around_bookshelf_372(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(clothes_hat,bookshelf_instance)
        else:
            exp(clothes_hat,bookshelf_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,bookshelf_instance]=True
        close[bookshelf_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior clean_floor_with_vacuum(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter (to confirm location or use in checks)

        bind floor: item where:
            is_floor(floor)
        # Select the floor that needs vacuuming

        turn_on_vacuum_cleaner(vacuum_cleaner) # Ensure the vacuum cleaner is turned on
        clean_floor_with_vacuum(vacuum_cleaner, floor) # Vacuum the floor

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_on_and_plugged(vacuum_cleaner:item):
    symbol vacuum_state=is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
    return vacuum_state

behavior vacuum_the_floor(floor:item, vacuum_cleaner:item):
    body:
        if is_vacuum_cleaner_on_and_plugged(vacuum_cleaner):
            achieve clean(floor)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        vacuum_the_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2108_around_cupboard_131(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_vacuum_for_cleaning(vacuum_cleaner:item):
    body:
        if unplugged(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        if is_off(vacuum_cleaner):
            achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

behavior clean_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)
        # Goal to achieve a clean floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the floor with a specific ID for cleaning

        ensure_vacuum_for_cleaning(vacuum_cleaner)
        clean_floor(vacuum_cleaner, floor)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        achieve clean(floor)
        # Ensure the floor is cleaned

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_ceilinglamp_43(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==43
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(cleaning_solution,ceilinglamp_instance)
        else:
            exp(cleaning_solution,ceilinglamp_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,ceilinglamp_instance]=True
        close[ceilinglamp_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is switched on
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_floor_cleaned(floor:item):
    # Function to check if the floor has been cleaned
    symbol cleaned=clean(floor)
    return cleaned

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve inside(floor, vacuum_cleaner)
        # Ensure the vacuum cleaner is used on the floor to achieve cleaning

        if not is_floor_cleaned(floor):
            achieve is_on(vacuum_cleaner)
            # Turn the vacuum cleaner on to clean the floor
      
behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor]==12
        # Select the floor to be cleaned

        vacuum_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_towel_2083_around_bathtub_297(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel,bathtub_instance)
        else:
            exp(towel,bathtub_instance)
    eff:
        unknown[towel]=False
        close[towel,bathtub_instance]=True
        close[bathtub_instance,towel]=True
    

behavior find_mat_386_around_mat_201(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==201
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def ensure_vacuum_ready(vacuum:item):
    # Check if the vacuum cleaner is ready to use
    assert_hold is_on(vacuum) and plugged(vacuum)

behavior vacuum_floor(vacuum:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum]==2094
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor]==12
        # Select the floor to be vacuumed

        ensure_vacuum_ready(vacuum)
        vacuum_floor(vacuum, floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Behavior body statement [[once=False]] assert(and(is_on(V::vacuum), plugged(V::vacuum))) are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_napkin_2014_around_trashcan_360(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#goal_representation
 
def ensure_vacuum_ready(vacuum:item):
    # Check if the vacuum cleaner is ready to use
    symbol ready = is_on(vacuum) and plugged(vacuum)
    return ready

behavior vacuum_floor(vacuum:item, floor:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum) and id[vacuum]==2094
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor]==12
        # Select the floor to be vacuumed

        if ensure_vacuum_ready(vacuum):
            vacuum_floor(vacuum, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_operate_vacuum(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the floor with ID 12

        find_and_operate_vacuum(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_trashcan_360(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cleaning_solution,trashcan_instance)
        else:
            exp(cleaning_solution,trashcan_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,trashcan_instance]=True
        close[trashcan_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_toilet_302(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind toilet_instance:item where:
            is_toilet(toilet_instance) and id[toilet_instance]==302
        achieve close_char(char,toilet_instance)
        if can_open(toilet_instance):
            achieve_once open(toilet_instance)
            exp(soap,toilet_instance)
        else:
            exp(soap,toilet_instance)
    eff:
        unknown[soap]=False
        close[soap,toilet_instance]=True
        close[toilet_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

def is_floor_dirty(floor:item):
    symbol dirty_floor=dirty(floor)
    return dirty_floor

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior ensure_vacuum_is_on(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior close_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor) and is_floor_dirty(floor)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        ensure_vacuum_is_on(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)
        close_vacuum_cleaner(vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_goal

def is_floor_dirty(floor:item):
    symbol dirty_floor=dirty(floor)
    return dirty_floor

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor)

behavior ensure_vacuum_is_on(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior close_vacuum_cleaner(vacuum_cleaner:item):
    body:
        achieve is_off(vacuum_cleaner)

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor) and is_floor_dirty(floor)
        
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        ensure_vacuum_is_on(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)
        close_vacuum_cleaner(vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(floor_13)wash_executor(floor_13)walk_executor(vacuum_cleaner_2094)switchoff_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(floor_13)
Robot is inside dining_room_1. Robot is close floor_13. Robot is no longer inside home_office_161.Robot is no longer close vacuum_cleaner_2094.
##############################
From agent.py
wash_executor(floor_13)
Robot is inside dining_room_1. Robot is close floor_13. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer inside dining_room_1.Robot is no longer close floor_13.
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: You need to properly execute the vacuuming action. Ensure the vacuum cleaner is turned on and physically use it to vacuum the floor, as washing the floor is not sufficient to meet the goal.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.
Action 30: Switch on vacuum_cleaner_2094.
Action 31: Switch off vacuum_cleaner_2094.
Action 32: Switch on vacuum_cleaner_2094.
Action 33: Walk to floor_13.
Action 34: Wash floor_13.
Action 35: Walk to vacuum_cleaner_2094.
Action 36: Switch off vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_trashcan_360(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(cleaning_solution,trashcan_instance)
        else:
            exp(cleaning_solution,trashcan_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,trashcan_instance]=True
        close[trashcan_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathtub_297(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(soap,bathtub_instance)
        else:
            exp(soap,bathtub_instance)
    eff:
        unknown[soap]=False
        close[soap,bathtub_instance]=True
        close[bathtub_instance,soap]=True
    

behavior find_mat_237_around_bathtub_297(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(mat,bathtub_instance)
        else:
            exp(mat,bathtub_instance)
    eff:
        unknown[mat]=False
        close[mat,bathtub_instance]=True
        close[bathtub_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_operational(vacuum_cleaner:item):
    # Function to check if the vacuum cleaner is operational
    symbol operational=is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
    return operational

behavior vacuum_the_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve clean(floor) # Ensure the floor is clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and is_on(vacuum_cleaner) and plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is operational

        foreach floor: item:
            if is_floor(floor) and dirty(floor):
                vacuum_the_floor(vacuum_cleaner, floor)
        # Vacuum all dirty floors

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
def has_vacuum_cleaner(char:item):
    # Check if the character is holding the vacuum cleaner
    symbol holding_vacuum=exists vacuum_cleaner: item : is_vacuum_cleaner(vacuum_cleaner) and inhand(vacuum_cleaner)
    return holding_vacuum

behavior check_vacuum_ready(vacuum_cleaner:item):
    body:
        if has_vacuum_cleaner(char):
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
        else:
            achieve_once inhand(vacuum_cleaner)
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve on_char(char, floor)
        # Ensure the character is on the floor
        check_vacuum_ready(vacuum_cleaner) # Ensure vacuum cleaner is plugged and on
        achieve clean(floor)
        # Vacuum the floor to ensure its clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying has_vacuum_cleaner[cacheable](char: item):
  return exists(_t1: item: and(is_vacuum_cleaner(V::_t1), inhand(V::_t1))).
  Arguments: O::char
Argument #0 type does not match: expect item, got character.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_towel_2083_around_bathtub_297(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel,bathtub_instance)
        else:
            exp(towel,bathtub_instance)
    eff:
        unknown[towel]=False
        close[towel,bathtub_instance]=True
        close[bathtub_instance,towel]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#goal_representation
 
def has_vacuum_cleaner():
    # Check if the character is holding the vacuum cleaner
    symbol holding_vacuum=exists vacuum_cleaner: item : is_vacuum_cleaner(vacuum_cleaner) and inhand(vacuum_cleaner)
    return holding_vacuum

behavior check_vacuum_ready(vacuum_cleaner:item):
    body:
        if has_vacuum_cleaner():
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
        else:
            achieve_once inhand(vacuum_cleaner)
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve on_char(char, floor)
        # Ensure the character is on the floor
        check_vacuum_ready(vacuum_cleaner) # Ensure vacuum cleaner is plugged and on
        achieve clean(floor)
        # Vacuum the floor to ensure its clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_cup_2087_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        assert is_floor(floor)
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        vacuum_floor(vacuum_cleaner, floor)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        assert is_floor(floor)
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        vacuum_floor(vacuum_cleaner, floor)
 
##############################
From agent.py-> find a plan in act()
switchon_executor(vacuum_cleaner_2094)
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
Human Instruction: The robot needs to ensure the vacuum cleaner is turned on and physically use it to vacuum the floor sections, instead of washing them. Make sure each section of the floor that needs vacuuming is covered by the vacuum cleaner while it is switched on.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.
Action 30: Switch on vacuum_cleaner_2094.
Action 31: Switch off vacuum_cleaner_2094.
Action 32: Switch on vacuum_cleaner_2094.
Action 33: Walk to floor_13.
Action 34: Wash floor_13.
Action 35: Walk to vacuum_cleaner_2094.
Action 36: Switch off vacuum_cleaner_2094.
Action 37: Switch on vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_vacuum_cleaner_on_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve clean(floor)
        # Ensure the floor is cleaned

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        use_vacuum_cleaner_on_floor(vacuum_cleaner, floor)
        # Use the vacuum cleaner on the floor

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_table_123(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_vacuum_is_on(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve close_char(char, floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        ensure_vacuum_is_on(vacuum_cleaner)
        vacuum_floor(floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_vacuum_is_on(vacuum_cleaner:item):
    body:
        achieve is_on(vacuum_cleaner)

behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve close_char(char, floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        bind floor: item where:
            is_floor(floor)
        ensure_vacuum_is_on(vacuum_cleaner)
        vacuum_floor(floor, vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(floor_12)
##############################
From agent.py
walk_executor(floor_12)
Robot is inside dining_room_1. Robot is close floor_12. Robot is no longer inside home_office_161.Robot is no longer close vacuum_cleaner_2094.
##############################
From agent.py
Human Instruction: You need to physically vacuum the floor sections while the vacuum cleaner is turned on, instead of washing them. Make sure that each section of the floor requiring vacuuming is covered by the vacuum cleaner in the on position.

The actions you have taken:
Action 1: Walk to kitchen_counter_132.
Action 2: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 3: Walk to kitchen_counter_128.
Action 4: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 5: Walk to kitchen_counter_129.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 7: Walk to dishwasher_143.
Action 8: Open dishwasher_143.
Action 9: look for vacuum_cleaner_2094 around dishwasher_143.
Action 10: Walk to ironing_board_2099.
Action 11: look for vacuum_cleaner_2094 around ironing_board_2099.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for vacuum_cleaner_2094 around fridge_140.
Action 16: Walk to couch_192.
Action 17: look for vacuum_cleaner_2094 around couch_192.
Action 18: Walk to vacuum_cleaner_2094.
Action 19: Plug in vacuum_cleaner_2094.
Action 20: Switch on vacuum_cleaner_2094.
Action 21: Walk to floor_12.
Action 22: Wash floor_12.
Action 23: Walk to vacuum_cleaner_2094.
Action 24: Switch off vacuum_cleaner_2094.
Action 25: Walk to couch_192.
Action 26: Observe around couch_192 with the question of Locate the vacuum cleaner and bring it to the floor.
Action 27: Walk to vacuum_cleaner_2094.
Action 28: Switch on vacuum_cleaner_2094.
Action 29: Switch off vacuum_cleaner_2094.
Action 30: Switch on vacuum_cleaner_2094.
Action 31: Switch off vacuum_cleaner_2094.
Action 32: Switch on vacuum_cleaner_2094.
Action 33: Walk to floor_13.
Action 34: Wash floor_13.
Action 35: Walk to vacuum_cleaner_2094.
Action 36: Switch off vacuum_cleaner_2094.
Action 37: Switch on vacuum_cleaner_2094.
Action 38: Walk to floor_12.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_mat_237_around_mat_201(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==201
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner) # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner) # Ensure the vacuum cleaner is turned on
        # Move the vacuum cleaner to cover entire floor
        achieve clean(floor) # The floor should be clean after vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_towel_2083_around_bathtub_297(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(towel,bathtub_instance)
        else:
            exp(towel,bathtub_instance)
    eff:
        unknown[towel]=False
        close[towel,bathtub_instance]=True
        close[bathtub_instance,towel]=True
    

behavior find_napkin_2014_around_trashcan_360(napkin:item):
    goal: not unknown(napkin)
    body:
        assert is_napkin(napkin)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==360
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(napkin,trashcan_instance)
        else:
            exp(napkin,trashcan_instance)
    eff:
        unknown[napkin]=False
        close[napkin,trashcan_instance]=True
        close[trashcan_instance,napkin]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirt_on_floor(floor:item):
    # Function to check if the floor is dirty
    symbol has_dirt=dirty(floor)
    return has_dirt

behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve close(vacuum_cleaner, floor)
        # Position the vacuum cleaner close to the dirty floor
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner to clean the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            # Iterate over all floor areas to check each one
            if is_floor(floor) and has_dirt_on_floor(floor):
                clean_floor_with_vacuum(floor, vacuum_cleaner)
                # Clean the dirty floor with the vacuum cleaner

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_dirt_on_floor(floor:item):
    # Function to check if the floor is dirty
    symbol has_dirt=dirty(floor)
    return has_dirt

behavior clean_floor_with_vacuum(floor:item, vacuum_cleaner:item):
    body:
        achieve close(vacuum_cleaner, floor)
        # Position the vacuum cleaner close to the dirty floor
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner to clean the floor

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        foreach floor: item:
            # Iterate over all floor areas to check each one
            if is_floor(floor) and has_dirt_on_floor(floor):
                clean_floor_with_vacuum(floor, vacuum_cleaner)
                # Clean the dirty floor with the vacuum cleaner

##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_17)put_executor(vacuum_cleaner_2094, floor_17)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_21)put_executor(vacuum_cleaner_2094, floor_21)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_24)put_executor(vacuum_cleaner_2094, floor_24)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_164)put_executor(vacuum_cleaner_2094, floor_164)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_221)put_executor(vacuum_cleaner_2094, floor_221)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_273)put_executor(vacuum_cleaner_2094, floor_273)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_277)put_executor(vacuum_cleaner_2094, floor_277)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_328)put_executor(vacuum_cleaner_2094, floor_328)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_331)put_executor(vacuum_cleaner_2094, floor_331)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_333)put_executor(vacuum_cleaner_2094, floor_333)walk_executor(vacuum_cleaner_2094)grab_executor(vacuum_cleaner_2094)walk_executor(floor_335)put_executor(vacuum_cleaner_2094, floor_335)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer inside dining_room_1.Robot is no longer close floor_12.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close couch_192. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_17)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_17. Robot is no longer inside home_office_161.Robot is no longer close couch_192.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_17)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_17. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_17. Robot is no longer inside dining_room_1.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_17. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_21)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_21. Robot is no longer inside home_office_161.Robot is no longer close floor_17.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_21)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_21. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_21. Robot is no longer inside dining_room_1.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_21. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_24)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_24. Robot is no longer inside home_office_161.Robot is no longer close floor_21.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_24)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_24. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_24. Robot is no longer inside dining_room_1.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_24. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_164)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_164. Robot is no longer close floor_24.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_164)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_164. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_164. 
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_164. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_221)
Robot is inside bedroom_220. Robot is close vacuum_cleaner_2094. Robot is close floor_221. Robot is no longer inside home_office_161.Robot is no longer close floor_164.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_221)
Robot is inside bedroom_220. Robot is close vacuum_cleaner_2094. Robot is close floor_221. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_221. Robot is no longer inside bedroom_220.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_221. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_273)
Robot is inside bathroom_265. Robot is close vacuum_cleaner_2094. Robot is close floor_273. Robot is no longer inside home_office_161.Robot is no longer close floor_221.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_273)
Robot is inside bathroom_265. Robot is close vacuum_cleaner_2094. Robot is close floor_273. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_273. Robot is no longer inside bathroom_265.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_273. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_277)
Robot is inside bathroom_265. Robot is close vacuum_cleaner_2094. Robot is close floor_277. Robot is no longer inside home_office_161.Robot is no longer close floor_273.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_277)
Robot is inside bathroom_265. Robot is close vacuum_cleaner_2094. Robot is close floor_277. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_277. Robot is no longer inside bathroom_265.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_277. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_328)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_328. Robot is no longer inside home_office_161.Robot is no longer close floor_277.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_328)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_328. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_328. Robot is no longer inside bedroom_327.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_328. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_331)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_331. Robot is no longer inside home_office_161.Robot is no longer close floor_328.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_331)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_331. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_331. Robot is no longer inside bedroom_327.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_331. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_333)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_333. Robot is no longer inside home_office_161.Robot is no longer close floor_331.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_333)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_333. vacuum_cleaner_2094 released by right hand. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_333. Robot is no longer inside bedroom_327.
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close floor_333. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
walk_executor(floor_335)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_335. Robot is no longer inside home_office_161.Robot is no longer close floor_333.
##############################
From agent.py
put_executor(vacuum_cleaner_2094, floor_335)
Robot is inside bedroom_327. Robot is close vacuum_cleaner_2094. Robot is close floor_335. vacuum_cleaner_2094 released by right hand. 
##############################
