From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the table in the bedroom.', '3. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book(item:item):
    # Function to check if an item is a book
    symbol is_book_item=is_book(item)
    return is_book_item

behavior __goal__():
    body:
        if exists book: item : is_book(book):
            # Check if there is a book based on the available information
            bind book: item where:
                is_book(book)
            # Select the book that is found
            achieve close_char(char, book) 
            # Move the character closer to the book

        else: 
           # If no book is found, initiate exploration to locate one
            foreach item: item:
                if not visited(item):
                    observe(item,"Check if it is a book")
                    # Observe whether each item is a book

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book(item:item):
    # Function to check if an item is a book
    symbol is_book_item=is_book(item)
    return is_book_item

behavior __goal__():
    body:
        if exists book: item : is_book(book):
            # Check if there is a book based on the available information
            bind book: item where:
                is_book(book)
            # Select the book that is found
            achieve close_char(char, book) 
            # Move the character closer to the book

        else: 
           # If no book is found, initiate exploration to locate one
            foreach item: item:
                if not visited(item):
                    observe(item,"Check if it is a book")
                    # Observe whether each item is a book

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Failed to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Ensure that the book is placed on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table inside the bedroom
        
        place_book_on_table(book, table)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bedroom; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Ensure that the book is placed on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind table: item where:
            is_table(table) and inside(table, room)
        # Select a table inside the room
        
        bind room: item where:
            is_bedroom(room)
        # Ensure the room is a bedroom
        
        place_book_on_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: room; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_chair_138_around_table_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==193
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Ensure that the book is placed on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091
        
        bind room: item where:
            is_bedroom(room)
        # Ensure the room is a bedroom
        
        bind table: item where:
            is_table(table) and inside(table, room)
        # Select a table inside the room

        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book]==2091
        # Select the book with ID 2091
        
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        
        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table inside the bedroom
        
        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select the table inside the bedroom
        
        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        bind book: item where:
            is_book(book) and close_char(char, book)
        # Select the book that is close to your current position

        put_book_on_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bedroom; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        bind book: item where:
            is_book(book) and close_char(char, book)
        # Select the book that is close to your current position

        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            id[book] == 2091
        # Select the book with ID 2091 found from previous actions

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        place_book_on_table(book, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bedroom; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#goal_representation
behavior place_book_on_table(book:item, table:item, bedroom:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            id[book] == 2091
        # Select the book with ID 2091 found from previous actions

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        place_book_on_table(book, table, bedroom)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book_2091: item where:
            id[book_2091] == 2091
        # Select the book with ID 2091

        bind bedroom_table: item where:
            is_table(bedroom_table) and inside(bedroom_table, item where: is_bedroom(item))
        # Select a table inside the bedroom

        put_book_on_table(book_2091, bedroom_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'where') at line 5904, column 68.
Expected one of: 
	* COMMA
	* EQUAL
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_260(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bookshelf_260(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book_2091: item where:
            id[book_2091] == 2091
        # Select the book with ID 2091

        bind bedroom_table: item where:
            is_table(bedroom_table) and inside(bedroom_table, b_room) where is_bedroom(b_room)
        # Select a table inside the bedroom

        put_book_on_table(book_2091, bedroom_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'where') at line 5904, column 71.
Expected one of: 
	* COMMA
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2092_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book_2091: item where:
            id[book_2091] == 2091
        # Select the book with ID 2091

        bind bedroom_table: item where:
            is_table(bedroom_table) and inside(bedroom_table, b_room) and is_bedroom(b_room)
        # Select a table inside the bedroom

        put_book_on_table(book_2091, bedroom_table)

#goal_representation_end

##############################
