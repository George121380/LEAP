[
    {
        "task_name": "Listen to music",
        "source_sub_task": "Turn on the DVD player using the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player instance\n\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        achieve close_char(char, dvd_player)\n        # Ensure you are close to the DVD player\n\n        touch(remote_control)\n        # Use the remote control to turn on the DVD player\n\n        achieve is_on(dvd_player)\n        # Ensure the DVD player is switched on\n"
    },
    {
        "task_name": "make up bed",
        "source_sub_task": "Place a cup of water on the nightstand.",
        "cdl": " \nbehavior place_cup_on_nightstand(cup:item, nightstand:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n        achieve on(cup, nightstand)\n        # Place the cup on the nightstand\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n        \n        bind nightstand: item where:\n            is_nightstand(nightstand)\n        # Select an instance of a nightstand\n        \n        place_cup_on_nightstand(cup, nightstand)\n        # Execute the behavior to place the cup on the nightstand\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces, then put it back to the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken:item):\n    body:\n        achieve cut(chicken) \n\nbehavior place_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge instance\n\n        cut_chicken(chicken)\n        # Execute behavior to cut the chicken\n\n        place_in_fridge(chicken, fridge)\n        # Place the cut chicken back into the fridge\n\n        close_fridge(fridge)\n        # Close the fridge after placing the chicken inside\n "
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Fill a bowl with water.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this pool has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\nbehavior fill_bowl_with_water(bowl:item, sink:item):\n    body:\n        achieve_once inside(bowl, sink)\n        # Place the bowl inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            # If the sink has a faucet, turn it on to fill the bowl with water\n\n        achieve has_water(bowl)\n        # Ensure the bowl is filled with water\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_off(faucet)\n            # Turn the faucet off after filling the bowl with water\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select an instance of a bowl\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n        \n        fill_bowl_with_water(bowl, sink)\n        # Execute the behavior to fill the bowl with water\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Place the bowl on the table in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select the instance of a bowl\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        achieve has_water(bowl)\n        # Ensure the bowl is filled with water\n\n        achieve on(bowl, table)\n        # Place the bowl filled with water on the table in the home office\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "3. Find your cat and place it on the table in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind table: item where:\n            is_table(table) and id[table] == 270\n        # Select the table with ID 270 in the home office\n        \n        bind cat: item where:\n            is_cat(cat) and id[cat] == 2069\n        # Select the cat with ID 2069\n\n        achieve on(cat, table)\n        # Place the cat on the table\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "1. Find and sit on the couch.",
        "cdl": " \ndef is_couch_sittable(couch:item):\n    # Function to check if an item is a couch and can be sat on\n    return is_couch(couch) and sittable(couch)\n\nbehavior __goal__():\n    body:\n        if exists couch: item : is_couch_sittable(couch):\n            # If a couch has not been visited and is sittable, approach it\n            bind couch: item where:\n                is_couch_sittable(couch)\n            achieve close_char(char, couch)\n            sit_somewhere(couch)\n\n        else:\n            # Check all unvisited couches in the scene\n            foreach couch: item:\n                if is_couch(couch) and not visited(couch):\n                    observe(couch, \"Check if the couch is sittable\")\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV with the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind couch: item where:\n            is_couch(couch) and id[couch]==352\n        # Select the couch with ID 352\n\n        bind remote_control: item where:\n            is_remote_control(remote_control) and id[remote_control]==2052\n        # Select the remote control with ID 2052\n\n        bind television: item where:\n            is_television(television)\n        # Select the television instance\n\n        achieve on_char(char, couch)\n        # Ensure the character is sitting on the couch\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(television)\n        # Ensure the television is switched on\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Function to determine if a sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior turn_off_faucet(faucet:item):\n    body:\n        achieve is_off(faucet)\n\nbehavior clean_sink(sink:item, faucet:item):\n    body:\n        achieve clean(sink)\n        # Ensure the sink is clean\n\nbehavior __goal__():\n    body:\n        bind faucet: item where:\n            is_faucet(faucet) and id[faucet]==20\n        # Select the faucet with ID 20\n\n        bind sink: item where:\n            is_sink(sink) and id[sink]==19\n        # Select the sink with ID 19\n\n        if has_faucet(sink):\n            clean_sink(sink, faucet)\n            turn_off_faucet(faucet)\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "Clean the bathroom sink directly.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior turn_off_faucet(faucet:item):\n    body:\n        achieve is_off(faucet)\n\nbehavior ensure_sink_clean(sink:item):\n    body:\n        achieve clean(sink)\n        # Ensure the bathroom sink is clean\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink)\n        # Select the bathroom sink instance\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            ensure_sink_clean(sink)\n            turn_off_faucet(faucet)\n        else:\n            ensure_sink_clean(sink)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water and freeze it.",
        "cdl": " \nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after filling the cup\n\nbehavior store_cup_in_freezer(cup:item, freezer:item):\n    body:\n        achieve inside(cup, freezer)\n        # Place the cup inside the freezer\n\nbehavior close_the_freezer_door(freezer:item):\n    body:\n        achieve closed(freezer)\n        # Close the freezer door\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a fridge (used as a freezer)\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water\n\n        store_cup_in_freezer(cup, freezer)\n        # Store the waterfilled cup in the freezer\n\n        close_the_freezer_door(freezer)\n        # Close the freezer door after storing the cup\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, table)\n        # Execute the behavior to put the book on the table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Open the window in the home office.",
        "cdl": " \n# Define a behavior to open a window in the home office\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n        # Ensure the window is opened\n\n# Define the main behavior to achieve the given goal\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        # Select the window in the home office\n        \n        open_window(window)\n        # Execute the behavior to open the window in the home office\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the household.",
        "cdl": " \ndef has_confirmed_rooms(room:item):\n    # Determine if a room has been confirmed through observation\n    return visited(room)\n\nbehavior identify_rooms():\n    body:\n        foreach room: item:\n            if (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n                observe(room, \"Verify the existence of this room\")\n\nbehavior __goal__():\n    body:\n        if exists room: item : (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not has_confirmed_rooms(room):\n            # If rooms without confirmed visits are present, identify them\n            identify_rooms()\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Ensure there is at least one light on in each room.",
        "cdl": " \ndef has_light_on_in_room(room:item):\n    # Function to check if there is at least one light on in a specified room\n    symbol light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)\n    return light_on\n\nbehavior ensure_light_on(room:item):\n    body:\n        if not has_light_on_in_room(room):\n            foreach light: item:\n                if is_light(light) and not is_on(light) and inside(light, room):\n                    achieve is_on(light)\n                    # Turn on the light if its off in the specified room\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):\n                ensure_light_on(room)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket containing the clothes.",
        "cdl": "\ndef is_basket_for_clothes_found():\n    # Check if a basket for clothes is already found and visited\n    symbol basket_found=exists basket: item : is_basket_for_clothes(basket) and visited(basket)\n    return basket_found\n\nbehavior __goal__():\n    body:\n        if not is_basket_for_clothes_found():\n            # If no basket is found yet, search for an unvisited basket\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if this is the basket containing clothes\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the clothes in the basket using the washing machine.",
        "cdl": "behavior wash_clothes_in_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Ensure the clothes are placed inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Ensure the washing machine is turned on to start washing\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket containing clothes\n\n        bind clothes_pants: item where:\n            is_clothes_pants(clothes_pants) and inside(clothes_pants, basket)\n        # Select pants inside the basket\n\n        bind clothes_shirt: item where:\n            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)\n        # Select shirt inside the basket\n\n        bind clothes_socks: item where:\n            is_clothes_socks(clothes_socks) and inside(clothes_socks, basket)\n        # Select socks inside the basket\n\n        bind clothes_skirt: item where:\n            is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)\n        # Select skirt inside the basket\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n\n        foreach clothes: item:\n            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):\n                wash_clothes_in_washing_machine(clothes, washing_machine)\n                \n        start_washing_machine(washing_machine)\n        # Start the washing machine after all clothes are loaded"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        \n        open_bathroom_window(window)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Wash the bowls and the plates using the dishwasher.",
        "cdl": " \ndef has_bowls_and_plates(dishwasher:item):\n    # Function to check if there are bowls and plates in a specified dishwasher\n    symbol has_bowls_and_plates=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, dishwasher)\n    return has_bowls_and_plates\n\nbehavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher) and id[dishwasher] == 1001\n        # Select the dishwasher with ID 1001\n\n        foreach o: item:\n        # Load all bowls and plates into the dishwasher\n            if (is_bowl(o) or is_plate(o)) and not inside(o, dishwasher):\n                load_dishwasher(o, dishwasher)\n        \n        if has_bowls_and_plates(dishwasher):\n            start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Locate the milk, turkey, egg, fish, and chicken in the household.",
        "cdl": " \ndef is_fridge_open(fridge:item):\n    # Check if the fridge is open\n    return open(fridge)\n\nbehavior find_and_locate_food_items(fridge:item):\n    body:\n        if not is_fridge_open(fridge):\n            achieve_once open(fridge)\n            # Open the fridge to locate items\n\n        observe(fridge, \"Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge\")\n        # Look inside the fridge to locate the specified items\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge]==140\n        # Select fridge with ID 140\n\n        find_and_locate_food_items(fridge)\n        # Execute the behavior to locate all specified food items in the fridge\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Bring the milk, turkey, egg, fish, and chicken to the table in the dining room.",
        "cdl": " \nbehavior bring_item_to_table(item:item, table:item):\n    body:\n        achieve on(item, table)\n        # Place each item on the table\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken\n\n        bring_item_to_table(milk, dining_room_table)\n        bring_item_to_table(turkey, dining_room_table)\n        bring_item_to_table(egg, dining_room_table)\n        bring_item_to_table(fish, dining_room_table)\n        bring_item_to_table(chicken, dining_room_table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": "behavior cut_chicken(chicken:item):\n    body:\n        achieve cut(chicken) \n\nbehavior place_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n\nbehavior close_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge instance\n\n        cut_chicken(chicken)\n        # Execute behavior to cut the chicken\n\n        place_in_fridge(chicken, fridge)\n        # Place the cut chicken back into the fridge\n\n        close_fridge(fridge)\n        # Close the fridge after placing the chicken inside"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water.",
        "cdl": "behavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after filling the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087\n\n        bind sink: item where:\n            is_sink(sink) and close(sink, cup)\n        # Select the sink instance close to the cup\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Turn on the lights in the bedroom.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom instance\n\n        bind light: item where:\n            is_light(light) and inside(light, bedroom)\n        # Select the light that is inside the bedroom\n\n        achieve is_on(light)\n        # Ensure the light in the bedroom is turned on\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on the lights in the bathroom.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        # Select the light inside the bathroom\n\n        achieve is_on(light_bathroom)\n        # Ensure the light in the bathroom is turned on\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": "\nbehavior put_spectacles_on_table(spectacles:item, table:item):\n    body:\n        achieve on(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the instance of spectacles\n\n        put_spectacles_on_table(spectacles, coffee_table)\n        # Execute the behavior to put the spectacles on the coffee table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, table)\n        # Execute the behavior to put the book on the table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the specific book you need.",
        "cdl": "\ndef has_book_on_bookshelf(bookshelf:item):\n    # Function to check if there is a book on a specified bookshelf\n    symbol has_book=exists o: item : is_book(o) and on(o, bookshelf)\n    return has_book\n\nbehavior __goal__():\n    body:\n        foreach bookshelf: item:\n            # Loop through all bookshelves to find an unvisited one with a book\n            if is_bookshelf(bookshelf) and not visited(bookshelf):\n                observe(bookshelf,\"Check if there is a book on the bookshelf\")\n                # Observe the bookshelf to check for a book\n                if has_book_on_bookshelf(bookshelf):\n                    bind book: item where:\n                        is_book(book) and on(book, bookshelf)\n                    # Select the book on the bookshelf\n\n                    bind home_office: item where:\n                        is_home_office(home_office)\n                    # Select the home office as the target location\n\n                    bind coffee_table: item where:\n                        is_coffee_table(coffee_table) and inside(coffee_table, home_office)\n                    # Select the coffee table within the home office\n\n                    achieve on(book, coffee_table)\n                    # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Put the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "3. Open the window in the home office.",
        "cdl": "\n# Define a behavior to open a window in the home office\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n        # Ensure the window is opened\n\n# Define the main behavior to achieve the given goal\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        # Select the window in the home office\n        \n        open_window(window)\n        # Execute the behavior to open the window in the home office\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Wash all the vegetables.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)\n    return has_faucet\n\nbehavior wash_vegetable(vegetable:item, sink:item):\n    body:\n        achieve_once inside(vegetable, sink)\n        # Ensure the vegetable is placed inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_on(faucet)\n            # If the sink has a faucet, turn it on to wash the vegetable\n\n        wash(vegetable)\n        # Wash the vegetable\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet,sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after washing\n\nbehavior __goal__():\n    body:\n        bind vegetable: item where:\n            is_food_vegetable(vegetable)\n        # Select a vegetable instance\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink instance\n\n        wash_vegetable(vegetable, sink)\n        # Execute the behavior to wash the vegetable\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
        "cdl": " \nbehavior put_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot)\n        # Ensure all the vegetables are placed inside the pot\n\nbehavior boil_vegetables_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Make sure the pot is on the stove\n        achieve is_on(stove)\n        # Turn on the stove to boil the vegetables\n\nbehavior __goal__():\n    body:\n        bind vegetable: item where:\n            is_food_vegetable(vegetable)\n        # Select the vegetables\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot instance\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove instance\n\n        put_vegetables_in_pot(vegetable, pot)\n        boil_vegetables_on_stove(pot, stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Cool the boiled vegetables in a bowl.",
        "cdl": " \nbehavior cool_boiled_vegetables(vegetables:item, bowl:item):\n    body:\n        achieve_once inside(vegetables, bowl)\n        # Ensure that the boiled vegetables are inside the bowl for cooling\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select an instance of a bowl\n\n        bind vegetables: item where:\n            is_food_vegetable(vegetables) and not visited(vegetables)\n        # Ensure the vegetables that were boiled are available for cooling\n\n        cool_boiled_vegetables(vegetables, bowl)\n        # Execute behavior to cool the boiled vegetables in the bowl\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup and fill it with water.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2132\n        # Select the cup with the specific ID\n\n        bind sink: item where:\n            is_sink(sink) and id[sink]==19\n        # Select the sink instance\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "1. Identify all the rooms in the house.",
        "cdl": "behavior identify_rooms():\n    body:\n        foreach room: item:\n            if (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n                observe(room, \"Verify the existence of this room\")\n\nbehavior __goal__():\n    body:\n        if exists room: item : (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):\n            identify_rooms()"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "2. Turn on at least one light in each room.",
        "cdl": " \ndef has_light_in_room(room: item):\n    # Function to check if there is at least one light in a specified room\n    symbol light_exists = exists o: item : is_light(o) and inside(o, room)\n    return light_exists\n\nbehavior turn_on_light_in_room(room: item):\n    body:\n        foreach light: item:\n            if is_light(light) and not is_on(light) and inside(light, room):\n                # Check all lights inside the room that are off\n                achieve is_on(light)\n                # Turn on the light if it is off in the specified room\n\nbehavior __goal__():\n    body:\n        foreach room: item:\n            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):\n                if has_light_in_room(room):\n                    turn_on_light_in_room(room)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Identify a basket with clothes.",
        "cdl": " \ndef has_clothes(basket: item):\n    # Function to check if there are clothes in the specified basket\n    symbol has_clothes_instance = exists c: item : is_clothes(c) and inside(c, basket)\n    return has_clothes_instance\n\nbehavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket) and has_clothes(basket):\n            # If a basket with clothes is found based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes(basket)\n            achieve close_char(char, basket)\n        else:\n            # If no basket with clothes is found, search for a suitable basket\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in this basket\")\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Load the clothes into the washing machine and start the wash cycle.",
        "cdl": " \nbehavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n\nbehavior start_wash_cycle(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        achieve is_on(washing_machine)\n\nbehavior __goal__():\n    body:\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket containing clothes\n\n        bind clothes_pants: item where:\n            is_clothes_pants(clothes_pants) and inside(clothes_pants, basket)\n        # Select pants inside the basket\n\n        bind clothes_shirt: item where:\n            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)\n        # Select shirt inside the basket\n\n        bind clothes_socks: item where:\n            is_clothes_socks(clothes_socks) and inside(clothes_socks, basket)\n        # Select socks inside the basket\n\n        bind clothes_skirt: item where:\n            is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)\n        # Select skirt inside the basket\n\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine\n        \n        foreach clothes: item:\n            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):\n                load_clothes_into_washing_machine(clothes, washing_machine)\n                \n        start_wash_cycle(washing_machine)\n        # Start the washing machine after all clothes are loaded\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": " \nbehavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        \n        open_bathroom_window(window)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Place the bowls and plates into the dishwasher and run it.",
        "cdl": "behavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve inside(item, dishwasher)\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach item: item:\n        # Load all bowls and plates into the dishwasher\n            if (is_bowl(item) or is_plate(item)):\n                load_dishwasher(item, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher after loading items into it"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_fork_by_hand(fork:item, sink:item):\n    body:\n        achieve_once inside(fork, sink)\n        # Place the fork inside the sink\n\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind fork: item where:\n            is_fork(fork)\n        # Select an instance of a fork\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        wash_fork_by_hand(fork, sink)\n        # Execute the behavior to wash the fork by hand\n"
    },
    {
        "task_name": "Vacuum the floor",
        "source_sub_task": "Turn on the vacuum cleaner, hold it, and push and pull it to vacuum the floor.",
        "cdl": " \ndef is_vacuum_cleaner_on_floor(vacuum_cleaner:item, floor:item):\n    # Check if the vacuum cleaner is on the floor\n    return close(vacuum_cleaner, floor)\n\nbehavior start_vacuum_cleaning(vacuum_cleaner:item, floor:item):\n    body:\n        achieve plugged(vacuum_cleaner)\n        # Ensure the vacuum cleaner is plugged in\n        achieve is_on(vacuum_cleaner)\n        # Ensure the vacuum cleaner is turned on\n        achieve_once inhand(vacuum_cleaner)\n        # Temporarily hold the vacuum cleaner\n\nbehavior vacuum_floor(vacuum_cleaner: item, floor: item):\n    body:\n        achieve is_on(vacuum_cleaner)\n        # Ensure the vacuum cleaner is working\n        pull(vacuum_cleaner)\n        push(vacuum_cleaner)\n        # Vacuum the floor by pushing and pulling the vacuum cleaner over it\n\nbehavior __goal__():\n    body:\n        bind vacuum_cleaner: item where:\n            is_vacuum_cleaner(vacuum_cleaner)\n        # Bind to vacuum cleaner instance\n\n        bind floor: item where:\n            is_floor(floor) and id[floor] == 10\n        # Bind to floor instance with ID 10\n\n        if not is_vacuum_cleaner_on_floor(vacuum_cleaner, floor):\n            achieve close_char(char, vacuum_cleaner)\n\n        start_vacuum_cleaning(vacuum_cleaner, floor)\n        vacuum_floor(vacuum_cleaner, floor)\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Cut the bread, put it in the toaster, and turn on the toaster.",
        "cdl": "behavior cut_bread(bread:item):\n    body:\n        achieve cut(bread)\n        # Ensure the bread is cut\n\nbehavior place_in_toaster(bread:item, toaster:item):\n    body:\n        achieve inside(bread, toaster)\n        # Place the cut bread inside the toaster\n\nbehavior turn_on_toaster(toaster:item):\n    body:\n        achieve is_on(toaster)\n        # Turn on the toaster\n\nbehavior __goal__():\n    body:\n        bind bread: item where:\n            is_food_bread(bread)\n        # Select the bread instance\n\n        bind toaster: item where:\n            is_toaster(toaster)\n        # Select the toaster instance\n\n        cut_bread(bread)\n        # Execute behavior to cut the bread\n\n        place_in_toaster(bread, toaster)\n        # Place the cut bread into the toaster\n\n        turn_on_toaster(toaster)\n        # Turn on the toaster to toast the bread"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "1. Put the pan on the stove.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select an instance of a frying pan\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select an instance of a stove\n\n        achieve on(fryingpan, stove)\n        # Place the frying pan on the stove\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "2. Turn on the stove.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind stove: item where:\n            is_stove(stove) and id[stove]==2135\n        # Select the stove with ID 2135\n\n        achieve is_on(stove)\n        # Ensure the stove is turned on\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "3. Put oil in the pan.",
        "cdl": " \nbehavior put_oil_in_pan(oil:item, pan:item):\n    body:\n        achieve inside(oil, pan)\n        # Ensure the oil is put inside the pan\n\nbehavior __goal__():\n    body:\n        bind oil: item where:\n            is_oil(oil)\n        # Select the oil instance\n\n        bind pan: item where:\n            is_fryingpan(pan)\n        # Select the frying pan instance\n\n        put_oil_in_pan(oil, pan)\n        # Execute the behavior to put oil in the pan\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "4. Put the egg in the pan.",
        "cdl": " \nbehavior put_egg_in_pan(egg: item, fryingpan: item):\n    body:\n        achieve inside(egg, fryingpan)\n        # Ensure the egg is placed inside the fryingpan\n        \nbehavior __goal__():\n    body:\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select an instance of an egg\n\n        bind fryingpan: item where:\n            is_fryingpan(fryingpan)\n        # Select the fryingpan instance\n\n        put_egg_in_pan(egg, fryingpan)\n        # Execute the behavior to put the egg in the fryingpan\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": "behavior put_spectacles_on_table(spectacles:item, table:item):\n    body:\n        achieve on(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the instance of spectacles\n\n        put_spectacles_on_table(spectacles, coffee_table)\n        # Execute the behavior to put the spectacles on the coffee table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "behavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, table)\n        # Execute the behavior to put the book on the table"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "1. Find the couch and sit on it.",
        "cdl": "behavior __goal__():\n    body:\n        if exists couch: item : is_couch(couch) and sittable(couch):\n            # If a sittable couch has not been visited, approach it\n            bind couch: item where:\n                is_couch(couch) and sittable(couch)\n            achieve close_char(char, couch)\n            sit_somewhere(couch)\n\n        else:\n            # Check all unvisited couches in the scene\n            foreach couch: item:\n                if is_couch(couch) and not visited(couch):\n                    observe(couch, \"Check if the couch is sittable\")\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "2. Locate the remote control and turn on the TV.",
        "cdl": "behavior locate_remote_control(remote_control: item):\n    body:\n        achieve visited(remote_control)\n        # Ensure the remote control is located and marked as visited\n\nbehavior turn_on_television(television: item, remote_control: item):\n    body:\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(television)\n        # Ensure the television is switched on\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        bind television: item where:\n            is_television(television)\n        # Select the television instance\n\n        locate_remote_control(remote_control)\n        turn_on_television(television, remote_control)\n        # Execute the behaviors to locate the remote and turn on the television with it"
    },
    {
        "task_name": "Vacuum the floor",
        "source_sub_task": "Vacuum the floor.",
        "cdl": " \ndef is_vacuum_cleaner_plugged(vacuum_cleaner: item):\n    # Check if the vacuum cleaner is plugged in\n    return plugged(vacuum_cleaner)\n\nbehavior start_vacuum_cleaner(vacuum_cleaner: item):\n    body:\n        achieve plugged(vacuum_cleaner)\n        # Ensure the vacuum cleaner is plugged in\n        \n        achieve is_on(vacuum_cleaner)\n        # Turn on the vacuum cleaner\n\nbehavior vacuum_floor(vacuum_cleaner: item, floor: item):\n    body:\n        achieve is_on(vacuum_cleaner)\n        # Ensure the vacuum cleaner is on\n        \n        achieve_once inhand(vacuum_cleaner)\n        # Temporarily hold the vacuum cleaner\n\n        pull(vacuum_cleaner)\n        push(vacuum_cleaner)\n        # Vacuum the floor by pushing and pulling the vacuum cleaner over it\n\nbehavior __goal__():\n    body:\n        bind vacuum_cleaner: item where:\n            is_vacuum_cleaner(vacuum_cleaner)\n        # Select the vacuum cleaner instance\n\n        bind floor: item where:\n            is_floor(floor)\n        # Select the floor to be vacuumed\n\n        if not is_vacuum_cleaner_plugged(vacuum_cleaner):\n            achieve plugged(vacuum_cleaner)\n\n        start_vacuum_cleaner(vacuum_cleaner)\n        vacuum_floor(vacuum_cleaner, floor)\n"
    },
    {
        "task_name": "Vacuum the floor",
        "source_sub_task": "Vacuum the floor.",
        "cdl": "behavior start_vacuum_cleaner(vacuum_cleaner: item):\n    body:\n        achieve plugged(vacuum_cleaner)\n        # Ensure the vacuum cleaner is plugged in\n        \n        achieve is_on(vacuum_cleaner)\n        # Turn on the vacuum cleaner\n\nbehavior vacuum_floor(vacuum_cleaner: item, floor: item):\n    body:\n        achieve is_on(vacuum_cleaner)\n        # Ensure the vacuum cleaner is on\n        \n        achieve_once inhand(vacuum_cleaner)\n        # Temporarily hold the vacuum cleaner\n\n        pull(vacuum_cleaner)\n        push(vacuum_cleaner)\n        # Vacuum the floor by pushing and pulling the vacuum cleaner over it\n\nbehavior __goal__():\n    body:\n        bind vacuum_cleaner: item where:\n            is_vacuum_cleaner(vacuum_cleaner)\n        # Select the vacuum cleaner instance\n\n        bind floor: item where:\n            is_floor(floor)\n        # Select the floor to be vacuumed\n\n        start_vacuum_cleaner(vacuum_cleaner)\n        vacuum_floor(vacuum_cleaner, floor)"
    },
    {
        "task_name": "make up bed",
        "source_sub_task": "Prepare a cup of water and place it on the nightstand.",
        "cdl": "behavior place_cup_on_nightstand(cup:item, nightstand:item):\n    body:\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n        achieve on(cup, nightstand)\n        # Place the cup on the nightstand\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n\n        bind nightstand: item where:\n            is_nightstand(nightstand)\n        # Select an instance of a nightstand\n        \n        place_cup_on_nightstand(cup, nightstand)\n        # Execute the behavior to place the cup on the nightstand"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Hold the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Get close to the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player instance\n\n        achieve close_char(char, dvd_player)\n        # Ensure you are close to the DVD player\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "3. Touch the remote control.",
        "cdl": " \nbehavior touch_remote_control(remote_control: item):\n    body:\n        touch(remote_control)\n        # Ensure the remote control is touched\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the instance of the remote control\n\n        achieve close_char(char, remote_control)\n        # Ensure you are close to the remote control\n\n        touch_remote_control(remote_control)\n        # Execute the behavior to touch the remote control\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "1. Get close to the computer in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind computer: item where:\n            is_computer(computer) and inside(computer, home_office)\n        # Select the computer within the home office\n\n        achieve close_char(char, computer)\n        # Ensure you get close to the computer in the home office\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "2. Sit on the chair in front of the computer.",
        "cdl": " \nbehavior sit_on_chair_in_front_of_computer(char: character, chair: item):\n    body:\n        achieve close_char(char, chair)\n        # Ensure the character is close to the chair\n\n        achieve on_char(char, chair)\n        # Ensure the character is sitting on the chair\n\nbehavior __goal__():\n    body:\n        bind chair: item where:\n            is_chair(chair) and sittable(chair)\n        # Select a sittable chair instance\n\n        sit_on_chair_in_front_of_computer(char, chair)\n        # Execute the behavior to sit on the chair in front of the computer\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "3. Touch the mouse near the computer to turn it on.",
        "cdl": " \nbehavior touch_mouse(mouse: item):\n    body:\n        touch(mouse)\n        # Ensure the mouse is touched to turn it on\n\nbehavior __goal__():\n    body:\n        bind computer: item where:\n            is_computer(computer)\n        # Select the computer instance\n\n        bind mouse: item where:\n            is_mouse(mouse) and close(mouse, computer)\n        # Select the mouse instance that is close to the computer\n\n        achieve close_char(char, mouse)\n        # Ensure you are close to the mouse near the computer\n\n        touch_mouse(mouse)\n        # Execute the behavior to touch the mouse\n "
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": "behavior identify_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Verify that this is a window\")\n\nbehavior __goal__():\n    body:\n        if exists window: item : is_window(window) and not visited(window):\n            identify_windows()"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window.",
        "cdl": " \ndef is_dirty_window(window: item):\n    # Function to check if a window is dirty\n    symbol is_dirty = dirty(window)\n    return is_dirty\n\nbehavior wipe_window(window: item, towel: item):\n    body:\n        achieve_once inhand(towel)\n        # Temporarily hold the towel\n\n        wipe(window)\n        # Wipe the window with the towel\n\nbehavior __goal__():\n    body:\n        bind towel: item where:\n            is_towel(towel)\n        # Select a towel instance\n\n        foreach window: item:\n            if is_window(window) and is_dirty_window(window) and open(window):\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Place the bowls and plates in the dishwasher and start it.",
        "cdl": "behavior load_dishwasher(item: item, dishwasher: item):\n    body:\n        achieve inside(item, dishwasher)\n\nbehavior start_dishwasher(dishwasher: item):\n    body:\n        achieve closed(dishwasher)\n        achieve is_on(dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n        \n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher \n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher after loading items into it"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the forks by hand.",
        "cdl": " \nbehavior wash_fork_by_hand(fork:item, sink:item):\n    body:\n        achieve_once inside(fork, sink)\n        # Place the fork inside the sink\n\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind fork: item where:\n            is_fork(fork)\n        # Select an instance of a fork\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        wash_fork_by_hand(fork, sink)\n        # Execute the behavior to wash the fork by hand\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Find the sink that is suitable for washing a cat.",
        "cdl": " \ndef is_sink_suitable_for_washing_cat(sink: item):\n    # A function that checks if a sink is suitable for washing a cat\n    # In this case defined as a sink that has not been visited\n    return is_sink(sink) and not visited(sink)\n\nbehavior __goal__():\n    body:\n        if exists sink: item : is_sink_suitable_for_washing_cat(sink):\n            # If a suitable sink is already known, move closer to it\n            bind sink: item where:\n                is_sink_suitable_for_washing_cat(sink)\n            achieve close_char(char, sink)\n\n        else:\n            # If no suitable sink is known, explore unvisited items\n            foreach sink: item:\n                if is_sink(sink) and not visited(sink):\n                    observe(sink, \"Check if this sink is suitable for washing a cat\")\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Put the cat in the sink and wash it.",
        "cdl": "behavior put_cat_in_sink(cat:item, sink:item):\n    body:\n        achieve inside(cat, sink)\n\nbehavior wash_cat(cat:item):\n    body:\n        wash(cat)\n        # Wash the cat once it is placed inside the sink\n        \nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat instance\n\n        bind sink: item where:\n            is_sink(sink) and id[sink]==19\n        # Select the sink instance with ID 19\n\n        put_cat_in_sink(cat, sink)\n        wash_cat(cat)"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find a sink in the bathroom.",
        "cdl": " \nbehavior __goal__():\n    body:\n        if exists sink: item : is_sink(sink) and not visited(sink):\n            # If there is an unvisited sink, approach to find it\n            bind sink: item where:\n                is_sink(sink) and not visited(sink)\n            achieve close_char(char, sink)\n        else:\n            # If no sink is known, explore to find one\n            foreach sink: item:\n                if is_sink(sink) and not visited(sink):\n                    observe(sink, \"Locate the sink in the bathroom\")\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to make it soapy.",
        "cdl": " \ndef has_faucet(sink: item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_sink_with_water_and_soap(sink: item, soap: item):\n    body:\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the sink with water\n\n        achieve has_water(sink)\n        # Ensure the sink is filled with water\n\n        achieve inside(soap, sink)\n        # Add soap to the sink to make it soapy\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the sink\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 19\n        # Select the sink with ID 19\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select an instance of soap\n\n        fill_sink_with_water_and_soap(sink, soap)\n        # Execute the behavior to fill the sink with water and add soap\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV with the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind tv: item where:\n            is_television(tv)\n        # Select the television instance\n\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(tv)\n        # Ensure the television is switched on\n "
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        # Select the light inside the bathroom\n\n        achieve is_on(light_bathroom)\n        # Ensure the light in the bathroom is turned on"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Get a cup of water and place it in the freezer to freeze.",
        "cdl": "behavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after filling the cup\n\nbehavior store_cup_in_freezer(cup:item, freezer:item):\n    body:\n        achieve inside(cup, freezer)\n        # Place the cup inside the freezer\n\nbehavior close_the_freezer_door(freezer:item):\n    body:\n        achieve closed(freezer)\n        # Close the freezer door\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a fridge (used as a freezer)\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water\n\n        store_cup_in_freezer(cup, freezer)\n        # Store the waterfilled cup in the freezer\n\n        close_the_freezer_door(freezer)\n        # Close the freezer door after storing the cup"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup suitable for holding milk.",
        "cdl": "behavior __goal__():\n    body:\n        if exists cup: item : is_cup(cup) and recipient(cup):\n            # Check if there is a cup suitable for holding milk\n            bind cup: item where:\n                is_cup(cup) and recipient(cup)\n            achieve visited(cup)\n            # Mark the cup as visited\n\n        else:\n            # If no suitable cup is found, observe unvisited cups\n            foreach cup: item:\n                if is_cup(cup) and not visited(cup):\n                    observe(cup, \"Check if this cup is suitable for holding milk\")"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Pour milk into the cup.",
        "cdl": " \nbehavior pour_milk_into_cup(milk:item, cup:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the milk is poured into the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2063\n        # Select the cup with ID 2063\n        \n        bind milk: item where:\n            is_milk(milk)\n        # Select the instance of milk\n\n        pour_milk_into_cup(milk, cup)\n        # Execute the behavior to pour the milk into the cup\n "
    },
    {
        "task_name": "Drink",
        "source_sub_task": "3. Place the cup of milk in the microwave and heat it.",
        "cdl": " \nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Ensure the cup is placed inside the microwave\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve closed(microwave) # Close the microwave door\n        achieve is_on(microwave)  # Turn on the microwave to heat\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2063\n        # Select the cup with ID 2063\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select an instance of a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        # Place the cup inside the microwave\n\n        start_microwave(microwave)\n        # Start the microwave to heat the cup of milk\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Find the bathroom sink.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom instance\n\n        foreach sink: item:\n            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):\n                # Check all unvisited sinks inside the bathroom\n                observe(sink, \"Locate the bathroom sink\")\n"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to create soapy water.",
        "cdl": " \ndef has_faucet(sink: item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_sink_with_water(sink: item):\n    body:\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the sink with water\n\n        achieve has_water(sink)\n        # Ensure the sink is filled with water\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the sink\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 307\n        # Select the sink with ID 307\n\n        fill_sink_with_water(sink)\n        # Execute the behavior to fill the sink with water\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
        "cdl": " \nbehavior put_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot)\n        # Ensure all the vegetables are placed inside the pot\n\nbehavior boil_vegetables_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Make sure the pot is on the stove\n        achieve is_on(stove)\n        # Turn on the stove to boil the vegetables\n\nbehavior __goal__():\n    body:\n        bind vegetable: item where:\n            is_food_vegetable(vegetable)\n        # Select the vegetables\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot instance\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove instance\n\n        if exists faucet: item: is_faucet(faucet) and is_on(faucet):\n            bind faucet: item where:\n                is_faucet(faucet) and is_on(faucet)\n            achieve_once is_off(faucet)\n            # Ensure the faucet is turned off after washing vegetables\n\n        put_vegetables_in_pot(vegetable, pot)\n        boil_vegetables_on_stove(pot, stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Cool the boiled vegetables in a bowl.",
        "cdl": "behavior cool_boiled_vegetables(vegetables:item, bowl:item):\n    body:\n        achieve_once inside(vegetables, bowl)\n        # Ensure that the boiled vegetables are inside the bowl for cooling\n\nbehavior __goal__():\n    body:\n        bind bowl: item where:\n            is_bowl(bowl)\n        # Select an instance of a bowl\n\n        bind vegetables: item where:\n            is_food_vegetable(vegetables) and not visited(vegetables)\n        # Ensure the vegetables that were boiled are available for cooling\n\n        cool_boiled_vegetables(vegetables, bowl)\n        # Execute behavior to cool the boiled vegetables in the bowl"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bedroom. Then turn on the lights in the bathroom.",
        "cdl": "\nbehavior turn_on_light_in_bedroom(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior turn_on_light_in_bathroom(light:item):\n    body:\n        achieve is_on(light)\n\nbehavior __goal__():\n    body:\n        bind bedroom: item where:\n            is_bedroom(bedroom)\n        # Select the bedroom instance\n        \n        bind light_in_bedroom: item where:\n            is_light(light_in_bedroom) and inside(light_in_bedroom, bedroom)\n        # Select the light inside the bedroom\n\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom instance\n\n        bind light_in_bathroom: item where:\n            is_light(light_in_bathroom) and inside(light_in_bathroom, bathroom)\n        # Select the light inside the bathroom\n\n        turn_on_light_in_bedroom(light_in_bedroom)\n        turn_on_light_in_bathroom(light_in_bathroom)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "1. Hold a knife.",
        "cdl": "behavior __goal__():\n    body:\n        bind knife: item where:\n            is_knife(knife)\n        # Select the knife\n\n        achieve_once inhand(knife)\n        # Temporarily hold the knife"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Find the cutting board.",
        "cdl": " \ndef has_cutting_board():\n    # Determine if there is a cutting board present in the area\n    symbol has_cutting_board=exists cb: item : is_cutting_board(cb)\n    return has_cutting_board\n\nbehavior __goal__():\n    body:\n        if has_cutting_board():\n            # If a cutting board is known, move closer to it\n            bind cutting_board: item where:\n                is_cutting_board(cutting_board)\n            achieve close_char(char, cutting_board)\n        else:\n            # If no cutting board is known, explore to find one\n            foreach cb: item:\n                if is_cutting_board(cb) and not visited(cb):\n                    observe(cb, \"Verify the existence of this cutting board\")\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Put the chicken on the cutting board.",
        "cdl": " \nbehavior place_chicken_on_board(chicken: item, cutting_board: item):\n    body:\n        achieve on(chicken, cutting_board)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select the cutting board instance\n\n        place_chicken_on_board(chicken, cutting_board)\n        # Execute the behavior to place the chicken on the cutting board\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "4. Cut the chicken.",
        "cdl": "behavior cut_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken)\n\nbehavior __goal__():\n    body:\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board) and id[cutting_board] == 2123\n        # Ensure the cutting board instance is defined\n        \n        bind chicken: item where:\n            is_food_chicken(chicken) and on(chicken, cutting_board)\n        # Select the chicken on the cutting board identified as cutting_board_2123\n        \n        cut_chicken(chicken, cutting_board)\n        # Execute behavior to cut the chicken"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior find_jacket(jacket: item):\n    body:\n        observe(jacket, \"Check if this is clothes_jacket_2119\")\n        # Observe the specific location to find the jacket\n\nbehavior wash_jacket_by_hand(jacket: item, sink: item):\n    body:\n        achieve_once inside(jacket, sink)\n        # Ensure the jacket is placed inside the sink\n\n        wash(jacket)\n        # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2119\n        # Select the jacket with the specific ID\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        if not visited(jacket):\n            find_jacket(jacket)\n        # Ensure the jacket is located before starting the wash\n\n        wash_jacket_by_hand(jacket, sink)\n        # Execute the behavior to wash the jacket by hand\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Use the washing machine to wash the jacket.",
        "cdl": " \nbehavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start washing the jacket\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n        \n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket]==2119\n        # Select the specific jacket with ID 2119\n\n        put_jacket_in_washing_machine(jacket, washing_machine)\n        start_washing_machine(washing_machine)\n        # Place the jacket in the washing machine and start the wash cycle\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Use a pot to boil water.",
        "cdl": "behavior use_pot_to_boil_water(pot: item, stove: item):\n    body:\n        achieve has_water(pot)\n        # Ensure the pot is filled with water\n        \n        achieve on(pot, stove)\n        # Place the pot on the stove\n        \n        achieve is_on(stove)\n        # Turn on the stove to boil the water in the pot\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select an instance of a pot\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select an instance of a stove\n\n        use_pot_to_boil_water(pot, stove)\n        # Execute the behavior to use the pot to boil water on the stove"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Wash the bowls and the plates using the dishwasher.",
        "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        foreach o: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(o) or is_plate(o):\n                load_dishwasher(o, dishwasher)\n        \n        start_dishwasher(dishwasher) # Start the dishwasher"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "Find a cup, fill it with water, and have it ready.",
        "cdl": " \ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": "behavior find_cup(cup:item, milk:item):\n    body:\n        achieve_once inhand(cup)\n        # Temporarily hold the cup\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the cup has milk inside\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and recipient(cup)\n        # Select a cup that can receive substances\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk instance\n\n        find_cup(cup, milk)\n        # Find and hold the cup\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk using the microwave.",
        "cdl": " \nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Ensure the cup is placed inside the microwave\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve closed(microwave) # Close the microwave door\n        achieve is_on(microwave)  # Turn on the microwave to heat\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select an instance of a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        # Place the cup inside the microwave\n\n        start_microwave(microwave)\n        # Start the microwave to heat the cup of milk\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Locate all windows in the house.",
        "cdl": " \nbehavior identify_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Verify that this is a window\")\n\nbehavior __goal__():\n    body:\n        if exists window: item : is_window(window) and not visited(window):\n            identify_windows()\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Wipe each window using a towel.",
        "cdl": "behavior wipe_window(window: item, towel: item):\n    body:\n        achieve_once inhand(towel)\n        # Temporarily hold the towel\n\n        wipe(window)\n        # Wipe the window with the towel\n\nbehavior __goal__():\n    body:\n        bind towel: item where:\n            is_towel(towel)\n        # Select a towel instance\n\n        foreach window: item:\n            if is_window(window) and open(window):\n                wipe_window(window, towel)\n                # Use the towel to wipe each open window in the house"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Identify the correct book.",
        "cdl": " \ndef has_book_on_bookshelf(bookshelf:item):\n    # Function to check if there is a book on a specified bookshelf\n    symbol has_book=exists o: item : is_book(o) and on(o, bookshelf)\n    return has_book\n\nbehavior __goal__():\n    body:\n        foreach bookshelf: item:\n            # Loop through all bookshelves to find an unvisited one with a book\n            if is_bookshelf(bookshelf) and not visited(bookshelf):\n                observe(bookshelf,\"Check if there is a book on the bookshelf\")\n                # Observe the bookshelf to check for a book\n                if has_book_on_bookshelf(bookshelf):\n                    bind book: item where:\n                        is_book(book) and on(book, bookshelf)\n                    # Select the book on the bookshelf\n                    \n                    bind home_office: item where:\n                        is_home_office(home_office)\n                    # Select the home office as the target location\n\n                    bind coffee_table: item where:\n                        is_coffee_table(coffee_table) and inside(coffee_table, home_office)\n                    # Select the coffee table within the home office\n\n                    achieve on(book, coffee_table)\n                    # Place the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": "behavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_coffee_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table in the home office"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "1. Locate the bathroom sink.",
        "cdl": "behavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom instance\n\n        foreach sink: item:\n            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):\n                # Check all unvisited sinks inside the bathroom\n                observe(sink, \"Locate the bathroom sink\")"
    },
    {
        "task_name": "Clean the bathroom",
        "source_sub_task": "2. Fill the sink with water and add soap to create soapy water.",
        "cdl": " \ndef has_faucet(sink: item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet = exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_sink_with_water_and_soap(sink: item, soap: item):\n    body:\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the sink with water\n\n        achieve has_water(sink)\n        # Ensure the sink is filled with water\n\n        achieve inside(soap, sink)\n        # Add soap to the sink to make the water soapy\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the sink\n\nbehavior __goal__():\n    body:\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select the sink with ID 42\n\n        bind soap: item where:\n            is_soap(soap)\n        # Select an instance of soap\n\n        fill_sink_with_water_and_soap(sink, soap)\n        # Execute the behavior to fill the sink with water and add soap\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Locate the basket with clothes in it.",
        "cdl": "behavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket):\n            # If a basket with clothes is identified based on available information\n            bind basket: item where:\n                is_basket_for_clothes(basket)\n            achieve close_char(char, basket)\n            # Move the character towards the basket with clothes\n\n        else:\n            # If no basket with clothes is found, initiate search\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    observe(basket, \"Check if there are clothes in this basket\")\n                    # Observe each unvisited basket to check for clothes"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap and the clothes to the washing machine.",
        "cdl": " \nbehavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Place clothing item inside the washing machine\n\nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n        # Add soap to the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket instance containing clothes\n\n        foreach clothes: item:\n            if is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes) and inside(clothes, basket):\n                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)\n                # Load all clothes from the basket into the washing machine\n                \n        bind soap: item where:\n            is_soap(soap)\n        # Choose an instance of soap\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        start_washing_machine(washing_machine)\n        # Execute the behavior to turn on the washing machine\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket) and has_clothes_in_basket(basket):\n            # Check if there is a basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes in it\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else: \n           # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket,\"Check if there are clothes in this basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add the clothes and soap into the washing machine.",
        "cdl": "behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Place clothing item inside the washing machine\n\nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n        # Add soap to the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket instance containing clothes\n\n        foreach clothes: item:\n            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):\n                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)\n                # Load all clothes from the basket into the washing machine\n                \n        bind soap: item where:\n            is_soap(soap)\n        # Choose an instance of soap\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": " \nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        start_washing_machine(washing_machine)\n        # Execute the behavior to turn on the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Put cleaning solution in the dishwasher and wash the bowls and plates with it.",
        "cdl": " \nbehavior load_dishwasher_with_solution(cleaning_solution:item, dishwasher:item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Put the cleaning solution inside the dishwasher\n\nbehavior load_and_wash_bowls_and_plates(dishwasher:item):\n    body:\n        foreach o: item:\n            if is_bowl(o) or is_plate(o):\n                achieve inside(o, dishwasher)\n                # Load bowls and plates into the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select an instance of cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select a dishwasher\n\n        load_dishwasher_with_solution(cleaning_solution, dishwasher)\n        load_and_wash_bowls_and_plates(dishwasher)\n        start_dishwasher(dishwasher) # Start the dishwasher\n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "Put a cup inside the coffee maker and turn it on.",
        "cdl": " \nbehavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):\n    body:\n        achieve inside(cup, coffee_maker)\n        # Ensure the cup is placed inside the coffee maker\n\nbehavior turn_on_coffee_maker(coffee_maker: item):\n    body:\n        achieve is_on(coffee_maker)\n        # Turn on the coffee maker\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup] == 2132\n        # Select the cup with ID 2132\n\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130\n        # Select the coffee maker with ID 130\n\n        put_cup_in_coffee_maker(cup, coffee_maker)\n        # Place the cup inside the coffee maker\n\n        turn_on_coffee_maker(coffee_maker)\n        # Turn on the coffee maker\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put the milk and egg on the table in the dining room.",
        "cdl": " \nbehavior put_item_on_table(item:item, table:item):\n    body:\n        achieve on(item, table)\n        # Achieve putting the item on the table\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        put_item_on_table(milk, dining_room_table)\n        put_item_on_table(egg, dining_room_table)\n        # Execute behaviors to put milk and egg on the table\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(fridge:item, trashcan:item):\n    body:\n        achieve open(fridge)\n        # Ensure the fridge is open to take out items\n\n        foreach o: item:\n            if inside(o, fridge):\n                achieve inside(o, trashcan)\n                # Throw each item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Bind the fridge with the specific ID\n\n        bind trashcan: item where:\n            is_trashcan(trashcan) and id[trashcan] == 99\n        # Bind the trashcan with the specific ID\n\n        throw_items_in_trash(fridge, trashcan)\n        # Execute the behavior to throw all items in the fridge into the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put the milk and eggs back in the fridge.",
        "cdl": " \nbehavior store_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Place the item inside the fridge\n\nbehavior close_the_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk) and id[milk] == 2115\n        # Select the specific milk instance with ID 2115\n\n        bind egg: item where:\n            is_food_egg(egg) and id[egg] == 2092\n        # Select the specific egg instance with ID 2092\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 126\n        # Select the fridge with ID 126\n        \n        store_in_fridge(milk, fridge)\n        store_in_fridge(egg, fridge)\n        close_the_fridge(fridge)\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "1. Identify all the windows in the house.",
        "cdl": " \nbehavior identify_windows():\n    body:\n        foreach window: item:\n            if is_window(window) and not visited(window):\n                observe(window, \"Verify that this is a window\")\n\nbehavior __goal__():\n    body:\n        if exists window: item : is_window(window) and not visited(window):\n            identify_windows()\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "2. Use a towel to wipe each window clean.",
        "cdl": " \ndef is_dirty_window(window: item):\n    # Function to check if a window is dirty\n    symbol is_dirty = dirty(window)\n    return is_dirty\n\nbehavior wipe_window(window: item, towel: item):\n    body:\n        achieve_once inhand(towel)\n        # Temporarily hold the towel\n\n        wipe(window)\n        # Wipe the window with the towel\n\nbehavior __goal__():\n    body:\n        bind towel: item where:\n            is_towel(towel)\n        # Select a towel instance\n\n        foreach window: item:\n            if is_window(window) and is_dirty_window(window) and open(window):\n                wipe_window(window, towel)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Put the milk and egg on the table in the dining room.",
        "cdl": " \nbehavior put_item_on_table(item:item, table:item):\n    body:\n        achieve on(item, table)\n        # Achieve putting the item on the table\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        put_item_on_table(milk, dining_room_table)\n        put_item_on_table(egg, dining_room_table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": "behavior throw_items_in_trash(fridge:item, trashcan:item):\n    body:\n        achieve open(fridge)\n        # Ensure the fridge is open to take out items\n\n        foreach o: item:\n            if inside(o, fridge):\n                achieve inside(o, trashcan)\n                # Throw each item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Bind the fridge with the specific ID\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Bind the trashcan (assuming the trashcan is unambiguously identifiable)\n\n        throw_items_in_trash(fridge, trashcan)\n        # Execute the behavior to throw all items in the fridge into the trashcan"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Return the milk and eggs to the fridge.",
        "cdl": "behavior store_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Place the item inside the fridge\n\nbehavior close_the_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk) and id[milk] == 2043\n        # Select the specific milk instance with ID 2043\n\n        bind egg: item where:\n            is_food_egg(egg) and id[egg] == 2020\n        # Select the specific egg instance with ID 2020\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Select the fridge with ID 289\n        \n        store_in_fridge(milk, fridge)\n        store_in_fridge(egg, fridge)\n        close_the_fridge(fridge)"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Load the bowls and plates into the dishwasher.",
        "cdl": "behavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve inside(item, dishwasher)\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item):\n                load_dishwasher(item, dishwasher)\n        # Load all bowls and plates into the dishwasher"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Start the dishwasher.",
        "cdl": "\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        achieve is_on(dishwasher)\n        # Ensure the dishwasher is turned on\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "3. Wash the forks by hand.",
        "cdl": " \nbehavior wash_fork_by_hand(fork:item, sink:item):\n    body:\n        achieve_once inside(fork, sink)\n        # Place the fork inside the sink\n\n        wash(fork)\n        # Wash the fork by hand\n\nbehavior __goal__():\n    body:\n        bind fork: item where:\n            is_fork(fork)\n        # Select an instance of a fork\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        wash_fork_by_hand(fork, sink)\n        # Execute the behavior to wash the fork by hand\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV with the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind television: item where:\n            is_television(television)\n        # Select the television instance\n\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(television)\n        # Ensure the television is switched on\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find your spectacles and put them on the coffee table in the home office.",
        "cdl": " \nbehavior put_spectacles_on_table(spectacles:item, table:item):\n    body:\n        achieve on(spectacles, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind spectacles: item where:\n            is_spectacles(spectacles)\n        # Select the instance of spectacles\n\n        put_spectacles_on_table(spectacles, coffee_table)\n        # Execute the behavior to put the spectacles on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Find the book and put it on the coffee table in the home office.",
        "cdl": "\nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, table)\n        # Execute the behavior to put the book on the table\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Place milk and egg on the table in the dining room.",
        "cdl": " \nbehavior put_item_on_table(item:item, table:item):\n    body:\n        achieve on(item, table)\n        # Achieve putting the item on the table\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        put_item_on_table(milk, dining_room_table)\n        put_item_on_table(egg, dining_room_table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Throw all the items in the fridge into the trashcan.",
        "cdl": " \nbehavior throw_items_in_trash(fridge:item, trashcan:item):\n    body:\n        achieve open(fridge)\n        # Ensure the fridge is open to take out items\n\n        foreach o: item:\n            if inside(o, fridge):\n                achieve inside(o, trashcan)\n                # Throw each item from the fridge into the trashcan\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 140\n        # Bind the fridge with the specific ID\n\n        bind trashcan: item where:\n            is_trashcan(trashcan)\n        # Bind the trashcan (assuming the trashcan is unambiguously identifiable)\n\n        throw_items_in_trash(fridge, trashcan)\n        # Execute the behavior to throw all items in the fridge into the trashcan\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "3. Put milk and eggs back in the fridge.",
        "cdl": " \nbehavior store_in_fridge(item:item, fridge:item):\n    body:\n        achieve inside(item, fridge)\n        # Place the item inside the fridge\n\nbehavior close_the_fridge(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Close the fridge door\n\nbehavior __goal__():\n    body:\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 140\n        # Select the fridge with ID 140\n        \n        store_in_fridge(milk, fridge)\n        store_in_fridge(egg, fridge)\n        close_the_fridge(fridge)\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with water.",
        "cdl": "\ndef has_faucet(sink:item):\n    # Determine whether this sink has a faucet\n    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)\n    return has_faucet\n\nbehavior fill_cup_with_water(cup:item, sink:item):\n    body:\n        achieve_once inside(cup, sink)\n        # Place the cup inside the sink\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_on(faucet)\n            # Turn on the faucet to fill the cup with water\n\n        achieve has_water(cup)\n        # Ensure the cup is filled with water\n\n        if has_faucet(sink):\n            bind faucet: item where:\n                is_faucet(faucet) and close(faucet, sink)\n            achieve_once is_off(faucet)\n            # Turn off the faucet after filling the cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087\n\n        bind sink: item where:\n            is_sink(sink) and close(sink, cup)\n        # Select the sink instance close to the cup\n\n        fill_cup_with_water(cup, sink)\n        # Execute the behavior to fill the cup with water\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Place the cup in the freezer to freeze the water.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087\n\n        bind freezer: item where:\n            is_fridge(freezer)\n        # Select a fridge (used as a freezer)\n\n        achieve inside(cup, freezer)\n        # Place the cup inside the freezer\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "1. Go to the home office and sit on the chair in front of the computer.",
        "cdl": " \nbehavior sit_on_chair_in_front_of_computer(char: character, chair: item):\n    body:\n        achieve close_char(char, chair)\n        # Ensure the character is close to the chair\n\n        achieve on_char(char, chair)\n        # Ensure the character is sitting on the chair\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind computer: item where:\n            is_computer(computer) and inside(computer, home_office)\n        # Select the computer within the home office\n\n        bind chair: item where:\n            is_chair(chair) and sittable(chair) and close(computer, chair)\n        # Select the chair in front of the computer\n\n        sit_on_chair_in_front_of_computer(char, chair)\n        # Execute the behavior to sit on the chair in front of the computer\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "2. Touch the mouse near the computer to turn it on.",
        "cdl": "behavior __goal__():\n    body:\n        bind computer: item where:\n            is_computer(computer)\n        # Select the computer instance\n\n        bind mouse: item where:\n            is_mouse(mouse) and close(mouse, computer)\n        # Select the mouse instance that is close to the computer\n\n        achieve close_char(char, mouse)\n        # Ensure you are close to the mouse near the computer\n\n        touch(mouse)\n        # Execute the behavior to touch the mouse to turn it on"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the dining room table.",
        "cdl": "behavior find_dining_room_table():\n    body:\n        foreach table: item:\n            if is_table(table) and not visited(table):\n                observe(table, \"Check if this is the dining room table\")\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        if exists table: item : is_table(table) and inside(table, dining_room):\n            # Check if the dining room table is known based on available information\n            bind table: item where:\n                is_table(table) and inside(table, dining_room)\n            achieve close_char(char, table)\n        else:\n            # Find the dining room table if not known\n            find_dining_room_table()"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place the milk, turkey, egg, fish, and chicken on the dining room table.",
        "cdl": " \nbehavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):\n    body:\n        achieve on(item1, table)\n        achieve on(item2, table)\n        achieve on(item3, table)\n        achieve on(item4, table)\n        achieve on(item5, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind table: item where:\n            is_table(table) and inside(table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish instance\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        put_items_on_table(milk, turkey, egg, fish, chicken, table)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "Cut the chicken into pieces and put it back in the fridge.",
        "cdl": " \nbehavior cut_chicken(chicken: item):\n    body:\n        achieve cut(chicken) \n\nbehavior place_in_fridge(item: item, fridge: item):\n    body:\n        achieve inside(item, fridge)\n\nbehavior close_fridge(fridge: item):\n    body:\n        achieve closed(fridge)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge instance\n\n        cut_chicken(chicken)\n        # Execute behavior to cut the chicken\n\n        place_in_fridge(chicken, fridge)\n        # Place the cut chicken back into the fridge\n\n        close_fridge(fridge)\n        # Close the fridge after placing the chicken inside\n"
    },
    {
        "task_name": "Prepare breakfast",
        "source_sub_task": "Put the pan on the stove, turn on the stove, put oil in the pan, and put the egg in the pan to scramble it.",
        "cdl": " \nbehavior put_pan_on_stove(pan:item, stove:item):\n    body:\n        achieve on(pan, stove)\n\nbehavior turn_on_stove(stove:item):\n    body:\n        achieve is_on(stove)\n\nbehavior put_oil_in_pan(oil:item, pan:item):\n    body:\n        achieve inside(oil, pan)\n\nbehavior put_egg_in_pan(egg:item, pan:item):\n    body:\n        achieve inside(egg, pan)\n\nbehavior __goal__():\n    body:\n        bind pan: item where:\n            is_fryingpan(pan)\n        # Select the pan instance\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove instance\n\n        bind oil: item where:\n            is_oil(oil)\n        # Select the oil instance\n        \n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        put_pan_on_stove(pan, stove)\n        # Place the pan on the stove\n\n        turn_on_stove(stove)\n        # Turn on the stove\n\n        put_oil_in_pan(oil, pan)\n        # Add oil to the pan\n\n        put_egg_in_pan(egg, pan)\n        # Add the egg to the pan\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "1. Get close to the computer in the home office.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind computer: item where:\n            is_computer(computer) and inside(computer, home_office)\n        # Select the computer within the home office\n\n        achieve close_char(char, computer)\n        # Ensure you get close to the computer in the home office\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "2. Sit on the chair in front of the computer.",
        "cdl": " \nbehavior sit_on_chair_in_front_of_computer(char: character, chair: item):\n    body:\n        achieve close_char(char, chair)\n        # Ensure the character is close to the chair\n\n        achieve on_char(char, chair)\n        # Ensure the character is sitting on the chair\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind computer: item where:\n            is_computer(computer) and inside(computer, home_office)\n        # Select the computer within the home office\n\n        bind chair: item where:\n            is_chair(chair) and sittable(chair) and close(computer, chair)\n        # Select the chair in front of the computer\n\n        sit_on_chair_in_front_of_computer(char, chair)\n        # Execute the behavior to sit on the chair in front of the computer\n"
    },
    {
        "task_name": "Write an email",
        "source_sub_task": "3. Touch the mouse near the computer to turn it on.",
        "cdl": " \nbehavior touch_mouse(mouse: item):\n    body:\n        touch(mouse)\n        # Ensure the mouse is touched to turn it on\n\nbehavior __goal__():\n    body:\n        bind computer: item where:\n            is_computer(computer) and id[computer] == 276\n        # Select the computer with ID 276\n\n        bind mouse: item where:\n            is_mouse(mouse) and close(mouse, computer)\n        # Select the mouse instance that is close to the computer\n\n        achieve close_char(char, mouse)\n        # Ensure you are close to the mouse near the computer\n\n        touch_mouse(mouse)\n        # Execute the behavior to touch the mouse\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Wash the fish.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish instance\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        achieve inside(fish, sink)\n        # Place the fish inside the sink\n\n        wash(fish)\n        # Wash the fish\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Put the milk, turkey, eggs, fish, and chicken on the table in the dining room.",
        "cdl": " \nbehavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):\n    body:\n        achieve on(item1, table)\n        achieve on(item2, table)\n        achieve on(item3, table)\n        achieve on(item4, table)\n        achieve on(item5, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish instance\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        put_items_on_table(milk, turkey, egg, fish, chicken, dining_room_table)\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "1. Hold the remote control and get close to the DVD player.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n        \n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        achieve close_char(char, dvd_player)\n        # Ensure you are close to the DVD player\n"
    },
    {
        "task_name": "Listen to music",
        "source_sub_task": "2. Touch the remote control to activate the DVD player.",
        "cdl": " \nbehavior touch_remote_control(remote_control: item):\n    body:\n        touch(remote_control)\n        # Ensure the remote control is touched to activate the DVD player\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the instance of the remote control\n\n        bind dvd_player: item where:\n            is_dvd_player(dvd_player)\n        # Select the DVD player instance\n\n        achieve close_char(char, dvd_player)\n        # Ensure you are close to the DVD player\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch_remote_control(remote_control)\n        # Touch the remote control to activate the DVD player\n"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        # Select the light inside the bathroom\n\n        achieve is_on(light_bathroom)\n        # Ensure the light in the bathroom is turned on\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the table.",
        "cdl": " \nbehavior find_cup(cup:item, milk:item):\n    body:\n        achieve_once inhand(cup)\n        # Temporarily hold the cup\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the cup has milk inside\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup inside the microwave\n\n        achieve closed(microwave)\n        # Close the microwave door\n\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior place_cup_on_coffee_table(cup:item, table:item):\n    body:\n        achieve on(cup, table)\n        # Place the cup of hot milk on the coffee table\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and recipient(cup)\n        # Select a cup that can receive substances\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk instance\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select an instance of a microwave\n\n        find_cup(cup, milk)\n        # Find and hold the cup\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk\n\n        heat_milk_in_microwave(cup, microwave)\n        # Execute behavior to heat the milk in the microwave\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n        \n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        place_cup_on_coffee_table(cup, table)\n        # Place the cup of hot milk on the coffee table in the home office\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "Identify the bowls and plates that need washing, and then use the dishwasher to clean them.",
        "cdl": "behavior load_dishwasher(item:item, dishwasher:item):\n    body:\n        achieve inside(item, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher)\n        # Ensure the dishwasher door is closed\n        achieve is_on(dishwasher)\n        # Turn on the dishwasher\n\nbehavior identify_dishwasher(dishwasher:item):\n    body:\n        achieve visited(dishwasher)\n        # Mark the dishwasher as visited\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        identify_dishwasher(dishwasher)\n\n        foreach item: item:\n            if is_bowl(item) or is_plate(item) and dirty(item):\n                load_dishwasher(item, dishwasher)\n\n        start_dishwasher(dishwasher)\n        # Start the dishwasher after loading items into it"
    },
    {
        "task_name": "Turn on light",
        "source_sub_task": "Turn on the lights in the bathroom.",
        "cdl": "behavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        # Select the bathroom\n\n        bind light_bathroom: item where:\n            is_light(light_bathroom) and inside(light_bathroom, bathroom)\n        # Select the light inside the bathroom\n\n        achieve is_on(light_bathroom)\n        # Ensure the light in the bathroom is turned on"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.  ",
        "cdl": "behavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table in the home office"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Prepare a cup of hot milk and put it on the coffee table in the home office.",
        "cdl": "behavior find_cup(cup:item, milk:item):\n    body:\n        achieve_once inhand(cup)\n        # Temporarily hold the cup\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the cup has milk inside\n\nbehavior heat_milk_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Place the cup inside the microwave\n\n        achieve closed(microwave)\n        # Close the microwave door\n\n        achieve is_on(microwave)\n        # Turn on the microwave to heat the milk\n\nbehavior place_cup_on_coffee_table(cup:item, table:item):\n    body:\n        achieve on(cup, table)\n        # Place the cup of hot milk on the coffee table\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and recipient(cup)\n        # Select a cup that can receive substances\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk instance\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select an instance of a microwave\n\n        find_cup(cup, milk)\n        # Find and hold the cup\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk\n\n        heat_milk_in_microwave(cup, microwave)\n        # Execute behavior to heat the milk in the microwave\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n        \n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        place_cup_on_coffee_table(cup, table)\n        # Place the cup of hot milk on the coffee table in the home office"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "1. Clean the chicken and the onion.",
        "cdl": "behavior clean_item(item:item, sink:item):\n    body:\n        achieve_once inside(item, sink)\n        # Place the item inside the sink\n\n        bind faucet: item where:\n            is_faucet(faucet) and close(faucet, sink)\n        achieve_once is_on(faucet)\n        # Turn on the faucet to clean the item\n\n        wash(item)\n        # Wash the item\n\n        achieve_once is_off(faucet)\n        # Turn off the faucet after cleaning\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion instance\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink instance\n\n        clean_item(chicken, sink)\n        clean_item(onion, sink)\n        # Execute the behavior to clean the chicken and onion in the sink"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "2. Place the chicken and the onion into the oven to roast.",
        "cdl": " \nbehavior put_inside_oven(item: item, oven: item):\n    body:\n        achieve inside(item, oven)\n        # Ensure the item is placed inside the oven\n\nbehavior start_roasting(oven: item):\n    body:\n        achieve closed(oven)\n        # Close the oven door\n        achieve is_on(oven)\n        # Turn on the oven to start roasting\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion instance\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select the oven instance\n\n        put_inside_oven(chicken, oven)\n        put_inside_oven(onion, oven)\n        start_roasting(oven)\n "
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "1. Identify a sink suitable for washing a cat.  ",
        "cdl": "behavior is_sink_suitable_for_washing_cat(sink: item):\n    body:\n        observe(sink, \"Check if this sink is suitable for washing a cat\")\n        # Observe the sink to determine if it is suitable for washing a cat\n\nbehavior __goal__():\n    body:\n        if exists sink: item : is_sink(sink) and not visited(sink):\n            # If a sink is found and has not been visited, check its suitability for washing a cat\n            bind sink: item where:\n                is_sink(sink) and not visited(sink)\n            is_sink_suitable_for_washing_cat(sink)   \n        else:\n            # If no suitable sink is found, explore to identify one\n            foreach sink: item:\n                if is_sink(sink) and not visited(sink):\n                    is_sink_suitable_for_washing_cat(sink)   \n            # Observe each unvisited sink in the environment to check its suitability for washing a cat"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "2. Wash the cat in the identified sink.",
        "cdl": "behavior put_cat_in_sink(cat: item, sink: item):\n    body:\n        achieve inside(cat, sink)\n\nbehavior wash_cat(cat: item):\n    body:\n        wash(cat)\n        # Wash the cat once it is placed inside the sink\n\nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat instance\n\n        bind sink: item where:\n            is_sink(sink) and id[sink] == 42\n        # Select the sink instance with ID 42\n\n        put_cat_in_sink(cat, sink)\n        wash_cat(cat)"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "Turn on the TV with the remote control.",
        "cdl": " \nbehavior __goal__():\n    body:\n        bind television: item where:\n            is_television(television)\n        # Select the television instance\n        \n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(television)\n        # Ensure the television is switched on\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the household environment.",
        "cdl": " \ndef has_book_in_environment():\n    # Function to determine if any book can be located in the environment\n    symbol book_found = exists book: item : is_book(book)\n    return book_found\n\nbehavior locate_book():\n    body:\n        foreach book: item:\n            if is_book(book) and not visited(book):\n                observe(book, \"Check if this is the book to locate\")\n\nbehavior __goal__():\n    body:\n        if has_book_in_environment():\n            # If a book has already been determined to exist in the known environment\n            bind book: item where:\n                is_book(book)\n            achieve visited(book)\n        else:\n            # If no known book is determined to exist, commence search for a book in the environment\n            locate_book()\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "1. Put a cup inside the coffee maker and turn it on to make the coffee.",
        "cdl": " \nbehavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):\n    body:\n        achieve inside(cup, coffee_maker)\n        # Ensure the cup is placed inside the coffee maker\n\nbehavior turn_on_coffee_maker(coffee_maker: item):\n    body:\n        achieve is_on(coffee_maker)\n        # Turn on the coffee maker\n\nbehavior __goal__():\n    body:\n        bind coffee_maker: item where:\n            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147\n        # Select the coffee maker with ID 147\n\n        bind cup: item where:\n            is_cup(cup)\n        # Select an instance of a cup\n\n        if not has_water(coffee_maker):\n            observe(coffee_maker, \"Check if the coffee maker has water\")\n\n        put_cup_in_coffee_maker(cup, coffee_maker)\n        # Place the cup inside the coffee maker\n\n        turn_on_coffee_maker(coffee_maker)\n        # Turn on the coffee maker\n"
    },
    {
        "task_name": "Make coffee",
        "source_sub_task": "2. Add milk and sugar to the coffee.",
        "cdl": " \nbehavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):\n    body:\n        achieve inside(milk, cup)\n        # Pour milk into the coffee cup\n\n        achieve inside(sugar, cup)\n        # Add sugar to the coffee cup\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2087\n        # Select the cup with ID 2087 (the one you used for making coffee)\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select an instance of milk\n\n        bind sugar: item where:\n            is_food_sugar(sugar)\n        # Select an instance of sugar\n\n        add_milk_and_sugar_to_coffee(cup, milk, sugar)\n        # Add milk and sugar to the coffee in the cup\n"
    },
    {
        "task_name": "Wash windows",
        "source_sub_task": "Open the windows in the bathroom.",
        "cdl": "behavior open_bathroom_window(window:item):\n    body:\n        achieve open(window)\n\nbehavior __goal__():\n    body:\n        bind bathroom: item where:\n            is_bathroom(bathroom)\n        \n        bind window: item where:\n            is_window(window) and inside(window, bathroom)\n        \n        open_bathroom_window(window)"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Locate the book in the house.",
        "cdl": " \ndef has_book_in_environment():\n    # Function to determine if any book can be located in the environment\n    symbol book_found = exists book: item : is_book(book)\n    return book_found\n\nbehavior locate_book():\n    body:\n        foreach book: item:\n            if is_book(book) and not visited(book):\n                observe(book, \"Check if this is the book to locate\")\n\nbehavior __goal__():\n    body:\n        if has_book_in_environment():\n            # If a book has already been determined to exist in the known environment\n            bind book: item where:\n                is_book(book)\n            achieve visited(book)\n        else:\n            # If no known book is determined to exist, commence search for a book in the environment\n            locate_book()\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Place the book on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind coffee_table: item where:\n            is_table(coffee_table) and inside(coffee_table, home_office)\n        # Select the coffee table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, coffee_table)\n        # Execute the behavior to put the book on the coffee table in the home office\n"
    },
    {
        "task_name": "Pet cat",
        "source_sub_task": "Wash your cat in a sink.",
        "cdl": " \nbehavior put_cat_in_sink(cat:item, sink:item):\n    body:\n        achieve inside(cat, sink)\n\nbehavior wash_cat(cat:item):\n    body:\n        wash(cat)\n        # Wash the cat once it is placed inside the sink\n        \nbehavior __goal__():\n    body:\n        bind cat: item where:\n            is_cat(cat)\n        # Select the cat instance\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select a sink instance\n\n        put_cat_in_sink(cat, sink)\n        wash_cat(cat)\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "1. Find the milk, turkey, egg, fish, and chicken in the kitchen.",
        "cdl": "\nbehavior observe_around_items(fridge:item):\n    body:\n        observe(fridge, \"Locate milk, turkey, egg, fish, and chicken\")\n\nbehavior __goal__():\n    body:\n        bind fridge: item where:\n            is_fridge(fridge) and id[fridge] == 289\n        # Bind the fridge instance, assuming it is fridge_289\n\n        bind milk: item where:\n            is_milk(milk)\n        # Bind milk instance\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Bind turkey instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Bind egg instance\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Bind fish instance\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Bind chicken instance\n\n        observe_around_items(fridge)\n        # Ensure all designated food items are located and marked around fridge_289\n"
    },
    {
        "task_name": "Put groceries in Fridge",
        "source_sub_task": "2. Place them on the table in the dining room.",
        "cdl": " \nbehavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):\n    body:\n        achieve on(item1, table)\n        achieve on(item2, table)\n        achieve on(item3, table)\n        achieve on(item4, table)\n        achieve on(item5, table)\n\nbehavior __goal__():\n    body:\n        bind dining_room: item where:\n            is_dining_room(dining_room)\n        # Bind the dining room\n\n        bind dining_room_table: item where:\n            is_table(dining_room_table) and inside(dining_room_table, dining_room)\n        # Select the table in the dining room\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select the milk instance\n\n        bind turkey: item where:\n            is_food_turkey(turkey)\n        # Select the turkey instance\n\n        bind egg: item where:\n            is_food_egg(egg)\n        # Select the egg instance\n\n        bind fish: item where:\n            is_food_fish(fish)\n        # Select the fish instance\n\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        put_items_on_table(milk, turkey, egg, fish, chicken, dining_room_table)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": "behavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select the cutting board instance\n\n        slice_chicken(chicken, cutting_board)\n        # Execute behavior to slice the chicken on the cutting board"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "1. Find a cup and fill it with milk.",
        "cdl": " \nbehavior find_cup(cup:item, milk:item):\n    body:\n        achieve_once inhand(cup)\n        # Temporarily hold the cup\n\nbehavior fill_cup_with_milk(cup:item, milk:item):\n    body:\n        achieve inside(milk, cup)\n        # Ensure the cup has milk inside\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and recipient(cup)\n        # Select a cup that can receive substances\n\n        bind milk: item where:\n            is_milk(milk)\n        # Select milk instance\n\n        find_cup(cup, milk)\n        # Find and hold the cup\n\n        fill_cup_with_milk(cup, milk)\n        # Fill the cup with milk\n"
    },
    {
        "task_name": "Drink",
        "source_sub_task": "2. Heat the cup of milk in the microwave.",
        "cdl": "\nbehavior place_cup_in_microwave(cup:item, microwave:item):\n    body:\n        achieve inside(cup, microwave)\n        # Ensure the cup is placed inside the microwave\n\nbehavior start_microwave(microwave:item):\n    body:\n        achieve closed(microwave) # Close the microwave door\n        achieve is_on(microwave)  # Turn on the microwave to heat\n\nbehavior __goal__():\n    body:\n        bind cup: item where:\n            is_cup(cup) and id[cup]==2132\n        # Select the cup with ID 2132\n\n        bind microwave: item where:\n            is_microwave(microwave)\n        # Select an instance of a microwave\n\n        place_cup_in_microwave(cup, microwave)\n        # Place the cup inside the microwave\n\n        start_microwave(microwave)\n        # Start the microwave to heat the cup of milk\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Find the basket that contains clothes.",
        "cdl": " \ndef has_clothes_in_basket(basket: item):\n    # Function to check if there are clothes in a specified basket\n    symbol has_clothes = exists o: item : is_clothes(o) and inside(o, basket)\n    return has_clothes\n\nbehavior __goal__():\n    body:\n        if exists basket: item : is_basket_for_clothes(basket) and has_clothes_in_basket(basket):\n            # Check if there is a basket with clothes based on the available information\n            bind basket: item where:\n                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)\n            # Select a basket that has clothes in it\n            achieve close_char(char, basket)\n            # Move the character closer to the basket with clothes\n\n        else:\n            # If no basket with clothes is found, initiate exploration to locate one\n            foreach basket: item:\n                if is_basket_for_clothes(basket) and not visited(basket):\n                    # Check all unvisited baskets\n                    observe(basket, \"Check if there are clothes in this basket\")\n                    # Observe whether each basket has any clothes\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Add soap and the clothes to the washing machine.",
        "cdl": "behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):\n    body:\n        achieve inside(clothes, washing_machine)\n        # Place clothing item inside the washing machine\n\nbehavior add_soap_to_washing_machine(soap:item, washing_machine:item):\n    body:\n        achieve inside(soap, washing_machine)\n        # Add soap to the washing machine\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        bind basket: item where:\n            is_basket_for_clothes(basket)\n        # Select the basket instance containing clothes\n\n        foreach clothes: item:\n            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):\n                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)\n                # Load all clothes from the basket into the washing machine\n                \n        bind soap: item where:\n            is_soap(soap)\n        # Choose an instance of soap\n\n        add_soap_to_washing_machine(soap, washing_machine)\n        # Add soap to the washing machine"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "3. Run the washing machine.",
        "cdl": "\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start the wash cycle\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n\n        start_washing_machine(washing_machine)\n        # Execute the behavior to turn on the washing machine\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "1. Put the cleaning solution in the dishwasher.",
        "cdl": " \nbehavior load_cleaning_solution_into_dishwasher(cleaning_solution: item, dishwasher: item):\n    body:\n        achieve inside(cleaning_solution, dishwasher)\n        # Ensure the cleaning solution is placed inside the dishwasher\n\nbehavior __goal__():\n    body:\n        bind cleaning_solution: item where:\n            is_cleaning_solution(cleaning_solution)\n        # Select an instance of cleaning solution\n\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select an instance of dishwasher\n\n        load_cleaning_solution_into_dishwasher(cleaning_solution, dishwasher)\n        # Execute the behavior to load the cleaning solution into the dishwasher\n"
    },
    {
        "task_name": "Wash dishes with dishwasher",
        "source_sub_task": "2. Wash the bowls and plates with the dishwasher.",
        "cdl": "behavior load_dishwasher(o:item, dishwasher:item):\n    body:\n        achieve inside(o, dishwasher)\n        # Place the item inside the dishwasher\n\nbehavior start_dishwasher(dishwasher:item):\n    body:\n        achieve closed(dishwasher) # Close the dishwasher door\n        achieve is_on(dishwasher) # Turn on the dishwasher\n\nbehavior __goal__():\n    body:\n        bind dishwasher: item where:\n            is_dishwasher(dishwasher)\n        # Select the dishwasher\n\n        foreach o: item:\n        # Load all bowls and plates into the dishwasher\n            if is_bowl(o) or is_plate(o):\n                load_dishwasher(o, dishwasher)\n        \n        start_dishwasher(dishwasher) # Start the dishwasher"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior find_jacket(jacket: item):\n    body:\n        achieve close_char(char, jacket)\n        observe(jacket, \"Check if this is the correct jacket\")\n        # Find the jacket by getting close to it and inspecting its ID\n\nbehavior wash_jacket_by_hand(jacket: item, sink: item):\n    body:\n        achieve_once inside(jacket, sink)\n        # Ensure the jacket is placed inside the sink\n\n        wash(jacket)\n        # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket] == 2047\n        # Select the jacket with specific ID 2047\n\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        if not visited(jacket):\n            find_jacket(jacket)\n        \n        wash_jacket_by_hand(jacket, sink)\n        # Execute the behavior to hand wash the jacket\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": " \nbehavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start washing the jacket\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n        \n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket]==2047\n        # Select the specific jacket with ID 2047\n\n        put_jacket_in_washing_machine(jacket, washing_machine)\n        start_washing_machine(washing_machine)\n        # Place the jacket in the washing machine and start the wash cycle\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "1. Find the book and put it on the coffee table in the home office.",
        "cdl": " \nbehavior put_book_on_table(book:item, table:item):\n    body:\n        achieve on(book, table)\n\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind table: item where:\n            is_table(table) and inside(table, home_office)\n        # Select the table within the home office\n\n        bind book: item where:\n            is_book(book)\n        # Select the instance of a book\n\n        put_book_on_table(book, table)\n        # Execute the behavior to put the book on the table\n"
    },
    {
        "task_name": "Prepare a reading space",
        "source_sub_task": "2. Open the window in the home office.",
        "cdl": " \n# Define a behavior to open a window in the home office\nbehavior open_window(window:item):\n    body:\n        achieve open(window)\n        # Ensure the window is opened\n\n# Define the main behavior to achieve the given goal\nbehavior __goal__():\n    body:\n        bind home_office: item where:\n            is_home_office(home_office)\n        # Select the home office as the target location\n\n        bind window: item where:\n            is_window(window) and inside(window, home_office)\n        # Select the window in the home office\n        \n        open_window(window)\n        # Execute the behavior to open the window in the home office\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "1. Find a couch and sit on it.",
        "cdl": " \nbehavior __goal__():\n    body:\n        if exists couch: item : is_couch(couch) and sittable(couch):\n            # If a sittable couch is identified, approach it and sit\n            bind couch: item where:\n                is_couch(couch) and sittable(couch)\n            achieve close_char(char, couch)\n            sit_somewhere(couch)\n        else:\n            # Check all unvisited couches in the scene\n            foreach couch: item:\n                if is_couch(couch) and not visited(couch):\n                    observe(couch, \"Check if the couch is sittable\")\n"
    },
    {
        "task_name": "Change TV channel",
        "source_sub_task": "2. Locate the remote control and use it to turn on the TV.",
        "cdl": " \nbehavior locate_remote_control(remote_control: item):\n    body:\n        achieve visited(remote_control)\n        # Ensure the remote control is located and marked as visited\n\nbehavior turn_on_television(television: item, remote_control: item):\n    body:\n        achieve_once inhand(remote_control)\n        # Temporarily hold the remote control\n\n        touch(remote_control)\n        # Use the remote control to turn on the television\n\n        achieve is_on(television)\n        # Ensure the television is switched on\n\nbehavior __goal__():\n    body:\n        bind remote_control: item where:\n            is_remote_control(remote_control)\n        # Select the remote control instance\n\n        bind television: item where:\n            is_television(television)\n        # Select the television instance\n\n        locate_remote_control(remote_control)\n        turn_on_television(television, remote_control)\n        # Execute the behaviors to locate the remote and turn on the television with it\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "2. Put the vegetables in a pot and boil them on the stove.",
        "cdl": " \nbehavior put_vegetables_in_pot(vegetable:item, pot:item):\n    body:\n        achieve inside(vegetable, pot)\n        # Ensure all the vegetables are placed inside the pot\n\nbehavior boil_vegetables_on_stove(pot:item, stove:item):\n    body:\n        achieve on(pot, stove)\n        # Make sure the pot is on the stove\n        achieve is_on(stove)\n        # Turn on the stove to boil the vegetables\n\nbehavior __goal__():\n    body:\n        bind vegetable: item where:\n            is_food_vegetable(vegetable)\n        # Select the vegetables\n\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot instance\n\n        bind stove: item where:\n            is_stove(stove)\n        # Select the stove instance\n\n        if exists faucet: item: is_faucet(faucet) and is_on(faucet):\n            bind faucet: item where:\n                is_faucet(faucet) and is_on(faucet)\n            achieve_once is_off(faucet)\n            # Ensure the faucet is turned off after washing vegetables\n\n        put_vegetables_in_pot(vegetable, pot)\n        boil_vegetables_on_stove(pot, stove)\n"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "3. Store the whole pot in the fridge.",
        "cdl": " \nbehavior store_pot_in_fridge(pot:item, fridge:item):\n    body:\n        achieve inside(pot, fridge)\n        # Place the pot inside the fridge\n\nbehavior close_the_fridge_door(fridge:item):\n    body:\n        achieve closed(fridge)\n        # Make sure the fridge door is closed\n\nbehavior __goal__():\n    body:\n        bind pot: item where:\n            is_pot(pot)\n        # Select the pot instance\n\n        bind fridge: item where:\n            is_fridge(fridge)\n        # Select the fridge instance\n\n        store_pot_in_fridge(pot, fridge)\n        close_the_fridge_door(fridge)\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "1. Hand wash the jacket.",
        "cdl": " \nbehavior find_jacket(jacket: item):\n    body:\n        observe(jacket, \"Check if this is the correct jacket\")\n        # Observe the specific item to ensure it is the jacket you want to hand wash\n\nbehavior wash_jacket_by_hand(jacket: item, sink: item):\n    body:\n        achieve_once inside(jacket, sink)\n        # Ensure the jacket is placed inside the sink\n\n        wash(jacket)\n        # Wash the jacket by hand\n\nbehavior __goal__():\n    body:\n        bind jacket: item where:\n            is_clothes_jacket(jacket)\n        # Select an instance of a jacket\n\n        bind sink: item where:\n            is_sink(sink)\n        # Select an instance of a sink\n\n        if not visited(jacket):\n            find_jacket(jacket)\n        # Ensure the jacket is located before starting the wash\n\n        wash_jacket_by_hand(jacket, sink)\n        # Execute the behavior to wash the jacket by hand\n"
    },
    {
        "task_name": "Wash clothes",
        "source_sub_task": "2. Wash the jacket using the washing machine.",
        "cdl": "behavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):\n    body:\n        achieve inside(jacket, washing_machine)\n        # Place the jacket inside the washing machine\n\nbehavior start_washing_machine(washing_machine:item):\n    body:\n        achieve closed(washing_machine)\n        # Ensure the washing machine door is closed\n        achieve is_on(washing_machine)\n        # Turn on the washing machine to start washing the jacket\n\nbehavior __goal__():\n    body:\n        bind washing_machine: item where:\n            is_washing_machine(washing_machine)\n        # Select the washing machine instance\n        \n        bind jacket: item where:\n            is_clothes_jacket(jacket) and id[jacket]==2078\n        # Select the specific jacket with ID 2078\n\n        put_jacket_in_washing_machine(jacket, washing_machine)\n        start_washing_machine(washing_machine)\n        # Place the jacket in the washing machine and start the wash cycle"
    },
    {
        "task_name": "Cook some food",
        "source_sub_task": "Slice the chicken.",
        "cdl": " \nbehavior slice_chicken(chicken:item, cutting_board:item):\n    body:\n        achieve cut(chicken)\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind cutting_board: item where:\n            is_cutting_board(cutting_board)\n        # Select the cutting board instance\n\n        slice_chicken(chicken, cutting_board)\n        # Execute behavior to slice the chicken on the cutting board\n"
    },
    {
        "task_name": "Prepare dinner",
        "source_sub_task": "Place the chicken and onion in the oven and turn on the oven.",
        "cdl": "\nbehavior put_inside_oven(item: item, oven: item):\n    body:\n        achieve inside(item, oven)\n        # Ensure the item is placed inside the oven\n\nbehavior start_oven(oven: item):\n    body:\n        achieve closed(oven)\n        # Close the oven door\n        achieve is_on(oven)\n        # Turn on the oven\n\nbehavior __goal__():\n    body:\n        bind chicken: item where:\n            is_food_chicken(chicken)\n        # Select the chicken instance\n\n        bind onion: item where:\n            is_food_onion(onion)\n        # Select the onion instance\n\n        bind oven: item where:\n            is_oven(oven)\n        # Select the oven instance\n\n        put_inside_oven(chicken, oven)\n        put_inside_oven(onion, oven)\n        start_oven(oven)\n"
    }
]