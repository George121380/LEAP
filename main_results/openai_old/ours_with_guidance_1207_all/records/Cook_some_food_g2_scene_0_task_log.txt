From agent.py
Reset goals: The sub-goals are: 
['Slice the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) 

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        cut_chicken(chicken)
        # Execute behavior to cut the chicken on the cutting board
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice the chicken." ?
Answer: Hold a knife and find the cutting board. Put the chicken on the cutting board, then cut the chicken.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Output:', '1. Hold a knife and find the cutting board.', '2. Put the chicken on the cutting board.', '3. Cut the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Find drawing_239. Find drawing_240. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_238. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
exp(cutting_board_2051, kitchen_counter_230)
Find cutting_board_2051. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close food_chicken_2017.Robot is no longer close cutting_board_2051.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_chicken_2017. Robot is close cutting_board_2051. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior hold_knife(knife:item):
    body:
        achieve_once inhand(knife)
        # Temporarily hold the knife

behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and not visited(cutting_board):
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and not visited(cutting_board)
            achieve close_char(char, cutting_board)
        else:
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Verify the existence of this cutting board")

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife instance

        hold_knife(knife)
        # Hold the knife

        find_cutting_board()
        # Locate the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        achieve_once inhand(knife)
        # Temporarily hold the knife

        achieve close_char(char, cutting_board)
        # Ensure you are close to the cutting board
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. hold a knife and find the cutting board." ?
Answer: Hold a knife and find the cutting board.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior hold_knife():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife instance

        achieve_once inhand(knife)
        # Temporarily hold the knife

behavior find_cutting_board():
    body:
        if exists cutting_board: item : is_cutting_board(cutting_board) and not visited(cutting_board):
            # If a cutting board is present and not visited, move closer to it
            bind cutting_board: item where:
                is_cutting_board(cutting_board) and not visited(cutting_board)
            achieve close_char(char, cutting_board)

        else:
            # If no cutting board is known, explore to find one
            foreach cutting_board: item:
                if is_cutting_board(cutting_board) and not visited(cutting_board):
                    observe(cutting_board, "Verify the existence of this cutting board")

behavior __goal__():
    body:
        hold_knife()
        find_cutting_board()
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior hold_knife_and_find_cutting_board(knife:item, cutting_board:item):
    body:
        achieve_once inhand(knife)
        # Temporarily hold the knife

        achieve close_char(char, cutting_board)
        # Get close to the cutting board

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        hold_knife_and_find_cutting_board(knife, cutting_board)
        # Execute the behavior to hold the knife and find the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior hold_knife(knife: item):
    body:
        achieve_once inhand(knife)
        # Temporarily hold the knife

behavior find_cutting_board(cutting_board: item):
    body:
        achieve visited(cutting_board)
        # Ensure the cutting board is located and marked as visited

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife instance

        hold_knife(knife)
        # Execute behavior to hold the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        find_cutting_board(cutting_board)
        # Execute behavior to find the cutting board and ensure it is visited
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior hold_knife(knife: item):
    body:
        achieve_once inhand(knife)
        # Temporarily hold the knife

behavior find_cutting_board(cutting_board: item):
    body:
        achieve visited(cutting_board)
        # Ensure the cutting board is located and marked as visited

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife instance

        hold_knife(knife)
        # Execute behavior to hold the knife

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        find_cutting_board(cutting_board)
        # Execute behavior to find the cutting board and ensure it is visited
##############################
From agent.py-> find a plan in act()
obs(cutting_board_2051, look around this place)
##############################
From agent.py
obs(cutting_board_2051, look around this place)
Get this information:  cutting_board_2051 is inside dining_room_201. cutting_board_2051 is close to kitchen_counter_230. cutting_board_2051 is close to food_chicken_2017. cutting_board_2051 is close to character_65. cutting_board_2051 is on kitchen_counter_230. food_chicken_2017 is on cutting_board_2051. cutting_board_2051 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_home_office_319(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(cd_player,home_office_instance)
        else:
            exp(cd_player,home_office_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,home_office_instance]=True
        close[home_office_instance,cd_player]=True
    

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the chicken on the cutting board." ?
Answer: Place the chicken onto the cutting board.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_powersocket_412(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mat,powersocket_instance)
        else:
            exp(mat,powersocket_instance)
    eff:
        unknown[mat]=False
        close[mat,powersocket_instance]=True
        close[powersocket_instance,mat]=True
    

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_wallshelf_235(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd_player,wallshelf_instance)
        else:
            exp(cd_player,wallshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,wallshelf_instance]=True
        close[wallshelf_instance,cd_player]=True
    

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_sink_231(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_couch_352(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance
        
        put_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_toaster_292(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(mat,toaster_instance)
        else:
            exp(mat,toaster_instance)
    eff:
        unknown[mat]=False
        close[mat,toaster_instance]=True
        close[toaster_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_116(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_fork_2081_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance
        
        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_406_around_cpuscreen_171(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(pillow,cpuscreen_instance)
        else:
            exp(pillow,cpuscreen_instance)
    eff:
        unknown[pillow]=False
        close[pillow,cpuscreen_instance]=True
        close[cpuscreen_instance,pillow]=True
    

behavior find_towel_2057_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2071_around_sink_231(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_403_around_drawing_242(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_119(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2072_around_stove_2065(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(bowl,stove_instance)
        else:
            exp(bowl,stove_instance)
    eff:
        unknown[bowl]=False
        close[bowl,stove_instance]=True
        close[stove_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_fork_2080_around_closetdrawer_121(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_cpuscreen_171(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_powersocket_412(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(spectacles,powersocket_instance)
        else:
            exp(spectacles,powersocket_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,powersocket_instance]=True
        close[powersocket_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_tray_296(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(fork,tray_instance)
        else:
            exp(fork,tray_instance)
    eff:
        unknown[fork]=False
        close[fork,tray_instance]=True
        close[tray_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_powersocket_246(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==246
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mat,powersocket_instance)
        else:
            exp(mat,powersocket_instance)
    eff:
        unknown[mat]=False
        close[mat,powersocket_instance]=True
        close[powersocket_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_orchid_244(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind orchid_instance:item where:
            is_orchid(orchid_instance) and id[orchid_instance]==244
        achieve close_char(char,orchid_instance)
        if can_open(orchid_instance):
            achieve_once open(orchid_instance)
            exp(mat,orchid_instance)
        else:
            exp(mat,orchid_instance)
    eff:
        unknown[mat]=False
        close[mat,orchid_instance]=True
        close[orchid_instance,mat]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Select the cutting board instance with ID 2051

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_powersocket_412(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mouse,powersocket_instance)
        else:
            exp(mouse,powersocket_instance)
    eff:
        unknown[mouse]=False
        close[mouse,powersocket_instance]=True
        close[powersocket_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_fryingpan_2083(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(mat,fryingpan_instance)
        else:
            exp(mat,fryingpan_instance)
    eff:
        unknown[mat]=False
        close[mat,fryingpan_instance]=True
        close[fryingpan_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_doorjamb_45(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==45
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(fork,doorjamb_instance)
        else:
            exp(fork,doorjamb_instance)
    eff:
        unknown[fork]=False
        close[fork,doorjamb_instance]=True
        close[doorjamb_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_book_2067_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_mat_236_around_mousepad_414(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_towel_2056_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_pencil_2001_around_wallshelf_235(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(pencil,wallshelf_instance)
        else:
            exp(pencil,wallshelf_instance)
    eff:
        unknown[pencil]=False
        close[pencil,wallshelf_instance]=True
        close[wallshelf_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)    
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_121(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mousepad_414(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_fryingpan_2083(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(bowl,fryingpan_instance)
        else:
            exp(bowl,fryingpan_instance)
    eff:
        unknown[bowl]=False
        close[bowl,fryingpan_instance]=True
        close[fryingpan_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_toaster_292(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(mat,toaster_instance)
        else:
            exp(mat,toaster_instance)
    eff:
        unknown[mat]=False
        close[mat,toaster_instance]=True
        close[toaster_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_fork_2080_around_stove_2065(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_sink_231(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mat,sink_instance)
        else:
            exp(mat,sink_instance)
    eff:
        unknown[mat]=False
        close[mat,sink_instance]=True
        close[sink_instance,mat]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_402_around_drawing_242(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_400_around_drawing_242(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_drawing_242(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==242
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(mat,drawing_instance)
        else:
            exp(mat,drawing_instance)
    eff:
        unknown[mat]=False
        close[mat,drawing_instance]=True
        close[drawing_instance,mat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_microwave_297(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==297
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(bowl,microwave_instance)
        else:
            exp(bowl,microwave_instance)
    eff:
        unknown[bowl]=False
        close[bowl,microwave_instance]=True
        close[microwave_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_stove_2065(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_closetdrawer_160(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_clothes_pants_2085_around_closetdrawer_116(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_pants,closetdrawer_instance)
        else:
            exp(clothes_pants,closetdrawer_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_table_355(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_tray_296(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(mat,tray_instance)
        else:
            exp(mat,tray_instance)
    eff:
        unknown[mat]=False
        close[mat,tray_instance]=True
        close[tray_instance,mat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_stovefan_288(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stovefan_instance:item where:
            is_stovefan(stovefan_instance) and id[stovefan_instance]==288
        achieve close_char(char,stovefan_instance)
        if can_open(stovefan_instance):
            achieve_once open(stovefan_instance)
            exp(fork,stovefan_instance)
        else:
            exp(fork,stovefan_instance)
    eff:
        unknown[fork]=False
        close[fork,stovefan_instance]=True
        close[stovefan_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_mat_236_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_food_on_cutting_board(food:item, cutting_board:item):
    body:
        achieve on(food, cutting_board)
        # Ensure the food (chicken) is on the cutting board

behavior __goal__():
    body:
        bind food_chicken: item where:
            is_food_chicken(food_chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        put_food_on_cutting_board(food_chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_clothes_shirt_2086_around_closetdrawer_116(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        
behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_cpuscreen_171(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_tray_296(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==296
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(fork,tray_instance)
        else:
            exp(fork,tray_instance)
    eff:
        unknown[fork]=False
        close[fork,tray_instance]=True
        close[tray_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_mouse_413_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an instance of cutting board

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_drawing_176_around_drawing_239(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==239
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(drawing,drawing_instance)
        else:
            exp(drawing,drawing_instance)
    eff:
        unknown[drawing]=False
        close[drawing,drawing_instance]=True
        close[drawing_instance,drawing]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and has_a_free_hand(char)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and surfaces(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance
        
        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_table_107(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_shirt_2086_around_closetdrawer_116(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_shirt,closetdrawer_instance)
        else:
            exp(clothes_shirt,closetdrawer_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_shirt]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to put the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_desk_104(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mat,desk_instance)
        else:
            exp(mat,desk_instance)
    eff:
        unknown[mat]=False
        close[mat,desk_instance]=True
        close[desk_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance
        
        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_closetdrawer_116(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_closetdrawer_121(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==121
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_cpuscreen_171(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_bookshelf_233(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(spectacles,bookshelf_instance)
        else:
            exp(spectacles,bookshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bookshelf_instance]=True
        close[bookshelf_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_pencil_2001_around_closetdrawer_120(pencil:item):
    goal: not unknown(pencil)
    body:
        assert is_pencil(pencil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pencil,closetdrawer_instance)
        else:
            exp(pencil,closetdrawer_instance)
    eff:
        unknown[pencil]=False
        close[pencil,closetdrawer_instance]=True
        close[closetdrawer_instance,pencil]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_closetdrawer_120(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_236_around_closetdrawer_116(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_401_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and id[chicken] == 2017
        # Select the specific chicken instance with ID 2017

        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2051
        # Select the specific cutting board instance with ID 2051

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken:item, cutting_board:item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_388(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==388
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_stove_2065(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fork,stove_instance)
        else:
            exp(fork,stove_instance)
    eff:
        unknown[fork]=False
        close[fork,stove_instance]=True
        close[stove_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Ensure the chicken is placed on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_table_107(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_pillow_405_around_closetdrawer_160(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_bathroom_cabinet_40(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(spectacles,bathroom_cabinet_instance)
        else:
            exp(spectacles,bathroom_cabinet_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,spectacles]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_bench_227(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==227
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        place_chicken_on_board(chicken, cutting_board)
        # Execute behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_closetdrawer_116(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd_player,closetdrawer_instance)
        else:
            exp(cd_player,closetdrawer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,closetdrawer_instance]=True
        close[closetdrawer_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_182_around_closetdrawer_116(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(pillow,closetdrawer_instance)
        else:
            exp(pillow,closetdrawer_instance)
    eff:
        unknown[pillow]=False
        close[pillow,closetdrawer_instance]=True
        close[closetdrawer_instance,pillow]=True
    

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2080_around_wallshelf_234(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_toaster_292(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==292
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(mat,toaster_instance)
        else:
            exp(mat,toaster_instance)
    eff:
        unknown[mat]=False
        close[mat,toaster_instance]=True
        close[toaster_instance,mat]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_cpuscreen_171(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(spectacles,cpuscreen_instance)
        else:
            exp(spectacles,cpuscreen_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,cpuscreen_instance]=True
        close[cpuscreen_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_237_around_closetdrawer_116(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(mat,closetdrawer_instance)
        else:
            exp(mat,closetdrawer_instance)
    eff:
        unknown[mat]=False
        close[mat,closetdrawer_instance]=True
        close[closetdrawer_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_mat_173_around_oil_2079(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(mat,oil_instance)
        else:
            exp(mat,oil_instance)
    eff:
        unknown[mat]=False
        close[mat,oil_instance]=True
        close[oil_instance,mat]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_173_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_mat_173_around_ironing_board_2074(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2074
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(mat,ironing_board_instance)
        else:
            exp(mat,ironing_board_instance)
    eff:
        unknown[mat]=False
        close[mat,ironing_board_instance]=True
        close[ironing_board_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_powersocket_412(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==412
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(mouse,powersocket_instance)
        else:
            exp(mouse,powersocket_instance)
    eff:
        unknown[mouse]=False
        close[mouse,powersocket_instance]=True
        close[powersocket_instance,mouse]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_160(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_fork_2080_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_fork_2080_around_wallshelf_235(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(fork,wallshelf_instance)
        else:
            exp(fork,wallshelf_instance)
    eff:
        unknown[fork]=False
        close[fork,wallshelf_instance]=True
        close[wallshelf_instance,fork]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_235(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_on_cutting_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_cutting_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Slice the chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        slice_chicken(chicken)
        # Execute behavior to slice the chicken
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_food_2022_around_kitchen_counter_230(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_chicken_2017, kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(kitchen_counter_230)exp(knife_2050, kitchen_counter_230)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(food_chicken_2017, kitchen_counter_230)
Fail to find food_chicken_2017 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_chicken_2017)walk_executor(cutting_board_2051)put_executor(food_chicken_2017, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_chicken_2017)cut_executor(food_chicken_2017)
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
put_executor(food_chicken_2017, cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close food_chicken_2017.Robot is no longer close cutting_board_2051.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_chicken_2017. Robot is close cutting_board_2051. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_chicken_2017. Robot is close cutting_board_2051. 
##############################
