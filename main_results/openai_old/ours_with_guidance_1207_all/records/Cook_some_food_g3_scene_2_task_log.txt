From agent.py
Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the washed vegetables in a pot and boil them on the stove.', '3. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_console_2027_around_home_office_161(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(console,home_office_instance)
        else:
            exp(console,home_office_instance)
    eff:
        unknown[console]=False
        close[console,home_office_instance]=True
        close[home_office_instance,console]=True
    

behavior find_food_carrot_2047_around_fridge_140(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_carrot,fridge_instance)
        else:
            exp(food_carrot,fridge_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,fridge_instance]=True
        close[fridge_instance,food_carrot]=True
    

behavior find_food_potato_2066_around_kitchen_counter_129(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(sink_133)putin_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(cupboard_131)
Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(food_vegetable_2072, cupboard_131)
Fail to find food_vegetable_2072 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the washed vegetables in a pot and boil them on the stove.', '3. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_carrot_2047_around_sink_133(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_carrot,sink_instance)
        else:
            exp(food_carrot,sink_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,sink_instance]=True
        close[sink_instance,food_carrot]=True
    

behavior find_food_vegetable_2072_around_cupboard_130(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if possible

        wash(vegetable)
        # Wash the vegetable
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            # If you have identified vegetables, proceed to wash them
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            # Select the vegetable instance

            bind sink: item where:
                is_sink(sink)
            # Select a sink instance

            wash_vegetable(vegetable, sink)
            # Execute the behavior to wash the vegetable
        else:
            # If you havent identified vegetables, explore to locate them
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and not visited(vegetable):
                    observe(vegetable, "Locate vegetable to wash")
#goal_representation_end

##############################
From agent.py->reset_goal
behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet if possible

        wash(vegetable)
        # Wash the vegetable
        
        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        if exists vegetable: item : is_food_vegetable(vegetable):
            # If you have identified vegetables, proceed to wash them
            bind vegetable: item where:
                is_food_vegetable(vegetable)
            # Select the vegetable instance

            bind sink: item where:
                is_sink(sink)
            # Select a sink instance

            wash_vegetable(vegetable, sink)
            # Execute the behavior to wash the vegetable
        else:
            # If you havent identified vegetables, explore to locate them
            foreach vegetable: item:
                if is_food_vegetable(vegetable) and not visited(vegetable):
                    observe(vegetable, "Locate vegetable to wash")
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_vegetable_2072, cupboard_130)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(sink_133)putin_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(food_vegetable_2072, cupboard_130)
Fail to find food_vegetable_2072 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(sink_133)putin_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)walk_executor(sink_133)putin_executor(food_vegetable_2072, sink_133)walk_executor(food_vegetable_2072)wash_executor(food_vegetable_2072)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(food_vegetable_2072, sink_133)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close kitchen_counter_132. Robot is close sink_133. food_vegetable_2072 released by right hand. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close sink_133. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close sink_133. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_nightstand_262(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_scarf,nightstand_instance)
        else:
            exp(clothes_scarf,nightstand_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,nightstand_instance]=True
        close[nightstand_instance,clothes_scarf]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close food_vegetable_2072.Robot is no longer close sink_133.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close pot_2093.
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close sink_133. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close sink_133.
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_2093)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close kitchen_counter_129. Robot is close pot_2093. food_vegetable_2072 released by right hand. 
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. Robot is no longer close food_vegetable_2072.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_bowl_2095_around_wallshelf_191(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_191)exp(bowl_2095, wallshelf_191)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(wallshelf_191)
Robot is inside home_office_161. Robot is close wallshelf_191. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
exp(bowl_2095, wallshelf_191)
Fail to find bowl_2095 around wallshelf_191. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_190)exp(bowl_2095, wallshelf_190)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(wallshelf_190)
Robot is inside home_office_161. Robot is close wallshelf_190. Robot is no longer close wallshelf_191.
##############################
From agent.py
exp(bowl_2095, wallshelf_190)
Fail to find bowl_2095 around wallshelf_190. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(bowl_2095, wallshelf_301)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(wallshelf_301)
Find towel_rack_300. Find drawing_296. Find towel_rack_299. Robot is inside bathroom_265. Robot is close wallshelf_301. Robot is no longer inside home_office_161.Robot is no longer close wallshelf_190.
##############################
From agent.py
exp(bowl_2095, wallshelf_301)
Fail to find bowl_2095 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(bowl_2095, wallshelf_187)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot is inside home_office_161. Robot is close wallshelf_187. Robot is no longer inside bathroom_265.Robot is no longer close wallshelf_301.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: The target item, bowl_2095, is located inside dining_room_1 on table_123. The bowl is sitting on the table, and both the bowl and table are in close proximity to each other. Look for bowl_2095 directly on the surface of table_123 to retrieve it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2095, is located inside dining_room_1 on table_123. The bowl is sitting on the table, and both the bowl and table are in close proximity to each other. Look for bowl_2095 directly on the surface of table_123 to retrieve it.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for food_vegetable_2072 around cupboard_131.
Action 4: Walk to cupboard_130.
Action 5: look for food_vegetable_2072 around cupboard_130.
Action 6: Walk to fridge_140.
Action 7: Switch off fridge_140.
Action 8: Open fridge_140.
Action 9: look for food_vegetable_2072 around fridge_140.
Action 10: Grab food_vegetable_2072.
Action 11: Walk to sink_133.
Action 12: Put food_vegetable_2072 into sink_133.
Action 13: Walk to food_vegetable_2072.
Action 14: Wash food_vegetable_2072.
Action 15: Walk to stove_2090.
Action 16: Open stove_2090.
Action 17: look for pot_2093 around stove_2090.
Action 18: Walk to pot_2093.
Action 19: Open pot_2093.
Action 20: Walk to food_vegetable_2072.
Action 21: Grab food_vegetable_2072.
Action 22: Walk to pot_2093.
Action 23: Put food_vegetable_2072 into pot_2093.
Action 24: Grab pot_2093.
Action 25: Walk to stove_2090.
Action 26: Put pot_2093 on stove_2090.
Action 27: Close stove_2090.
Action 28: Switch on stove_2090.
Action 29: Walk to wallshelf_191.
Action 30: look for bowl_2095 around wallshelf_191.
Action 31: Walk to wallshelf_190.
Action 32: look for bowl_2095 around wallshelf_190.
Action 33: Walk to wallshelf_301.
Action 34: look for bowl_2095 around wallshelf_301.
Action 35: Walk to wallshelf_187.

##############################
From agent.py
exp(bowl_2095, wallshelf_187)
Fail to find bowl_2095 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer inside home_office_161.Robot is no longer close wallshelf_187.
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(bowl_2095)putin_executor(food_vegetable_2072, bowl_2095)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close pot_2093. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close pot_2093. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close table_123. Robot is close bowl_2095. Robot is no longer close pot_2093.
##############################
From agent.py
putin_executor(food_vegetable_2072, bowl_2095)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close table_123. Robot is close bowl_2095. food_vegetable_2072 released by right hand. 
##############################
