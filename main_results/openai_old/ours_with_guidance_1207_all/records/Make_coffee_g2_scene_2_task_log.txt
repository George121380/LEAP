From agent.py
Reset goals: The sub-goals are: 
['1. Use the coffee maker to make a cup of coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_cup(coffee_maker: item):
    # Function to check if there is a cup inside the coffee maker
    symbol has_cup=exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return has_cup

def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to be used
    return plugged(coffee_maker) and has_water(coffee_maker) and has_cup

behavior activate_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior prepare_coffee_with_maker(coffee_maker: item):
    body:
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Check the state of the coffee maker using observation if not ready
        activate_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee 

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker in the scene

        prepare_coffee_with_maker(coffee_maker)
        # Execute behavior to prepare coffee with the coffee maker

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: has_cup; available variables: [Variable<coffee_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#goal_representation
 
def has_coffee_cup(coffee_maker: item):
    # Function to check if there is a cup inside the coffee maker
    symbol has_cup=exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return has_cup

def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to be used
    return plugged(coffee_maker) and has_water(coffee_maker) and has_coffee_cup(coffee_maker)

behavior activate_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior prepare_coffee_with_maker(coffee_maker: item):
    body:
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Check the state of the coffee maker using observation if not ready
        activate_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee 

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker in the scene

        prepare_coffee_with_maker(coffee_maker)
        # Execute behavior to prepare coffee with the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_coffee_cup(coffee_maker: item):
    # Function to check if there is a cup inside the coffee maker
    symbol has_cup=exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return has_cup

def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker is ready to be used
    return plugged(coffee_maker) and has_water(coffee_maker) and has_coffee_cup(coffee_maker)

behavior activate_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior prepare_coffee_with_maker(coffee_maker: item):
    body:
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Check the state of the coffee maker using observation if not ready
        activate_coffee_maker(coffee_maker)
        # Start the coffee maker to make coffee 

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker in the scene

        prepare_coffee_with_maker(coffee_maker)
        # Execute behavior to prepare coffee with the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker is ready for use with water and a cup)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker is ready for use with water and a cup)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water and a cup in the coffee maker to make a cup of coffee. The observation action did not confirm the presence of water and a cup inside the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check if the coffee maker is ready for use with water and a cup.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def validate_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker has water and a cup
    symbol ready = has_water(coffee_maker) and exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return ready

behavior add_preparation_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            # Add water to the coffee maker
            achieve has_water(coffee_maker)

        if not exists cup: item : is_cup(cup) and inside(cup, coffee_maker):
            # Place a cup inside the coffee maker
            bind cup: item where is_cup(cup)
            achieve inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker
  
behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not validate_coffee_maker_ready(coffee_maker):
            # If the coffee maker is not ready, prepare it
            add_preparation_to_coffee_maker(coffee_maker)

        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5899, column 55.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#goal_representation
 
def validate_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker has water and a cup
    symbol ready = has_water(coffee_maker) and exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return ready

behavior add_preparation_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            # Add water to the coffee maker
            achieve has_water(coffee_maker)

        if not exists cup: item:
            is_cup(cup) and inside(cup, coffee_maker):
            # Place a cup inside the coffee maker
            bind cup: item where is_cup(cup)
            achieve inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not validate_coffee_maker_ready(coffee_maker):
            # If the coffee maker is not ready, prepare it
            add_preparation_to_coffee_maker(coffee_maker)

        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5917, column 55.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def validate_coffee_maker_ready(coffee_maker: item):
    # Check if the coffee maker has water and a cup
    symbol ready = has_water(coffee_maker) and exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return ready

behavior add_preparation_to_coffee_maker(coffee_maker: item):
    body:
        if not has_water(coffee_maker):
            # Add water to the coffee maker
            achieve has_water(coffee_maker)

        if not exists cup: item:
            # Correcting the syntax error
            # Check if there is a cup in the coffee maker
            exists cup: item : is_cup(cup) and inside(cup, coffee_maker):
            # Place a cup inside the coffee maker
            bind cup: item where is_cup(cup)
            achieve inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not validate_coffee_maker_ready(coffee_maker):
            # If the coffee maker is not ready, prepare it
            add_preparation_to_coffee_maker(coffee_maker)

        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker has water and a cup inside
    symbol ready=exists water: item : has_water(coffee_maker) and exists cup: item : is_cup(cup) and inside(cup, coffee_maker)
    return ready

behavior prepare_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147
        
        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Verify if the coffee maker has water and a cup

        if is_coffee_maker_ready(coffee_maker):
            prepare_coffee(coffee_maker)
            # Turn on the coffee maker to prepare coffee


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cup') at line 5899, column 74.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker has water and a cup inside
    symbol ready = exists water: item: has_water(coffee_maker) and exists c: item: is_cup(c) and inside(c, coffee_maker)
    return ready

behavior prepare_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Verify if the coffee maker has water and a cup

        if is_coffee_maker_ready(coffee_maker):
            prepare_coffee(coffee_maker)
            # Turn on the coffee maker to prepare coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'c') at line 5917, column 75.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2006_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#goal_representation
 
def is_coffee_maker_ready(coffee_maker: item):
    # Function to check if the coffee maker has water and a cup inside
    symbol ready = exists water: item: has_water(coffee_maker) and exists cup: item: is_cup(cup) and inside(cup, coffee_maker)
    return ready

behavior prepare_coffee(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        if not is_coffee_maker_ready(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is ready for use with water and a cup")
            # Verify if the coffee maker has water and a cup

        if is_coffee_maker_ready(coffee_maker):
            prepare_coffee(coffee_maker)
            # Turn on the coffee maker to prepare coffee

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. use the coffee maker to make a cup of coffee." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put a cup inside the coffee maker and turn it on to make the coffee.', '2. Add milk and sugar to the coffee.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2089_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_cup_2006_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close cupboard_131.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(walllamp_289)exp(cup_2087, walllamp_289)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(walllamp_289)
Find drawing_296. Find towel_rack_300. Robot is inside bathroom_265. Robot is close walllamp_289. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, walllamp_289)
Fail to find cup_2087 around walllamp_289. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(bench_125)exp(cup_2087, bench_125)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer inside bathroom_265.Robot is no longer close walllamp_289.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(bench_125)
Find drawing_118. Find mat_115. Robot is inside dining_room_1. Robot is close bench_125. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, bench_125)
Fail to find cup_2087 around bench_125. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close bench_125.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Go to dining_room_1. Locate table_123, and you will find cup_2087 on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The robot needs to ensure that there is water and a cup in the coffee maker to make a cup of coffee. The observation action did not confirm the presence of water and a cup inside the coffee maker.
Go to dining_room_1. Locate table_123, and you will find cup_2087 on it.

Human Guidance: Put a cup inside the coffee maker and turn it on.
The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Open coffe_maker_147.
Action 3: Observe around coffe_maker_147 with the question of Check if the coffee maker is ready for use with water and a cup.
Action 4: Close coffe_maker_147.
Action 5: Switch on coffe_maker_147.
Action 6: Switch off coffe_maker_147.
Action 7: Open coffe_maker_147.
Action 8: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for cup_2087 around cupboard_131.
Action 12: Walk to coffe_maker_147.
Action 13: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 14: Walk to cupboard_130.
Action 15: look for cup_2087 around cupboard_130.
Action 16: Walk to coffe_maker_147.
Action 17: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 18: Walk to walllamp_289.
Action 19: look for cup_2087 around walllamp_289.
Action 20: Walk to coffe_maker_147.
Action 21: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 22: Walk to bench_125.
Action 23: look for cup_2087 around bench_125.
Action 24: Walk to coffe_maker_147.
Action 25: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 26: Walk to kitchen_counter_128.
Action 27: look for cup_2087 around kitchen_counter_128.
Action 28: Walk to coffe_maker_147.
Action 29: Observe around coffe_maker_147 with the question of Check if the coffee maker has water.
Action 30: Walk to kitchen_counter_132.

##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(sink_133)exp(cup_2087, sink_133)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, sink_133)
Fail to find cup_2087 around sink_133. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.Robot is no longer close sink_133.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is inside dining_room_1. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is on kitchen_counter_129. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is CLEAN. coffe_maker_147 is OPEN. coffe_maker_147 is OFF.
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close table_123.
##############################
From agent.py
putin_executor(cup_2087, coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2070_around_table_127(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_sugar,table_instance)
        else:
            exp(food_sugar,table_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,table_instance]=True
        close[table_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup)
        # Pour milk into the coffee cup

        achieve inside(sugar, cup)
        # Add sugar to the coffee cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087 (the one you used for making coffee)

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select an instance of sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)
        # Add milk and sugar to the coffee in the cup

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup)
        # Pour milk into the coffee cup

        achieve inside(sugar, cup)
        # Add sugar to the coffee cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087 (the one you used for making coffee)

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select an instance of sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)
        # Add milk and sugar to the coffee in the cup

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(table_127)exp(food_sugar_2070, table_127)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.Robot is no longer close cup_2087.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(cup_2087)putin_executor(milk_2074, cup_2087)walk_executor(food_sugar_2070)grab_executor(food_sugar_2070)walk_executor(cup_2087)putin_executor(food_sugar_2070, cup_2087)
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close coffe_maker_147. Robot is close cup_2087. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(milk_2074, cup_2087)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close coffe_maker_147. Robot is close cup_2087. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_sugar_2070)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_sugar_2070. Robot is no longer close milk_2074.Robot is no longer close coffe_maker_147.Robot is no longer close cup_2087.
##############################
From agent.py
grab_executor(food_sugar_2070)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_sugar_2070. Grabbing food_sugar_2070 by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close food_sugar_2070. Robot is close coffe_maker_147. Robot is close cup_2087. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_sugar_2070, cup_2087)
Robot is inside dining_room_1. Robot is close food_sugar_2070. Robot is close coffe_maker_147. Robot is close cup_2087. food_sugar_2070 released by right hand. 
##############################
