From agent.py
Reset goals: The sub-goals are: 
['1. Find the book in the home office.', '2. Put the book on the coffee table in the home office.', '3. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_home_office_241(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book(home_office:item):
    symbol has_book=exists b: item : is_book(b) and inside(b, home_office)
    return has_book

behavior __goal__():
    body:
        if exists home_office: item : is_home_office(home_office) and has_book(home_office):
            bind home_office: item where:
                is_home_office(home_office) and has_book(home_office)
            foreach b: item:
                if is_book(b) and inside(b, home_office) and not visited(b):
                    achieve visited(b)

        else:
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office,"Check for a book")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_book(home_office:item):
    symbol has_book=exists b: item : is_book(b) and inside(b, home_office)
    return has_book

behavior __goal__():
    body:
        if exists home_office: item : is_home_office(home_office) and has_book(home_office):
            bind home_office: item where:
                is_home_office(home_office) and has_book(home_office)
            foreach b: item:
                if is_book(b) and inside(b, home_office) and not visited(b):
                    achieve visited(b)

        else:
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office,"Check for a book")

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_241)obs(home_office_241, Check for a book)
##############################
From agent.py
walk_executor(home_office_241)
Robot is inside home_office_241. Robot is no longer inside dining_room_41.
##############################
From agent.py
obs(home_office_241, Check for a book)
Get this information:  floor_267 is inside home_office_241. check_2075 is inside home_office_241. curtain_289 is inside home_office_241. keyboard_278 is inside home_office_241. character_240 is inside home_office_241. blow_dryer_2057 is inside home_office_241. floor_259 is inside home_office_241. table_270 is inside home_office_241. television_281 is inside home_office_241. wall_243 is inside home_office_241. ceiling_251 is inside home_office_241. floor_262 is inside home_office_241. brush_2002 is inside home_office_241. stamp_2043 is inside home_office_241. tvstand_273 is inside home_office_241. hanger_292 is inside home_office_241. ceilinglamp_303 is inside home_office_241. phone_2147 is inside home_office_241. floor_265 is inside home_office_241. ceiling_254 is inside home_office_241. headset_2131 is inside home_office_241. mat_284 is inside home_office_241. wall_246 is inside home_office_241. walllamp_306 is inside home_office_241. ceiling_257 is inside home_office_241. floor_268 is inside home_office_241. pillow_287 is inside home_office_241. computer_276 is inside home_office_241. wall_249 is inside home_office_241. floor_260 is inside home_office_241. mousepad_279 is inside home_office_241. cd_2145 is inside home_office_241. shampoo_2019 is inside home_office_241. curtain_290 is inside home_office_241. stamp_2022 is inside home_office_241. ceiling_252 is inside home_office_241. doorjamb_309 is inside home_office_241. cat_2069 is inside home_office_241. powersocket_282 is inside home_office_241. hanger_293 is inside home_office_241. chair_271 is inside home_office_241. wall_244 is inside home_office_241. floor_263 is inside home_office_241. dresser_274 is inside home_office_241. cd_player_2129 is inside home_office_241. pencil_2014 is inside home_office_241. ceiling_255 is inside home_office_241. shoes_2033 is inside home_office_241. orchid_285 is inside home_office_241. walllamp_304 is inside home_office_241. clothes_pants_2036 is inside home_office_241. floor_266 is inside home_office_241. cpuscreen_277 is inside home_office_241. walllamp_307 is inside home_office_241. phone_2017 is inside home_office_241. couch_269 is inside home_office_241. ceiling_258 is inside home_office_241. wall_247 is inside home_office_241. remote_control_2124 is inside home_office_241. drawing_288 is inside home_office_241. ceiling_250 is inside home_office_241. window_310 is inside home_office_241. pencil_2020 is inside home_office_241. floor_261 is inside home_office_241. mouse_280 is inside home_office_241. curtain_291 is inside home_office_241. headset_2146 is inside home_office_241. ceiling_253 is inside home_office_241. wall_242 is inside home_office_241. desk_272 is inside home_office_241. floor_264 is inside home_office_241. hanger_294 is inside home_office_241. light_283 is inside home_office_241. ceiling_256 is inside home_office_241. wall_245 is inside home_office_241. bookshelf_275 is inside home_office_241. pillow_286 is inside home_office_241. dvd_player_2130 is inside home_office_241. wall_248 is inside home_office_241. walllamp_305 is inside home_office_241. door_62 is between home_office_241. home_office_241 is CLEAN.
##############################
From agent.py
Human Instruction: You need to find the book in the home office, as the observation did not report any books present. Reevaluate the environment or the methodology used for checking so you can successfully locate the book.

The actions you have taken:
Action 1: Walk to home_office_241.
Action 2: Observe around home_office_241 with the question of Check for a book.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_visited():
    # Check if the home office has been visited
    symbol visited_office=exists office: item : is_home_office(office) and visited(office)
    return visited_office

def find_book_in_office(home_office: item):
    # Attempt to find the book in the home office
    achieve_once visited(home_office)
    observe(home_office, "Check for a book to find")

behavior __goal__():
    body:
        if exists office: item : is_home_office(office) and is_home_office_visited():
            # If home office has been visited and no book found, reevaluate
            bind home_office: item where:
                is_home_office(home_office) and is_home_office_visited()
            find_book_in_office(home_office)
        else:
            # If the home office is not visited yet
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office, "Reevaluate environment to find the book")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Achieve statements are not allowed in the current mode: SymbolicExecutionMode.DERIVED
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_home_office_visited():
    # Check if the home office has been visited
    symbol visited_office=exists office: item : is_home_office(office) and visited(office)
    return visited_office

behavior find_book(home_office: item):
    # Attempt to find the book in the home office
    observe(home_office, "Check for a book to find")

behavior __goal__():
    body:
        if exists office: item : is_home_office(office) and is_home_office_visited():
            # If home office has been visited and no book found, reevaluate
            bind home_office: item where:
                is_home_office(home_office) and is_home_office_visited()
            find_book(home_office)
        else:
            # If the home office is not visited yet
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office, "Reevaluate environment to find the book")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'observe') at line 5499, column 5.
Expected one of: 
	* BODY
	* GOAL
	* EFF
	* HEURISTIC
	* MINIMIZE
Previous tokens: [Token('_NEWLINE', '\n    # Attempt to find the book in the home office\n    ')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_diary_2008_around_bookshelf_124(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#goal_representation
 
def is_home_office_visited():
    # Check if the home office has been visited
    symbol visited_office=exists office: item : is_home_office(office) and visited(office)
    return visited_office

behavior find_book(home_office: item):
    # Attempt to find the book in the home office
    observe(home_office, "Check for a book to find")

behavior __goal__():
    body:
        if exists office: item : is_home_office(office) and is_home_office_visited():
            # If home office has been visited and no book found, reevaluate
            bind home_office: item where:
                is_home_office(home_office) and is_home_office_visited()
            find_book(home_office)
        else:
            # If the home office is not visited yet
            foreach home_office: item:
                if is_home_office(home_office) and not visited(home_office):
                    observe(home_office, "Reevaluate environment to find the book")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_diary_2008_around_bookshelf_124(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(diary,bookshelf_instance)
        else:
            exp(diary,bookshelf_instance)
    eff:
        unknown[diary]=False
        close[diary,bookshelf_instance]=True
        close[bookshelf_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_in_office(home_office:item):
    # Function to check if there is a book in the home office
    symbol has_book=exists book: item : is_book(book) and inside(book, home_office)
    return has_book

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office instance

        if has_book_in_office(home_office):
            # If a book is already known to be in the home office, achieve proximity
            bind book: item where:
                is_book(book) and inside(book, home_office)
            achieve close_char(char, book)

        else:
            # Search all unvisited items categorized as books in the home office
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if the book is in the home office")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_book_in_office(home_office:item):
    # Function to check if there is a book in the home office
    symbol has_book=exists book: item : is_book(book) and inside(book, home_office)
    return has_book

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office instance

        if has_book_in_office(home_office):
            # If a book is already known to be in the home office, achieve proximity
            bind book: item where:
                is_book(book) and inside(book, home_office)
            achieve close_char(char, book)

        else:
            # Search all unvisited items categorized as books in the home office
            foreach book: item:
                if is_book(book) and not visited(book):
                    observe(book, "Check if the book is in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_124)open_executor(bookshelf_124)exp(book_2136, bookshelf_124)walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check if the book is in the home office)walk_executor(bookshelf_124)exp(book_2137, bookshelf_124)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check if the book is in the home office)walk_executor(bookshelf_124)exp(novel_2060, bookshelf_124)walk_executor(novel_2060)open_executor(novel_2060)obs(novel_2060, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_124)
Find drawing_110. Find book_2136. Find envelope_2055. Find book_2137. Find drawing_111. Robot is inside dining_room_41. Robot is close floor_42. Robot is close floor_43. Robot is close bookshelf_124. Robot is no longer inside home_office_241.
##############################
From agent.py
open_executor(bookshelf_124)
Robot is inside dining_room_41. Robot is close floor_42. Robot is close floor_43. Robot is close bookshelf_124. 
##############################
From agent.py
exp(book_2136, bookshelf_124)
Find book_2136. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)open_executor(book_2136)obs(book_2136, Check if the book is in the home office)walk_executor(book_2137)open_executor(book_2137)obs(book_2137, Check if the book is in the home office)walk_executor(bookshelf_124)exp(novel_2060, bookshelf_124)walk_executor(novel_2060)open_executor(novel_2060)obs(novel_2060, Check if the book is in the home office)
##############################
From agent.py
walk_executor(book_2136)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2136. Robot is no longer close floor_42.Robot is no longer close floor_43.
##############################
From agent.py
open_executor(book_2136)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2136. 
##############################
From agent.py
obs(book_2136, Check if the book is in the home office)
Get this information:  book_2136 is inside dining_room_41. book_2136 is on bookshelf_124. book_2136 is close to bookshelf_124. book_2136 is close to character_240. book_2136 is OPEN.
##############################
From agent.py
walk_executor(book_2137)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2137. Robot is no longer close book_2136.
##############################
From agent.py
open_executor(book_2137)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close book_2137. 
##############################
From agent.py
obs(book_2137, Check if the book is in the home office)
Get this information:  book_2137 is inside dining_room_41. book_2137 is on bookshelf_124. book_2137 is close to bookshelf_124. book_2137 is close to character_240. book_2137 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_124)
Robot is inside dining_room_41. Robot is close bookshelf_124. Robot is close floor_42. Robot is close floor_43. Robot is no longer close book_2137.
##############################
From agent.py
exp(novel_2060, bookshelf_124)
Fail to find novel_2060 around bookshelf_124. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_196)open_executor(bookshelf_196)exp(novel_2060, bookshelf_196)walk_executor(novel_2060)open_executor(novel_2060)obs(novel_2060, Check if the book is in the home office)
##############################
From agent.py
walk_executor(bookshelf_196)
Find drawing_202. Find novel_2060. Robot is inside bedroom_162. Robot is close floor_170. Robot is close photoframe_219. Robot is close bookshelf_196. Robot is no longer inside dining_room_41.Robot is no longer close floor_42.Robot is no longer close floor_43.Robot is no longer close bookshelf_124.
##############################
From agent.py
open_executor(bookshelf_196)
Robot is inside bedroom_162. Robot is close floor_170. Robot is close photoframe_219. Robot is close bookshelf_196. 
##############################
From agent.py
exp(novel_2060, bookshelf_196)
Find novel_2060. 
##############################
From agent.py-> find a plan in act()
walk_executor(novel_2060)open_executor(novel_2060)obs(novel_2060, Check if the book is in the home office)
##############################
From agent.py
walk_executor(novel_2060)
Robot is inside bedroom_162. Robot is close bookshelf_196. Robot is close novel_2060. Robot is no longer close floor_170.Robot is no longer close photoframe_219.
##############################
From agent.py
open_executor(novel_2060)
Robot is inside bedroom_162. Robot is close bookshelf_196. Robot is close novel_2060. 
##############################
From agent.py
obs(novel_2060, Check if the book is in the home office)
Get this information:  novel_2060 is on bookshelf_196. novel_2060 is close to bookshelf_196. novel_2060 is close to character_240. novel_2060 is inside bedroom_162. novel_2060 is CLEAN. novel_2060 is OPEN.
##############################
From agent.py
Human Instruction: The robot needs to successfully find a book located within the home office (home_office_241). The observation did not report any books being present in the home office, indicating that the robot did not complete the sub-task of finding a book there. Reevaluate the home office environment again or consider revisiting the methodology used for checking to ensure a thorough search is conducted within home_office_241 for any books.

The actions you have taken:
Action 1: Walk to home_office_241.
Action 2: Observe around home_office_241 with the question of Check for a book.
Action 3: Walk to bookshelf_124.
Action 4: Open bookshelf_124.
Action 5: look for book_2136 around bookshelf_124.
Action 6: Walk to book_2136.
Action 7: Open book_2136.
Action 8: Observe around book_2136 with the question of Check if the book is in the home office.
Action 9: Walk to book_2137.
Action 10: Open book_2137.
Action 11: Observe around book_2137 with the question of Check if the book is in the home office.
Action 12: Walk to bookshelf_124.
Action 13: look for novel_2060 around bookshelf_124.
Action 14: Walk to bookshelf_196.
Action 15: Open bookshelf_196.
Action 16: look for novel_2060 around bookshelf_196.
Action 17: Walk to novel_2060.
Action 18: Open novel_2060.
Action 19: Observe around novel_2060 with the question of Check if the book is in the home office.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2029_around_phone_2147(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2147
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_diary_2008_around_desk_272(diary:item):
    goal: not unknown(diary)
    body:
        assert is_diary(diary)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(diary,desk_instance)
        else:
            exp(diary,desk_instance)
    eff:
        unknown[diary]=False
        close[diary,desk_instance]=True
        close[desk_instance,diary]=True
    

#exp_behavior_end

#goal_representation
 
def search_book_in_home_office(home_office:item):
    # Function to search for a book within the home office
    exists book: item : is_book(book) and inside(book, home_office)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office instance

        if search_book_in_home_office(home_office):
            bind book: item where:
                is_book(book) and inside(book, home_office)
            achieve close_char(char, book)
            # Move the character closer to the book in the home office

        else:
            # Check all bookshelves and unvisited areas within the home office
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and inside(bookshelf, home_office) and not visited(bookshelf):
                    observe(bookshelf, "Check if there are any books on the bookshelf")
                    # Observe whether any books are in the bookshelf

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def search_book_in_home_office(home_office:item):
    # Function to search for a book within the home office
    exists book: item : is_book(book) and inside(book, home_office)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office instance

        if search_book_in_home_office(home_office):
            bind book: item where:
                is_book(book) and inside(book, home_office)
            achieve close_char(char, book)
            # Move the character closer to the book in the home office

        else:
            # Check all bookshelves and unvisited areas within the home office
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and inside(bookshelf, home_office) and not visited(bookshelf):
                    observe(bookshelf, "Check if there are any books on the bookshelf")
                    # Observe whether any books are in the bookshelf

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)obs(bookshelf_275, Check if there are any books on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot is inside home_office_241. Robot is close bookshelf_275. Robot is close floor_262. Robot is no longer inside bedroom_162.Robot is no longer close bookshelf_196.Robot is no longer close novel_2060.
##############################
From agent.py
obs(bookshelf_275, Check if there are any books on the bookshelf)
Get this information:  pencil_2020 is on bookshelf_275. bookshelf_275 is on floor_262. bookshelf_275 is close to wall_65. bookshelf_275 is close to trashcan_99. bookshelf_275 is close to wall_68. bookshelf_275 is close to pencil_2020. bookshelf_275 is close to floor_262. bookshelf_275 is close to floor_50. bookshelf_275 is close to floor_51. bookshelf_275 is close to wall_246. bookshelf_275 is close to ceiling_59. bookshelf_275 is close to ceiling_252. bookshelf_275 is close to character_240. bookshelf_275 is inside home_office_241. bookshelf_275 is CLEAN. bookshelf_275 is OPEN.
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

##############################
From agent.py-> find a plan in act()
walk_executor(book_2136)grab_executor(book_2136)walk_executor(table_270)put_executor(book_2136, table_270)
##############################
From agent.py
walk_executor(book_2136)
Robot is inside dining_room_41. Robot is close book_2136. Robot is close bookshelf_124. Robot is no longer inside home_office_241.Robot is no longer close bookshelf_275.Robot is no longer close floor_262.
##############################
From agent.py
grab_executor(book_2136)
Robot is inside dining_room_41. Robot is close book_2136. Robot is close bookshelf_124. Grabbing book_2136 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close book_2136. Robot is close couch_269. Robot is close table_270. Robot is no longer inside dining_room_41.Robot is no longer close bookshelf_124.
##############################
From agent.py
put_executor(book_2136, table_270)
Robot is inside home_office_241. Robot is close book_2136. Robot is close couch_269. Robot is close table_270. book_2136 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2129_around_cd_player_2129(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind cd_player_instance:item where:
            is_cd_player(cd_player_instance) and id[cd_player_instance]==2129
        achieve close_char(char,cd_player_instance)
        if can_open(cd_player_instance):
            achieve_once open(cd_player_instance)
            exp(cd_player,cd_player_instance)
        else:
            exp(cd_player,cd_player_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,cd_player_instance]=True
        close[cd_player_instance,cd_player]=True
    

behavior find_mouse_213_around_mousepad_214(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==214
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_phone_2017_around_phone_2017(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2017
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(window_310)open_executor(window_310)
##############################
From agent.py
walk_executor(window_310)
Robot is inside home_office_241. Robot is close window_310. Robot is no longer close book_2136.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
open_executor(window_310)
Robot is inside home_office_241. Robot is close window_310. 
##############################
