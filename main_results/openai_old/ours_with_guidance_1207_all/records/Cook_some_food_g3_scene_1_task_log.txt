From agent.py
Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the vegetables in a pot and boil them on the stove.', '3. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(sink_19)putin_executor(food_vegetable_2113, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(food_vegetable_2113)wash_executor(food_vegetable_2113)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Find keyboard_211. Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_vegetable_2113, fridge_126)
Find food_vegetable_2113. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2113)walk_executor(sink_19)putin_executor(food_vegetable_2113, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(food_vegetable_2113)wash_executor(food_vegetable_2113)
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close food_vegetable_2113. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
putin_executor(food_vegetable_2113, sink_19)
Robot is inside bathroom_1. Robot is close food_vegetable_2113. Robot is close bathroom_counter_18. Robot is close sink_19. food_vegetable_2113 released by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close food_vegetable_2113.Robot is no longer close sink_19.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. 
##############################
From agent.py
Human Instruction: The robot needs to ensure the faucet is turned off after washing the vegetable. Once this is done, the sub-task of washing all the vegetables will be complete.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_vegetable_2113 around fridge_126.
Action 5: Grab food_vegetable_2113.
Action 6: Walk to sink_19.
Action 7: Put food_vegetable_2113 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_vegetable_2113.
Action 11: Wash food_vegetable_2113.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_carrot_2086_around_cupboard_118(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_food_2073_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_drawing_201_around_filing_cabinet_200(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(drawing,filing_cabinet_instance)
        else:
            exp(drawing,filing_cabinet_instance)
    eff:
        unknown[drawing]=False
        close[drawing,filing_cabinet_instance]=True
        close[filing_cabinet_instance,drawing]=True
    

#exp_behavior_end

#goal_representation

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

##############################
From agent.py-> find a plan in act()
wash_executor(food_vegetable_2113)
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. 
##############################
From agent.py
Human Instruction: You need to ensure the faucet is turned off after washing the vegetable to complete this sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_vegetable_2113 around fridge_126.
Action 5: Grab food_vegetable_2113.
Action 6: Walk to sink_19.
Action 7: Put food_vegetable_2113 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_vegetable_2113.
Action 11: Wash food_vegetable_2113.
Action 12: Wash food_vegetable_2113.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the vegetable

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable) and dirty(vegetable)
        # Select a vegetable instance that needs washing

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_food_2046_around_cupboard_118(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_food,cupboard_instance)
        else:
            exp(food_food,cupboard_instance)
    eff:
        unknown[food_food]=False
        close[food_food,cupboard_instance]=True
        close[cupboard_instance,food_food]=True
    

behavior find_food_food_2073_around_kitchen_counter_119(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

##############################
From agent.py-> find a plan in act()
wash_executor(food_vegetable_2113)
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_tray_128_around_cupboard_118(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tray,cupboard_instance)
        else:
            exp(tray,cupboard_instance)
    eff:
        unknown[tray]=False
        close[tray,cupboard_instance]=True
        close[cupboard_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure that the vegetable is placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable instance

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure that the vegetable is placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetable instance

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close food_vegetable_2113.Robot is no longer close sink_19.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(pot_2138, cupboard_117)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(pot_2138, cupboard_117)
Fail to find pot_2138 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_78)putin_executor(food_vegetable_2113, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close sink_19. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Find oil_2013. Find food_cheese_2072. Find food_food_2064. Find food_carrot_2015. Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_78. Robot is close oven_127. Robot is no longer close sink_19.
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_78. Robot is close oven_127. food_vegetable_2113 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_78. Robot is close oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close pot_78. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_vegetable_2113.Robot is no longer close oven_127.
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot is inside dining_room_41. Robot is close pot_78. Robot is close kitchen_counter_119. Robot is close stove_2135. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_78. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
Human Instruction: Make sure you turn off the faucet after washing the vegetables to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_vegetable_2113 around fridge_126.
Action 5: Grab food_vegetable_2113.
Action 6: Walk to sink_19.
Action 7: Put food_vegetable_2113 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_vegetable_2113.
Action 11: Wash food_vegetable_2113.
Action 12: Wash food_vegetable_2113.
Action 13: Wash food_vegetable_2113.
Action 14: Walk to cupboard_118.
Action 15: Open cupboard_118.
Action 16: look for pot_2138 around cupboard_118.
Action 17: Walk to cupboard_117.
Action 18: look for pot_2138 around cupboard_117.
Action 19: Walk to food_vegetable_2113.
Action 20: Grab food_vegetable_2113.
Action 21: Walk to pot_78.
Action 22: Put food_vegetable_2113 into pot_78.
Action 23: Grab pot_78.
Action 24: Walk to stove_2135.
Action 25: Put pot_78 on stove_2135.
Action 26: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetables, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetables, pot)
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. Robot is no longer close pot_78.Robot is no longer close stove_2135.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close pot_2138. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_78. Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_78. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close pot_78.
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_2138)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_2138. Robot is close kitchen_counter_119. food_vegetable_2113 released by right hand. 
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer close food_vegetable_2113.
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure the faucet is turned off after washing the vegetables to complete the sub-task.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_vegetable_2113 around fridge_126.
Action 5: Grab food_vegetable_2113.
Action 6: Walk to sink_19.
Action 7: Put food_vegetable_2113 into sink_19.
Action 8: Walk to faucet_20.
Action 9: Switch on faucet_20.
Action 10: Walk to food_vegetable_2113.
Action 11: Wash food_vegetable_2113.
Action 12: Wash food_vegetable_2113.
Action 13: Wash food_vegetable_2113.
Action 14: Walk to cupboard_118.
Action 15: Open cupboard_118.
Action 16: look for pot_2138 around cupboard_118.
Action 17: Walk to cupboard_117.
Action 18: look for pot_2138 around cupboard_117.
Action 19: Walk to food_vegetable_2113.
Action 20: Grab food_vegetable_2113.
Action 21: Walk to pot_78.
Action 22: Put food_vegetable_2113 into pot_78.
Action 23: Grab pot_78.
Action 24: Walk to stove_2135.
Action 25: Put pot_78 on stove_2135.
Action 26: Switch on stove_2135.
Action 27: Walk to pot_2138.
Action 28: Open pot_2138.
Action 29: Walk to food_vegetable_2113.
Action 30: Grab food_vegetable_2113.
Action 31: Walk to pot_2138.
Action 32: Put food_vegetable_2113 into pot_2138.
Action 33: Grab pot_2138.
Action 34: Walk to stove_2135.
Action 35: Put pot_2138 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

behavior find_tray_128_around_kitchen_counter_122(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_cup_2132_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove instance with the specific ID

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_food_2074_around_food_cheese_2072(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_cheese_instance:item where:
            is_food_cheese(food_cheese_instance) and id[food_cheese_instance]==2072
        achieve close_char(char,food_cheese_instance)
        if can_open(food_cheese_instance):
            achieve_once open(food_cheese_instance)
            exp(food_food,food_cheese_instance)
        else:
            exp(food_food,food_cheese_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_cheese_instance]=True
        close[food_cheese_instance,food_food]=True
    

behavior find_food_food_2021_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_onion_2048_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the vegetables in a pot and boil them on the stove." ?
Answer: Put the vegetables in a pot. Fill the pot with water. Put the pot on the stove. Turn on the stove. Then turn off the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2112_around_dishwasher_129(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_turkey,dishwasher_instance)
        else:
            exp(food_turkey,dishwasher_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,dishwasher_instance]=True
        close[dishwasher_instance,food_turkey]=True
    

behavior find_food_food_2046_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

behavior find_food_food_2094_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_food_food_2021_around_kitchen_counter_123(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior put_vegetables_in_pot(vegetable: item, pot: item):
    body:
        achieve inside(vegetable, pot)
        # Ensure the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

behavior find_food_food_2021_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_food_2074_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_tray_2068_around_dishwasher_129(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2001_around_microwave_135(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==135
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(food_food,microwave_instance)
        else:
            exp(food_food,microwave_instance)
    eff:
        unknown[food_food]=False
        close[food_food,microwave_instance]=True
        close[microwave_instance,food_food]=True
    

behavior find_food_food_2064_around_food_food_2064(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==2064
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_dishwasher_129(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_vegetable,dishwasher_instance)
        else:
            exp(food_vegetable,dishwasher_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,dishwasher_instance]=True
        close[dishwasher_instance,food_vegetable]=True
    

behavior find_food_food_2021_around_kitchen_counter_122(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

behavior find_food_food_1000_around_food_food_1000(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_food,food_food_instance)
        else:
            exp(food_food,food_food_instance)
    eff:
        unknown[food_food]=False
        close[food_food,food_food_instance]=True
        close[food_food_instance,food_food]=True
    

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_tray_2068_around_kitchen_counter_122(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        if exists faucet: item: is_faucet(faucet) and is_on(faucet):
            bind faucet: item where:
                is_faucet(faucet) and is_on(faucet)
            achieve_once is_off(faucet)
            # Ensure the faucet is turned off after washing vegetables

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        if exists faucet: item: is_faucet(faucet) and is_on(faucet):
            bind faucet: item where:
                is_faucet(faucet) and is_on(faucet)
            achieve_once is_off(faucet)
            # Ensure the faucet is turned off after washing vegetables

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close pot_2138.Robot is no longer close kitchen_counter_119.Robot is no longer close stove_2135.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_dishwasher_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(pot,dishwasher_instance)
        else:
            exp(pot,dishwasher_instance)
    eff:
        unknown[pot]=False
        close[pot,dishwasher_instance]=True
        close[dishwasher_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(bowl_2140)putin_executor(food_vegetable_2113, bowl_2140)
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_2138. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close pot_2138. Grabbing food_vegetable_2113 by right hand. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close bowl_2140. Robot is close kitchen_counter_119. Robot is no longer close pot_2138.
##############################
From agent.py
putin_executor(food_vegetable_2113, bowl_2140)
Robot is inside dining_room_41. Robot is close food_vegetable_2113. Robot is close bowl_2140. Robot is close kitchen_counter_119. food_vegetable_2113 released by right hand. 
##############################
