From agent.py
Reset goals: The sub-goals are: 
['1. Find a sink in the bathroom.', '2. Fill the sink with water and add soap to make it soapy.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2155_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_toilet_paper_2076_around_bathroom_cabinet_17(toilet_paper:item):
    goal: not unknown(toilet_paper)
    body:
        assert is_toilet_paper(toilet_paper)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(toilet_paper,bathroom_cabinet_instance)
        else:
            exp(toilet_paper,bathroom_cabinet_instance)
    eff:
        unknown[toilet_paper]=False
        close[toilet_paper,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,toilet_paper]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If there is an unvisited sink, approach to find it
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            achieve close_char(char, sink)
        else:
            # If no sink is known, explore to find one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If there is an unvisited sink, approach to find it
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            achieve close_char(char, sink)
        else:
            # If no sink is known, explore to find one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")

##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_detergent_2155_around_detergent_2155(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2155
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(detergent,detergent_instance)
        else:
            exp(detergent,detergent_instance)
    eff:
        unknown[detergent]=False
        close[detergent,detergent_instance]=True
        close[detergent_instance,detergent]=True
    

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_soap(sink: item, soap: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve inside(soap, sink)
        # Add soap to the sink to make it soapy

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19

        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        fill_sink_with_water_and_soap(sink, soap)
        # Execute the behavior to fill the sink with water and add soap

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_soap(sink: item, soap: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve inside(soap, sink)
        # Add soap to the sink to make it soapy

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19

        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        fill_sink_with_water_and_soap(sink, soap)
        # Execute the behavior to fill the sink with water and add soap

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(soap_2125)grab_executor(soap_2125)walk_executor(sink_19)putin_executor(soap_2125, sink_19)
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(soap_2125)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(soap_2125)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Grabbing soap_2125 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Robot is close bathroom_counter_18. 
##############################
From agent.py
putin_executor(soap_2125, sink_19)
Robot is inside bathroom_1. Robot is close sink_19. Robot is close soap_2125. Robot is close bathroom_counter_18. soap_2125 released by right hand. 
##############################
