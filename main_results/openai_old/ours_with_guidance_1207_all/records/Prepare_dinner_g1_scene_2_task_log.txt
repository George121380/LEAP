From agent.py
Reset goals: The sub-goals are: 
['Boil some rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
def has_pot_on_stove(stove:item):
    # Function to check if there is a pot on a specified stove
    symbol has_pot=exists pot: item : is_pot(pot) and on(pot, stove)
    return has_pot

def has_rice_in_pot(pot:item):
    # Function to check if there is rice inside a specified pot
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_rice

behavior __goal__():
    body:
        if exists stove: item : is_stove(stove) and has_pot_on_stove(stove):
            # If a stove with a pot is found, select it
            bind stove: item where:
                is_stove(stove) and has_pot_on_stove(stove)
            
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            
            if not has_water(pot):
                # Check if there is water and then fill it if necessary
                bind sink: item where:
                    is_sink(sink)
                fill_bowl_with_water(pot, sink) # Fill the pot with water if empty

            if not has_rice_in_pot(pot):
                # Check if the pot contains rice, and add if necessary
                bind rice: item where:
                    is_food_rice(rice)
                achieve inside(rice, pot)

            achieve is_on(stove)
            
        else:
            # If no pot found on stove, observe all stovetops
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check if there is a pot on the stove")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_bowl_with_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_54_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_bowl_2097_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#goal_representation
 
def has_pot_on_stove(stove:item):
    # Function to check if there is a pot on a specified stove
    symbol has_pot=exists pot: item : is_pot(pot) and on(pot, stove)
    return has_pot

def has_rice_in_pot(pot:item):
    # Function to check if there is rice inside a specified pot
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_rice

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet
    
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior __goal__():
    body:
        if exists stove: item : is_stove(stove) and has_pot_on_stove(stove):
            # If a stove with a pot is found, select it
            bind stove: item where:
                is_stove(stove) and has_pot_on_stove(stove)
            
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            
            if not has_water(pot):
                # Check if there is water and then fill it if necessary
                bind sink: item where:
                    is_sink(sink)
                fill_pot_with_water(pot, sink)  # Fill the pot with water if empty

            if not has_rice_in_pot(pot):
                # Check if the pot contains rice, and add if necessary
                bind rice: item where:
                    is_food_rice(rice)
                achieve inside(rice, pot)

            achieve is_on(stove)
            
        else:
            # If no pot found on stove, observe all stovetops
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check if there is a pot on the stove")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pot_on_stove(stove:item):
    # Function to check if there is a pot on a specified stove
    symbol has_pot=exists pot: item : is_pot(pot) and on(pot, stove)
    return has_pot

def has_rice_in_pot(pot:item):
    # Function to check if there is rice inside a specified pot
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_rice

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet
    
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior __goal__():
    body:
        if exists stove: item : is_stove(stove) and has_pot_on_stove(stove):
            # If a stove with a pot is found, select it
            bind stove: item where:
                is_stove(stove) and has_pot_on_stove(stove)
            
            bind pot: item where:
                is_pot(pot) and on(pot, stove)
            
            if not has_water(pot):
                # Check if there is water and then fill it if necessary
                bind sink: item where:
                    is_sink(sink)
                fill_pot_with_water(pot, sink)  # Fill the pot with water if empty

            if not has_rice_in_pot(pot):
                # Check if the pot contains rice, and add if necessary
                bind rice: item where:
                    is_food_rice(rice)
                achieve inside(rice, pot)

            achieve is_on(stove)
            
        else:
            # If no pot found on stove, observe all stovetops
            foreach stove: item:
                if is_stove(stove) and not visited(stove):
                    observe(stove, "Check if there is a pot on the stove")

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check if there is a pot on the stove)walk_executor(oven_141)open_executor(oven_141)obs(oven_141, Check if there is a pot on the stove)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
obs(stove_2090, Check if there is a pot on the stove)
Get this information:  stove_2090 is on kitchen_counter_129. stove_2090 is inside dining_room_1. stove_2090 is close to kitchen_counter_129. stove_2090 is close to character_219. stove_2090 is OFF. stove_2090 is OPEN.
##############################
From agent.py
walk_executor(oven_141)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. 
##############################
From agent.py
obs(oven_141, Check if there is a pot on the stove)
Get this information:  pot_54 is on oven_141. food_butter_2018 is inside oven_141. food_onion_2026 is inside oven_141. tray_142 is inside oven_141. dough_2021 is inside oven_141. oven_141 is close to kitchen_counter_129. oven_141 is close to wall_2. oven_141 is close to cupboard_131. oven_141 is close to kitchen_counter_132. oven_141 is close to cupboard_130. oven_141 is close to faucet_134. oven_141 is close to food_butter_2018. oven_141 is close to wall_8. oven_141 is close to dough_2021. oven_141 is close to food_onion_2026. oven_141 is close to stovefan_139. oven_141 is close to walllamp_46. oven_141 is close to tray_142. oven_141 is close to floor_16. oven_141 is close to knifeblock_52. oven_141 is close to floor_21. oven_141 is close to pot_54. oven_141 is close to character_219. oven_141 is inside dining_room_1. oven_141 is OFF. oven_141 is PLUGGED_IN. oven_141 is CLEAN. oven_141 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure that a pot is placed on the stove, filled with water, and contains rice. Then, turn on the stove to boil the rice.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: Observe around stove_2090 with the question of Check if there is a pot on the stove.
Action 4: Walk to oven_141.
Action 5: Open oven_141.
Action 6: Observe around oven_141 with the question of Check if there is a pot on the stove.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_pot_on_stove(stove:item):
    # Determine whether a pot is on the stove
    symbol pot_on_stove=exists pot:item: is_pot(pot) and on(pot, stove)
    return pot_on_stove

def is_pot_has_rice_and_water(pot:item):
    # Check if the pot contains rice and water
    symbol has_rice_and_water=exists rice:item: is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_rice_and_water

behavior boil_rice(pot:item, stove:item):
    body:
        if not is_pot_on_stove(stove):
            achieve_once on(pot, stove)
            # Place the pot on the stove if it isnt already

        if not is_pot_has_rice_and_water(pot):
            # Ensure pot has rice and water
            observe(pot, "Check if the pot has rice and water")
        
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        boil_rice(pot, stove)
        # Proceed to boil rice using the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_pot_on_stove(stove:item):
    # Determine whether a pot is on the stove
    symbol pot_on_stove=exists pot:item: is_pot(pot) and on(pot, stove)
    return pot_on_stove

def is_pot_has_rice_and_water(pot:item):
    # Check if the pot contains rice and water
    symbol has_rice_and_water=exists rice:item: is_food_rice(rice) and inside(rice, pot) and has_water(pot)
    return has_rice_and_water

behavior boil_rice(pot:item, stove:item):
    body:
        if not is_pot_on_stove(stove):
            achieve_once on(pot, stove)
            # Place the pot on the stove if it isnt already

        if not is_pot_has_rice_and_water(pot):
            # Ensure pot has rice and water
            observe(pot, "Check if the pot has rice and water")
        
        achieve is_on(stove)
        # Turn on the stove to boil the rice

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        boil_rice(pot, stove)
        # Proceed to boil rice using the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, Check if the pot has rice and water)walk_executor(stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close food_butter_2018.Robot is no longer close dough_2021.Robot is no longer close food_onion_2026.Robot is no longer close oven_141.Robot is no longer close tray_142.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
obs(pot_2093, Check if the pot has rice and water)
Get this information:  pot_2093 is on stove_2090. pot_2093 is inside dining_room_1. pot_2093 is close to character_219. pot_2093 is close to stove_2090. pot_2093 is OPEN.
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close kitchen_counter_129. Robot is no longer close pot_2093.
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close kitchen_counter_129. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close kitchen_counter_129. 
##############################
From agent.py
Human Instruction: You need to ensure that pot_2093 contains both rice and water before boiling. The information from action13 does not confirm the presence of rice and water in pot_2093. Ensure that the pot is filled appropriately before turning on the stove.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: Observe around stove_2090 with the question of Check if there is a pot on the stove.
Action 4: Walk to oven_141.
Action 5: Open oven_141.
Action 6: Observe around oven_141 with the question of Check if there is a pot on the stove.
Action 7: Walk to pot_2093.
Action 8: Grab pot_2093.
Action 9: Walk to stove_2090.
Action 10: Put pot_2093 on stove_2090.
Action 11: Walk to pot_2093.
Action 12: Open pot_2093.
Action 13: Observe around pot_2093 with the question of Check if the pot has rice and water.
Action 14: Walk to stove_2090.
Action 15: Close stove_2090.
Action 16: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_fridge_140(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_rice,fridge_instance)
        else:
            exp(food_rice,fridge_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,fridge_instance]=True
        close[fridge_instance,food_rice]=True
    

behavior find_cup_2089_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_rice_and_water(pot:item):
    # Function to check if a pot contains both rice and water
    symbol has_rice_and_water=exists o1: item, o2: item : is_food_rice(o1) and has_water(o2) and inside(o1, pot) and inside(o2, pot)
    return has_rice_and_water

behavior add_water_and_rice(pot:item):
    body:
        if not pot_has_rice_and_water(pot):
            observe(pot, "Ensure that the pot has rice and water")

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        add_water_and_rice(pot)
        # Ensure pot has rice and water
        
        start_boiling(pot, stove)
        # Start boiling the rice

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_rice_and_water(pot:item):
    # Function to check if a pot contains both rice and water
    symbol has_rice_and_water=exists o1: item, o2: item : is_food_rice(o1) and has_water(o2) and inside(o1, pot) and inside(o2, pot)
    return has_rice_and_water

behavior add_water_and_rice(pot:item):
    body:
        if not pot_has_rice_and_water(pot):
            observe(pot, "Ensure that the pot has rice and water")

behavior start_boiling(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Ensure the pot is on the stove
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        add_water_and_rice(pot)
        # Ensure pot has rice and water
        
        start_boiling(pot, stove)
        # Start boiling the rice

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)obs(pot_2093, Ensure that the pot has rice and water)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
obs(pot_2093, Ensure that the pot has rice and water)
Get this information:  pot_2093 is on stove_2090. pot_2093 is inside dining_room_1. pot_2093 is close to stove_2090. pot_2093 is close to character_219. pot_2093 is OPEN.
##############################
