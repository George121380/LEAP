From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_415_around_computer_417(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a sittable chair in front of the computer, inside the home office

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair_in_front_of_computer(chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a sittable chair instance

        sit_on_chair_in_front_of_computer(chair)
        # Execute the behavior to sit on the chair in front of the computer
#goal_representation_end

##############################
From agent.py->reset_goal
behavior sit_on_chair_in_front_of_computer(chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a sittable chair instance

        sit_on_chair_in_front_of_computer(chair)
        # Execute the behavior to sit on the chair in front of the computer
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(chair_103, home_office_319)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(chair_103, home_office_319)
Fail to find chair_103 around home_office_319. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)exp(chair_103, chair_356)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. 
##############################
From agent.py
exp(chair_103, chair_356)
Fail to find chair_103 around chair_356. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)exp(chair_103, computer_417)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(computer_417)
Robot is inside home_office_319. Robot is close computer_417. Robot is no longer close chair_356.
##############################
From agent.py
exp(chair_103, computer_417)
Fail to find chair_103 around computer_417. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(chair_103, desk_104)walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(desk_104)
Find keyboard_168. Find mouse_166. Find chair_103. Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer inside home_office_319.Robot is no longer close computer_417.
##############################
From agent.py
exp(chair_103, desk_104)
Find chair_103. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)sit_executor(chair_103)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
sit_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
From agent.py
Human Instruction: You need to find the chair in front of the computer in the home office and sit on it. Currently, you are in the bedroom sitting on a chair, which is not in front of the computer in the home office. Return to the home office, locate the appropriate chair in front of the computer, and sit on that chair.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: look for chair_103 around home_office_319.
Action 3: Walk to chair_356.
Action 4: look for chair_103 around chair_356.
Action 5: Walk to computer_417.
Action 6: look for chair_103 around computer_417.
Action 7: Walk to desk_104.
Action 8: look for chair_103 around desk_104.
Action 9: Walk to chair_103.
Action 10: Sit on chair_103.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_closetdrawer_116(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(chair,closetdrawer_instance)
        else:
            exp(chair,closetdrawer_instance)
    eff:
        unknown[chair]=False
        close[chair,closetdrawer_instance]=True
        close[closetdrawer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office) and sittable(chair)
        # Select the sittable chair in front of the computer within the home office

        achieve close_char(char, chair)
        # Ensure you are close to this specific chair

        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_tray_296_around_oven_295(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(tray,oven_instance)
        else:
            exp(tray,oven_instance)
    eff:
        unknown[tray]=False
        close[tray,oven_instance]=True
        close[oven_instance,tray]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a sittable chair in front of the computer in the home office
        
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair in front of the computer in the home office
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the chair in front of the computer in the home office and sit on it." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Go to the home office and sit on the chair in front of the computer.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_cpuscreen_171(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(chair,cpuscreen_instance)
        else:
            exp(chair,cpuscreen_instance)
    eff:
        unknown[chair]=False
        close[chair,cpuscreen_instance]=True
        close[cpuscreen_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(chair_356)sit_executor(chair_356)
##############################
From agent.py
standup_executor(char)
Robot is inside bedroom_67. Robot is close chair_103. Robot is on chair_103. 
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_103. Robot is no longer inside bedroom_67.Robot is no longer close chair_103.
##############################
From agent.py
sit_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_103. Robot is on chair_356. Robot is facing computer_417. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch(mouse)
        # Execute the behavior to touch the mouse to turn it on
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch(mouse)
        # Execute the behavior to touch the mouse to turn it on
##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_413)touch_executor(mouse_413)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_103. Robot is on chair_356. Robot is facing computer_417. 
##############################
From agent.py
walk_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_103. Robot is on chair_356. Robot is no longer close chair_356.Robot is no longer facing computer_417.
##############################
From agent.py
touch_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_103. Robot is on chair_356. 
##############################
