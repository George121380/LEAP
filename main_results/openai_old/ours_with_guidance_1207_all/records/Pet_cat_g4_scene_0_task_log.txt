From agent.py
Reset goals: The sub-goals are: 
['Wash your cat in a sink.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_sink_231(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_cat_2055_around_closetdrawer_116(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cat,closetdrawer_instance)
        else:
            exp(cat,closetdrawer_instance)
    eff:
        unknown[cat]=False
        close[cat,closetdrawer_instance]=True
        close[closetdrawer_instance,cat]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cat_in_sink(cat:item, sink:item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat:item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink
        
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink)
        # Select the sink instance

        put_cat_in_sink(cat, sink)
        wash_cat(cat)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior put_cat_in_sink(cat:item, sink:item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat:item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink
        
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink)
        # Select the sink instance

        put_cat_in_sink(cat, sink)
        wash_cat(cat)

##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_116)exp(cat_2055, closetdrawer_116)walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(closetdrawer_116)
Find hanger_110. Find hanger_140. Find hanger_109. Find hanger_132. Find hanger_113. Find hanger_112. Find hanger_124. Find hanger_115. Find hanger_130. Find hanger_134. Find hanger_136. Find hanger_138. Find hanger_111. Find hanger_114. Find hanger_126. Find hanger_128. Find hanger_141. Find hanger_142. Robot is inside bedroom_67. Robot is close closetdrawer_116. Robot is close dresser_108. Robot is close closetdrawer_119. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(cat_2055, closetdrawer_116)
Fail to find cat_2055 around closetdrawer_116. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_160)exp(cat_2055, closetdrawer_160)walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(closetdrawer_160)
Find mat_173. Robot is inside bedroom_67. Robot is close closetdrawer_160. Robot is close dresser_123. Robot is no longer close closetdrawer_116.Robot is no longer close dresser_108.Robot is no longer close closetdrawer_119.
##############################
From agent.py
exp(cat_2055, closetdrawer_160)
Fail to find cat_2055 around closetdrawer_160. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(cat_2055, sink_231)walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(sink_231)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find plate_1000. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find soap_2054. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close sink_231. Robot is no longer inside bedroom_67.Robot is no longer close closetdrawer_160.Robot is no longer close dresser_123.
##############################
From agent.py
exp(cat_2055, sink_231)
Fail to find cat_2055 around sink_231. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Identify a sink suitable for washing a cat.  ', '2. Wash the cat in the identified sink.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2073_around_washing_machine_2007(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_soap_2053_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        if exists suitable_sink: item : is_sink(suitable_sink) and not visited(suitable_sink):
            # If a suitable sink is already known, bind and move closer to it
            bind suitable_sink: item where:
                is_sink(suitable_sink) and not visited(suitable_sink)
            achieve close_char(char, suitable_sink)
        
        else:
            # If no suitable sink is known, explore unvisited items
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if this sink is suitable for washing a cat")
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2054_around_bathroom_counter_41(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==41
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2084_around_washing_machine_2007(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
behavior is_sink_suitable_for_washing_cat(sink: item):
    body:
        observe(sink, "Check if this sink is suitable for washing a cat")
        # Observe the sink to determine if it is suitable for washing a cat

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If a sink is found and has not been visited, check its suitability for washing a cat
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            is_sink_suitable_for_washing_cat(sink)   
        else:
            # If no suitable sink is found, explore to identify one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    is_sink_suitable_for_washing_cat(sink)   
            # Observe each unvisited sink in the environment to check its suitability for washing a cat
#goal_representation_end

##############################
From agent.py->reset_goal
behavior is_sink_suitable_for_washing_cat(sink: item):
    body:
        observe(sink, "Check if this sink is suitable for washing a cat")
        # Observe the sink to determine if it is suitable for washing a cat

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If a sink is found and has not been visited, check its suitability for washing a cat
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            is_sink_suitable_for_washing_cat(sink)   
        else:
            # If no suitable sink is found, explore to identify one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    is_sink_suitable_for_washing_cat(sink)   
            # Observe each unvisited sink in the environment to check its suitability for washing a cat
##############################
From agent.py-> find a plan in act()
walk_executor(sink_42)obs(sink_42, Check if this sink is suitable for washing a cat)
##############################
From agent.py
walk_executor(sink_42)
Find basket_for_clothes_2006. Find towel_rack_34. Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.Robot is no longer close sink_231.
##############################
From agent.py
obs(sink_42, Check if this sink is suitable for washing a cat)
Get this information:  sink_42 is close to floor_2. sink_42 is close to floor_3. sink_42 is close to detergent_2084. sink_42 is close to soap_2053. sink_42 is close to floor_4. sink_42 is close to bathroom_cabinet_40. sink_42 is close to bathroom_counter_41. sink_42 is close to wall_9. sink_42 is close to faucet_43. sink_42 is close to wall_12. sink_42 is close to basket_for_clothes_2006. sink_42 is close to washing_machine_2007. sink_42 is close to cleaning_solution_2073. sink_42 is close to character_65. sink_42 is inside bathroom_1. sink_42 is inside bathroom_counter_41. soap_2053 is on sink_42. cleaning_solution_2073 is on sink_42. detergent_2084 is on sink_42. sink_42 is DIRTY.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_washing_machine_2007(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2007
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cat,washing_machine_instance)
        else:
            exp(cat,washing_machine_instance)
    eff:
        unknown[cat]=False
        close[cat,washing_machine_instance]=True
        close[washing_machine_instance,cat]=True
    

behavior find_towel_2058_around_towel_rack_34(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==34
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
behavior put_cat_in_sink(cat: item, sink: item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat: item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink instance with ID 42

        put_cat_in_sink(cat, sink)
        wash_cat(cat)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior put_cat_in_sink(cat: item, sink: item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat: item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink instance with ID 42

        put_cat_in_sink(cat, sink)
        wash_cat(cat)
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2007)open_executor(washing_machine_2007)exp(cat_2055, washing_machine_2007)walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close washing_machine_2007. Robot is no longer close bathroom_counter_41.Robot is no longer close sink_42.
##############################
From agent.py
open_executor(washing_machine_2007)
Robot is inside bathroom_1. Robot is close washing_machine_2007. 
##############################
From agent.py
exp(cat_2055, washing_machine_2007)
Fail to find cat_2055 around washing_machine_2007. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_346)exp(cat_2055, doorjamb_346)walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(doorjamb_346)
Find drawing_402. Find mouse_413. Find drawing_404. Robot is inside home_office_319. Robot is close doorjamb_346. Robot is no longer inside bathroom_1.Robot is no longer close washing_machine_2007.
##############################
From agent.py
exp(cat_2055, doorjamb_346)
Find cat_2055. 
##############################
From agent.py-> find a plan in act()
walk_executor(cat_2055)grab_executor(cat_2055)walk_executor(sink_42)putin_executor(cat_2055, sink_42)walk_executor(cat_2055)wash_executor(cat_2055)
##############################
From agent.py
walk_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. Robot is no longer close doorjamb_346.
##############################
From agent.py
grab_executor(cat_2055)
Robot is inside home_office_319. Robot is close couch_352. Robot is close cat_2055. Grabbing cat_2055 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside bathroom_1. Robot is close cat_2055. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer inside home_office_319.Robot is no longer close couch_352.
##############################
From agent.py
putin_executor(cat_2055, sink_42)
Robot is inside bathroom_1. Robot is close cat_2055. Robot is close bathroom_counter_41. Robot is close sink_42. cat_2055 released by right hand. 
##############################
From agent.py
walk_executor(cat_2055)
Robot is inside home_office_319. Robot is close cat_2055. Robot is close sink_42. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.
##############################
From agent.py
wash_executor(cat_2055)
Robot is inside home_office_319. Robot is close cat_2055. Robot is close sink_42. 
##############################
