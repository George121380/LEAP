From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water.', '2. Place the bowl on the table in the home office.', '3. Find your cat and place it on the table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_bowl_2142_around_kitchen_counter_122(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the bowl with water

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        if exists faucet:item: is_faucet(faucet) and close(faucet, sink):
            achieve_once is_off(faucet)
            # Turn the faucet off after filling the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink
        
        fill_bowl_with_water(bowl, sink)
        # Execute the behavior to fill the bowl with water

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [Variable<bowl: item>, Variable<sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2060_around_bookshelf_124(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_bowl_2140_around_cupboard_118(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the bowl with water

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after filling the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink
        
        fill_bowl_with_water(bowl, sink)
        # Execute the behavior to fill the bowl with water

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the bowl with water

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after filling the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink
        
        fill_bowl_with_water(bowl, sink)
        # Execute the behavior to fill the bowl with water

##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(bowl_2140, cupboard_118)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(bowl_2140, cupboard_118)
Fail to find bowl_2140 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(bowl_2140, cupboard_117)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(bowl_2140, cupboard_117)
Fail to find bowl_2140 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(bowl_2140, kitchen_counter_122)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find spectacles_2153. Find fryingpan_2154. Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(bowl_2140, kitchen_counter_122)
Fail to find bowl_2140 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(bowl_2140, kitchen_counter_123)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
exp(bowl_2140, kitchen_counter_123)
Fail to find bowl_2140 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(bowl_2140, sink_120)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find ice_2024. Find soap_2126. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
exp(bowl_2140, sink_120)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(sink_19)putin_executor(bowl_2140, sink_19)walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. Robot is no longer close sink_120.
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
putin_executor(bowl_2140, sink_19)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close sink_19. bowl_2140 released by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.Robot is no longer close bowl_2140.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close bowl_2140. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close sink_19. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close sink_19.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_table_cloth_2005_around_table_199(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==199
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(table_cloth,table_instance)
        else:
            exp(table_cloth,table_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,table_instance]=True
        close[table_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl filled with water

        bind table: item where:
            is_table(table)
        # Select a table

        place_bowl_on_table(bowl, table)
        # Execute the behavior to place the bowl on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_table_cloth_2005_around_home_office_241(table_cloth:item):
    goal: not unknown(table_cloth)
    body:
        assert is_table_cloth(table_cloth)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(table_cloth,home_office_instance)
        else:
            exp(table_cloth,home_office_instance)
    eff:
        unknown[table_cloth]=False
        close[table_cloth,home_office_instance]=True
        close[home_office_instance,table_cloth]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        
        bind table: item where:
            is_table(table) and is_home_office(table)
        
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Place the bowl with water on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

behavior find_phone_2017_around_computer_209(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
        # Execute the behavior to place the bowl on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_fridge_126(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

behavior find_food_sugar_2111_around_fridge_126(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl that is already filled with water

        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select the table located in the home office

        place_bowl_on_table(bowl, table)
        # Move the bowl with water to the table in the home office

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2133_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind table: item where:
            is_table(table) and inside(table, item) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
        # Select the table in the home office

        place_bowl_on_table(bowl, table)
        # Execute the behavior to place the bowl on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5635, column 64.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2132_around_dishwasher_129(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==129
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cup,dishwasher_instance)
        else:
            exp(cup,dishwasher_instance)
    eff:
        unknown[cup]=False
        close[cup,dishwasher_instance]=True
        close[dishwasher_instance,cup]=True
    

#goal_representation

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        
        bind table: item where:
            is_table(table) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
            
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'home_office') at line 5634, column 40.
Expected one of: 
	* COMMA
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_shirt_2158_around_basket_for_clothes_2078(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_shirt,basket_for_clothes_instance)
        else:
            exp(clothes_shirt,basket_for_clothes_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_shirt]=True
    

behavior find_cup_2133_around_fridge_126(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        
        bind table: item where:
            is_table(table) and exists home_office: item : is_home_office(home_office) and inside(table, home_office)
            
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select a bowl filled with water

        bind table: item where:
            is_table(table) and is_home_office(table)
        # Select a table in the home office

        place_bowl_on_table(bowl, table)
        # Execute the behavior to place the bowl on the table in the home office

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. place the bowl on the table in the home office." ?
Answer: Place the bowl on the table in the home office.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_fridge_126(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(cup,fridge_instance)
        else:
            exp(cup,fridge_instance)
    eff:
        unknown[cup]=False
        close[cup,fridge_instance]=True
        close[fridge_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the instance of a bowl

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the instance of a bowl

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(table_270)
Find shampoo_2019. Find pillow_286. Find pencil_2014. Find pillow_287. Find brush_2002. Find drawing_288. Find shoes_2033. Find phone_2017. Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
put_executor(bowl_2140, table_270)
Find check_2075. Find keyboard_278. Find blow_dryer_2057. Find stamp_2043. Find hanger_292. Find phone_2147. Find headset_2131. Find mat_284. Find cd_2145. Find stamp_2022. Find cat_2069. Find hanger_293. Find chair_271. Find cd_player_2129. Find clothes_pants_2036. Find remote_control_2124. Find pencil_2020. Find mouse_280. Find headset_2146. Find hanger_294. Find dvd_player_2130. Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. bowl_2140 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toy_2056_around_trashcan_99(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind trashcan_instance:item where:
            is_trashcan(trashcan_instance) and id[trashcan_instance]==99
        achieve close_char(char,trashcan_instance)
        if can_open(trashcan_instance):
            achieve_once open(trashcan_instance)
            exp(toy,trashcan_instance)
        else:
            exp(toy,trashcan_instance)
    eff:
        unknown[toy]=False
        close[toy,trashcan_instance]=True
        close[trashcan_instance,toy]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_cat_on_table(cat: item, table: item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select an instance of a cat

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270

        place_cat_on_table(cat, table)
        # Execute the behavior to place the cat on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_cat_on_table(cat: item, table: item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select an instance of a cat

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270

        place_cat_on_table(cat, table)
        # Execute the behavior to place the cat on the table

##############################
From agent.py-> find a plan in act()
walk_executor(cat_2069)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Robot is no longer close bowl_2140.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toy_2056_around_cd_2145(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind cd_instance:item where:
            is_cd(cd_instance) and id[cd_instance]==2145
        achieve close_char(char,cd_instance)
        if can_open(cd_instance):
            achieve_once open(cd_instance)
            exp(toy,cd_instance)
        else:
            exp(toy,cd_instance)
    eff:
        unknown[toy]=False
        close[toy,cd_instance]=True
        close[cd_instance,toy]=True
    

behavior find_laser_pointer_2034_around_desk_272(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laser_pointer,desk_instance)
        else:
            exp(laser_pointer,desk_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,desk_instance]=True
        close[desk_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 (home office table)

        bind cat: item where:
            is_cat(cat) and id[cat]==2069
        # Select cat with ID 2069

        achieve close_char(char, cat)
        # Approach the cat to engage with it

        achieve on(cat, table)
        # Place the cat on the table

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_hamburger_2096_around_fridge_126(food_hamburger:item):
    goal: not unknown(food_hamburger)
    body:
        assert is_food_hamburger(food_hamburger)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_hamburger,fridge_instance)
        else:
            exp(food_hamburger,fridge_instance)
    eff:
        unknown[food_hamburger]=False
        close[food_hamburger,fridge_instance]=True
        close[fridge_instance,food_hamburger]=True
    

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_laser_pointer_2034_around_desk_272(laser_pointer:item):
    goal: not unknown(laser_pointer)
    body:
        assert is_laser_pointer(laser_pointer)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laser_pointer,desk_instance)
        else:
            exp(laser_pointer,desk_instance)
    eff:
        unknown[laser_pointer]=False
        close[laser_pointer,desk_instance]=True
        close[desk_instance,laser_pointer]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270 in the home office
        
        bind cat: item where:
            is_cat(cat) and id[cat] == 2069
        # Select the cat with ID 2069

        achieve on(cat, table)
        # Place the cat on the table

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270 in the home office
        
        bind cat: item where:
            is_cat(cat) and id[cat] == 2069
        # Select the cat with ID 2069

        achieve on(cat, table)
        # Place the cat on the table

##############################
From agent.py-> find a plan in act()
open_executor(dresser_274)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
open_executor(dresser_274)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. 
##############################
From agent.py
grab_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Grabbing cat_2069 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close cat_2069. Robot is close couch_269. Robot is close table_270. Robot is no longer close dresser_274.
##############################
From agent.py
put_executor(cat_2069, table_270)
Robot is inside home_office_241. Robot is close cat_2069. Robot is close couch_269. Robot is close table_270. cat_2069 released by right hand. 
##############################
