From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces and then put it back in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Cut the chicken into pieces

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Put the chicken back into the fridge

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        cut_chicken(chicken)
        # Cut the chicken into pieces

        store_chicken_in_fridge(chicken, fridge)
        # Put the chicken back in the fridge

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)

behavior store_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Ensure the fridge is closed
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of fridge

        cut_chicken(chicken)
        store_chicken_in_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the chicken into pieces and then put it back in the fridge." ?
Answer: Cut the chicken into pieces, then put back to the fridge.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)
        # Ensure the chicken is cut into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken back inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge is closed

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of the fridge

        cut_chicken(chicken)
        store_in_fridge(chicken, fridge)
        close_fridge(fridge)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cutting_board_2080_around_kitchen_counter_128(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def in_fridge(chicken:item, fridge:item):
    # Determine if the chicken is already inside the fridge
    symbol is_in_fridge=exists c: item : inside(chicken, fridge)
    return is_in_fridge

behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken)

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        if not in_fridge(chicken, fridge):
            cut_chicken(chicken)
            store_in_fridge(chicken, fridge)
            close_fridge(fridge)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
