From agent.py
Reset goals: The sub-goals are: 
['Boil some rice by pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_snack_2069_around_fridge_140(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

def is_food_rice(pot: item):
    # Check if theres rice in the pot
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_rice

behavior start_boiling_rice(stove: item, pot: item):
    body:
        if not is_food_rice(pot):
            assert_hold has_water(pot)
            # Ensure the pot has water before boiling
        achieve on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        # Ensure the pot is filled with water

        start_boiling_rice(stove, pot)
        # Start the rice boiling process

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

def is_food_rice(pot: item):
    # Check if theres rice in the pot
    symbol has_rice=exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_rice

behavior start_boiling_rice(stove: item, pot: item):
    body:
        if not is_food_rice(pot):
            assert_hold has_water(pot)
            # Ensure the pot has water before boiling
        achieve on(pot, stove)
        # Ensure the pot is placed on the stove
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot)
        # Ensure the pot is filled with water

        start_boiling_rice(stove, pot)
        # Start the rice boiling process

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to fill the pot with water and ensure there is rice inside the pot before starting the boiling process. Currently, the pot has been placed on the stove and the stove has been turned on, but the pot does not have water or rice in it.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water_and_rice(pot: item, faucet: item, rice: item):
    body:
        achieve has_water(pot) 
        # Ensure the pot is filled with water
        
        achieve inside(rice, pot) 
        # Ensure the rice is inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and on(pot, stove_2090)
        # Select the pot on the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select an instance of a faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select an instance of rice

        fill_pot_with_water_and_rice(pot, faucet, rice)
        # Fill the pot with water and add rice

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2090; available variables: [Variable<pot: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#goal_representation
 
behavior fill_pot_with_water_and_rice(pot: item, faucet: item, rice: item):
    body:
        achieve has_water(pot) 
        # Ensure the pot is filled with water

        achieve inside(rice, pot) 
        # Ensure the rice is inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select an instance of a faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select an instance of rice

        fill_pot_with_water_and_rice(pot, faucet, rice)
        # Fill the pot with water and add rice

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water_and_rice(pot: item, faucet: item, rice: item):
    body:
        achieve has_water(pot) 
        # Ensure the pot is filled with water

        achieve inside(rice, pot) 
        # Ensure the rice is inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and on(pot, stove)
        # Select the pot on the stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select an instance of a faucet

        bind rice: item where:
            is_food_rice(rice)
        # Select an instance of rice

        fill_pot_with_water_and_rice(pot, faucet, rice)
        # Fill the pot with water and add rice

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_rice_2067, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close cupboard_131. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close cupboard_131. 
##############################
From agent.py
exp(food_rice_2067, cupboard_131)
Fail to find food_rice_2067 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior place_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select rice with ID 2067

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_rice_in_pot(rice, pot)
        # Place the rice in the pot

        boil_rice_in_pot(pot, stove)
        # Boil the rice in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot
        achieve has_water(pot)
        # Ensure the pot has water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior place_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot

behavior boil_rice_in_pot(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Ensure the stove is turned on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select rice with ID 2067

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        place_rice_in_pot(rice, pot)
        # Place the rice in the pot

        boil_rice_in_pot(pot, stove)
        # Boil the rice in the pot on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(cupboard_130)exp(food_rice_2067, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close cupboard_131.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
exp(food_rice_2067, cupboard_130)
Fail to find food_rice_2067 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(kitchen_counter_128)exp(food_rice_2067, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_128)
Fail to find food_rice_2067 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_rice_2067. Robot is close fridge_140. 
##############################
From agent.py
grab_executor(food_rice_2067)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_rice_2067. Robot is close fridge_140. Grabbing food_rice_2067 by left hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_rice_2067. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close food_rice_2067. food_rice_2067 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close food_rice_2067.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: Ensure the pot has been filled with water. You need to fill pot_2093 with water from faucet_134 before boiling the rice on stove_2090.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.
Action 12: Grab pot_2093.
Action 13: Walk to faucet_134.
Action 14: Switch on faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to cupboard_131.
Action 17: Open cupboard_131.
Action 18: look for food_rice_2067 around cupboard_131.
Action 19: Walk to faucet_134.
Action 20: Switch on faucet_134.
Action 21: Switch off faucet_134.
Action 22: Walk to cupboard_130.
Action 23: look for food_rice_2067 around cupboard_130.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to kitchen_counter_128.
Action 28: look for food_rice_2067 around kitchen_counter_128.
Action 29: Walk to faucet_134.
Action 30: Switch on faucet_134.
Action 31: Switch off faucet_134.
Action 32: Walk to fridge_140.
Action 33: Switch off fridge_140.
Action 34: Open fridge_140.
Action 35: look for food_rice_2067 around fridge_140.
Action 36: Walk to faucet_134.
Action 37: Switch on faucet_134.
Action 38: Switch off faucet_134.
Action 39: Walk to pot_2093.
Action 40: Open pot_2093.
Action 41: Walk to food_rice_2067.
Action 42: Grab food_rice_2067.
Action 43: Walk to pot_2093.
Action 44: Put food_rice_2067 into pot_2093.
Action 45: Walk to stove_2090.
Action 46: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_computer_379(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        assert is_faucet(faucet)
        achieve_once inhand(pot)
        achieve close(faucet, pot)
        achieve is_on(faucet)
        achieve has_water(pot)
        achieve_once is_off(faucet)

behavior boil_rice(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_food_bread_2016_around_oven_141(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_bread,oven_instance)
        else:
            exp(food_bread,oven_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,oven_instance]=True
        close[oven_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        assert has_switch(faucet)
        # Ensure the faucet has a switch
        if has_water(pot):
            achieve_once inhand(pot)
            # Ensure pot is in hand to prevent spilling water
        else:
            bind sink: item where:
                is_sink(sink)
            # Select a sink as the location for filling the pot
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                # If the pool has a faucet, turn it on to fill the pot
            achieve has_water(pot)
            # Fill the pot with water
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_off(faucet)
                # If the pool has a faucet, turn it off after filling the pot

behavior boil_rice_pot(pot:item, stove:item, food_rice:item):
    body:
        assert is_on(stove)
        # Ensure the stove is on to start cooking
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(food_rice, pot)
        # Ensure the rice is inside the pot to be boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select an instance of food_rice

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        boil_rice_pot(pot, stove, food_rice)
        # Boil the rice using the filled pot on the stove
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable faucet already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        assert has_switch(faucet)
        # Ensure the faucet has a switch
        if not has_water(pot):
            achieve_once inhand(pot)
            # Ensure pot is in hand to prevent spilling water
            if has_faucet(faucet):
                achieve_once is_on(faucet)
                # If the faucet is available, turn it on
            achieve has_water(pot)
            # Fill the pot with water
            if has_faucet(faucet):
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the pot

behavior boil_rice_pot(pot:item, stove:item, food_rice:item):
    body:
        assert is_on(stove)
        # Ensure the stove is on to start cooking
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(food_rice, pot)
        # Ensure the rice is inside the pot to be boiled

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind food_rice: item where:
            is_food_rice(food_rice)
        # Select an instance of food_rice

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        boil_rice_pot(pot, stove, food_rice)
        # Boil the rice using the filled pot on the stove

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the rice in a pot." ?
Answer: Fill the pot with water. Put the rice in the pot. Put the pot on the stove and turn on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Fill the pot with water, put the rice in the pot, and then put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_fryingpan_2107(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2107
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(fork,fryingpan_instance)
        else:
            exp(fork,fryingpan_instance)
    eff:
        unknown[fork]=False
        close[fork,fryingpan_instance]=True
        close[fryingpan_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def faucet_has_pot(faucet: item, pot: item):
    # Check if the pot can be filled with water from the specified faucet
    symbol near_faucet=close(pot, faucet)
    return near_faucet

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior start_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        if not has_water(pot) and faucet_has_pot(faucet, pot):
            fill_pot_with_water(pot, faucet)
        
        put_pot_on_stove(pot, stove)
        start_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_computer_379(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if has_water(pot):
            achieve has_water(pot)
        else:
            achieve_once inside(pot, location) where:
                is_faucet(faucet) and close(faucet, location)

            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior place_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'where') at line 6068, column 48.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_computer_2110(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_cup_2089_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        if has_water(pot):
            achieve has_water(pot)
        else:
            achieve_once inside_char(char, pot)
            # Move the pot to the faucet location
            achieve_once close_char(char, faucet)

            achieve_once is_on(faucet)
            achieve has_water(pot)
            achieve_once is_off(faucet)

behavior place_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)

        bind faucet: item where:
            is_faucet(faucet)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and put the rice in the pot.', '2. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_bowl_2095_around_ironing_board_2099(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(bowl,ironing_board_instance)
        else:
            exp(bowl,ironing_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,ironing_board_instance]=True
        close[ironing_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the pot has water
    return has_water(pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if not pot_has_water(pot):
            achieve_once inside(pot, sink)
            # Ensure the pot is in the sink

            if has_switch(faucet):
                achieve_once is_on(faucet)
                # Turn on the faucet to fill the pot with water

            achieve has_water(pot)
            # Fill the pot with water

            if has_switch(faucet):
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the pot

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Put rice inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select rice with ID 2067

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water

        put_rice_in_pot(rice, pot)
        # Put rice in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink; available variables: [Variable<pot: item>, Variable<faucet: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mat_237_around_bathtub_297(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bathtub_instance:item where:
            is_bathtub(bathtub_instance) and id[bathtub_instance]==297
        achieve close_char(char,bathtub_instance)
        if can_open(bathtub_instance):
            achieve_once open(bathtub_instance)
            exp(mat,bathtub_instance)
        else:
            exp(mat,bathtub_instance)
    eff:
        unknown[mat]=False
        close[mat,bathtub_instance]=True
        close[bathtub_instance,mat]=True
    

behavior find_bowl_2095_around_table_123(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_towel_2083_around_shower_303(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(towel,shower_instance)
        else:
            exp(towel,shower_instance)
    eff:
        unknown[towel]=False
        close[towel,shower_instance]=True
        close[shower_instance,towel]=True
    

#goal_representation
 
def has_sink(pot:item):
    # Determine whether this pot is nearby or in a sink
    symbol has_sink=exists sink:item: is_sink(sink) and close(pot, sink)
    return has_sink

behavior fill_pot_with_water(pot:item, faucet:item, sink:item):
    body:
        if not pot_has_water(pot):
            achieve_once inside(pot, sink)
            # Ensure the pot is in the sink

            if has_switch(faucet):
                achieve_once is_on(faucet)
                # Turn on the faucet to fill the pot with water

            achieve has_water(pot)
            # Fill the pot with water

            if has_switch(faucet):
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the pot

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Put rice inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select rice with ID 2067

        bind sink: item where:
            is_sink(sink) and close(pot, sink)
        # Select a sink close to the pot

        fill_pot_with_water(pot, faucet, sink)
        # Fill the pot with water

        put_rice_in_pot(rice, pot)
        # Put rice in the pot

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function pot_has_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_computer_2110(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#goal_representation
 
def has_sink(pot:item):
    # Determine whether this pot is nearby or in a sink
    symbol has_sink=exists sink:item : is_sink(sink) and close(pot, sink)
    return has_sink

behavior fill_pot_with_water(pot:item, faucet:item, sink:item):
    body:
        if not has_water(pot):
            achieve_once inside(pot, sink)
            # Ensure the pot is in the sink

            if has_switch(faucet):
                achieve_once is_on(faucet)
                # Turn on the faucet to fill the pot with water

            achieve has_water(pot)
            # Fill the pot with water

            if has_switch(faucet):
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the pot

behavior put_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Put rice inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select rice with ID 2067

        bind sink: item where:
            is_sink(sink) and close(pot, sink)
        # Select a sink close to the pot

        fill_pot_with_water(pot, faucet, sink)
        # Fill the pot with water

        put_rice_in_pot(rice, pot)
        # Put rice in the pot

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_headset_2086_around_filing_cabinet_378(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(headset,filing_cabinet_instance)
        else:
            exp(headset,filing_cabinet_instance)
    eff:
        unknown[headset]=False
        close[headset,filing_cabinet_instance]=True
        close[filing_cabinet_instance,headset]=True
    

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def is_filled_and_has_rice(pot: item):
    # Function to check if the pot is filled with water and has rice
    return has_water(pot) and exists rice: item : is_food_rice(rice) and inside(rice, pot)

behavior fill_pot_with_water_and_add_rice(pot: item, faucet:item, rice: item):
    body:
        if not has_water(pot):
            achieve inside(pot, faucet)
            achieve_once is_on(faucet) # Turn on faucet to fill the pot
            achieve has_water(pot) # Fill the pot with water
            achieve_once is_off(faucet) # Turn off faucet after filling

        achieve inside(rice, pot) # Add rice into the pot

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind rice: item where:
            is_food_rice(rice) and inside(rice, kitchen_counter_128)
        # Select rice from a known location, for example, kitchen counter

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        if not is_filled_and_has_rice(pot):
            fill_pot_with_water_and_add_rice(pot, faucet, rice)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'rice') at line 6084, column 38.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
def is_filled_and_has_rice(pot: item):
    # Function to check if the pot is filled with water and has rice
    symbol has_rice = exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_water(pot) and has_rice

behavior fill_pot_with_water_and_add_rice(pot: item, faucet: item, rice: item):
    body:
        if not has_water(pot):
            achieve inside(pot, faucet)
            achieve_once is_on(faucet) # Turn on faucet to fill the pot
            achieve has_water(pot) # Fill the pot with water
            achieve_once is_off(faucet) # Turn off faucet after filling

        achieve inside(rice, pot) # Add rice into the pot

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind rice: item where:
            is_food_rice(rice) and inside(rice, kitchen_counter_128)
        # Select rice from a known location, for example, kitchen counter

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        if not is_filled_and_has_rice(pot):
            fill_pot_with_water_and_add_rice(pot, faucet, rice)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: kitchen_counter_128; available variables: [Variable<rice: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2088_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#goal_representation
 
def is_filled_and_has_rice(pot: item):
    # Function to check if the pot is filled with water and has rice
    symbol has_rice = exists rice: item : is_food_rice(rice) and inside(rice, pot)
    return has_water(pot) and has_rice

behavior fill_pot_with_water_and_add_rice(pot: item, faucet: item, rice: item):
    body:
        if not has_water(pot):
            achieve inside(pot, faucet)
            achieve_once is_on(faucet) # Turn on faucet to fill the pot
            achieve has_water(pot) # Fill the pot with water
            achieve_once is_off(faucet) # Turn off faucet after filling

        achieve inside(rice, pot) # Add rice into the pot

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind rice: item where:
            is_food_rice(rice) and inside(rice, fridge_140)
        # Select rice from a known location, for example, fridge 140

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        if not is_filled_and_has_rice(pot):
            fill_pot_with_water_and_add_rice(pot, faucet, rice)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water and put the rice in the pot." ?
Answer: Fill the pot with water. Put the rice in the pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cup_2006_around_table_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_pot_with_water(pot: item, location: item):
    body:
        achieve_once inside(pot, location)
        # Ensure the pot is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the pot

        achieve has_water(pot)
        # Fill the pot with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the pot

behavior put_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)
        # Put the rice inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice]==2067
        # Select rice with ID 2067

        fill_pot_with_water(pot, faucet)
        put_rice_in_pot(rice, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_tray_142(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==142
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(bowl,tray_instance)
        else:
            exp(bowl,tray_instance)
    eff:
        unknown[bowl]=False
        close[bowl,tray_instance]=True
        close[tray_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve close_char(char, faucet)
        # Ensure the character is close to the faucet
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water
        achieve has_water(pot)
        # Ensure the pot is filled with water
        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior put_rice_in_pot(rice: item, pot: item):
    body:
        achieve inside(rice, pot)
        # Put the rice into the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select the faucet with ID 134

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2067
        # Select the rice with ID 2067

        fill_pot_with_water(pot, faucet)
        # Fill the pot with water from the faucet

        put_rice_in_pot(rice, pot)
        # Put the rice in the pot

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2086_around_computer_2110(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==2110
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        place_pot_on_stove_and_turn_on(pot, stove)
        # Place the pot on the stove and turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2086_around_computer_379(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(headset,computer_instance)
        else:
            exp(headset,computer_instance)
    eff:
        unknown[headset]=False
        close[headset,computer_instance]=True
        close[computer_instance,headset]=True
    

behavior find_after_shave_2029_around_shower_303(after_shave:item):
    goal: not unknown(after_shave)
    body:
        assert is_after_shave(after_shave)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(after_shave,shower_instance)
        else:
            exp(after_shave,shower_instance)
    eff:
        unknown[after_shave]=False
        close[after_shave,shower_instance]=True
        close[shower_instance,after_shave]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind pot: item where:
            is_pot(pot) and id[pot] == 2093 
        # Select the pot with ID 2093

        achieve on(pot, stove)
        # Ensure the pot is on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the pot on the stove and turn on the stove." ?
Answer: Put the pot on the stove and turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        put_pot_on_stove(pot, stove)
        # Put the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Ensure the pot is placed on the stove

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)
        # Turn the stove on

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093
        
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090
        
        place_pot_on_stove(pot, stove)
        # Place the pot on the stove
        
        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_373(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==373
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_on(pot: item, stove: item):
    body:
        achieve on(pot, stove) # Place the pot on the stove
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        place_pot_on_stove_and_turn_on(pot, stove)
        # Place the pot on the stove and turn it on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_clothes_gloves_2077_around_shower_303(clothes_gloves:item):
    goal: not unknown(clothes_gloves)
    body:
        assert is_clothes_gloves(clothes_gloves)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==303
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(clothes_gloves,shower_instance)
        else:
            exp(clothes_gloves,shower_instance)
    eff:
        unknown[clothes_gloves]=False
        close[clothes_gloves,shower_instance]=True
        close[shower_instance,clothes_gloves]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        place_pot_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2086_around_desk_375(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(headset,desk_instance)
        else:
            exp(headset,desk_instance)
    eff:
        unknown[headset]=False
        close[headset,desk_instance]=True
        close[desk_instance,headset]=True
    

behavior find_mat_115_around_bench_122(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pot_on_stove_and_turn_stove_on(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        place_pot_on_stove_and_turn_stove_on(pot, stove)
        # Place the pot on the stove and turn the stove on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2086_around_desk_375(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(headset,desk_instance)
        else:
            exp(headset,desk_instance)
    eff:
        unknown[headset]=False
        close[headset,desk_instance]=True
        close[desk_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2093
        # Select the pot with ID 2093

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        put_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
