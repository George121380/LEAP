From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_vacuum_cleaner_2094_around_table_127(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(vacuum_cleaner,table_instance)
        else:
            exp(vacuum_cleaner,table_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,table_instance]=True
        close[table_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_vacuum_cleaner(vacuum: item):
    body:
        assert has_switch(vacuum)
        # Ensure the vacuum cleaner has a switch
        achieve plugged(vacuum)
        # Plug the vacuum cleaner in
        achieve is_on(vacuum)
        # Turn on the vacuum cleaner

behavior vacuum_floor(vacuum: item, floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor to be vacuumed

        prepare_vacuum_cleaner(vacuum)
        # Prepare the vacuum cleaner for use

        vacuum_floor(vacuum, floor)
        # Vacuum the floor to achieve cleanliness

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_vacuum_cleaner(vacuum: item):
    body:
        assert has_switch(vacuum)
        # Ensure the vacuum cleaner has a switch
        achieve plugged(vacuum)
        # Plug the vacuum cleaner in
        achieve is_on(vacuum)
        # Turn on the vacuum cleaner

behavior vacuum_floor(vacuum: item, floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor to be vacuumed

        prepare_vacuum_cleaner(vacuum)
        # Prepare the vacuum cleaner for use

        vacuum_floor(vacuum, floor)
        # Vacuum the floor to achieve cleanliness

##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(vacuum_cleaner_2094, table_127)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find drawing_118. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(vacuum_cleaner_2094, table_127)
Fail to find vacuum_cleaner_2094 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(vacuum_cleaner_2094, table_123)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close mat_115.Robot is no longer close floor_20.Robot is no longer close table_127.
##############################
From agent.py
exp(vacuum_cleaner_2094, table_123)
Fail to find vacuum_cleaner_2094 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(vacuum_cleaner_2094, kitchen_counter_128)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_128)
Fail to find vacuum_cleaner_2094 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(vacuum_cleaner_2094, kitchen_counter_129)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_129)
Fail to find vacuum_cleaner_2094 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(vacuum_cleaner_2094, fridge_140)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(vacuum_cleaner_2094, fridge_140)
Fail to find vacuum_cleaner_2094 around fridge_140. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(vacuum_cleaner_2094, kitchen_counter_132)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find vacuum_cleaner_2094 ?
Answer: The vacuum_cleaner_2094 is located inside the home_office_161. To find it, look near the couch_192, as the vacuum_cleaner_2094 is close to this couch.
Re-decompose: None

##############################
From agent.py
Human Instruction: The vacuum_cleaner_2094 is located inside the home_office_161. To find it, look near the couch_192, as the vacuum_cleaner_2094 is close to this couch.

The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for vacuum_cleaner_2094 around table_127.
Action 3: Walk to table_123.
Action 4: look for vacuum_cleaner_2094 around table_123.
Action 5: Walk to kitchen_counter_128.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 7: Walk to kitchen_counter_129.
Action 8: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for vacuum_cleaner_2094 around fridge_140.
Action 13: Walk to kitchen_counter_132.

##############################
From agent.py
exp(vacuum_cleaner_2094, kitchen_counter_132)
Fail to find vacuum_cleaner_2094 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(vacuum_cleaner_2094, home_office_161)walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(vacuum_cleaner_2094, home_office_161)
Find vacuum_cleaner_2094. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)plugin_executor(vacuum_cleaner_2094)switchon_executor(vacuum_cleaner_2094)walk_executor(floor_12)wash_executor(floor_12)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
plugin_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. 
##############################
From agent.py
walk_executor(floor_12)
Robot is inside dining_room_1. Robot is close floor_12. Robot is no longer inside home_office_161.Robot is no longer close vacuum_cleaner_2094.
##############################
From agent.py
wash_executor(floor_12)
Robot is inside dining_room_1. Robot is close floor_12. 
##############################
From agent.py
Human Instruction: The robot needs to vacuum the floor to achieve cleanliness. The current action summary indicates the robot washed the floor instead of vacuuming it. Ensure the vacuum cleaner is used to clean the floor as required.

The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for vacuum_cleaner_2094 around table_127.
Action 3: Walk to table_123.
Action 4: look for vacuum_cleaner_2094 around table_123.
Action 5: Walk to kitchen_counter_128.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 7: Walk to kitchen_counter_129.
Action 8: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for vacuum_cleaner_2094 around fridge_140.
Action 13: Walk to kitchen_counter_132.
Action 14: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 15: Walk to home_office_161.
Action 16: look for vacuum_cleaner_2094 around home_office_161.
Action 17: Walk to vacuum_cleaner_2094.
Action 18: Plug in vacuum_cleaner_2094.
Action 19: Switch on vacuum_cleaner_2094.
Action 20: Walk to floor_12.
Action 21: Wash floor_12.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_located(vacuum_cleaner: item):
    # Function to check if the vacuum cleaner is located and operable
    return is_on(vacuum_cleaner) and plugged(vacuum_cleaner)

behavior use_vacuum_cleaner_on_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)
        # Clean the floor using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094
        # Select vacuum cleaner with ID 2094

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select floor with ID 12

        if is_vacuum_cleaner_located(vacuum_cleaner):
            use_vacuum_cleaner_on_floor(vacuum_cleaner, floor)
        else:
            observe(vacuum_cleaner, "Locate vacuum cleaner and check its operation")
            use_vacuum_cleaner_on_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_mat_386_around_bed_376(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(mat,bed_instance)
        else:
            exp(mat,bed_instance)
    eff:
        unknown[mat]=False
        close[mat,bed_instance]=True
        close[bed_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_vacuum_cleaning(floor: item, vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        
        achieve clean(floor)
        # Ensure the floor is cleaned by vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094
        # Select the specific vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the specific floor to be cleaned
        
        ensure_vacuum_cleaning(floor, vacuum_cleaner)
        # Perform vacuum cleaning to achieve cleanliness
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "vacuum the floor." ?
Answer: Turn on the vacuum cleaner. Push and pull the vacuum cleaner.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_tape_2028_around_bookshelf_260(tape:item):
    goal: not unknown(tape)
    body:
        assert is_tape(tape)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(tape,bookshelf_instance)
        else:
            exp(tape,bookshelf_instance)
    eff:
        unknown[tape]=False
        close[tape,bookshelf_instance]=True
        close[bookshelf_instance,tape]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_the_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and plugged(vacuum_cleaner) and is_on(vacuum_cleaner)

        bind floor: item where:
            is_floor(floor) and id[floor] == 12

        vacuum_the_floor(vacuum_cleaner, floor)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_mat_292_around_bench_125(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(mat,bench_instance)
        else:
            exp(mat,bench_instance)
    eff:
        unknown[mat]=False
        close[mat,bench_instance]=True
        close[bench_instance,mat]=True
    

behavior find_mat_386_around_bed_376(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(mat,bed_instance)
        else:
            exp(mat,bed_instance)
    eff:
        unknown[mat]=False
        close[mat,bed_instance]=True
        close[bed_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def is_vacuum_cleaner_x_plugged_and_on(cleaner: item):
    # Verify if the vacuum cleaner is plugged in and turned on
    return plugged(cleaner) and is_on(cleaner)

behavior vacuum_floor(char:item, floor: item, vacuum_cleaner: item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        achieve close_char(char, vacuum_cleaner) # Ensure the character is close to the vacuum cleaner
        
        assert is_floor(floor)
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        bind floor: item where:
            is_floor(floor) and id[floor] == 12

        if not is_vacuum_cleaner_x_plugged_and_on(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
        
        vacuum_floor(char, floor, vacuum_cleaner)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_vacuum_cleaner_x_plugged_and_on(cleaner: item):
    # Verify if the vacuum cleaner is plugged in and turned on
    return plugged(cleaner) and is_on(cleaner)

behavior vacuum_floor(char:item, floor: item, vacuum_cleaner: item):
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        achieve close_char(char, vacuum_cleaner) # Ensure the character is close to the vacuum cleaner
        
        assert is_floor(floor)
        achieve clean(floor) # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        
        bind floor: item where:
            is_floor(floor) and id[floor] == 12

        if not is_vacuum_cleaner_x_plugged_and_on(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)
            achieve is_on(vacuum_cleaner)
        
        vacuum_floor(char, floor, vacuum_cleaner)

##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2094)
##############################
From agent.py
walk_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is no longer inside dining_room_1.Robot is no longer close floor_12.
##############################
From agent.py
Human Instruction: You need to vacuum the floor using the vacuum cleaner. Ensure to push and pull the vacuum cleaner to clean the floor, as the vacuum cleaning action has not yet been performed.

Human Guidance: Turn on the vacuum cleaner. Push and pull the vacuum cleaner.
The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for vacuum_cleaner_2094 around table_127.
Action 3: Walk to table_123.
Action 4: look for vacuum_cleaner_2094 around table_123.
Action 5: Walk to kitchen_counter_128.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 7: Walk to kitchen_counter_129.
Action 8: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for vacuum_cleaner_2094 around fridge_140.
Action 13: Walk to kitchen_counter_132.
Action 14: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 15: Walk to home_office_161.
Action 16: look for vacuum_cleaner_2094 around home_office_161.
Action 17: Walk to vacuum_cleaner_2094.
Action 18: Plug in vacuum_cleaner_2094.
Action 19: Switch on vacuum_cleaner_2094.
Action 20: Walk to floor_12.
Action 21: Wash floor_12.
Action 22: Walk to vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_307(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_vacuum(vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)

behavior clean_floor_with_vacuum(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094

        bind floor: item where:
            is_floor(floor) and id[floor] == 12

        turn_on_vacuum(vacuum_cleaner)
        clean_floor_with_vacuum(vacuum_cleaner, floor)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def is_ready_to_use_cleaner(vacuum:item):
    # Function to check if a vacuum cleaner is ready to use (plugged in and turned on)
    return plugged(vacuum) and is_on(vacuum)

behavior prepare_vacuum_cleaner(vacuum: item):
    body:
        achieve plugged(vacuum)
        achieve is_on(vacuum)

behavior vacuum_floor(vacuum: item, floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094
        # Select the vacuum cleaner with ID 2094

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select floor with ID 12

        if not is_ready_to_use_cleaner(vacuum_cleaner):
            prepare_vacuum_cleaner(vacuum_cleaner)
        # Prepare the vacuum cleaner if it is not ready

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "vacuum the floor." ?
Answer: Turn on the vacuum cleaner, hold the vacuum cleaner, push and pull the vacuum cleaner.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_mat_114_around_bed_376(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(mat,bed_instance)
        else:
            exp(mat,bed_instance)
    eff:
        unknown[mat]=False
        close[mat,bed_instance]=True
        close[bed_instance,mat]=True
    

#exp_behavior_end

#goal_representation
behavior use_vacuum_cleaner(vacuum_cleaner: item, floor: item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        achieve clean(floor)
        # Ensure the floor is cleaned using the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the floor with ID 12

        use_vacuum_cleaner(vacuum_cleaner, floor)
        # Use the vacuum cleaner on the floor to clean it
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior achieve_clean_floor(floor: item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and id[vacuum_cleaner] == 2094

        bind floor: item where:
            is_floor(floor) and id[floor] == 12
        # Select the floor with ID 12

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        achieve_clean_floor(floor)
        # Achieve the goal of having a clean floor

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the vacuum cleaner, hold it, and proceed to vacuum the floor by pushing and pulling the vacuum cleaner.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_sink_133(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

behavior find_mat_292_around_bed_376(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(mat,bed_instance)
        else:
            exp(mat,bed_instance)
    eff:
        unknown[mat]=False
        close[mat,bed_instance]=True
        close[bed_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_vacuum(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior hold_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once inhand(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor

        turn_on_vacuum(vacuum_cleaner)
        # Turn on the vacuum cleaner

        hold_vacuum_cleaner(vacuum_cleaner)
        # Hold the vacuum cleaner 

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior turn_on_vacuum(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior hold_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once inhand(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve clean(floor)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor

        turn_on_vacuum(vacuum_cleaner)
        # Turn on the vacuum cleaner

        hold_vacuum_cleaner(vacuum_cleaner)
        # Hold the vacuum cleaner 

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

##############################
From agent.py-> find a plan in act()
grab_executor(vacuum_cleaner_2094)
##############################
From agent.py
grab_executor(vacuum_cleaner_2094)
Robot is inside home_office_161. Robot is close vacuum_cleaner_2094. Robot is close couch_192. Grabbing vacuum_cleaner_2094 by right hand. 
##############################
From agent.py
Human Instruction: You need to vacuum the floor by pushing and pulling the vacuum cleaner after turning it on and holding it. The vacuuming action has not been performed yet.

Human Guidance: Turn on the vacuum cleaner, hold the vacuum cleaner, push and pull the vacuum cleaner.
The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for vacuum_cleaner_2094 around table_127.
Action 3: Walk to table_123.
Action 4: look for vacuum_cleaner_2094 around table_123.
Action 5: Walk to kitchen_counter_128.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 7: Walk to kitchen_counter_129.
Action 8: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for vacuum_cleaner_2094 around fridge_140.
Action 13: Walk to kitchen_counter_132.
Action 14: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 15: Walk to home_office_161.
Action 16: look for vacuum_cleaner_2094 around home_office_161.
Action 17: Walk to vacuum_cleaner_2094.
Action 18: Plug in vacuum_cleaner_2094.
Action 19: Switch on vacuum_cleaner_2094.
Action 20: Walk to floor_12.
Action 21: Wash floor_12.
Action 22: Walk to vacuum_cleaner_2094.
Action 23: Grab vacuum_cleaner_2094.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_mat_237_around_pot_54(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(mat,pot_instance)
        else:
            exp(mat,pot_instance)
    eff:
        unknown[mat]=False
        close[mat,pot_instance]=True
        close[pot_instance,mat]=True
    

behavior find_stereo_2007_around_television_216(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(stereo,television_instance)
        else:
            exp(stereo,television_instance)
    eff:
        unknown[stereo]=False
        close[stereo,television_instance]=True
        close[television_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior hold_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once inhand(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve close_char(char, floor)
        # Move close to the floor for vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        turn_on_vacuum_cleaner(vacuum_cleaner)
        # Turn on the vacuum cleaner

        hold_vacuum_cleaner(vacuum_cleaner)
        # Hold the vacuum cleaner

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve is_on(vacuum_cleaner)

behavior hold_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve_once inhand(vacuum_cleaner)

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve close_char(char, floor)
        # Move close to the floor for vacuuming

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select the floor

        turn_on_vacuum_cleaner(vacuum_cleaner)
        # Turn on the vacuum cleaner

        hold_vacuum_cleaner(vacuum_cleaner)
        # Hold the vacuum cleaner

        vacuum_floor(vacuum_cleaner, floor)
        # Vacuum the floor

##############################
From agent.py-> find a plan in act()
walk_executor(floor_12)
##############################
From agent.py
walk_executor(floor_12)
Robot is inside dining_room_1. Robot is close vacuum_cleaner_2094. Robot is close floor_12. Robot is no longer inside home_office_161.Robot is no longer close couch_192.
##############################
From agent.py
Human Instruction: You need to complete the action of vacuuming the floor by actually pushing and pulling the vacuum cleaner, as this step has not been performed yet.

Human Guidance: Turn on the vacuum cleaner, hold the vacuum cleaner, push and pull the vacuum cleaner.
The actions you have taken:
Action 1: Walk to table_127.
Action 2: look for vacuum_cleaner_2094 around table_127.
Action 3: Walk to table_123.
Action 4: look for vacuum_cleaner_2094 around table_123.
Action 5: Walk to kitchen_counter_128.
Action 6: look for vacuum_cleaner_2094 around kitchen_counter_128.
Action 7: Walk to kitchen_counter_129.
Action 8: look for vacuum_cleaner_2094 around kitchen_counter_129.
Action 9: Walk to fridge_140.
Action 10: Switch off fridge_140.
Action 11: Open fridge_140.
Action 12: look for vacuum_cleaner_2094 around fridge_140.
Action 13: Walk to kitchen_counter_132.
Action 14: look for vacuum_cleaner_2094 around kitchen_counter_132.
Action 15: Walk to home_office_161.
Action 16: look for vacuum_cleaner_2094 around home_office_161.
Action 17: Walk to vacuum_cleaner_2094.
Action 18: Plug in vacuum_cleaner_2094.
Action 19: Switch on vacuum_cleaner_2094.
Action 20: Walk to floor_12.
Action 21: Wash floor_12.
Action 22: Walk to vacuum_cleaner_2094.
Action 23: Grab vacuum_cleaner_2094.
Action 24: Walk to floor_12.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

behavior find_iron_2117_around_ironing_board_2099(iron:item):
    goal: not unknown(iron)
    body:
        assert is_iron(iron)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(iron,ironing_board_instance)
        else:
            exp(iron,ironing_board_instance)
    eff:
        unknown[iron]=False
        close[iron,ironing_board_instance]=True
        close[ironing_board_instance,iron]=True
    

behavior find_mat_292_around_window_346(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind window_instance:item where:
            is_window(window_instance) and id[window_instance]==346
        achieve close_char(char,window_instance)
        if can_open(window_instance):
            achieve_once open(window_instance)
            exp(mat,window_instance)
        else:
            exp(mat,window_instance)
    eff:
        unknown[mat]=False
        close[mat,window_instance]=True
        close[window_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior hold_and_operate_vacuum(vacuum: item, floor: item):
    body:
        achieve_once inhand(vacuum)
        # Hold the vacuum cleaner
        achieve close_char(char, floor)
        # Ensure the character is close to the floor area to be vacuumed

behavior vacuum_floor(vacuum: item, floor: item):
    body:
        achieve is_on(vacuum)
        # Ensure the vacuum cleaner is turned on

        # Perform vacuuming operation by ensuring character 
        # pushes and pulls the vacuum cleaner over the floor
        observe(vacuum, "Push and pull the vacuum cleaner over the floor")

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor

        hold_and_operate_vacuum(vacuum, floor)
        # Hold the vacuum cleaner and operate it near the floor

        vacuum_floor(vacuum, floor)
        # Complete the vacuuming process on the floor

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior hold_and_operate_vacuum(vacuum: item, floor: item):
    body:
        achieve_once inhand(vacuum)
        # Hold the vacuum cleaner
        achieve close_char(char, floor)
        # Ensure the character is close to the floor area to be vacuumed

behavior vacuum_floor(vacuum: item, floor: item):
    body:
        achieve is_on(vacuum)
        # Ensure the vacuum cleaner is turned on

        # Perform vacuuming operation by ensuring character 
        # pushes and pulls the vacuum cleaner over the floor
        observe(vacuum, "Push and pull the vacuum cleaner over the floor")

behavior __goal__():
    body:
        bind vacuum: item where:
            is_vacuum_cleaner(vacuum)
        # Select an instance of the vacuum cleaner

        bind floor: item where:
            is_floor(floor)
        # Select an instance of the floor

        hold_and_operate_vacuum(vacuum, floor)
        # Hold the vacuum cleaner and operate it near the floor

        vacuum_floor(vacuum, floor)
        # Complete the vacuuming process on the floor

##############################
From agent.py-> find a plan in act()
obs(vacuum_cleaner_2094, Push and pull the vacuum cleaner over the floor)
##############################
From agent.py
obs(vacuum_cleaner_2094, Push and pull the vacuum cleaner over the floor)
Get this information:  vacuum_cleaner_2094 is close to character_219. vacuum_cleaner_2094 is inside home_office_161. vacuum_cleaner_2094 is CLEAN. vacuum_cleaner_2094 is PLUGGED_IN. vacuum_cleaner_2094 is ON.
##############################
