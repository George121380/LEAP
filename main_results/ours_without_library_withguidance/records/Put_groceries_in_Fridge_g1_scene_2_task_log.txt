From agent.py
Reset goals: The sub-goals are: 
['1. Locate the milk, turkey, egg, fish, and chicken in the household.', '2. Identify the dining room table.', '3. Place the milk, turkey, egg, fish, and chicken on the dining room table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_stove_2090(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_fish,stove_instance)
        else:
            exp(food_fish,stove_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,stove_instance]=True
        close[stove_instance,food_fish]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def located_items_in_household():
    # Function to check if all specified items are located in the household through inspection
    symbol located=exists o: item: (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and visited(o)
    return located

behavior __goal__():
    body:
        if not located_items_in_household():
            # If not all items are located yet, inspect each type of item
            foreach item: item:
                if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not visited(item):
                    observe(item, "Locate this item in the household")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def located_items_in_household():
    # Function to check if all specified items are located in the household through inspection
    symbol located=exists o: item: (is_milk(o) or is_food_turkey(o) or is_food_egg(o) or is_food_fish(o) or is_food_chicken(o)) and visited(o)
    return located

behavior __goal__():
    body:
        if not located_items_in_household():
            # If not all items are located yet, inspect each type of item
            foreach item: item:
                if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not visited(item):
                    observe(item, "Locate this item in the household")

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Locate this item in the household)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)obs(food_egg_2053, Locate this item in the household)walk_executor(stove_2090)open_executor(stove_2090)exp(food_fish_2054, stove_2090)walk_executor(food_fish_2054)obs(food_fish_2054, Locate this item in the household)walk_executor(fridge_140)exp(food_turkey_2071, fridge_140)walk_executor(food_turkey_2071)obs(food_turkey_2071, Locate this item in the household)walk_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)open_executor(milk_2074)obs(milk_2074, Locate this item in the household)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer inside home_office_161.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Locate this item in the household)obs(food_egg_2053, Locate this item in the household)obs(food_fish_2054, Locate this item in the household)obs(food_turkey_2071, Locate this item in the household)open_executor(milk_2074)obs(milk_2074, Locate this item in the household)
##############################
From agent.py
obs(food_chicken_2050, Locate this item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate this item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate this item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate this item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_juice_2034_around_cupboard_131(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(juice,cupboard_instance)
        else:
            exp(juice,cupboard_instance)
    eff:
        unknown[juice]=False
        close[juice,cupboard_instance]=True
        close[cupboard_instance,juice]=True
    

behavior find_clothes_shirt_2114_around_ironing_board_2099(clothes_shirt:item):
    goal: not unknown(clothes_shirt)
    body:
        assert is_clothes_shirt(clothes_shirt)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(clothes_shirt,ironing_board_instance)
        else:
            exp(clothes_shirt,ironing_board_instance)
    eff:
        unknown[clothes_shirt]=False
        close[clothes_shirt,ironing_board_instance]=True
        close[ironing_board_instance,clothes_shirt]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_oil_2005_around_stove_2090(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(oil,stove_instance)
        else:
            exp(oil,stove_instance)
    eff:
        unknown[oil]=False
        close[oil,stove_instance]=True
        close[stove_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_food_items():
    body:
        foreach food_item: item:
            if is_food_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item):
                observe(food_item, "Locate this item in the household")

behavior __goal__():
    body:
        locate_food_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_milk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2008_around_stove_2090(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_orange,stove_instance)
        else:
            exp(food_orange,stove_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,stove_instance]=True
        close[stove_instance,food_orange]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_onion_2026_around_stove_2090(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_onion,stove_instance)
        else:
            exp(food_onion,stove_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,stove_instance]=True
        close[stove_instance,food_onion]=True
    

#goal_representation

behavior locate_food_items():
    body:
        foreach food_item: item:
            if is_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item):
                observe(food_item, "Locate this item in the household")

behavior __goal__():
    body:
        locate_food_items()

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior locate_food_items():
    body:
        foreach food_item: item:
            if is_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item):
                observe(food_item, "Locate this item in the household")

behavior __goal__():
    body:
        locate_food_items()

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Locate this item in the household)obs(food_egg_2053, Locate this item in the household)obs(food_fish_2054, Locate this item in the household)obs(food_turkey_2071, Locate this item in the household)open_executor(milk_2074)obs(milk_2074, Locate this item in the household)
##############################
From agent.py
obs(food_chicken_2050, Locate this item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate this item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate this item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate this item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_juice_2034_around_kitchen_counter_128(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def can_locate(x:item):
    # Determine if the item can be found around the fridge_140
    symbol known_location = exists question: string : observe(x, "question") 
    return known_location

behavior locate_items(milk:item, turkey:item, egg:item, fish:item, chicken:item):
    body:
        foreach item: item where:
            (milk == item or turkey == item or egg == item or fish == item or chicken == item):
            if not visited(item):
                observe(item, "Locate this item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        # Attempt to located any unobserved items
        if not (can_locate(milk) and can_locate(turkey) and can_locate(egg) and can_locate(fish) and can_locate(chicken)):
            locate_items(milk, turkey, egg, fish, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('WHERE', 'where') at line 6082, column 28.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_orange_2008_around_stove_2090(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_orange,stove_instance)
        else:
            exp(food_orange,stove_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,stove_instance]=True
        close[stove_instance,food_orange]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_butter_2018_around_stove_2090(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

#goal_representation
 
def can_locate(x:item):
    # Determine if the item can be found around the fridge_140
    symbol known_location = exists question: string : observe(x, "Locate this item in the household") 
    return known_location

behavior locate_items(milk:item, turkey:item, egg:item, fish:item, chicken:item):
    body:
        foreach item: item:
            if (milk == item or turkey == item or egg == item or fish == item or chicken == item):
                if not visited(item):
                    observe(item, "Locate this item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        # Attempt to locate any unobserved items
        if not (can_locate(milk) and can_locate(turkey) and can_locate(egg) and can_locate(fish) and can_locate(chicken)):
            locate_items(milk, turkey, egg, fish, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

QuantificationOp only accepts ValueOutputExpressions, got type <class 'concepts.dm.crow.behavior.CrowBehaviorApplicationExpression'>.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_juice_2034_around_kitchen_counter_128(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(juice,kitchen_counter_instance)
        else:
            exp(juice,kitchen_counter_instance)
    eff:
        unknown[juice]=False
        close[juice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,juice]=True
    

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation
 
def can_locate(x: item):
    # Determine if the item can be found around the fridge_140
    symbol known_location = exists item1: item: visited(item1) and item1 == x
    return known_location

behavior locate_items(milk: item, turkey: item, egg: item, fish: item, chicken: item):
    body:
        foreach item: item:
            if (milk == item or turkey == item or egg == item or fish == item or chicken == item):
                if not visited(item):
                    observe(item, "Locate this item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        # Attempt to locate any unobserved items
        if not (can_locate(milk) and can_locate(turkey) and can_locate(egg) and can_locate(fish) and can_locate(chicken)):
            locate_items(milk, turkey, egg, fish, chicken)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def can_locate(x: item):
    # Determine if the item can be found around the fridge_140
    symbol known_location = exists item1: item: visited(item1) and item1 == x
    return known_location

behavior locate_items(milk: item, turkey: item, egg: item, fish: item, chicken: item):
    body:
        foreach item: item:
            if (milk == item or turkey == item or egg == item or fish == item or chicken == item):
                if not visited(item):
                    observe(item, "Locate this item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        # Attempt to locate any unobserved items
        if not (can_locate(milk) and can_locate(turkey) and can_locate(egg) and can_locate(fish) and can_locate(chicken)):
            locate_items(milk, turkey, egg, fish, chicken)

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Locate this item in the household)obs(food_egg_2053, Locate this item in the household)obs(food_fish_2054, Locate this item in the household)obs(food_turkey_2071, Locate this item in the household)open_executor(milk_2074)obs(milk_2074, Locate this item in the household)
##############################
From agent.py
obs(food_chicken_2050, Locate this item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate this item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate this item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate this item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_stove_2090(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_butter,stove_instance)
        else:
            exp(food_butter,stove_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,stove_instance]=True
        close[stove_instance,food_butter]=True
    

behavior find_food_bread_2016_around_oven_141(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_bread,oven_instance)
        else:
            exp(food_bread,oven_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,oven_instance]=True
        close[oven_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_relevant_food(fridge:item):
    # Function to check if there are milk, turkey, eggs, fish, or chicken in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    symbol contains_turkey = exists o: item : is_food_turkey(o) and inside(o, fridge)
    symbol contains_egg = exists o: item : is_food_egg(o) and inside(o, fridge)
    symbol contains_fish = exists o: item : is_food_fish(o) and inside(o, fridge)
    symbol contains_chicken = exists o: item : is_food_chicken(o) and inside(o, fridge)
    return contains_milk or contains_turkey or contains_egg or contains_fish or contains_chicken

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_relevant_food(fridge):
            # If we have already found the fridge with the relevant food, we can directly observe it
            bind fridge: item where:
                is_fridge(fridge) and has_relevant_food(fridge)
            observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_relevant_food(fridge:item):
    # Function to check if there are milk, turkey, eggs, fish, or chicken in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    symbol contains_turkey = exists o: item : is_food_turkey(o) and inside(o, fridge)
    symbol contains_egg = exists o: item : is_food_egg(o) and inside(o, fridge)
    symbol contains_fish = exists o: item : is_food_fish(o) and inside(o, fridge)
    symbol contains_chicken = exists o: item : is_food_chicken(o) and inside(o, fridge)
    return contains_milk or contains_turkey or contains_egg or contains_fish or contains_chicken

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_relevant_food(fridge):
            # If we have already found the fridge with the relevant food, we can directly observe it
            bind fridge: item where:
                is_fridge(fridge) and has_relevant_food(fridge)
            observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

##############################
From agent.py-> find a plan in act()
obs(fridge_140, Locate milk, turkey, egg, fish, and chicken)
##############################
From agent.py
obs(fridge_140, Locate milk, turkey, egg, fish, and chicken)
Get this information:  food_chicken_2050 is inside fridge_140. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. dry_pasta_2073 is inside fridge_140. food_banana_2045 is inside fridge_140. food_cereal_2048 is inside fridge_140. food_rice_2067 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. fridge_140 is on floor_22. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. fridge_140 is inside dining_room_1. sauce_2101 is inside fridge_140. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_snack_2069 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. food_bacon_2044 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. milk_2074 is inside fridge_140. food_peanut_butter_2064 is inside fridge_140. food_food_2055 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. fridge_140 is OFF. fridge_140 is CLEAN. fridge_140 is PLUGGED_IN. fridge_140 is OPEN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2089_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_bowl_2095_around_table_127(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(bowl,table_instance)
        else:
            exp(bowl,table_instance)
    eff:
        unknown[bowl]=False
        close[bowl,table_instance]=True
        close[table_instance,bowl]=True
    

behavior find_chair_263_around_chair_138(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_drawing_238_around_table_127(drawing:item):
    goal: not unknown(drawing)
    body:
        assert is_drawing(drawing)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(drawing,table_instance)
        else:
            exp(drawing,table_instance)
    eff:
        unknown[drawing]=False
        close[drawing,table_instance]=True
        close[table_instance,drawing]=True
    

behavior find_mat_201_around_table_127(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

behavior find_mat_237_around_table_127(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        foreach table: item:
            if is_table(table) and inside(table, dining_room) and not visited(table):
                observe(table, "Identify the dining room table")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        foreach table: item:
            if is_table(table) and inside(table, dining_room) and not visited(table):
                observe(table, "Identify the dining room table")

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Identify the dining room table)walk_executor(table_127)obs(table_127, Identify the dining room table)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
obs(table_123, Identify the dining room table)
Get this information:  laptop_2015 is on table_123. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. table_123 is inside dining_room_1. cup_2087 is on table_123. table_123 is facing drawing_118. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. homework_2011 is on table_123. mouse_2003 is on table_123. cup_2088 is on table_123. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
obs(table_127, Identify the dining room table)
Get this information:  plate_2105 is on table_127. console_2027 is on table_127. fork_2104 is on table_127. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is inside dining_room_1. table_127 is facing drawing_118. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2097 is on table_127. table_127 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_chair_374_around_desk_375(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def can_hold_items(item1:item, item2:item, item3:item, item4:item, item5:item):
    # Check if all needed items can be held
    symbol can_hold=exists: item : grabbable(item1) and grabbable(item2) and grabbable(item3) and grabbable(item4) and grabbable(item5)
    return can_hold

behavior place_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey) and grabbable(turkey)
        
        bind egg: item where:
            is_food_egg(egg) and grabbable(egg)
        
        bind fish: item where:
            is_food_fish(fish) and grabbable(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken) and grabbable(chicken)
        
        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table)
        
        if can_hold_items(milk, turkey, egg, fish, chicken):
            place_items_on_table(milk, turkey, egg, fish, chicken, dining_table)


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 6118, column 27.
Expected one of: 
	* VARNAME
Previous tokens: [Token('EXISTS', 'exists')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_juice_2034_around_oven_141(juice:item):
    goal: not unknown(juice)
    body:
        assert is_juice(juice)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(juice,oven_instance)
        else:
            exp(juice,oven_instance)
    eff:
        unknown[juice]=False
        close[juice,oven_instance]=True
        close[oven_instance,juice]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_blender_2032_around_oven_141(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(blender,oven_instance)
        else:
            exp(blender,oven_instance)
    eff:
        unknown[blender]=False
        close[blender,oven_instance]=True
        close[oven_instance,blender]=True
    

#goal_representation
 
def can_hold_items(item1:item, item2:item, item3:item, item4:item, item5:item):
    # Check if all needed items can be held
    symbol can_hold=exists item : grabbable(item1) and grabbable(item2) and grabbable(item3) and grabbable(item4) and grabbable(item5)
    return can_hold

behavior place_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey) and grabbable(turkey)
        
        bind egg: item where:
            is_food_egg(egg) and grabbable(egg)
        
        bind fish: item where:
            is_food_fish(fish) and grabbable(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken) and grabbable(chicken)
        
        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table)
        
        if can_hold_items(milk, turkey, egg, fish, chicken):
            place_items_on_table(milk, turkey, egg, fish, chicken, dining_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('LPAR', '(') at line 6136, column 44.
Expected one of: 
	* LSQB
	* COLON
	* COMMA
	* WHERE
Previous tokens: [Token('BASIC_TYPENAME', 'grabbable')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
def can_hold_items(item1:item, item2:item, item3:item, item4:item, item5:item):
    # Check if all needed items can be held
    symbol can_hold=exists item : grabbable(item1) and grabbable(item2) and grabbable(item3) and grabbable(item4) and grabbable(item5)
    return can_hold

behavior place_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and grabbable(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey) and grabbable(turkey)
        
        bind egg: item where:
            is_food_egg(egg) and grabbable(egg)
        
        bind fish: item where:
            is_food_fish(fish) and grabbable(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken) and grabbable(chicken)
        
        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table)
        
        if can_hold_items(milk, turkey, egg, fish, chicken):
            place_items_on_table(milk, turkey, egg, fish, chicken, dining_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_food_to_table(food: item, table: item):
    body:
        achieve on(food, table) 
        # Move the food to the table in the dining room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 127
        # Select table with ID 127 which is in the dining room

        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or 
                is_food_fish(food) or is_food_chicken(food)) and 
            not visited(table):
                move_food_to_table(food, table)
        # Move each specified food item to the dining room table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n            ') at line 6111, column 66.
Expected one of: 
	* ELLIPSIS
	* HEX_NUMBER
	* NONE
	* IMAG_NUMBER
	* TILDE
	* NOT
	* LPAR
	* LSQB
	* PLUS
	* FALSE
	* BIN_NUMBER
	* STRING
	* VARNAME
	* TRUE
	* DO
	* DEC_NUMBER
	* LONG_STRING
	* MINUS
	* COLON
	* FLOAT_NUMBER
	* OCT_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior move_food_to_table(food: item, table: item):
    body:
        achieve on(food, table)
        # Move the food to the table in the dining room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 127
        # Select table with ID 127 which is in the dining room

        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or 
                is_food_fish(food) or is_food_chicken(food)) and 
                not visited(food):
                move_food_to_table(food, table)
        # Move each specified food item to the dining room table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('_NEWLINE', '\n                ') at line 6129, column 66.
Expected one of: 
	* ELLIPSIS
	* HEX_NUMBER
	* NONE
	* IMAG_NUMBER
	* TILDE
	* NOT
	* LPAR
	* LSQB
	* PLUS
	* FALSE
	* BIN_NUMBER
	* STRING
	* VARNAME
	* TRUE
	* DO
	* DEC_NUMBER
	* LONG_STRING
	* MINUS
	* COLON
	* FLOAT_NUMBER
	* OCT_NUMBER

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_bread_2016_around_oven_141(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_bread,oven_instance)
        else:
            exp(food_bread,oven_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,oven_instance]=True
        close[oven_instance,food_bread]=True
    

behavior find_check_2033_around_cupboard_131(check:item):
    goal: not unknown(check)
    body:
        assert is_check(check)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(check,cupboard_instance)
        else:
            exp(check,cupboard_instance)
    eff:
        unknown[check]=False
        close[check,cupboard_instance]=True
        close[cupboard_instance,check]=True
    

behavior find_blender_2032_around_oven_141(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(blender,oven_instance)
        else:
            exp(blender,oven_instance)
    eff:
        unknown[blender]=False
        close[blender,oven_instance]=True
        close[oven_instance,blender]=True
    

#goal_representation
 
behavior move_food_to_table(food: item, table: item):
    body:
        achieve on(food, table)
        # Move the food to the table in the dining room

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 127
        # Select table with ID 127 which is in the dining room

        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or 
                is_food_fish(food) or is_food_chicken(food)) and 
                not visited(food):
                move_food_to_table(food, table)
        # Move each specified food item to the dining room table

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. place the milk, turkey, egg, fish, and chicken on the dining room table." ?
Answer: Place the milk, turkey, egg, fish, and chicken on the dining room table.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_items_on_table(item: item, table: item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_items_on_table(item: item, table: item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

##############################
From agent.py-> find a plan in act()
walk_executor(milk_2074)grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(food_turkey_2071, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(table_123)put_executor(food_fish_2054, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)
##############################
From agent.py
walk_executor(milk_2074)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close fridge_140. Robot is no longer close mat_115.Robot is no longer close floor_20.Robot is no longer close table_127.
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close fridge_140. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_turkey_2071. Robot is no longer close floor_17.Robot is no longer close milk_2074.Robot is no longer close table_123.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(food_turkey_2071)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_turkey_2071. Grabbing food_turkey_2071 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_turkey_2071. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_turkey_2071, table_123)
Robot is inside dining_room_1. Robot is close food_turkey_2071. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_turkey_2071 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_turkey_2071.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_egg_2053, table_123)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_fish_2054. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_egg_2053.
##############################
From agent.py
grab_executor(food_fish_2054)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_fish_2054. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_fish_2054, table_123)
Robot is inside dining_room_1. Robot is close food_fish_2054. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_fish_2054.
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_chicken_2050, table_123)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_chicken_2050 released by right hand. 
##############################
