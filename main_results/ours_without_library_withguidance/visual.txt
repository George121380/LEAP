############################################################
When the sub-task is: Hold the remote control, get close to the DVD player, and then touch the remote control.
A successful representation:
 
behavior hold_remote_control(remote_control: item):
    body:
        achieve_once inhand(remote_control)
        # Pick up the remote control

behavior approach_dvd_player(dvd_player: item):
    body:
        achieve close_char(char, dvd_player)
        # Move close to the DVD player

behavior touch_remote_control(remote_control: item):
    body:
        touch(remote_control)
        # Touch the remote control

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select an instance of the remote control

        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select an instance of the DVD player

        hold_remote_control(remote_control)
        # Hold the remote control

        approach_dvd_player(dvd_player)
        # Get close to the DVD player

        touch_remote_control(remote_control)
        # Touch the remote control

############################################################
When the sub-task is: Pour a cup of water and place it on the nightstand.
A successful representation:
 
behavior pour_water(cup: item):
    body:
        achieve has_water(cup)
        # Ensure the cup has water

behavior place_on_nightstand(cup: item, nightstand: item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select an instance of a nightstand

        pour_water(cup)
        # Pour water into the cup

        place_on_nightstand(cup, nightstand)
        # Place the cup on the nightstand

############################################################
When the sub-task is: 1. Fill a bowl with water and place it on the table in the home office.
A successful representation:
behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        fill_bowl_with_water(bowl)
        # Fill the bowl with water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table inside the home office
############################################################
When the sub-task is: 2. Find the cat and place it on the table in the home office.
A successful representation:
 
behavior find_cat_and_place_on_table(cat: item, table: item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and id[cat] == 2069
        # Select cat with ID 2069

        bind table: item where:
            is_table(table) and id[table] == 270
        # Select table with ID 270

        find_cat_and_place_on_table(cat, table)
        # Place cat on the table

############################################################
When the sub-task is: Clean the bathroom sink.
A successful representation:

behavior clean_sink(sink: item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        clean_sink(sink)

############################################################
When the sub-task is: 1. Identify all the rooms in the household using their features or markers.
A successful representation:
 
behavior identify_all_rooms():
    body:
        foreach room: item:
            if is_bedroom(room) or is_bathroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room):
                observe(room, "Identify room features and markers")

behavior __goal__():
    body:
        identify_all_rooms()

############################################################
When the sub-task is: 2. Ensure that there is at least one light turned on in each room.
A successful representation:
 
def has_light_on(room:item):
    # Function to check if there is any light turned on in a specified room
    symbol has_light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)
    return has_light_on

behavior turn_on_light_if_needed(room:item):
    body:
        if not has_light_on(room):
            # If no light is on in the room, find a light and turn it on
            bind light: item where:
                is_light(light) and inside(light, room)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if is_dining_room(room) or is_home_office(room) or is_bathroom(room) or is_bedroom(room):
                # Iterate through all rooms (dining room, home office, bathroom, and bedroom)
                observe(room, "Identify room features and markers")
                turn_on_light_if_needed(room)

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
behavior clean_bathroom_sink(sink: item):
    body:
        achieve clean(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        clean_bathroom_sink(sink)
############################################################
When the sub-task is: 1. Get a cup and fill it with water.
A successful representation:
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the cup

        fill_cup_with_water(cup, sink)

############################################################
When the sub-task is: 2. Put the cup in the freezer.
A successful representation:
 
behavior place_cup_in_freezer(cup: item, freezer: item):
    body:
        achieve inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063

        bind freezer: item where:
            is_fridge(freezer)
        # Select an instance of a freezer or fridge

        place_cup_in_freezer(cup, freezer)
        # Place the cup inside the freezer

############################################################
When the sub-task is: 1. Turn on the lights in the bedroom.  
A successful representation:
 
behavior turn_on_light_in_bedroom(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        
        bind light: item where:
            is_light(light) and inside(light, bedroom)
        
        turn_on_light_in_bedroom(light)

############################################################
When the sub-task is: 2. Turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light_in_bathroom(light:item, bathroom:item):
    body:
        achieve inside(light, bathroom)
        # Ensure the light is located in the bathroom
        achieve is_on(light)
        # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select an instance of a bathroom

        bind light: item where:
            is_light(light) and inside(light, bathroom)
        # Select an instance of a light that is inside a bathroom

        turn_on_light_in_bathroom(light, bathroom)
        # Turn on the light in the bathroom

############################################################
When the sub-task is: 1. Find the book and place it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_place_on_coffee_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        find_book_and_place_on_coffee_table(book, table)

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
behavior open_home_office_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind window: item where:
            is_window(window) and inside(window, home_office)
        
        open_home_office_window(window)

############################################################
When the sub-task is: 1. Identify all the rooms in the household.
A successful representation:
behavior identify_all_rooms():
    body:
        foreach room: item:
            if is_bedroom(room) or is_bathroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room):
                observe(room, "Identify room features and markers")

behavior __goal__():
    body:
        identify_all_rooms()
############################################################
When the sub-task is: 2. Turn on at least one light in each room.
A successful representation:
 
def has_light_on(room:item):
    # Function to check if there is any light turned on in a specified room
    symbol has_light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)
    return has_light_on

behavior turn_on_light_in_room(room:item):
    body:
        if not has_light_on(room):
            # If no light is on in the room, find a light and turn it on
            bind light: item where:
                is_light(light) and inside(light, room)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if is_dining_room(room) or is_home_office(room) or is_bathroom(room) or is_bedroom(room):
                # Iterate through all rooms (dining room, home office, bathroom, and bedroom)
                observe(room, "Identify room features and markers")
                turn_on_light_in_room(room)

############################################################
When the sub-task is: 1. Find the basket containing clothes.
A successful representation:
 
behavior find_basket_for_clothes(basket: item):
    body:
        achieve visited(basket)

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket):
            bind basket: item where:
                is_basket_for_clothes(basket)
            find_basket_for_clothes(basket)
        else:
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check contents of the basket for clothes")

############################################################
When the sub-task is: 2. Put the clothes in the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place each piece of clothing inside the washing machine

behavior start_wash_cycle(washing_machine:item):
    body:
        assert has_switch(washing_machine)
        # Ensure the washing machine has a switch
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2006
        # Select the basket with clothes
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select an instance of a washing machine

        foreach clothes: item:
            if (is_clothes_shirt(clothes) or is_clothes_pants(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine

        start_wash_cycle(washing_machine)
        # Start the washing machine to wash the clothes

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution_in_dishwasher(cleaning_solution: item, dishwasher: item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Place the cleaning solution inside the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select an instance of the cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select an instance of the dishwasher

        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)
        # Put the cleaning solution in the dishwasher

############################################################
When the sub-task is: 2. Place the bowls and plates in the dishwasher and start the washing cycle.
A successful representation:
 
behavior place_items_in_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance
        
        foreach o: item:
        # Place all plates and bowls inside the dishwasher
            if is_plate(o) or is_bowl(o):
                place_items_in_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_windows(windows: item):
    body:
        achieve open(windows)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        foreach windows: item:
            if is_window(windows) and inside(windows, bathroom):
                open_bathroom_windows(windows)

############################################################
When the sub-task is: Wash the bowls and plates using the dishwasher.
A successful representation:
 
behavior put_items_in_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance
        
        foreach o: item:
        # Place all plates and bowls inside the dishwasher
            if is_plate(o) or is_bowl(o):
                put_items_in_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Locate the milk, turkey, egg, fish, and chicken in the household.
A successful representation:
 
def has_relevant_food(fridge:item):
    # Function to check if there are milk, turkey, eggs, fish, or chicken in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    symbol contains_turkey = exists o: item : is_food_turkey(o) and inside(o, fridge)
    symbol contains_egg = exists o: item : is_food_egg(o) and inside(o, fridge)
    symbol contains_fish = exists o: item : is_food_fish(o) and inside(o, fridge)
    symbol contains_chicken = exists o: item : is_food_chicken(o) and inside(o, fridge)
    return contains_milk or contains_turkey or contains_egg or contains_fish or contains_chicken

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_relevant_food(fridge):
            # If we have already found the fridge with the relevant food, we can directly observe it
            bind fridge: item where:
                is_fridge(fridge) and has_relevant_food(fridge)
            observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

############################################################
When the sub-task is: 2. Identify the dining room table.
A successful representation:
 
behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        foreach table: item:
            if is_table(table) and inside(table, dining_room) and not visited(table):
                observe(table, "Identify the dining room table")

############################################################
When the sub-task is: 3. Place the milk, turkey, egg, fish, and chicken on the dining room table.
A successful representation:
 
behavior place_items_on_table(item: item, table: item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        bind milk: item where:
            is_milk(milk)
        
        bind turkey: item where:
            is_food_turkey(turkey)
        
        bind egg: item where:
            is_food_egg(egg)
        
        bind fish: item where:
            is_food_fish(fish)
        
        bind chicken: item where:
            is_food_chicken(chicken)
        
        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

############################################################
When the sub-task is: Get a cup and fill it with water.
A successful representation:
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind sink: item where:
            is_sink(sink) and id[sink] == 133
        # Select the sink with ID 133

        fill_cup_with_water(cup, sink)

############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light_in_bedroom(light: item):
    body:
        achieve is_on(light)

behavior turn_on_light_in_bathroom(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        bind light_in_bedroom: item where:
            is_light(light_in_bedroom) and inside(light_in_bedroom, bedroom)
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light_in_bathroom: item where:
            is_light(light_in_bathroom) and inside(light_in_bathroom, bathroom)
        
        turn_on_light_in_bedroom(light_in_bedroom)
        turn_on_light_in_bathroom(light_in_bathroom)

############################################################
When the sub-task is: 1. Find the spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior find_spectacles_and_place_on_coffee_table(spectacles: item, table: item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select an instance of spectacles

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_coffee_table(table) and inside(table, home_office)
        # Select a coffee table inside the home office

        find_spectacles_and_place_on_coffee_table(spectacles, table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:

behavior open_home_office_window(window: item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        bind window: item where:
            is_window(window) and inside(window, home_office)
        
        open_home_office_window(window)

############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the cup

        fill_cup_with_water(cup, sink)

############################################################
When the sub-task is: 2. Find your cat and put it on the table in the home office.
A successful representation:
behavior find_cat_and_place_on_table(cat: item, table: item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select an instance of the cat

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        find_cat_and_place_on_table(cat, table)
        # Place the cat on the table in the home office
############################################################
When the sub-task is: 1. Identify all rooms in the household.
A successful representation:
behavior identify_all_rooms():
    body:
        foreach room: item:
            if is_bedroom(room) or is_bathroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room):
                observe(room, "Identify room features and markers")

behavior __goal__():
    body:
        identify_all_rooms()
############################################################
When the sub-task is: 2. Check each room to ensure at least one light is on.
A successful representation:
def has_light_on(room: item):
    # Function to check if there is any light turned on in a specified room
    symbol has_light_on = exists o: item: is_light(o) and is_on(o) and inside(o, room)
    return has_light_on

behavior turn_on_light_if_needed(room: item):
    body:
        if not has_light_on(room):
            # If no light is on in the room, find a light and turn it on
            bind light: item where:
                is_light(light) and inside(light, room)
            achieve is_on(light)

behavior __goal__():
    body:
        foreach room: item:
            if is_dining_room(room) or is_home_office(room) or is_bathroom(room) or is_bedroom(room):
                # Iterate through all rooms (dining room, home office, bathroom, and bedroom)
                observe(room, "Identify room features and markers")
                turn_on_light_if_needed(room)
############################################################
When the sub-task is: 1. Identify the basket containing clothes.
A successful representation:
 
behavior find_basket_for_clothes(basket: item):
    body:
        achieve visited(basket)

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket):
            bind basket: item where:
                is_basket_for_clothes(basket)
            find_basket_for_clothes(basket)
        else:
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check contents of the basket for clothes")

############################################################
When the sub-task is: 2. Put the clothes in the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place each piece of clothing inside the washing machine

behavior start_wash_cycle(washing_machine:item):
    body:
        assert has_switch(washing_machine)
        # Ensure the washing machine has a switch
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2040
        # Select the basket with clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select an instance of a washing machine

        foreach clothes: item:
            if (is_clothes_shirt(clothes) or is_clothes_pants(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine

        start_wash_cycle(washing_machine)
        # Start the washing machine to wash the clothes

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_windows(windows: item):
    body:
        achieve open(windows)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        foreach windows: item:
            if is_window(windows) and inside(windows, bathroom):
                open_bathroom_windows(windows)

############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Prepare a cup of hot milk and put it on the coffee table in the home office.
A successful representation:
def has_milk_in_fridge(fridge:item):
    # Function to check if there is milk in the specified fridge
    symbol contains_milk = exists o: item : is_milk(o) and inside(o, fridge)
    return contains_milk

def has_microwave_in_kitchen(kitchen:item):
    # Function to check if there is a microwave in the kitchen
    symbol has_microwave = exists microwave: item : is_microwave(microwave) and inside(microwave, kitchen)
    return has_microwave

behavior prepare_hot_milk(milk:item, cup:item, microwave:item):
    body:
        achieve inside(milk, cup)
        # Fill the cup with milk

        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and has_milk_in_fridge(fridge)
        # Select fridge that contains milk
        
        bind milk: item where:
            is_milk(milk) and inside(milk, fridge)
        # Bind specific milk instance from the fridge

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and id[coffee_table] == 2068
        # Select coffee table with ID 2068

        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select an instance of a cup with water to replace with milk

        bind kitchen: item where:
            is_kitchen(kitchen)
        # Bind kitchen instance

        observe(cup, "Check for milk and prepare if not present")
        # Observe the current state of the cup and prepare hot milk if necessary

        if has_microwave_in_kitchen(kitchen):
            bind microwave: item where:
                is_microwave(microwave) and inside(microwave, kitchen)
            prepare_hot_milk(milk, cup, microwave)

        achieve on(cup, coffee_table)
        # Place the cup with hot milk on the coffee table in the home office
############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start it.
A successful representation:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance
        
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_forks_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)

        foreach fork: item:
            if is_fork(fork) and on(fork, table):
                wash_forks_hand(fork)

############################################################
When the sub-task is: Cut some chicken and put it close to the cat.
A successful representation:
 
behavior cut_chicken(chicken: item, knife: item):
    body:
        achieve cut(chicken)

behavior place_chicken_near_cat(chicken: item, cat: item):
    body:
        achieve close(chicken, cat)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind knife: item where:
            is_knife(knife)
        # Select a knife instance for cutting the chicken

        bind cat: item where:
            is_cat(cat)
        # Select the instance of the cat

        cut_chicken(chicken, knife)
        # Cut the chicken using the knife

        place_chicken_near_cat(chicken, cat)
        # Place the cut chicken close to the cat

############################################################
When the sub-task is: Cut the bread, put it in the toaster, and turn on the toaster.
A successful representation:
 
behavior cut_bread(bread: item, cutting_board: item):
    body:
        achieve cut(bread)

behavior put_bread_in_toaster(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster: item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an instance of bread

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an instance of a cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select an instance of a toaster

        cut_bread(bread, cutting_board)
        # Cut the bread on the cutting board

        put_bread_in_toaster(bread, toaster)
        # Put the cut bread slices into the toaster

        turn_on_toaster(toaster)
        # Turn on the toaster to toast the bread

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select an instance of spectacles

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)
############################################################
When the sub-task is: 1. Locate all windows in the house.  
A successful representation:
 
def has_window_for_observation(window: item):
    # Returns true if the window needs to be observed to identify it
    return not visited(window)

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Locate and identify the window")

############################################################
When the sub-task is: 2. Wipe each window using a towel.
A successful representation:
 
behavior wipe_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        wipe(window)
        # Wipe the window using the towel

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window):
                bind towel: item where:
                    is_towel(towel)
                wipe_window(window, towel)
 
############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start the wash cycle.  
A successful representation:
behavior load_items_in_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance

        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_plate(o) or is_bowl(o):
                load_items_in_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: 2. Wash the forks by hand in the sink.  
A successful representation:
 
behavior wash_forks_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        
        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        foreach fork: item:
            if is_fork(fork) and on(fork, table):
                wash_forks_hand(fork)

############################################################
When the sub-task is: 1. Find the bathroom sink.
A successful representation:
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom):
                observe(sink, "Determine if this is the bathroom sink")
############################################################
When the sub-task is: 2. Fill the sink with water.
A successful representation:
 
def is_confirmed_bathroom_sink(sink: item):
    # Function to check if the sink is confirmed as the bathroom sink
    return is_sink(sink) and id[sink] == 19 and visited(sink)

def has_faucet(sink: item):
    # Function to check if the sink has an accessible faucet
    symbol exists_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return exists_faucet

behavior fill_sink_with_water(sink: item):
    body:
        achieve has_water(sink)
        # Ensure that the sink is filled with water

behavior __goal__():
    body:
        bind sink_19: item where:
            is_sink(sink_19) and id[sink_19] == 19
        # Declare sink_19 before use

        if not is_confirmed_bathroom_sink(sink_19):
            observe(sink_19, "Confirm that sink_19 is the bathroom sink")
            # Confirm the identity of sink_19 as the bathroom sink

        if has_faucet(sink_19):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink_19)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink if available

        fill_sink_with_water(sink_19)
        # Fill the sink with water

        if has_faucet(sink_19):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink_19)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

############################################################
When the sub-task is: 3. Add soap to create soapy water.
A successful representation:
 
def has_soap_near_sink(sink: item):
    # Function to check if there is soap close to a specified sink
    symbol has_soap=exists soap: item : is_soap(soap) and close(soap, sink)
    return has_soap

behavior add_soap_to_water(sink: item, soap: item):
    body:
        achieve inside(soap, sink)
        # Ensure the soap is inside the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19, confirmed to be in the bathroom

        if has_soap_near_sink(sink):
            bind soap: item where:
                is_soap(soap) and close(soap, sink)
            # Select a soap that is close to the sink
            add_soap_to_water(sink, soap)
            # Add soap to the sink to create soapy water
        else:
            foreach soap: item:
                if is_soap(soap) and not visited(soap):
                    observe(soap, "Check proximity to bathroom sink to add soap")

############################################################
When the sub-task is: Turn on the TV using the remote control.
A successful representation:
 
behavior turn_on_tv_using_remote(remote_control: item, television: item):
    body:
        achieve close_char(char, remote_control)
        # Ensure character is close to the remote control
        achieve_once inhand(remote_control)
        # Pick up the remote control
        touch(remote_control)
        # Use the remote control to turn on the television
        achieve is_on(television)
        # Ensure the television is turned on

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select an instance of the remote control
        
        bind television: item where:
            is_television(television)
        # Select an instance of the television 

        turn_on_tv_using_remote(remote_control, television)
        # Turn on the TV using the remote control

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light_in_bathroom(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind light: item where:
            is_light(light) and inside(light, bathroom)

        turn_on_light_in_bathroom(light)

############################################################
When the sub-task is: Get a cup of water and freeze it.
A successful representation:
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior place_cup_in_freezer(cup: item, freezer: item):
    body:
        achieve inside(cup, freezer)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the cup

        bind freezer: item where:
            is_fridge(freezer)
        # Select an instance of a freezer or fridge

        fill_cup_with_water(cup, sink)
        place_cup_in_freezer(cup, freezer)
        # Place the cup inside the freezer

############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        achieve inside(milk, cup)
        # Fill the cup with milk
############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def has_microwave(microwave:item):
    # Function to check if there is a microwave
    return is_microwave(microwave)

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select cup with ID 2063
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave

############################################################
When the sub-task is: 1. Find the bathroom sink.
A successful representation:
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom):
                observe(sink, "Determine if this is the bathroom sink")
############################################################
When the sub-task is: Add soap to the sink, then turn on the faucet to fill the sink with water.
A successful representation:
 
def has_faucet(sink: item):
    # Determine whether the sink has a faucet
    symbol exists_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return exists_faucet

behavior add_soap_to_sink(soap: item, sink: item):
    body:
        achieve inside(soap, sink)
        # Ensure that the soap is inside the sink

behavior fill_sink_with_water(sink: item):
    body:
        achieve has_water(sink)
        # Ensure that the sink is filled with water

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink that is confirmed to be inside the bathroom

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Initially ensure the faucet is off

            add_soap_to_sink(soap, sink)
            # Add the soap to the sink

            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

            fill_sink_with_water(sink)
            # Fill the sink with water
            
            achieve_once is_off(faucet)
            # Turn off the faucet once the sink is filled

############################################################
When the sub-task is: Turn on the lights in the bedroom, then turn on the lights in the bathroom.
A successful representation:
 
behavior turn_on_light_in_bedroom(light: item):
    body:
        achieve is_on(light)

behavior turn_on_light_in_bathroom(light: item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        bind light_in_bedroom: item where:
            is_light(light_in_bedroom) and inside(light_in_bedroom, bedroom)

        bind bathroom: item where:
            is_bathroom(bathroom)
        bind light_in_bathroom: item where:
            is_light(light_in_bathroom) and inside(light_in_bathroom, bathroom)

        turn_on_light_in_bedroom(light_in_bedroom)
        turn_on_light_in_bathroom(light_in_bathroom)

############################################################
When the sub-task is: Slice some chicken.
A successful representation:
behavior hold_knife(knife: item):
    body:
        achieve_once inhand(knife)
        # Hold the knife in hand

behavior prepare_to_slice_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior slice_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Slice the chicken

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select an instance of a knife

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken item

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an instance of a cutting board

        hold_knife(knife)
        # Hold the knife to start slicing

        prepare_to_slice_chicken(chicken, cutting_board)
        # Place the chicken on the cutting board

        slice_chicken(chicken)
        # Slice the chicken
############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
behavior wash_jacket_by_hand(jacket: item):
    body:
        achieve clean(jacket)
        # Ensure the jacket is clean after hand washing

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select an instance of a jacket to clean

        wash_jacket_by_hand(jacket)
        # Hand wash the jacket to achieve cleanliness
############################################################
When the sub-task is: 2. Use the washing machine to wash the jacket.
A successful representation:
 
behavior find_jacket(jacket: item):
    body:
        achieve visited(jacket)
        # Ensure the jacket is located and visited

behavior load_jacket_into_washing_machine(jacket: item, washing_machine: item):
    body:
        achieve inside(jacket, washing_machine)
        # Place the jacket inside the washing machine
        
behavior start_wash_cycle(washing_machine:item):
    body:
        assert has_switch(washing_machine)
        # Ensure the washing machine has a switch
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle
        
behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2119
        # Select the jacket with ID 2119

        bind couch: item where:
            is_couch(couch) and id[couch] == 198
        # Select the couch with ID 198

        observe(couch, "Locate clothes_jacket_2119 on couch_198")
        # Observe the jacket on the couch to ensure its location

        find_jacket(jacket)
        # Find and confirm the jacket is located

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2079
        # Select the washing machine with ID 2079

        load_jacket_into_washing_machine(jacket, washing_machine)
        # Load the jacket into the washing machine

        start_wash_cycle(washing_machine)
        # Start the wash cycle on the washing machine

############################################################
When the sub-task is: Wash the bowls and the plates with the dishwasher.
A successful representation:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance
        
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: Get a cup of water.
A successful representation:
 
def has_water_source(location: item):
    # Determine if there is a water source near a given location
    symbol has_faucet=exists faucet: item : is_faucet(faucet) and close(faucet, location)
    return has_faucet

behavior fill_cup_with_water(cup: item, location: item):
    body:
        achieve_once inside(cup, location)
        # Ensure the cup is in the location to fill it with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_on(faucet)
            # If theres a water source, turn it on to fill the cup

        achieve has_water(cup)
        # Fill the cup with water

        if has_water_source(location):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, location)
            achieve_once is_off(faucet)
            # Turn off the water source after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select a sink location for filling the cup

        fill_cup_with_water(cup, sink)

############################################################
When the sub-task is: 1. Identify the location where kitchen items are stored, locate a cup, and take the cup.
A successful representation:
behavior find_and_take_cup(cup: item):
    body:
        achieve_once inhand(cup)
        # Identify and take the cup

behavior __goal__():
    body:
        if exists location: item : is_cupboard(location) or is_kitchen_counter(location):
            # In this example, check for known potential storage places for cups
            bind cup: item where:
                is_cup(cup)
            find_and_take_cup(cup)
        else:
            foreach location: item:
                if is_cupboard(location) or is_kitchen_counter(location) and not visited(location):
                    observe(location, "Check if there are any cups available")
                    # Observe the kitchen storage locations for the presence of a cup to be taken
############################################################
When the sub-task is: 2. Pour milk into the cup.
A successful representation:
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        achieve inside(milk, cup)
        # Fill the cup with milk

############################################################
When the sub-task is: 3. Heat the cup of milk using the microwave.
A successful representation:
behavior heat_milk_in_microwave(cup: item, microwave: item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk in the microwave

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select cup with ID 2087

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave
############################################################
When the sub-task is: Boil the egg.
A successful representation:
 
behavior prepare_pot_for_boiling(pot: item, stove: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

        achieve on(pot, stove)
        # Place the pot on the stove

behavior place_egg_in_pot(egg: item, pot: item):
    body:
        achieve inside(egg, pot)
        # Place the egg inside the pot

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of an egg

        prepare_pot_for_boiling(pot, stove)
        place_egg_in_pot(egg, pot)
        turn_on_stove(stove)

############################################################
When the sub-task is: 1. Identify all windows in the house that need to be wiped.
A successful representation:
behavior identify_windows(window: item):
    body:
        achieve visited(window)

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Identify windows in the house")
############################################################
When the sub-task is: 2. Wipe each window with a towel.
A successful representation:
 
behavior wipe_window_with_towel(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        wipe(window)
        # Wipe the window using the towel

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window):
                bind towel: item where:
                    is_towel(towel)
                wipe_window_with_towel(window, towel)

############################################################
When the sub-task is: 1. Locate the coffee table in the home office.
A successful representation:
behavior locate_coffee_table(coffee_table: item):
    body:
        achieve visited(coffee_table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        foreach coffee_table: item:
            if is_coffee_table(coffee_table) and inside(coffee_table, home_office):
                locate_coffee_table(coffee_table)
############################################################
When the sub-task is: 2. Find the book and place it on the coffee table.
A successful representation:
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book
        
        bind home_office: item where:
            is_home_office(home_office)
        
        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Find the sink in the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom):
                observe(sink, "Identify the sink in the bathroom")

############################################################
When the sub-task is: 2. Add soap and water to the sink to prepare the soapy water.
A successful representation:
behavior add_soap_and_water_to_sink(soap: item, sink: item):
    body:
        achieve inside(soap, sink)
        # Ensure that the soap is inside the sink

        achieve has_water(sink)
        # Ensure that the sink is filled with water

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select sink with ID 42

        add_soap_and_water_to_sink(soap, sink)
        # Add soap and water to the sink to prepare soapy water
############################################################
When the sub-task is: 1. Find the basket with clothes in it.
A successful representation:
 
behavior find_basket_for_clothes(basket: item):
    body:
        achieve visited(basket)

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket):
            bind basket: item where:
                is_basket_for_clothes(basket)
            find_basket_for_clothes(basket)
        else:
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check contents of the basket for clothes")

############################################################
When the sub-task is: 2. Add the clothes and soap to the washing machine.
A successful representation:
 
def is_clothing_in_basket(basket: item):
    # Determine if there is clothing in the selected basket
    symbol has_clothing = exists clothing: item : (is_clothes_shirt(clothing) or is_clothes_pants(clothing) or is_clothes_socks(clothing) or is_clothes_skirt(clothing)) and inside(clothing, basket)
    return has_clothing

def is_soap_near_sink(sink: item):
    # Check if there is soap close to a specific sink
    symbol soap_near_sink = exists soap: item : is_soap(soap) and close(soap, sink)
    return soap_near_sink

behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):
    body:
        achieve inside(clothes, washing_machine)
        # Place each piece of clothing inside the washing machine

behavior add_soap_to_washing_machine(soap: item, washing_machine: item):
    body:
        achieve inside(soap, washing_machine)
        # Ensure the soap is placed inside the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2006
        # Select the basket with clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2007
        # Select the washing machine with ID 2007

        if is_clothing_in_basket(basket):
            foreach clothes: item:
                if (is_clothes_shirt(clothes) or is_clothes_pants(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                    load_clothes_into_washing_machine(clothes, washing_machine)
            # Load all clothes from the basket into the washing machine

        bind soap: item where:
            is_soap(soap) and id[soap] == 2053
        # Select the soap with ID 2053
        
        add_soap_to_washing_machine(soap, washing_machine)
        # Add the soap to the washing machine

############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:
behavior start_washing_machine(washing_machine: item):
    body:
        assert has_switch(washing_machine)
        # Ensure the washing machine has a switch
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2007
        # Select the washing machine with ID 2007

        start_washing_machine(washing_machine)
        # Start the washing machine to run the wash cycle
############################################################
When the sub-task is: 1. Locate the basket containing clothes.  
A successful representation:
 
behavior locate_basket_for_clothes(basket: item):
    body:
        achieve visited(basket)

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket):
            bind basket: item where:
                is_basket_for_clothes(basket)
            locate_basket_for_clothes(basket)
        else:
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if the basket contains clothes")

############################################################
When the sub-task is: 2. Place the clothes into the washing machine.  
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes: item, washing_machine: item):
    body:
        achieve inside(clothes, washing_machine)
        # Place each piece of clothing inside the washing machine

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2040
        # Select the basket containing clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select an instance of a washing machine

        foreach clothes: item:
            if (is_clothes_shirt(clothes) or is_clothes_pants(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine

############################################################
When the sub-task is: 3. Add soap to the washing machine and run it.
A successful representation:
 
behavior add_soap_to_washing_machine(soap: item, washing_machine: item):
    body:
        achieve inside(soap, washing_machine)
        # Add soap to the washing machine

behavior run_washing_machine(washing_machine: item):
    body:
        assert has_switch(washing_machine)
        # Ensure the washing machine has a switch
        achieve is_on(washing_machine)
        # Start the washing machine

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select an instance of a washing machine

        add_soap_to_washing_machine(soap, washing_machine)
        # Add the soap to the washing machine

        run_washing_machine(washing_machine)
        # Run the washing machine

############################################################
When the sub-task is: Put cleaning solution in the dishwasher, then wash the bowls and plates with the dishwasher.
A successful representation:
behavior put_cleaning_solution_in_dishwasher(cleaning_solution: item, dishwasher: item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Place the cleaning solution inside the dishwasher

behavior load_items_into_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select an instance of the cleaning solution
        
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select an instance of the dishwasher
        
        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)
        
        foreach o: item:
            if is_bowl(o) or is_plate(o):
                load_items_into_dishwasher(o, dishwasher)
                
        start_dishwasher(dishwasher) # Start the dishwasher with bowls and plates inside
############################################################
When the sub-task is: Make a cup of coffee using the coffee maker.
A successful representation:
 
behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select an instance of a coffee maker

        place_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

############################################################
When the sub-task is: 1. Take the milk and egg from the fridge and place them on the table in the dining room.
A successful representation:
behavior find_milk_and_egg_and_place_on_table(milk: item, egg: item, table: item):
    body:
        achieve_once inhand(milk)
        # Take the milk to place it on the table

        achieve_once inhand(egg)
        # Take the egg to place it on the table
 
        achieve on(milk, table)
        # Place the milk on the table

        achieve on(egg, table)
        # Place the egg on the table

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        observe(fridge, "Locate milk and eggs")
        # Observe the fridge to locate the milk and eggs inside it

        bind milk: item where:
            is_milk(milk)

        bind egg: item where:
            is_food_egg(egg)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        find_milk_and_egg_and_place_on_table(milk, egg, table)
        # Place milk and egg on the dining room table
############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
def has_items_in_fridge(fridge:item):
    # Function to check if there are any items in the specified fridge
    symbol has_items = exists o: item : inside(o, fridge)
    return has_items

behavior place_items_in_trashcan(o:item, trashcan:item):
    body:
        achieve inside(o, trashcan)
        # Place the item inside the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        if has_items_in_fridge(fridge):
            foreach o: item:
                if inside(o, fridge):
                    place_items_in_trashcan(o, trashcan)
        # Place all items from the fridge into the trashcan

############################################################
When the sub-task is: 3. Put the milk and egg back in the fridge.
A successful representation:
 
behavior put_milk_and_egg_back_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select milk with ID 2115

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select egg with ID 2092

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        put_milk_and_egg_back_in_fridge(milk, egg, fridge)

############################################################
When the sub-task is: 1. Identify the locations of all windows in the house.
A successful representation:
behavior identify_windows(window: item):
    body:
        achieve visited(window)

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Identify window locations in the house")
############################################################
When the sub-task is: 2. Wipe each window using a towel.
A successful representation:
 
behavior wipe_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        wipe(window)
        # Wipe the window using the towel

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window):
                bind towel: item where:
                    is_towel(towel)
                wipe_window(window, towel)

############################################################
When the sub-task is: 1. Find the milk and eggs.
A successful representation:
 
def has_milk_or_egg(fridge:item):
    # Function to check if there is milk or egg in the specified fridge
    symbol has_milk = exists o: item : is_milk(o) and inside(o, fridge)
    symbol has_egg = exists o: item : is_food_egg(o) and inside(o, fridge)
    return has_milk or has_egg

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_milk_or_egg(fridge):
            # If we have already found the fridge with milk or egg, we can directly observe it
            bind fridge: item where:
                is_fridge(fridge) and has_milk_or_egg(fridge)
            observe(fridge, "Locate milk and egg")

        else:
            # Check all fridges in the scene that have not been visited
            foreach fridge: item:
                if is_fridge(fridge) and not visited(fridge):
                    observe(fridge, "Locate milk and egg")

############################################################
When the sub-task is: 2. Put the milk and eggs on the table in the dining room.
A successful representation:
 
behavior place_milk_and_eggs_on_table(milk: item, eggs: item, table: item):
    body:
        achieve_once inhand(milk)
        # Temporarily hold the milk to place it on the table

        achieve_once inhand(eggs)
        # Temporarily hold the eggs to place them on the table

        achieve on(milk, table)
        # Place the milk on the table

        achieve on(eggs, table)
        # Place the eggs on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind eggs: item where:
            is_food_egg(eggs)
        # Select an instance of eggs

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select a table in the dining room

        place_milk_and_eggs_on_table(milk, eggs, table)
        # Execute the behavior to place milk and eggs on the table in the dining room

############################################################
When the sub-task is: 3. Take all items from the fridge and throw them in the trashcan.
A successful representation:
behavior throw_items_in_trashcan(o: item, trashcan: item):
    body:
        achieve inside(o, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        bind trashcan: item where:
            is_trashcan(trashcan)

        foreach o: item:
            if inside(o, fridge):
                throw_items_in_trashcan(o, trashcan)
############################################################
When the sub-task is: 4. Put the milk and eggs back in the fridge.
A successful representation:
 
behavior put_milk_and_eggs_back_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        # Select the milk with ID 2043

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289

        put_milk_and_eggs_back_in_fridge(milk, egg, fridge)

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start it.
A successful representation:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher instance
        
        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
behavior wash_forks_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        foreach fork: item:
            if is_fork(fork):
                wash_forks_hand(fork)
############################################################
When the sub-task is: Turn on the TV with the remote control.
A successful representation:
 
behavior turn_on_tv_using_remote(remote_control: item, television: item):
    body:
        achieve_once inhand(remote_control)
        # Pick up the remote control
        touch(remote_control)
        # Use the remote control to turn on the television
        achieve is_on(television)
        # Ensure the television is turned on

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select an instance of the remote control
        
        bind television: item where:
            is_television(television)
        # Select an instance of the television 

        turn_on_tv_using_remote(remote_control, television)
        # Turn on the TV using the remote control

############################################################
When the sub-task is: Boil the rice using a pot.
A successful representation:
 
def has_faucet(sink:item):
    # Determine if there is a faucet near the sink
    symbol exists_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return exists_faucet

behavior add_water_to_pot(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Ensure the pot is placed inside the sink for filling

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water

        achieve has_water(pot)
        # Ensure that the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot with water

behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is inside the pot

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2069
        # Select the pot with ID 2069

        bind rice: item where:
            is_food_rice(rice) and id[rice] == 2036
        # Select the rice with ID 2036

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        add_water_to_pot(pot, sink)
        place_rice_in_pot(rice, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
 
############################################################
When the sub-task is: 1. Find the spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior put_spectacles_on_coffee_table(spectacles: item, coffee_table: item):
    body:
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select an instance of spectacles

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select an instance of a book

        bind home_office: item where:
            is_home_office(home_office)

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select a coffee table inside the home office

        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Put the milk and egg on the table in the dining room.
A successful representation:
 
behavior find_milk_and_egg_and_place_on_table(milk: item, egg: item, table: item):
    body:
        achieve_once inhand(milk)
        # Take the milk to place it on the table

        achieve_once inhand(egg)
        # Take the egg to place it on the table

        achieve on(milk, table)
        # Place the milk on the table

        achieve on(egg, table)
        # Place the egg on the table

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        observe(fridge, "Locate milk and eggs")
        # Observe the fridge to locate the milk and eggs inside it

        bind milk: item where:
            is_milk(milk)

        bind egg: item where:
            is_food_egg(egg)

        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        
        find_milk_and_egg_and_place_on_table(milk, egg, table)
        # Place milk and egg on the dining room table

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
def has_items_in_fridge(fridge:item):
    # Function to check if there are any items in the specified fridge
    symbol has_items = exists o: item : inside(o, fridge)
    return has_items

behavior place_items_in_trashcan(o:item, trashcan:item):
    body:
        achieve inside(o, trashcan)
        # Place the item inside the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select the fridge with ID 140
        
        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select a trashcan

        if has_items_in_fridge(fridge):
            foreach o: item:
                if inside(o, fridge):
                    place_items_in_trashcan(o, trashcan)
        # Place all items from the fridge into the trashcan

############################################################
When the sub-task is: 3. Put the milk and eggs back in the fridge.
A successful representation:
behavior put_milk_and_eggs_back_in_fridge(milk: item, egg: item, fridge: item):
    body:
        achieve inside(milk, fridge)
        achieve inside(egg, fridge)

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2074
        # Select the milk with ID 2074

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2053
        # Select the egg with ID 2053

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select the fridge with ID 140

        put_milk_and_eggs_back_in_fridge(milk, egg, fridge)
############################################################
When the sub-task is: 1. Identify milk, turkey, egg, fish, and chicken in the household.
A successful representation:

def has_relevant_food(item: item):
    # Function to check if there are milk, turkey, egg, fish, or chicken in the specified location
    symbol contains_milk = exists o: item : is_milk(o) and close(o, item)
    symbol contains_turkey = exists o: item : is_food_turkey(o) and close(o, item)
    symbol contains_egg = exists o: item : is_food_egg(o) and close(o, item)
    symbol contains_fish = exists o: item : is_food_fish(o) and close(o, item)
    symbol contains_chicken = exists o: item : is_food_chicken(o) and close(o, item)
    return contains_milk or contains_turkey or contains_egg or contains_fish or contains_chicken

behavior __goal__():
    body:
        if exists item: item : has_relevant_food(item):
            # If relevant food is found, we can directly observe the item
            bind item: item where:
                has_relevant_food(item)
            observe(item, "Check for milk, turkey, egg, fish, and chicken")
        else:
            # Check all items in the scene that have not been visited
            foreach item: item:
                if not visited(item):
                    observe(item, "Locate milk, turkey, egg, fish, and chicken")

############################################################
When the sub-task is: 2. Place each item on the table in the dining room.
A successful representation:
 
behavior place_items_on_table(item: item, table: item):
    body:
        achieve on(item, table)

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 114

        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        place_items_on_table(milk, table)
        place_items_on_table(turkey, table)
        place_items_on_table(egg, table)
        place_items_on_table(fish, table)
        place_items_on_table(chicken, table)

############################################################
When the sub-task is: Cut the chicken into pieces, then put it back in the fridge.
A successful representation:
 
behavior hold_knife(knife: item):
    body:
        achieve_once inhand(knife)
        # Hold the knife in hand

behavior prepare_to_cut_chicken(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)
        # Place the chicken on the cutting board

behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken)
        # Cut the chicken

behavior place_chicken_in_fridge(chicken: item, fridge: item):
    body:
        achieve inside(chicken, fridge)
        # Place the chicken inside the fridge

behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select an instance of a knife

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the instance of the chicken

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an instance of a cutting board

        bind fridge: item where:
            is_fridge(fridge)
        # Select an instance of a fridge

        hold_knife(knife)
        # Hold the knife to start cutting

        prepare_to_cut_chicken(chicken, cutting_board)
        # Prepare the chicken by placing it on the cutting board

        cut_chicken(chicken)
        # Cut the chicken into pieces

        place_chicken_in_fridge(chicken, fridge)
        # Put the cut chicken back in the fridge

############################################################
When the sub-task is: 1. Fill a bowl with water and put the bowl on the table in the home office.
A successful representation:
behavior fill_bowl_with_water(bowl: item):
    body:
        achieve has_water(bowl)
        # Fill the bowl with water

behavior place_bowl_on_table(bowl: item, table: item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        fill_bowl_with_water(bowl)
        # Fill the bowl with water

        place_bowl_on_table(bowl, table)
        # Place the bowl on the table inside the home office
############################################################
When the sub-task is: 2. Find the cat and put it on the table in the home office.
A successful representation:
 
behavior find_cat_and_place_on_table(cat: item, table: item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select an instance of the cat

        bind home_office: item where:
            is_home_office(home_office)

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        find_cat_and_place_on_table(cat, table)
        # Place the cat on the table in the home office

