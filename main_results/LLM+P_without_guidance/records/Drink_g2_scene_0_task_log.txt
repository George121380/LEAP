From agent.py
Reset goals: The sub-goals are: 
['Get a cup of water and freeze it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_wallshelf_234(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

behavior find_oil_2079_around_closetdrawer_150(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==150
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(oil,closetdrawer_instance)
        else:
            exp(oil,closetdrawer_instance)
    eff:
        unknown[oil]=False
        close[oil,closetdrawer_instance]=True
        close[closetdrawer_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_cup_with_water(cup:item, faucet:item):
    body:
        achieve inside(cup, sink)
        # Ensure the cup is placed inside the sink

        if has_switch(faucet):
            bind faucet: item where:
                is_faucet(faucet)
            achieve_once is_on(faucet)
            # If the faucet has a switch, turn it on to fill the cup

        achieve has_water(cup)
        
        if has_switch(faucet):
            bind faucet: item where:
                is_faucet(faucet)
            achieve_once is_off(faucet)
            # If the faucet has a switch, turn it off after filling the cup

behavior freeze_cup(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Place the cup inside the freezer

        achieve closed(freezer)
        # Ensure the freezer is closed after placing the cup inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind freezer: item where:
            is_freezer(freezer)
        # Select a freezer

        fill_cup_with_water(cup, faucet)
        freeze_cup(cup, freezer)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
