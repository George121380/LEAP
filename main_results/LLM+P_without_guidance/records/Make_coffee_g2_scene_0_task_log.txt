From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker, then add milk and sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_milk_and_sugar(coffee_maker:item, cup:item, milk:item, sugar:item):
    body:
        assert has_switch(coffee_maker)
        # Ensure the coffee maker has a switch for operation

        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water to brew coffee

        achieve has_water(cup)
        # Ensure the cup is filled with brewed coffee

        assert grabbable(milk)
        # Ensure milk is a grabbable item

        assert grabbable(sugar)
        # Ensure sugar is a grabbable item

        achieve has_a_free_hand(char)
        # Ensure the character has a free hand

        achieve_once inhand(milk)
        # Temporarily hold the milk

        achieve inside(milk, cup)
        # Add milk to the coffee

        achieve_once inhand(sugar)
        # Temporarily hold the sugar

        achieve inside(sugar, cup)
        # Add sugar to the coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select an empty cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee_with_milk_and_sugar(coffee_maker, cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker, then add milk and sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item, cup:item, milk:item, sugar:item):
    body:
        achieve plugged(coffee_maker)
        achieve is_on(coffee_maker)
        achieve inside(cup, coffee_maker)
        # Ensure the cup receives coffee from the coffee maker

        achieve has_water(cup)
        # Ensure the coffee is in the cup

        achieve inside(milk, cup)
        # Add milk to the coffee in the cup

        achieve inside(sugar, cup)
        # Add sugar to the coffee in the cup

behavior __goal__():
    body:
        bind coffee_maker:item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select an empty cup

        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select sugar

        make_coffee(coffee_maker, cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker, then add milk and sugar.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_sugar_2039_around_kitchen_counter_230(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_sugar,kitchen_counter_instance)
        else:
            exp(food_sugar,kitchen_counter_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(cup:item, coffee_maker:item):
    body:
        assert is_cup(cup)
        assert is_coffee_maker(coffee_maker)
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup)
        # Add milk to the cup of coffee
        
        achieve inside(sugar, cup)
        # Add sugar to the cup of coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffee_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select the cup

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        make_coffee(cup, coffee_maker)
        add_milk_and_sugar(cup, milk, sugar)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
