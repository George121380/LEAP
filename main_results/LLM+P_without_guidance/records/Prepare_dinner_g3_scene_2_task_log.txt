From agent.py
Reset goals: The sub-goals are: 
['Cook bacon.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_video_game_controller_2019_around_television_216(video_game_controller:item):
    goal: not unknown(video_game_controller)
    body:
        assert is_video_game_controller(video_game_controller)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(video_game_controller,television_instance)
        else:
            exp(video_game_controller,television_instance)
    eff:
        unknown[video_game_controller]=False
        close[video_game_controller,television_instance]=True
        close[television_instance,video_game_controller]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_132(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_bacon(bacon:item, pan:item, stove:item):
    body:
        assert is_fryingpan(pan)
        # Ensure that the pan is a frying pan

        assert is_stove(stove)
        # Ensure that the item is a stove

        achieve inside(bacon, pan)
        # Place the bacon inside the pan

        achieve_on(pan)
        # Turn on the stove with the pan placed on it

behavior __goal__():
    body:
        bind bacon: item where:
            is_food_bacon(bacon)
        # Select the bacon

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_bacon(bacon, pan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
