From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2112_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_263_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

#exp_behavior_end

#goal_representation

behavior sit_on_chair(chair:item):
    body:
        assert sittable(chair)
        achieve on_char(char, chair)

behavior touch_mouse(mouse:item):
    body:
        assert grabbable(mouse) and has_switch(mouse)
        achieve visited(mouse)
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse near the computer
            
        sit_on_chair(chair)
        touch_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_chair_263_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_with_mouse(mouse:item):
    body:
        assert close_char(char, mouse)
        # Ensure the character is close to the mouse

        achieve is_on(mouse)
        # Turn on the computer by activating the mouse

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair in the home office

        bind mouse: item where:
            is_mouse(mouse) and inside(mouse, home_office)
        # Select a mouse in the home office

        sit_on_chair(chair)
        turn_on_computer_with_mouse(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_mousepad_381(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==381
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

behavior find_chair_138_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        assert sittable(chair)
        # Ensure the chair can be sat on

        achieve on_char(char, chair)
        # Achieve sitting on the chair

behavior turn_on_computer(mouse: item):
    body:
        achieve is_on(mouse)
        # Achieve turning on the computer by touching the mouse

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair)
        # Select a mouse close to the chair

        sit_on_chair(chair)
        turn_on_computer(mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
