From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_bathroom_counter_306(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(bathroom_counter_306)exp(soap_2037, bathroom_counter_306)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. Robot is no longer inside home_office_161.
##############################
From agent.py
switchoff_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
walk_executor(bathroom_counter_306)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is no longer close faucet_308.
##############################
From agent.py
exp(soap_2037, bathroom_counter_306)
Fail to find soap_2037 around bathroom_counter_306. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(soap_2037, bathroom_cabinet_305)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
switchon_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Find soap_2038. Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. Robot is no longer close bathroom_counter_306.Robot is no longer close faucet_308.
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. 
##############################
From agent.py
exp(soap_2037, bathroom_cabinet_305)
Fail to find soap_2037 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(towel_rack_298)exp(soap_2037, towel_rack_298)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(towel_rack_298)
Find towel_2083. Robot is inside bathroom_265. Robot is close towel_rack_298. Robot is no longer close bathroom_cabinet_305.Robot is no longer close wall_269.Robot is no longer close soap_2038.
##############################
From agent.py
exp(soap_2037, towel_rack_298)
Fail to find soap_2037 around towel_rack_298. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(soap_2037, sink_307)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(sink_307)
Find detergent_2108. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer close towel_rack_298.
##############################
From agent.py
exp(soap_2037, sink_307)
Fail to find soap_2037 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_303)exp(soap_2037, shower_303)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(shower_303)
Robot is inside bathroom_265. Robot is close shower_303. Robot is no longer close bathroom_counter_306.Robot is no longer close sink_307.
##############################
From agent.py
exp(soap_2037, shower_303)
Fail to find soap_2037 around shower_303. 
##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)exp(soap_2037, couch_192)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. Robot is no longer inside bathroom_265.Robot is no longer close shower_303.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find soap_2037 ?
Answer: To find soap_2037, go to bedroom_327 and locate filing_cabinet_378. Soap_2037 is inside filing_cabinet_378.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find soap_2037, go to bedroom_327 and locate filing_cabinet_378. Soap_2037 is inside filing_cabinet_378.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.
Action 3: Walk to bathroom_counter_306.
Action 4: look for soap_2037 around bathroom_counter_306.
Action 5: Walk to faucet_308.
Action 6: Switch on faucet_308.
Action 7: Switch off faucet_308.
Action 8: Walk to bathroom_cabinet_305.
Action 9: Open bathroom_cabinet_305.
Action 10: look for soap_2037 around bathroom_cabinet_305.
Action 11: Walk to towel_rack_298.
Action 12: look for soap_2037 around towel_rack_298.
Action 13: Walk to sink_307.
Action 14: look for soap_2037 around sink_307.
Action 15: Walk to shower_303.
Action 16: look for soap_2037 around shower_303.
Action 17: Walk to couch_192.

##############################
From agent.py
exp(soap_2037, couch_192)
Fail to find soap_2037 around couch_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(soap_2037, filing_cabinet_378)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Find food_bread_2016. Find crayon_2020. Find needle_2024. Find check_2033. Find alcohol_2002. Find coffee_filter_2035. Find soap_2037. Find bills_2009. Find drawing_387. Robot is inside bedroom_327. Robot is close food_bread_2016. Robot is close crayon_2020. Robot is close needle_2024. Robot is close floor_335. Robot is close check_2033. Robot is close alcohol_2002. Robot is close coffee_filter_2035. Robot is close soap_2037. Robot is close bills_2009. Robot is close filing_cabinet_378. Robot is no longer inside home_office_161.Robot is no longer close couch_192.
##############################
From agent.py
exp(soap_2037, filing_cabinet_378)
Find soap_2037. 
##############################
From agent.py-> find a plan in act()
grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
grab_executor(soap_2037)
Robot is inside bedroom_327. Robot is close food_bread_2016. Robot is close crayon_2020. Robot is close needle_2024. Robot is close floor_335. Robot is close check_2033. Robot is close alcohol_2002. Robot is close coffee_filter_2035. Robot is close soap_2037. Robot is close bills_2009. Robot is close filing_cabinet_378. Grabbing soap_2037 by right hand. 
##############################
From agent.py
walk_executor(sink_307)
Robot is inside bathroom_265. Robot is close soap_2037. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer inside bedroom_327.Robot is no longer close food_bread_2016.Robot is no longer close crayon_2020.Robot is no longer close needle_2024.Robot is no longer close floor_335.Robot is no longer close check_2033.Robot is no longer close alcohol_2002.Robot is no longer close coffee_filter_2035.Robot is no longer close bills_2009.Robot is no longer close filing_cabinet_378.
##############################
From agent.py
putin_executor(soap_2037, sink_307)
Robot is inside bathroom_265. Robot is close soap_2037. Robot is close bathroom_counter_306. Robot is close sink_307. soap_2037 released by right hand. 
##############################
From agent.py
Human Instruction: Fill the sink with water by turning on the faucet.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.
Action 3: Walk to bathroom_counter_306.
Action 4: look for soap_2037 around bathroom_counter_306.
Action 5: Walk to faucet_308.
Action 6: Switch on faucet_308.
Action 7: Switch off faucet_308.
Action 8: Walk to bathroom_cabinet_305.
Action 9: Open bathroom_cabinet_305.
Action 10: look for soap_2037 around bathroom_cabinet_305.
Action 11: Walk to towel_rack_298.
Action 12: look for soap_2037 around towel_rack_298.
Action 13: Walk to sink_307.
Action 14: look for soap_2037 around sink_307.
Action 15: Walk to shower_303.
Action 16: look for soap_2037 around shower_303.
Action 17: Walk to couch_192.
Action 18: look for soap_2037 around couch_192.
Action 19: Walk to filing_cabinet_378.
Action 20: look for soap_2037 around filing_cabinet_378.
Action 21: Grab soap_2037.
Action 22: Walk to sink_307.
Action 23: Put soap_2037 into sink_307.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_tray_142_around_kitchen_counter_132(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(tray,kitchen_counter_instance)
        else:
            exp(tray,kitchen_counter_instance)
    eff:
        unknown[tray]=False
        close[tray,kitchen_counter_instance]=True
        close[kitchen_counter_instance,tray]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

behavior find_food_banana_2045_around_kitchen_counter_128(food_banana:item):
    goal: not unknown(food_banana)
    body:
        assert is_food_banana(food_banana)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_banana,kitchen_counter_instance)
        else:
            exp(food_banana,kitchen_counter_instance)
    eff:
        unknown[food_banana]=False
        close[food_banana,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_banana]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink
        
        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_tray_142_around_dishwasher_143(tray:item):
    goal: not unknown(tray)
    body:
        assert is_tray(tray)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(tray,dishwasher_instance)
        else:
            exp(tray,dishwasher_instance)
    eff:
        unknown[tray]=False
        close[tray,dishwasher_instance]=True
        close[dishwasher_instance,tray]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Place the soap into the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)


#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink water to make it soapy

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select a soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_photoframe_361(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind photoframe_instance:item where:
            is_photoframe(photoframe_instance) and id[photoframe_instance]==361
        achieve close_char(char,photoframe_instance)
        if can_open(photoframe_instance):
            achieve_once open(photoframe_instance)
            exp(cleaning_solution,photoframe_instance)
        else:
            exp(cleaning_solution,photoframe_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,photoframe_instance]=True
        close[photoframe_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)

        bind soap: item where:
            is_soap(soap)

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bathroom_sink_with_water_and_soap(sink:item, faucet:item, soap:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_bathroom_sink_with_water_and_soap(sink, faucet, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Ensure the sink is filled with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink water

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select a sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_128(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_kitchen_counter_132(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_ceilinglamp_357(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==357
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(cleaning_solution,ceilinglamp_instance)
        else:
            exp(cleaning_solution,ceilinglamp_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,ceilinglamp_instance]=True
        close[ceilinglamp_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_128(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap) and visited(soap)
        # Select soap that is visited

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cup_2006(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2006
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(soap:item, sink:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(soap, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Ensure the sink is filled with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap to use in the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation

behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2087_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_kitchen_counter_129(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cleaning_solution,kitchen_counter_instance)
        else:
            exp(cleaning_solution,kitchen_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Ensure the sink is filled with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the sink with water

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

behavior find_cup_2006_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cup_2089_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom
        
        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_fruit_2056_around_kitchen_counter_132(food_fruit:item):
    goal: not unknown(food_fruit)
    body:
        assert is_food_fruit(food_fruit)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fruit,kitchen_counter_instance)
        else:
            exp(food_fruit,kitchen_counter_instance)
    eff:
        unknown[food_fruit]=False
        close[food_fruit,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fruit]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Ensure the sink is filled with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom
        
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to create soapy water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select the faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2051_around_kitchen_counter_132(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_dessert,kitchen_counter_instance)
        else:
            exp(food_dessert,kitchen_counter_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_dessert]=True
    

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_vacuum_cleaner_2094(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind vacuum_cleaner_instance:item where:
            is_vacuum_cleaner(vacuum_cleaner_instance) and id[vacuum_cleaner_instance]==2094
        achieve close_char(char,vacuum_cleaner_instance)
        if can_open(vacuum_cleaner_instance):
            achieve_once open(vacuum_cleaner_instance)
            exp(cleaning_solution,vacuum_cleaner_instance)
        else:
            exp(cleaning_solution,vacuum_cleaner_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,vacuum_cleaner_instance]=True
        close[vacuum_cleaner_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_washing_machine_2041(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(cleaning_solution,washing_machine_instance)
        else:
            exp(cleaning_solution,washing_machine_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,washing_machine_instance]=True
        close[washing_machine_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_detergent_2108_around_washing_machine_2041(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(detergent,washing_machine_instance)
        else:
            exp(detergent,washing_machine_instance)
    eff:
        unknown[detergent]=False
        close[detergent,washing_machine_instance]=True
        close[washing_machine_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_soap_2037_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2098_around_bathroom_cabinet_305(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior add_soap_to_sink(sink:item, soap:item):
    body:
        achieve inside(soap, sink)
        # Add soap to the water in the sink

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        bind soap: item where:
            is_soap(soap)
        # Select soap to add to the sink

        fill_sink_with_water(sink, faucet)
        add_soap_to_sink(sink, soap)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(soap_2037, bathroom_cabinet_305)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. Robot is no longer inside home_office_161.
##############################
From agent.py
switchoff_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Find soap_2038. Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. Robot is no longer close bathroom_counter_306.Robot is no longer close faucet_308.
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. 
##############################
From agent.py
exp(soap_2037, bathroom_cabinet_305)
Fail to find soap_2037 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchon_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(soap_2037, dishwasher_143)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. Robot is no longer close bathroom_cabinet_305.Robot is no longer close wall_269.Robot is no longer close soap_2038.
##############################
From agent.py
switchon_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close faucet_308. 
##############################
From agent.py
walk_executor(dishwasher_143)
Find knife_2036. Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_counter_306.Robot is no longer close faucet_308.
##############################
From agent.py
open_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. 
##############################
From agent.py
exp(soap_2037, dishwasher_143)
Fail to find soap_2037 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(toilet_302)open_executor(toilet_302)exp(soap_2037, toilet_302)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(toilet_302)
Robot is inside bathroom_265. Robot is close toilet_302. Robot is no longer inside dining_room_1.Robot is no longer close knife_2036.Robot is no longer close floor_21.Robot is no longer close dishwasher_143.
##############################
From agent.py
open_executor(toilet_302)
Robot is inside bathroom_265. Robot is close toilet_302. 
##############################
From agent.py
exp(soap_2037, toilet_302)
Fail to find soap_2037 around toilet_302. 
##############################
From agent.py-> find a plan in act()
walk_executor(shower_303)exp(soap_2037, shower_303)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(shower_303)
Robot is inside bathroom_265. Robot is close shower_303. Robot is no longer close toilet_302.
##############################
From agent.py
exp(soap_2037, shower_303)
Fail to find soap_2037 around shower_303. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_307)exp(soap_2037, sink_307)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(sink_307)
Find detergent_2108. Robot is inside bathroom_265. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer close shower_303.
##############################
From agent.py
exp(soap_2037, sink_307)
Fail to find soap_2037 around sink_307. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2041)open_executor(washing_machine_2041)exp(soap_2037, washing_machine_2041)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close washing_machine_2041. Robot is no longer close bathroom_counter_306.Robot is no longer close sink_307.
##############################
From agent.py
open_executor(washing_machine_2041)
Robot is inside bathroom_265. Robot is close washing_machine_2041. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find soap_2037 ?
Answer: Go to bedroom_327. Inside bedroom_327, locate filing_cabinet_378. Open filing_cabinet_378 to find soap_2037 inside.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to bedroom_327. Inside bedroom_327, locate filing_cabinet_378. Open filing_cabinet_378 to find soap_2037 inside.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.
Action 3: Walk to bathroom_cabinet_305.
Action 4: Open bathroom_cabinet_305.
Action 5: look for soap_2037 around bathroom_cabinet_305.
Action 6: Walk to faucet_308.
Action 7: Switch on faucet_308.
Action 8: Switch off faucet_308.
Action 9: Walk to dishwasher_143.
Action 10: Open dishwasher_143.
Action 11: look for soap_2037 around dishwasher_143.
Action 12: Walk to toilet_302.
Action 13: Open toilet_302.
Action 14: look for soap_2037 around toilet_302.
Action 15: Walk to shower_303.
Action 16: look for soap_2037 around shower_303.
Action 17: Walk to sink_307.
Action 18: look for soap_2037 around sink_307.
Action 19: Walk to washing_machine_2041.
Action 20: Open washing_machine_2041.

##############################
From agent.py
exp(soap_2037, washing_machine_2041)
Fail to find soap_2037 around washing_machine_2041. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(soap_2037, filing_cabinet_378)walk_executor(soap_2037)grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Find food_bread_2016. Find crayon_2020. Find needle_2024. Find check_2033. Find alcohol_2002. Find coffee_filter_2035. Find soap_2037. Find bills_2009. Find drawing_387. Robot is inside bedroom_327. Robot is close food_bread_2016. Robot is close crayon_2020. Robot is close needle_2024. Robot is close floor_335. Robot is close check_2033. Robot is close alcohol_2002. Robot is close coffee_filter_2035. Robot is close soap_2037. Robot is close bills_2009. Robot is close filing_cabinet_378. Robot is no longer inside bathroom_265.Robot is no longer close washing_machine_2041.
##############################
From agent.py
exp(soap_2037, filing_cabinet_378)
Find soap_2037. 
##############################
From agent.py-> find a plan in act()
grab_executor(soap_2037)walk_executor(sink_307)putin_executor(soap_2037, sink_307)
##############################
From agent.py
grab_executor(soap_2037)
Robot is inside bedroom_327. Robot is close food_bread_2016. Robot is close crayon_2020. Robot is close needle_2024. Robot is close floor_335. Robot is close check_2033. Robot is close alcohol_2002. Robot is close coffee_filter_2035. Robot is close soap_2037. Robot is close bills_2009. Robot is close filing_cabinet_378. Grabbing soap_2037 by right hand. 
##############################
From agent.py
walk_executor(sink_307)
Robot is inside bathroom_265. Robot is close soap_2037. Robot is close bathroom_counter_306. Robot is close sink_307. Robot is no longer inside bedroom_327.Robot is no longer close food_bread_2016.Robot is no longer close crayon_2020.Robot is no longer close needle_2024.Robot is no longer close floor_335.Robot is no longer close check_2033.Robot is no longer close alcohol_2002.Robot is no longer close coffee_filter_2035.Robot is no longer close bills_2009.Robot is no longer close filing_cabinet_378.
##############################
From agent.py
putin_executor(soap_2037, sink_307)
Robot is inside bathroom_265. Robot is close soap_2037. Robot is close bathroom_counter_306. Robot is close sink_307. soap_2037 released by right hand. 
##############################
From agent.py
Human Instruction: You need to fill the sink with water. While soap has been added to the sink, the sink is currently empty as no water has been left running to fill it.

The actions you have taken:
Action 1: Walk to faucet_308.
Action 2: Switch off faucet_308.
Action 3: Walk to bathroom_cabinet_305.
Action 4: Open bathroom_cabinet_305.
Action 5: look for soap_2037 around bathroom_cabinet_305.
Action 6: Walk to faucet_308.
Action 7: Switch on faucet_308.
Action 8: Switch off faucet_308.
Action 9: Walk to dishwasher_143.
Action 10: Open dishwasher_143.
Action 11: look for soap_2037 around dishwasher_143.
Action 12: Walk to toilet_302.
Action 13: Open toilet_302.
Action 14: look for soap_2037 around toilet_302.
Action 15: Walk to shower_303.
Action 16: look for soap_2037 around shower_303.
Action 17: Walk to sink_307.
Action 18: look for soap_2037 around sink_307.
Action 19: Walk to washing_machine_2041.
Action 20: Open washing_machine_2041.
Action 21: look for soap_2037 around washing_machine_2041.
Action 22: Walk to filing_cabinet_378.
Action 23: look for soap_2037 around filing_cabinet_378.
Action 24: Grab soap_2037.
Action 25: Walk to sink_307.
Action 26: Put soap_2037 into sink_307.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_cleaning_solution_2098_around_cupboard_131(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cleaning_solution,cupboard_instance)
        else:
            exp(cleaning_solution,cupboard_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cupboard_instance]=True
        close[cupboard_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Prepare a sink of soapy water in the bathroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_detergent_2108(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind detergent_instance:item where:
            is_detergent(detergent_instance) and id[detergent_instance]==2108
        achieve close_char(char,detergent_instance)
        if can_open(detergent_instance):
            achieve_once open(detergent_instance)
            exp(cleaning_solution,detergent_instance)
        else:
            exp(cleaning_solution,detergent_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,detergent_instance]=True
        close[detergent_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_sink_with_water(sink:item, faucet:item):
    body:
        achieve has_water(sink)
        # Fill the sink with water

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind sink: item where:
            is_sink(sink) and inside(sink, bathroom)
        # Select the sink in the bathroom

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        # Select a faucet close to the sink

        fill_sink_with_water(sink, faucet)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
