From agent.py
Reset goals: The sub-goals are: 
['Sitting on the couch, then turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)

behavior turn_on_tv(tv: item, remote_control: item):
    body:
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to turn on the TV
        
        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Select the couch

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control) and has_switch(remote_control)
        # Select the remote control

        sit_on_couch(couch)
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)

behavior turn_on_tv(tv: item, remote_control: item):
    body:
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to turn on the TV
        
        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Select the couch

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control) and has_switch(remote_control)
        # Select the remote control

        sit_on_couch(couch)
        turn_on_tv(tv, remote_control)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)sit_executor(couch_192)walk_executor(tvstand_135)exp(remote_control_2081, tvstand_135)walk_executor(remote_control_2081)grab_executor(remote_control_2081)walk_executor(television_216)switchon_executor(television_216)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. 
##############################
From agent.py
sit_executor(couch_192)
Find keyboard_2111. Find stereo_2007. Find cd_2100. Find mouse_2112. Find oil_2005. Find video_game_controller_2019. Find dvd_player_2000. Find clothes_underwear_2022. Find chair_2118. Find cup_2006. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote_on_couch(couch:item):
    # Function to check if there is a remote control on a specified couch
    symbol has_remote=exists o: item : is_remote_control(o) and on(o, couch)
    return has_remote

behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)
        # Sit on the specified couch

behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve is_on(tv)
        # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and on_char(char, couch)
        # Select the couch you are sitting on

        bind tv: item where:
            is_television(tv)
        # Select the television

        if has_remote_on_couch(couch):
            bind remote: item where:
                is_remote_control(remote) and on(remote, couch)
            # Select the remote control from the couch
            turn_on_tv(tv, remote)
        else:
            foreach item: item:
                if is_remote_control(item) and not visited(item):
                    observe(item, "Check if this remote is close to the couch")
                    if on_char(char, item):
                        turn_on_tv(tv, item)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_remote_on_couch(couch:item):
    # Function to check if there is a remote control on a specified couch
    symbol has_remote=exists o: item : is_remote_control(o) and on(o, couch)
    return has_remote

behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)
        # Sit on the specified couch

behavior turn_on_tv(tv:item, remote:item):
    body:
        achieve is_on(tv)
        # Turn on the TV using the remote control

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and on_char(char, couch)
        # Select the couch you are sitting on

        bind tv: item where:
            is_television(tv)
        # Select the television

        if has_remote_on_couch(couch):
            bind remote: item where:
                is_remote_control(remote) and on(remote, couch)
            # Select the remote control from the couch
            turn_on_tv(tv, remote)
        else:
            foreach item: item:
                if is_remote_control(item) and not visited(item):
                    observe(item, "Check if this remote is close to the couch")
                    if on_char(char, item):
                        turn_on_tv(tv, item)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(tvstand_186)exp(remote_control_2081, tvstand_186)standup_executor(char)walk_executor(remote_control_2081)obs(remote_control_2081, Check if this remote is close to the couch)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
From agent.py
walk_executor(tvstand_186)
Robot is inside home_office_161. Robot is close floor_162. Robot is close tvstand_186. Robot is close floor_163. Robot is on couch_192. Robot is no longer close couch_192.
##############################
From agent.py
exp(remote_control_2081, tvstand_186)
Fail to find remote_control_2081 around tvstand_186. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_135)exp(remote_control_2081, tvstand_135)walk_executor(remote_control_2081)obs(remote_control_2081, Check if this remote is close to the couch)
##############################
From agent.py
walk_executor(tvstand_135)
Find remote_control_2081. Find cd_player_2084. Find dvd_player_2085. Find drawing_118. Robot is inside dining_room_1. Robot is close floor_19. Robot is close tvstand_135. Robot is on couch_192. Robot is no longer inside home_office_161.Robot is no longer close tvstand_186.Robot is no longer close floor_162.Robot is no longer close floor_163.
##############################
From agent.py
exp(remote_control_2081, tvstand_135)
Find remote_control_2081. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2081)obs(remote_control_2081, Check if this remote is close to the couch)
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. Robot is no longer close floor_19.
##############################
From agent.py
obs(remote_control_2081, Check if this remote is close to the couch)
Get this information:  remote_control_2081 is inside dining_room_1. remote_control_2081 is close to tvstand_135. remote_control_2081 is close to character_219. remote_control_2081 is on tvstand_135. remote_control_2081 is OFF.
##############################
From agent.py
Human Instruction: Sit on the couch, find the remote control, and use it to turn on the TV. The remote control needs to be brought to the couch so it can be used from there.

Trial and Error: You can not walk tvstand_135
The actions you have taken:
Action 1: Walk to couch_192.
Action 2: Sit on couch_192.
Action 3: char stand up.
Action 4: Walk to tvstand_186.
Action 5: look for remote_control_2081 around tvstand_186.
Action 6: Walk to tvstand_135.
Action 7: look for remote_control_2081 around tvstand_135.
Action 8: Walk to remote_control_2081.
Action 9: Observe around remote_control_2081 with the question of Check if this remote is close to the couch.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_nightstand_262(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_console_2027_around_television_216(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==216
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(console,television_instance)
        else:
            exp(console,television_instance)
    eff:
        unknown[console]=False
        close[console,television_instance]=True
        close[television_instance,console]=True
    

#exp_behavior_end

#goal_representation
behavior move_to_couch_and_turn_on_tv(remote_control:item, couch:item, tv:item):
    body:
        achieve on_char(char, couch)
        # Ensure the character is sitting on the couch
        
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        observe(tv, "Check if this TV is in a state to be turned on using the remote")
        # Observe the TV to ensure conditions are met for it to be turned on

        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==192
        # Select the couch with the ID 192

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control) and grabbable(remote_control)
        # Select a grabbable remote control

        move_to_couch_and_turn_on_tv(remote_control, couch, tv)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior move_to_couch_and_turn_on_tv(remote_control:item, couch:item, tv:item):
    body:
        achieve on_char(char, couch)
        # Ensure the character is sitting on the couch
        
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        observe(tv, "Check if this TV is in a state to be turned on using the remote")
        # Observe the TV to ensure conditions are met for it to be turned on

        achieve is_on(tv)
        # Ensure the TV is turned on

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==192
        # Select the couch with the ID 192

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control) and grabbable(remote_control)
        # Select a grabbable remote control

        move_to_couch_and_turn_on_tv(remote_control, couch, tv)
##############################
From agent.py-> find a plan in act()
grab_executor(remote_control_2081)walk_executor(television_216)obs(television_216, Check if this TV is in a state to be turned on using the remote)switchon_executor(television_216)
##############################
From agent.py
grab_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. Grabbing remote_control_2081 by right hand. 
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close remote_control_2081. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. Robot is no longer inside dining_room_1.Robot is no longer close tvstand_135.
##############################
From agent.py
obs(television_216, Check if this TV is in a state to be turned on using the remote)
Get this information:  wall_171 is facing television_216. mat_201 is facing television_216. floor_163 is facing television_216. ceilinglamp_185 is facing television_216. ceiling_177 is facing television_216. wall_3 is facing television_216. powersocket_218 is facing television_216. wall_169 is facing television_216. photoframe_210 is facing television_216. curtain_199 is facing television_216. wall_6 is facing television_216. wallshelf_191 is facing television_216. television_216 is close to couch_192. television_216 is close to floor_162. television_216 is close to walllamp_291. television_216 is close to floor_163. television_216 is close to floor_166. television_216 is close to wall_169. television_216 is close to wall_171. television_216 is close to wall_268. television_216 is close to wall_267. television_216 is close to ceiling_175. television_216 is close to curtain_304. television_216 is close to ceiling_176. television_216 is close to shower_303. television_216 is close to floor_277. television_216 is close to floor_278. television_216 is close to walllamp_183. television_216 is close to walllamp_184. television_216 is close to tvstand_186. television_216 is close to character_219. television_216 is on tvstand_186. television_216 is inside home_office_161. ceiling_175 is facing television_216. curtain_197 is facing television_216. ceiling_178 is facing television_216. bookshelf_189 is facing television_216. window_181 is facing television_216. orchid_200 is facing television_216. doorjamb_37 is facing television_216. wall_173 is facing television_216. floor_162 is facing television_216. floor_168 is facing television_216. wallshelf_187 is facing television_216. curtain_198 is facing television_216. ceiling_176 is facing television_216. light_217 is facing television_216. wallshelf_190 is facing television_216. television_216 is OFF. television_216 is PLUGGED_IN. television_216 is CLEAN.
##############################
From agent.py
switchon_executor(television_216)
Robot is inside home_office_161. Robot is close remote_control_2081. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. 
##############################
