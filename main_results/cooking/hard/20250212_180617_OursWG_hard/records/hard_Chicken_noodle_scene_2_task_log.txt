From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and noodles.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2062_around_fridge_140(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

behavior clean_ingredient(ingredient:item):
    body:
        achieve clean(ingredient)

behavior __goal__():
    body:
        foreach ingredient: item:
            if (is_food_chicken(ingredient) or is_food_noodles(ingredient)) and dirty(ingredient):
                clean_ingredient(ingredient)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2062_around_fridge_140(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_noodles,fridge_instance)
        else:
            exp(food_noodles,fridge_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,fridge_instance]=True
        close[fridge_instance,food_noodles]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_cleaning_solution_2098_around_sink_307(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cleaning_solution,sink_instance)
        else:
            exp(cleaning_solution,sink_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,sink_instance]=True
        close[sink_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)

behavior clean_noodles(noodles:item):
    body:
        achieve clean(noodles)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        clean_chicken(chicken)
        clean_noodles(noodles)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_chicken(chicken:item):
    body:
        achieve clean(chicken)

behavior clean_noodles(noodles:item):
    body:
        achieve clean(noodles)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        clean_chicken(chicken)
        clean_noodles(noodles)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(fridge_140)exp(food_noodles_2062, fridge_140)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)wash_executor(food_noodles_2062)walk_executor(kitchen_counter_132)put_executor(food_chicken_2050, kitchen_counter_132)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the chicken and noodles.', '2. Boil the chicken and noodles together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2038_around_sink_133(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_item(item:item):
    body:
        achieve_once visited(item)
        # Mark the item as visited, representing finding the item
        achieve clean(item)
        # Clean the item

behavior __goal__():
    body:
        foreach item: item:
            if (is_food_chicken(item) or is_food_noodles(item)) and (not visited(item) or dirty(item)):
                find_and_wash_item(item)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_item(item:item):
    body:
        achieve_once visited(item)
        # Mark the item as visited, representing finding the item
        achieve clean(item)
        # Clean the item

behavior __goal__():
    body:
        foreach item: item:
            if (is_food_chicken(item) or is_food_noodles(item)) and (not visited(item) or dirty(item)):
                find_and_wash_item(item)

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, look around this place)obs(food_noodles_2062, look around this place)
##############################
From agent.py
obs(food_chicken_2050, look around this place)
Get this information:  food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_noodles_2062, look around this place)
Get this information:  food_noodles_2062 is inside dining_room_1. food_noodles_2062 is inside fridge_140. food_noodles_2062 is close to fridge_140. food_noodles_2062 is close to character_219. food_noodles_2062 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_clothes_pants_2113_around_basket_for_clothes_2040(clothes_pants:item):
    goal: not unknown(clothes_pants)
    body:
        assert is_clothes_pants(clothes_pants)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_pants,basket_for_clothes_instance)
        else:
            exp(clothes_pants,basket_for_clothes_instance)
    eff:
        unknown[clothes_pants]=False
        close[clothes_pants,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_pants]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_chicken_noodles_in_pot(chicken:item, noodles:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_chicken_noodles_in_pot(chicken, noodles, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_chicken_noodles_in_pot(chicken:item, noodles:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_chicken_noodles_in_pot(chicken, noodles, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_54, stove_2090)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_54, stove_2090)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Add water to the pot to ensure the "fill_pot_with_water(pot)" behavior is achieved.
##############################
From agent.py
Human Instruction: Add water to the pot to ensure the "fill_pot_with_water(pot)" behavior is achieved.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Observe around food_chicken_2050 with the question of look around this place.
Action 6: Observe around food_noodles_2062 with the question of look around this place.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_54 around stove_2090.
Action 10: Walk to pot_54.
Action 11: Open pot_54.
Action 12: Walk to food_chicken_2050.
Action 13: Grab food_chicken_2050.
Action 14: Walk to pot_54.
Action 15: Put food_chicken_2050 into pot_54.
Action 16: Walk to food_noodles_2062.
Action 17: Grab food_noodles_2062.
Action 18: Walk to pot_54.
Action 19: Put food_noodles_2062 into pot_54.
Action 20: Grab pot_54.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.
Action 25: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_bathroom_counter_306(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(coin,bathroom_counter_instance)
        else:
            exp(coin,bathroom_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,coin]=True
    

behavior find_shoes_2001_around_ironing_board_2099(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind ironing_board_instance:item where:
            is_ironing_board(ironing_board_instance) and id[ironing_board_instance]==2099
        achieve close_char(char,ironing_board_instance)
        if can_open(ironing_board_instance):
            achieve_once open(ironing_board_instance)
            exp(shoes,ironing_board_instance)
        else:
            exp(shoes,ironing_board_instance)
    eff:
        unknown[shoes]=False
        close[shoes,ironing_board_instance]=True
        close[ironing_board_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_308)switchoff_executor(faucet_308)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Add water to the pot to fulfill the "fill_pot_with_water(pot)" behavior.
##############################
From agent.py
Human Instruction: Add water to the pot to fulfill the "fill_pot_with_water(pot)" behavior.

The actions you have taken:
Action 1: Walk to fridge_140.
Action 2: Switch off fridge_140.
Action 3: Open fridge_140.
Action 4: look for food_chicken_2050 around fridge_140.
Action 5: Observe around food_chicken_2050 with the question of look around this place.
Action 6: Observe around food_noodles_2062 with the question of look around this place.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_54 around stove_2090.
Action 10: Walk to pot_54.
Action 11: Open pot_54.
Action 12: Walk to food_chicken_2050.
Action 13: Grab food_chicken_2050.
Action 14: Walk to pot_54.
Action 15: Put food_chicken_2050 into pot_54.
Action 16: Walk to food_noodles_2062.
Action 17: Grab food_noodles_2062.
Action 18: Walk to pot_54.
Action 19: Put food_noodles_2062 into pot_54.
Action 20: Grab pot_54.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to stove_2090.
Action 24: Put pot_54 on stove_2090.
Action 25: Switch on stove_2090.
Action 26: Grab pot_54.
Action 27: Walk to faucet_308.
Action 28: Switch off faucet_308.
Action 29: Walk to stove_2090.
Action 30: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_sink_133(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(coin,sink_instance)
        else:
            exp(coin,sink_instance)
    eff:
        unknown[coin]=False
        close[coin,sink_instance]=True
        close[sink_instance,coin]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior boil_chicken_noodles_together(pot:item, stove:item, chicken:item, noodles:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        boil_chicken_noodles_together(pot, stove, chicken, noodles)
        turn_on_stove(stove)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_370_around_bed_376(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior boil_chicken_and_noodles(chicken:item, noodles:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        boil_chicken_and_noodles(chicken, noodles, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior boil_chicken_and_noodles(chicken:item, noodles:item, pot:item):
    body:
        achieve_once inside(chicken, pot)
        achieve_once inside(noodles, pot)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind noodles: item where:
            is_food_noodles(noodles)

        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        boil_chicken_and_noodles(chicken, noodles, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure that water is added to the pot before boiling. Currently, the pot lacks water, which is necessary for boiling chicken and noodles. Fulfill the "fill_pot_with_water" behavior by adding water using a faucet before proceeding.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)']
Time info:
Time consume: 186 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 80
goal generate times: 7
goal correct times: 0
action_num: 32

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
