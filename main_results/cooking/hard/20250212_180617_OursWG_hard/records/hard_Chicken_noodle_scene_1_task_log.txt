From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken.  ', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_cupboard_118(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
def has_noodles_or_chicken_available():
    symbol available = exists o: item : (is_food_noodles(o) or is_food_chicken(o))
    return available

behavior find_noodles_and_chicken(noodles:item, chicken:item):
    body:
        achieve_once visited(noodles)
        achieve_once visited(chicken)

behavior __goal__():
    body:
        if not has_noodles_or_chicken_available():
            foreach item: item:
                if (is_food_noodles(item) or is_food_chicken(item)) and not visited(item):
                    observe(item, "Check if it is noodles or chicken")

        bind noodles: item where:
            is_food_noodles(noodles) and visited(noodles)

        bind chicken: item where:
            is_food_chicken(chicken) and visited(chicken)

        find_noodles_and_chicken(noodles, chicken)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_noodles_2101_around_cupboard_118(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_noodles,cupboard_instance)
        else:
            exp(food_noodles,cupboard_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,cupboard_instance]=True
        close[cupboard_instance,food_noodles]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
behavior search_for_noodles(noodles:item):
    body:
        achieve_once visited(noodles)

behavior search_for_chicken(chicken:item):
    body:
        achieve_once visited(chicken)

behavior __goal__():
    body:
        foreach noodles: item:
            if is_food_noodles(noodles) and not visited(noodles):
                search_for_noodles(noodles)

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                search_for_chicken(chicken)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior search_for_noodles(noodles:item):
    body:
        achieve_once visited(noodles)

behavior search_for_chicken(chicken:item):
    body:
        achieve_once visited(chicken)

behavior __goal__():
    body:
        foreach noodles: item:
            if is_food_noodles(noodles) and not visited(noodles):
                search_for_noodles(noodles)

        foreach chicken: item:
            if is_food_chicken(chicken) and not visited(chicken):
                search_for_chicken(chicken)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(food_noodles_2101, cupboard_118)walk_executor(food_noodles_2101)obs(food_noodles_2101, look around this place)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, look around this place)
##############################
From agent.py
walk_executor(cupboard_118)
Robot find: pot_78, Robot is close to the cupboard_118. 
##############################
From agent.py
open_executor(cupboard_118)
Robot find: tea_2066, knife_2037, food_peanut_butter_2077, Robot is close to the tea_2066. Robot is close to the knife_2037. Robot is close to the cupboard_118. Robot is close to the food_peanut_butter_2077. cupboard_118 is opened. 
##############################
From agent.py
exp(food_noodles_2101, cupboard_118)
Fail to find food_noodles_2101 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(food_noodles_2101, cupboard_117)walk_executor(food_noodles_2101)obs(food_noodles_2101, look around this place)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, look around this place)
##############################
From agent.py
walk_executor(cupboard_117)
Robot find: coffee_filter_2053, Robot is close to the coffee_filter_2053. Robot is close to the cupboard_117. 
##############################
From agent.py
exp(food_noodles_2101, cupboard_117)
Fail to find food_noodles_2101 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(bench_113)exp(food_noodles_2101, bench_113)walk_executor(food_noodles_2101)obs(food_noodles_2101, look around this place)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, look around this place)
##############################
From agent.py
walk_executor(bench_113)
Robot find: mat_102, pillow_103, pillow_104, pillow_105, pillow_106, drawing_110, Robot is close to the bench_113. 
##############################
From agent.py
exp(food_noodles_2101, bench_113)
Fail to find food_noodles_2101 around bench_113. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_noodles_2101, fridge_126)walk_executor(food_noodles_2101)obs(food_noodles_2101, look around this place)walk_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)obs(food_chicken_2089, look around this place)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_noodles_2101, fridge_126)
Find food_noodles_2101. 
##############################
From agent.py-> find a plan in act()
obs(food_noodles_2101, look around this place)obs(food_chicken_2089, look around this place)
##############################
From agent.py
obs(food_noodles_2101, look around this place)
Get this information:  food_noodles_2101 is close to fridge_126. food_noodles_2101 is close to character_240. food_noodles_2101 is inside dining_room_41. food_noodles_2101 is inside fridge_126. food_noodles_2101 is CLEAN.
##############################
From agent.py
obs(food_chicken_2089, look around this place)
Get this information:  food_chicken_2089 is inside dining_room_41. food_chicken_2089 is inside fridge_126. food_chicken_2089 is close to fridge_126. food_chicken_2089 is close to character_240. food_chicken_2089 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_pot_78(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==78
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_scrabble_2031_around_bookshelf_124(scrabble:item):
    goal: not unknown(scrabble)
    body:
        assert is_scrabble(scrabble)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(scrabble,bookshelf_instance)
        else:
            exp(scrabble,bookshelf_instance)
    eff:
        unknown[scrabble]=False
        close[scrabble,bookshelf_instance]=True
        close[bookshelf_instance,scrabble]=True
    

#exp_behavior_end

#goal_representation
behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
grab_executor(food_noodles_2101)walk_executor(pot_78)putin_executor(food_noodles_2101, pot_78)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_78)putin_executor(food_chicken_2089, pot_78)grab_executor(pot_78)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
grab_executor(food_noodles_2101)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_noodles_2101 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_noodles_2101, pot_78)
Robot find: Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. food_noodles_2101 is close pot_78. pot_78 is close food_noodles_2101. food_noodles_2101 is inside pot_78. food_noodles_2101 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_chicken_2089)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the fridge_126. Grabbing food_chicken_2089 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
putin_executor(food_chicken_2089, pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. pot_78 is close food_chicken_2089. food_chicken_2089 is inside pot_78. food_chicken_2089 is close pot_78. food_chicken_2089 released by right hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_chicken_2089. Robot is close to the food_noodles_2101. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the pot_78. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(cupboard_118)', 'open_executor(cupboard_118)', 'walk_executor(cupboard_117)', 'walk_executor(bench_113)', 'walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_noodles_2101)', 'walk_executor(pot_78)', 'putin_executor(food_noodles_2101, pot_78)', 'walk_executor(food_chicken_2089)', 'grab_executor(food_chicken_2089)', 'walk_executor(pot_78)', 'putin_executor(food_chicken_2089, pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'switchoff_executor(faucet_20)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)']
Time info:
Time consume: 130 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 72
goal generate times: 3
goal correct times: 0
action_num: 21

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
