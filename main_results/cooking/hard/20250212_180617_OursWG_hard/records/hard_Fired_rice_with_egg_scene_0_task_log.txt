From agent.py
Reset goals: The sub-goals are: 
['1. Find and wash the rice and eggs.', '2. Cook the rice.', '3. Crack the eggs and fry them with the rice.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_rice_2036_around_kitchen_counter_230(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_wash_rice(rice:item):
    body:
        achieve_once visited(rice)
        # Visit the rice
        achieve clean(rice)
        # Clean the rice

behavior find_and_wash_eggs(egg:item):
    body:
        achieve_once visited(egg)
        # Visit the egg
        achieve clean(egg)
        # Clean the egg

behavior __goal__():
    body:
        foreach rice: item:
            if is_food_rice(rice) and (not visited(rice) or dirty(rice)):
                find_and_wash_rice(rice)

        foreach egg: item:
            if is_food_egg(egg) and (not visited(egg) or dirty(egg)):
                find_and_wash_eggs(egg)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_and_wash_rice(rice:item):
    body:
        achieve_once visited(rice)
        # Visit the rice
        achieve clean(rice)
        # Clean the rice

behavior find_and_wash_eggs(egg:item):
    body:
        achieve_once visited(egg)
        # Visit the egg
        achieve clean(egg)
        # Clean the egg

behavior __goal__():
    body:
        foreach rice: item:
            if is_food_rice(rice) and (not visited(rice) or dirty(rice)):
                find_and_wash_rice(rice)

        foreach egg: item:
            if is_food_egg(egg) and (not visited(egg) or dirty(egg)):
                find_and_wash_eggs(egg)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_rice_2036, kitchen_counter_230)walk_executor(food_rice_2036)obs(food_rice_2036, look around this place)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the kitchen_counter_230. 
##############################
From agent.py
exp(food_rice_2036, kitchen_counter_230)
Fail to find food_rice_2036 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(food_rice_2036, stove_2065)walk_executor(food_rice_2036)obs(food_rice_2036, look around this place)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. 
##############################
From agent.py
open_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the stove_2065. stove_2065 is opened. 
##############################
From agent.py
exp(food_rice_2036, stove_2065)
Fail to find food_rice_2036 around stove_2065. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(food_rice_2036, cupboard_229)walk_executor(food_rice_2036)obs(food_rice_2036, look around this place)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(cupboard_229)exp(food_egg_2020, cupboard_229)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(food_rice_2036, cupboard_229)
Fail to find food_rice_2036 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_rice_2036, fridge_289)walk_executor(food_rice_2036)obs(food_rice_2036, look around this place)grab_executor(food_rice_2036)walk_executor(faucet_43)switchon_executor(faucet_43)wash_executor(food_rice_2036)switchoff_executor(faucet_43)walk_executor(wallshelf_35)exp(food_egg_2020, wallshelf_35)walk_executor(food_egg_2020)obs(food_egg_2020, look around this place)grab_executor(food_egg_2020)walk_executor(kitchen_counter_230)put_executor(food_rice_2036, kitchen_counter_230)switchon_executor(faucet_232)wash_executor(food_egg_2020)switchoff_executor(faucet_232)
##############################
From agent.py
walk_executor(fridge_289)
Robot find: Robot is close to the fridge_289. 
##############################
From agent.py
switchoff_executor(fridge_289)
Robot find: Robot is close to the fridge_289. fridge_289 is turned off. 
##############################
From agent.py
open_executor(fridge_289)
Robot find: sauce_2078, food_steak_2008, food_apple_2009, food_bacon_2010, food_banana_2011, food_bread_2012, food_cake_2013, food_carrot_2014, food_cereal_2015, food_cheese_2016, food_chicken_2017, food_dessert_2018, food_donut_2019, food_egg_2020, food_fish_2021, food_food_2022, food_fruit_2023, food_hamburger_2024, food_ice_cream_2025, food_jam_2026, food_kiwi_2027, food_lemon_2028, food_noodles_2029, food_oatmeal_2030, food_orange_2031, food_onion_2032, food_peanut_butter_2033, food_pizza_2034, food_potato_2035, food_rice_2036, food_salt_2037, food_snack_2038, food_sugar_2039, food_turkey_2040, food_vegetable_2041, dry_pasta_2042, milk_2043, Robot is close to the sauce_2078. Robot is close to the fridge_289. Robot is close to the food_steak_2008. Robot is close to the food_apple_2009. Robot is close to the food_bacon_2010. Robot is close to the food_banana_2011. Robot is close to the food_bread_2012. Robot is close to the food_cake_2013. Robot is close to the food_carrot_2014. Robot is close to the food_cereal_2015. Robot is close to the food_cheese_2016. Robot is close to the food_chicken_2017. Robot is close to the food_dessert_2018. Robot is close to the food_donut_2019. Robot is close to the food_egg_2020. Robot is close to the food_fish_2021. Robot is close to the food_food_2022. Robot is close to the food_fruit_2023. Robot is close to the food_hamburger_2024. Robot is close to the food_ice_cream_2025. Robot is close to the food_jam_2026. Robot is close to the food_kiwi_2027. Robot is close to the food_lemon_2028. Robot is close to the food_noodles_2029. Robot is close to the food_oatmeal_2030. Robot is close to the food_orange_2031. Robot is close to the food_onion_2032. Robot is close to the food_peanut_butter_2033. Robot is close to the food_pizza_2034. Robot is close to the food_potato_2035. Robot is close to the food_rice_2036. Robot is close to the food_salt_2037. Robot is close to the food_snack_2038. Robot is close to the food_sugar_2039. Robot is close to the food_turkey_2040. Robot is close to the food_vegetable_2041. Robot is close to the dry_pasta_2042. Robot is close to the milk_2043. fridge_289 is opened. 
##############################
From agent.py
exp(food_rice_2036, fridge_289)
Find food_rice_2036. 
##############################
From agent.py-> find a plan in act()
obs(food_rice_2036, look around this place)obs(food_egg_2020, look around this place)
##############################
From agent.py
obs(food_rice_2036, look around this place)
Get this information:  food_rice_2036 is inside fridge_289. food_rice_2036 is inside dining_room_201. food_rice_2036 is close to fridge_289. food_rice_2036 is close to character_65. food_rice_2036 is CLEAN.
##############################
From agent.py
obs(food_egg_2020, look around this place)
Get this information:  food_egg_2020 is inside fridge_289. food_egg_2020 is inside dining_room_201. food_egg_2020 is close to fridge_289. food_egg_2020 is close to character_65. food_egg_2020 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_wallshelf_35(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(plate,wallshelf_instance)
        else:
            exp(plate,wallshelf_instance)
    eff:
        unknown[plate]=False
        close[plate,wallshelf_instance]=True
        close[wallshelf_instance,plate]=True
    

behavior find_bowl_2072_around_pot_2069(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(bowl,pot_instance)
        else:
            exp(bowl,pot_instance)
    eff:
        unknown[bowl]=False
        close[bowl,pot_instance]=True
        close[pot_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_rice_in_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_rice_in_pot(rice:item, pot:item):
    body:
        achieve_once inside(rice, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_rice_in_pot(rice, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(pot_2069)putin_executor(food_rice_2036, pot_2069)grab_executor(pot_2069)walk_executor(faucet_43)switchon_executor(faucet_43)switchoff_executor(faucet_43)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(pot_2069)
Robot find: Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is opened. 
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the fridge_289. Robot is close to the food_rice_2036. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(food_rice_2036, pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. pot_2069 is close food_rice_2036. food_rice_2036 is inside pot_2069. food_rice_2036 is close pot_2069. food_rice_2036 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Robot is close to the kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot find: towel_rack_31, towel_rack_32, towel_rack_34, Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. 
##############################
From agent.py
switchon_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_43)
Robot find: Robot is close to the pot_2069. Robot is close to the bathroom_counter_41. Robot is close to the faucet_43. faucet_43 is turned off. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. pot_2069 is close stove_2065. pot_2069 is on stove_2065. stove_2065 is close pot_2069. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot find: Robot is close to the pot_2069. Robot is close to the stove_2065. Robot is close to the kitchen_counter_230. stove_2065 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior crack_and_fry_eggs_with_rice(egg:item, rice:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)
        # Add the cooked rice into the frying pan
        achieve_once inside(egg, fryingpan)
        # Add the cracked eggs into the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be cracked and fried

        bind rice: item where:
            is_food_rice(rice)
        # Select the already cooked rice

        bind stove: item where:
            is_stove(stove) and is_on(stove)
        # Ensure the stove is on

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Ensure the frying pan is on the stove

        crack_and_fry_eggs_with_rice(egg, rice, fryingpan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_clothes_hat_2045_around_closetdrawer_119(clothes_hat:item):
    goal: not unknown(clothes_hat)
    body:
        assert is_clothes_hat(clothes_hat)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_hat,closetdrawer_instance)
        else:
            exp(clothes_hat,closetdrawer_instance)
    eff:
        unknown[clothes_hat]=False
        close[clothes_hat,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_hat]=True
    

#exp_behavior_end

#goal_representation
behavior crack_eggs(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_cooked_rice_to_frying_pan(rice:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)

        crack_eggs(egg, fryingpan)
        add_cooked_rice_to_frying_pan(rice, fryingpan)
        turn_on_stove(stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_wallshelf_35(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs(eggs:item, bowl:item):
    body:
        achieve_once inside(eggs, bowl)
        # Crack the eggs into a bowl

behavior fry_eggs_with_rice(eggs:item, rice:item, fryingpan:item):
    body:
        achieve_once inside(eggs, fryingpan)
        achieve_once inside(rice, fryingpan)
        # Add the eggs and rice to the frying pan

behavior __goal__():
    body:
        bind eggs: item where:
            is_food_egg(eggs)
        
        bind rice: item where:
            is_food_rice(rice)
        
        bind stove: item where:
            is_stove(stove) and is_on(stove)
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        
        bind bowl: item where:
            is_bowl(bowl)
        
        crack_eggs(eggs, bowl)
        fry_eggs_with_rice(eggs, rice, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. crack the eggs and fry them with the rice." ?
Answer: Put a frying pan on the stove and turn on the stove. Then put rice, egg, and oil in a frying pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_hanger_374_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior fry_ingredients_with_rice(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        crack_eggs_into_pan(egg, pan)
        fry_ingredients_with_rice(rice, egg, oil, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_hanger_361_around_towel_rack_31(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==31
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(hanger,towel_rack_instance)
        else:
            exp(hanger,towel_rack_instance)
    eff:
        unknown[hanger]=False
        close[hanger,towel_rack_instance]=True
        close[towel_rack_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior add_rice_to_pan(rice:item, pan:item):
    body:
        achieve_once inside(rice, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)

        crack_eggs(egg, pan)
        add_rice_to_pan(rice, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_hanger_375_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs_into_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior add_rice_to_pan(rice:item, pan:item):
    body:
        achieve_once inside(rice, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        crack_eggs_into_pan(egg, pan)
        add_rice_to_pan(rice, pan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cat_2055_around_couch_352(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind couch_instance:item where:
            is_couch(couch_instance) and id[couch_instance]==352
        achieve close_char(char,couch_instance)
        if can_open(couch_instance):
            achieve_once open(couch_instance)
            exp(cat,couch_instance)
        else:
            exp(cat,couch_instance)
    eff:
        unknown[cat]=False
        close[cat,couch_instance]=True
        close[couch_instance,cat]=True
    

#exp_behavior_end

#goal_representation
behavior crack_eggs_and_add_to_pan(egg:item, pan:item):
    body:
        achieve_once inside(egg, pan)

behavior add_cooked_rice_to_pan(rice:item, pan:item):
    body:
        achieve_once inside(rice, pan)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior add_oil_to_pan(oil:item, pan:item):
    body:
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        bind oil: item where:
            is_oil(oil)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)

        crack_eggs_and_add_to_pan(egg, pan)
        add_cooked_rice_to_pan(rice, pan)
        add_oil_to_pan(oil, pan)
        turn_on_stove(stove)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior crack_eggs_onto_frying_pan(egg:item, fryingpan:item):
    body:
        achieve_once inside(egg, fryingpan)

behavior add_rice_to_frying_pan(rice:item, fryingpan:item):
    body:
        achieve_once inside(rice, fryingpan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind stove: item where:
            is_stove(stove)

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        crack_eggs_onto_frying_pan(egg, fryingpan)
        add_rice_to_frying_pan(rice, fryingpan)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2071_around_fryingpan_2083(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind fryingpan_instance:item where:
            is_fryingpan(fryingpan_instance) and id[fryingpan_instance]==2083
        achieve close_char(char,fryingpan_instance)
        if can_open(fryingpan_instance):
            achieve_once open(fryingpan_instance)
            exp(bowl,fryingpan_instance)
        else:
            exp(bowl,fryingpan_instance)
    eff:
        unknown[bowl]=False
        close[bowl,fryingpan_instance]=True
        close[fryingpan_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior crack_the_eggs_and_fry_with_rice(egg:item, rice:item, frying_pan:item):
    body:
        achieve_once inside(egg, frying_pan)
        achieve_once inside(rice, frying_pan)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)

        bind rice: item where:
            is_food_rice(rice)

        bind stove: item where:
            is_stove(stove)

        bind frying_pan: item where:
            is_fryingpan(frying_pan) and on(frying_pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        crack_the_eggs_and_fry_with_rice(egg, rice, frying_pan)
#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "3. crack the eggs and fry them with the rice." ?
Answer: You should first put a frying pan on the stove and turn on the stove. Then put oil in the frying pan, followed by rice and eggs.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put a frying pan on the stove and turn on the stove.', '2. Add oil to the frying pan, followed by the cooked rice and eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_hanger_114_around_closetdrawer_119(hanger:item):
    goal: not unknown(hanger)
    body:
        assert is_hanger(hanger)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==119
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(hanger,closetdrawer_instance)
        else:
            exp(hanger,closetdrawer_instance)
    eff:
        unknown[hanger]=False
        close[hanger,closetdrawer_instance]=True
        close[closetdrawer_instance,hanger]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
behavior place_frying_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        place_frying_pan_on_stove(pan, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior place_frying_pan_on_stove(pan:item, stove:item):
    body:
        achieve_once on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)

        bind stove: item where:
            is_stove(stove)

        place_frying_pan_on_stove(pan, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. 
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the fryingpan_2083. Robot is close to the stove_2065. fryingpan_2083 is close stove_2065. fryingpan_2083 is on stove_2065. stove_2065 is close fryingpan_2083. fryingpan_2083 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2066_around_bookshelf_354(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==354
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_wall_clock_249_around_wallshelf_35(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==35
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_rice_egg_and_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)
        
        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_and_oil_to_pan(rice, egg, oil, pan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior add_rice_egg_and_oil_to_pan(rice:item, egg:item, oil:item, pan:item):
    body:
        achieve_once inside(rice, pan)
        achieve_once inside(egg, pan)
        achieve_once inside(oil, pan)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)

        bind egg: item where:
            is_food_egg(egg)

        bind oil: item where:
            is_oil(oil)
        
        bind stove: item where:
            is_stove(stove)

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove) and is_on(stove)
        # Ensure the frying pan is on a stove that is turned on

        add_rice_egg_and_oil_to_pan(rice, egg, oil, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_rice_2036)grab_executor(food_rice_2036)walk_executor(fryingpan_2083)putin_executor(food_rice_2036, fryingpan_2083)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)putin_executor(food_egg_2020, fryingpan_2083)walk_executor(oil_2079)grab_executor(oil_2079)walk_executor(fryingpan_2083)putin_executor(oil_2079, fryingpan_2083)
##############################
From agent.py
walk_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. 
##############################
From agent.py
grab_executor(food_rice_2036)
Robot find: Robot is close to the food_rice_2036. Robot is close to the pot_2069. Grabbing food_rice_2036 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_rice_2036, fryingpan_2083)
Robot find: Robot is close to the food_rice_2036. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_rice_2036 is inside fryingpan_2083. food_rice_2036 is close fryingpan_2083. fryingpan_2083 is close food_rice_2036. food_rice_2036 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot find: Robot is close to the fridge_289. Robot is close to the food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot find: Robot is close to the food_egg_2020. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. food_egg_2020 is inside fryingpan_2083. fryingpan_2083 is close food_egg_2020. food_egg_2020 is close fryingpan_2083. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. 
##############################
From agent.py
grab_executor(oil_2079)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the oil_2079. Grabbing oil_2079 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot find: Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. 
##############################
From agent.py
putin_executor(oil_2079, fryingpan_2083)
Robot find: Robot is close to the oil_2079. Robot is close to the stove_2065. Robot is close to the fryingpan_2083. oil_2079 is close fryingpan_2083. oil_2079 is inside fryingpan_2083. fryingpan_2083 is close oil_2079. oil_2079 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Fried rice with egg.
Action History:
['walk_executor(kitchen_counter_230)', 'walk_executor(stove_2065)', 'open_executor(stove_2065)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(fridge_289)', 'switchoff_executor(fridge_289)', 'open_executor(fridge_289)', 'walk_executor(pot_2069)', 'open_executor(pot_2069)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(pot_2069)', 'putin_executor(food_rice_2036, pot_2069)', 'grab_executor(pot_2069)', 'walk_executor(faucet_43)', 'switchon_executor(faucet_43)', 'switchoff_executor(faucet_43)', 'walk_executor(stove_2065)', 'put_executor(pot_2069, stove_2065)', 'switchon_executor(stove_2065)', 'walk_executor(fryingpan_2083)', 'grab_executor(fryingpan_2083)', 'walk_executor(stove_2065)', 'put_executor(fryingpan_2083, stove_2065)', 'walk_executor(food_rice_2036)', 'grab_executor(food_rice_2036)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_rice_2036, fryingpan_2083)', 'walk_executor(food_egg_2020)', 'grab_executor(food_egg_2020)', 'walk_executor(fryingpan_2083)', 'putin_executor(food_egg_2020, fryingpan_2083)', 'walk_executor(oil_2079)', 'grab_executor(oil_2079)', 'walk_executor(fryingpan_2083)', 'putin_executor(oil_2079, fryingpan_2083)']
Time info:
Time consume: 393 seconds
Exp_helper query times: 0
Guidance query times: 2
library scale: 88
goal generate times: 13
goal correct times: 0
action_num: 37

Task complete rate:
1
Scene_id: 0
##############################
