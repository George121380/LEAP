From agent.py
Reset goals: The sub-goals are: 
['1. Clean the fish and the vegetables for the soup.  ', '2. Cook the ingredients in a pot to make the soup.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_kitchen_counter_123(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_lemon_2100_around_fridge_126(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_onion_2104_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_carrot_2086_around_kitchen_counter_122(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_potato_2107_around_kitchen_counter_123(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_potato,kitchen_counter_instance)
        else:
            exp(food_potato,kitchen_counter_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_potato]=True
    

behavior find_food_fish_2093_around_kitchen_counter_122(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_fish,kitchen_counter_instance)
        else:
            exp(food_fish,kitchen_counter_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
behavior clean_the_fish(fish:item):
    body:
        achieve clean(fish)

behavior clean_the_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior __goal__():
    body:
        foreach fish: item:
            if is_food_fish(fish) and dirty(fish):
                clean_the_fish(fish)

        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_the_vegetables(vegetable)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_kitchen_counter_122(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_lemon_2100_around_kitchen_counter_122(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_lemon,kitchen_counter_instance)
        else:
            exp(food_lemon,kitchen_counter_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_lemon]=True
    

behavior find_food_onion_2009_around_kitchen_counter_122(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_fish_2093_around_fridge_126(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

#exp_behavior_end

#goal_representation
behavior find_and_clean_fish(fish:item):
    body:
        achieve_once visited(fish)
        # Visit the fish to find it
        achieve clean(fish)
        # Clean the fish

behavior clean_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior __goal__():
    body:
        foreach fish: item:
            if is_food_fish(fish) and (not visited(fish) or dirty(fish)):
                find_and_clean_fish(fish)
 
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_vegetables(vegetable)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior find_and_clean_fish(fish:item):
    body:
        achieve_once visited(fish)
        # Visit the fish to find it
        achieve clean(fish)
        # Clean the fish

behavior clean_vegetables(vegetable:item):
    body:
        achieve clean(vegetable)

behavior __goal__():
    body:
        foreach fish: item:
            if is_food_fish(fish) and (not visited(fish) or dirty(fish)):
                find_and_clean_fish(fish)
 
        foreach vegetable: item:
            if is_food_vegetable(vegetable) and dirty(vegetable):
                clean_vegetables(vegetable)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_fish_2093, fridge_126)walk_executor(food_fish_2093)obs(food_fish_2093, look around this place)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(fridge_126)
Robot find: food_food_1000, Robot is close to the fridge_126. 
##############################
From agent.py
switchoff_executor(fridge_126)
Robot find: Robot is close to the fridge_126. fridge_126 is turned off. 
##############################
From agent.py
open_executor(fridge_126)
Robot find: food_onion_2048, food_food_2046, food_food_2073, food_steak_2080, food_apple_2081, food_bacon_2082, food_banana_2083, food_cake_2085, food_carrot_2086, food_cereal_2087, food_cheese_2088, food_chicken_2089, food_dessert_2090, food_donut_2091, food_egg_2092, food_fish_2093, food_food_2094, food_fruit_2095, food_hamburger_2096, food_ice_cream_2097, food_jam_2098, food_lemon_2100, food_noodles_2101, food_oatmeal_2102, food_orange_2103, food_onion_2104, food_peanut_butter_2105, food_pizza_2106, food_potato_2107, food_rice_2108, food_salt_2109, food_snack_2110, food_sugar_2111, food_turkey_2112, food_vegetable_2113, food_food_2001, sauce_2148, Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. fridge_126 is opened. 
##############################
From agent.py
exp(food_fish_2093, fridge_126)
Find food_fish_2093. 
##############################
From agent.py-> find a plan in act()
obs(food_fish_2093, look around this place)grab_executor(food_fish_2093)walk_executor(faucet_20)switchon_executor(faucet_20)wash_executor(food_fish_2093)switchoff_executor(faucet_20)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(kitchen_counter_119)put_executor(food_fish_2093, kitchen_counter_119)switchon_executor(faucet_121)wash_executor(food_vegetable_2113)switchoff_executor(faucet_121)
##############################
From agent.py
obs(food_fish_2093, look around this place)
Get this information:  food_fish_2093 is inside dining_room_41. food_fish_2093 is inside fridge_126. food_fish_2093 is close to fridge_126. food_fish_2093 is close to character_240. food_fish_2093 is DIRTY.
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_onion_2048. Robot is close to the food_food_2046. Robot is close to the food_food_2073. Robot is close to the food_steak_2080. Robot is close to the food_apple_2081. Robot is close to the food_bacon_2082. Robot is close to the food_banana_2083. Robot is close to the food_cake_2085. Robot is close to the food_carrot_2086. Robot is close to the food_cereal_2087. Robot is close to the food_cheese_2088. Robot is close to the food_chicken_2089. Robot is close to the food_dessert_2090. Robot is close to the food_donut_2091. Robot is close to the food_egg_2092. Robot is close to the food_fish_2093. Robot is close to the food_food_2094. Robot is close to the food_fruit_2095. Robot is close to the food_hamburger_2096. Robot is close to the food_ice_cream_2097. Robot is close to the food_jam_2098. Robot is close to the food_lemon_2100. Robot is close to the food_noodles_2101. Robot is close to the food_oatmeal_2102. Robot is close to the food_orange_2103. Robot is close to the food_onion_2104. Robot is close to the food_peanut_butter_2105. Robot is close to the food_pizza_2106. Robot is close to the food_potato_2107. Robot is close to the food_rice_2108. Robot is close to the food_salt_2109. Robot is close to the food_snack_2110. Robot is close to the food_sugar_2111. Robot is close to the food_turkey_2112. Robot is close to the food_vegetable_2113. Robot is close to the food_food_2001. Robot is close to the sauce_2148. Robot is close to the fridge_126. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Robot find: mat_32, phone_2029, drawing_33, Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
wash_executor(food_fish_2093)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. food_fish_2093 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot find: Robot is close to the food_fish_2093. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned off. 
##############################
From agent.py
walk_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. 
##############################
From agent.py
grab_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the fridge_126. Grabbing food_vegetable_2113 by left hand. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: fork_2150, bowl_2142, food_salt_2041, pot_78, pot_2138, bowl_2140, bowl_2141, fork_2151, plate_2152, Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(food_fish_2093, kitchen_counter_119)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. kitchen_counter_119 is close food_fish_2093. food_fish_2093 is close kitchen_counter_119. food_fish_2093 is on kitchen_counter_119. food_fish_2093 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2113)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. food_vegetable_2113 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_fish_2093. Robot is close to the food_vegetable_2113. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_cupboard_117(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_clothes_dress_2116_around_dresser_274(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_dress,dresser_instance)
        else:
            exp(clothes_dress,dresser_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,dresser_instance]=True
        close[dresser_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
behavior cook_ingredients_in_pot(fish:item, vegetables:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetables, pot)

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet)  # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        ensure_pot_has_water(pot, faucet)
        cook_ingredients_in_pot(fish, vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior cook_ingredients_in_pot(fish:item, vegetables:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetables, pot)

behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet)  # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        ensure_pot_has_water(pot, faucet)
        cook_ingredients_in_pot(fish, vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)walk_executor(kitchen_counter_119)put_executor(pot_78, kitchen_counter_119)switchon_executor(faucet_121)switchoff_executor(faucet_121)grab_executor(food_fish_2093)walk_executor(pot_78)putin_executor(food_fish_2093, pot_78)putin_executor(food_vegetable_2113, pot_78)grab_executor(pot_78)walk_executor(stove_2135)put_executor(pot_78, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
switchon_executor(faucet_20)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. faucet_20 is turned on. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: food_food_2064, Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the oven_127. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
walk_executor(kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
put_executor(pot_78, kitchen_counter_119)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. pot_78 is close kitchen_counter_119. pot_78 is on kitchen_counter_119. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
grab_executor(food_fish_2093)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the food_fish_2093. Grabbing food_fish_2093 by right hand. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the food_fish_2093. 
##############################
From agent.py
putin_executor(food_fish_2093, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the food_fish_2093. pot_78 is close food_fish_2093. food_fish_2093 is inside pot_78. food_fish_2093 is close pot_78. food_fish_2093 released by right hand. 
##############################
From agent.py
putin_executor(food_vegetable_2113, pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the food_fish_2093. food_vegetable_2113 is inside pot_78. pot_78 is close food_vegetable_2113. food_vegetable_2113 is close pot_78. food_vegetable_2113 released by left hand. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the food_fish_2093. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. stove_2135 is close pot_78. pot_78 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. stove_2135 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Fill the pot with water before cooking the ingredients. Ensure the pot has water by turning on a faucet while the pot is positioned under it to achieve 'has_water(pot)' condition.
##############################
From agent.py
Human Instruction: Fill the pot with water before cooking the ingredients. Ensure the pot has water by turning on a faucet while the pot is positioned under it to achieve 'has_water(pot)' condition.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of look around this place.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to food_vegetable_2113.
Action 12: Grab food_vegetable_2113.
Action 13: Walk to kitchen_counter_119.
Action 14: Put food_fish_2093 on kitchen_counter_119.
Action 15: Switch on faucet_121.
Action 16: Wash food_vegetable_2113.
Action 17: Switch off faucet_121.
Action 18: Walk to faucet_20.
Action 19: Switch on faucet_20.
Action 20: Walk to pot_78.
Action 21: Grab pot_78.
Action 22: Walk to faucet_121.
Action 23: Walk to kitchen_counter_119.
Action 24: Put pot_78 on kitchen_counter_119.
Action 25: Switch on faucet_121.
Action 26: Switch off faucet_121.
Action 27: Grab food_fish_2093.
Action 28: Walk to pot_78.
Action 29: Put food_fish_2093 into pot_78.
Action 30: Put food_vegetable_2113 into pot_78.
Action 31: Grab pot_78.
Action 32: Walk to stove_2135.
Action 33: Put pot_78 on stove_2135.
Action 34: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_carrot_2015_around_cupboard_117(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_ingredients_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_ingredients_in_pot(fish:item, vegetables:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot) and id[pot] == 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20

        fill_pot_with_water(pot, faucet)
        place_ingredients_in_pot(fish, vegetables, pot)
        cook_ingredients_in_pot(pot, stove)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cook_ingredients_in_pot(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_ingredients_in_pot(fish:item, vegetables:item, pot:item):
    body:
        achieve_once inside(fish, pot)
        achieve_once inside(vegetables, pot)

behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish) and clean(fish)

        bind vegetables: item where:
            is_food_vegetable(vegetables) and clean(vegetables)

        bind pot: item where:
            is_pot(pot) and id[pot] == 78

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 20

        fill_pot_with_water(pot, faucet)
        place_ingredients_in_pot(fish, vegetables, pot)
        cook_ingredients_in_pot(pot, stove)
 
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)walk_executor(pot_78)grab_executor(pot_78)walk_executor(faucet_121)switchon_executor(faucet_121)switchoff_executor(faucet_121)walk_executor(stove_2135)put_executor(pot_78, stove_2135)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py
walk_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the stove_2135. 
##############################
From agent.py
grab_executor(pot_78)
Robot find: Robot is close to the food_vegetable_2113. Robot is close to the food_fish_2093. Robot is close to the pot_78. Robot is close to the stove_2135. Grabbing pot_78 by right hand. 
##############################
From agent.py
walk_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. 
##############################
From agent.py
switchon_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. faucet_121 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_121)
Robot find: Robot is close to the pot_78. Robot is close to the faucet_121. Robot is close to the kitchen_counter_119. faucet_121 is turned off. 
##############################
From agent.py
walk_executor(stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. 
##############################
From agent.py
put_executor(pot_78, stove_2135)
Robot find: Robot is close to the pot_78. Robot is close to the kitchen_counter_119. Robot is close to the stove_2135. pot_78 is close stove_2135. pot_78 is on stove_2135. pot_78 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot should be filled with water as per the human instruction to ensure 'has_water(pot)' condition. This involves ensuring that the pot is positioned under a faucet while it is turned on. Make sure this step is completed before cooking the ingredients.
##############################
From agent.py
Human Instruction: The pot should be filled with water as per the human instruction to ensure 'has_water(pot)' condition. This involves ensuring that the pot is positioned under a faucet while it is turned on. Make sure this step is completed before cooking the ingredients.

The actions you have taken:
Action 1: Walk to fridge_126.
Action 2: Switch off fridge_126.
Action 3: Open fridge_126.
Action 4: look for food_fish_2093 around fridge_126.
Action 5: Observe around food_fish_2093 with the question of look around this place.
Action 6: Grab food_fish_2093.
Action 7: Walk to faucet_20.
Action 8: Switch on faucet_20.
Action 9: Wash food_fish_2093.
Action 10: Switch off faucet_20.
Action 11: Walk to food_vegetable_2113.
Action 12: Grab food_vegetable_2113.
Action 13: Walk to kitchen_counter_119.
Action 14: Put food_fish_2093 on kitchen_counter_119.
Action 15: Switch on faucet_121.
Action 16: Wash food_vegetable_2113.
Action 17: Switch off faucet_121.
Action 18: Walk to faucet_20.
Action 19: Switch on faucet_20.
Action 20: Walk to pot_78.
Action 21: Grab pot_78.
Action 22: Walk to faucet_121.
Action 23: Walk to kitchen_counter_119.
Action 24: Put pot_78 on kitchen_counter_119.
Action 25: Switch on faucet_121.
Action 26: Switch off faucet_121.
Action 27: Grab food_fish_2093.
Action 28: Walk to pot_78.
Action 29: Put food_fish_2093 into pot_78.
Action 30: Put food_vegetable_2113 into pot_78.
Action 31: Grab pot_78.
Action 32: Walk to stove_2135.
Action 33: Put pot_78 on stove_2135.
Action 34: Switch on stove_2135.
Action 35: Walk to faucet_20.
Action 36: Walk to pot_78.
Action 37: Grab pot_78.
Action 38: Walk to faucet_121.
Action 39: Switch on faucet_121.
Action 40: Switch off faucet_121.
Action 41: Walk to stove_2135.
Action 42: Put pot_78 on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2159_around_basket_for_clothes_2078(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_pot_78_around_computer_276(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==276
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(pot,computer_instance)
        else:
            exp(pot,computer_instance)
    eff:
        unknown[pot]=False
        close[pot,computer_instance]=True
        close[computer_instance,pot]=True
    

behavior find_clothes_dress_2116_around_basket_for_clothes_2078(clothes_dress:item):
    goal: not unknown(clothes_dress)
    body:
        assert is_clothes_dress(clothes_dress)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2078
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_dress,basket_for_clothes_instance)
        else:
            exp(clothes_dress,basket_for_clothes_instance)
    eff:
        unknown[clothes_dress]=False
        close[clothes_dress,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_dress]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior cook_ingredients_in_pot(pot:item, stove:item):
    body:
        achieve_once inside(food_fish, pot)
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove)

        bind food_fish: item where:
            is_food_fish(food_fish)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        cook_ingredients_in_pot(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_fish; available variables: [Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2048_around_cupboard_117(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_wooden_spoon_2000_around_cupboard_117(wooden_spoon:item):
    goal: not unknown(wooden_spoon)
    body:
        assert is_wooden_spoon(wooden_spoon)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(wooden_spoon,cupboard_instance)
        else:
            exp(wooden_spoon,cupboard_instance)
    eff:
        unknown[wooden_spoon]=False
        close[wooden_spoon,cupboard_instance]=True
        close[cupboard_instance,wooden_spoon]=True
    

behavior find_pot_78_around_food_salt_2041(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind food_salt_instance:item where:
            is_food_salt(food_salt_instance) and id[food_salt_instance]==2041
        achieve close_char(char,food_salt_instance)
        if can_open(food_salt_instance):
            achieve_once open(food_salt_instance)
            exp(pot,food_salt_instance)
        else:
            exp(pot,food_salt_instance)
    eff:
        unknown[pot]=False
        close[pot,food_salt_instance]=True
        close[food_salt_instance,pot]=True
    

behavior find_food_carrot_2015_around_food_food_1000(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind food_food_instance:item where:
            is_food_food(food_food_instance) and id[food_food_instance]==1000
        achieve close_char(char,food_food_instance)
        if can_open(food_food_instance):
            achieve_once open(food_food_instance)
            exp(food_carrot,food_food_instance)
        else:
            exp(food_carrot,food_food_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,food_food_instance]=True
        close[food_food_instance,food_carrot]=True
    

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior cook_ingredients_in_pot(pot:item, stove:item, food_fish:item, food_vegetable:item):
    body:
        achieve_once inside(food_fish, pot)
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove)

        bind food_fish: item where:
            is_food_fish(food_fish)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        cook_ingredients_in_pot(pot, stove, food_fish, food_vegetable)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior cook_ingredients_in_pot(pot:item, stove:item, food_fish:item, food_vegetable:item):
    body:
        achieve_once inside(food_fish, pot)
        achieve_once inside(food_vegetable, pot)
        achieve_once on(pot, stove)
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)

        bind stove: item where:
            is_stove(stove)

        bind food_fish: item where:
            is_food_fish(food_fish)

        bind food_vegetable: item where:
            is_food_vegetable(food_vegetable)

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        cook_ingredients_in_pot(pot, stove, food_fish, food_vegetable)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot find: Robot is close to the bathroom_counter_18. Robot is close to the faucet_20. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Task Summary:
Task Goal:
Cook a pot of fish soup.
Action History:
['walk_executor(fridge_126)', 'switchoff_executor(fridge_126)', 'open_executor(fridge_126)', 'grab_executor(food_fish_2093)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'wash_executor(food_fish_2093)', 'switchoff_executor(faucet_20)', 'walk_executor(food_vegetable_2113)', 'grab_executor(food_vegetable_2113)', 'walk_executor(kitchen_counter_119)', 'put_executor(food_fish_2093, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'wash_executor(food_vegetable_2113)', 'switchoff_executor(faucet_121)', 'walk_executor(faucet_20)', 'switchon_executor(faucet_20)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'walk_executor(kitchen_counter_119)', 'put_executor(pot_78, kitchen_counter_119)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'grab_executor(food_fish_2093)', 'walk_executor(pot_78)', 'putin_executor(food_fish_2093, pot_78)', 'putin_executor(food_vegetable_2113, pot_78)', 'grab_executor(pot_78)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'switchon_executor(stove_2135)', 'walk_executor(faucet_20)', 'walk_executor(pot_78)', 'grab_executor(pot_78)', 'walk_executor(faucet_121)', 'switchon_executor(faucet_121)', 'switchoff_executor(faucet_121)', 'walk_executor(stove_2135)', 'put_executor(pot_78, stove_2135)', 'walk_executor(faucet_20)']
Time info:
Time consume: 208 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 69
goal generate times: 5
goal correct times: 1
action_num: 41

Task complete rate:
Keystate: k1 - Requires: 11 steps
Action Completion Rate: No actions required
Scene_id: 1
##############################
