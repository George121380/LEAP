From agent.py
Reset goals: The sub-goals are: 
['1. Boil the chicken.', '2. Boil the noodles with the cooked chicken.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_coin_2004_around_kitchen_counter_129(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coin,kitchen_counter_instance)
        else:
            exp(coin,kitchen_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coin]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_129(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_chicken_in_pot(chicken, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_chicken_in_pot(chicken, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_54, cupboard_130)walk_executor(kitchen_counter_129)exp(food_chicken_2050, kitchen_counter_129)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, pot_54, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(pot_54, cupboard_130)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_chicken_2050, kitchen_counter_129)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. 
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_129)
Fail to find food_chicken_2050 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_54)open_executor(pot_54)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(pot_54)putin_executor(food_chicken_2050, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. 
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_chicken_2050, pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. food_chicken_2050 is close pot_54. pot_54 is close food_chicken_2050. food_chicken_2050 is inside pot_54. food_chicken_2050 released by right hand. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The sub-task of boiling the chicken has not been completed because the pot has not been filled with water. You need to fill the pot with water before the chicken can be boiled.
##############################
From agent.py
Human Instruction: The sub-task of boiling the chicken has not been completed because the pot has not been filled with water. You need to fill the pot with water before the chicken can be boiled.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for food_chicken_2050 around kitchen_counter_129.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to pot_54.
Action 14: Put food_chicken_2050 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        place_chicken_in_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_chicken_in_pot(chicken:item, pot:item):
    body:
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet)

        fill_pot_with_water(pot, faucet)
        place_chicken_in_pot(chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)walk_executor(pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. pot_54 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Currently, the chicken has been placed in the pot, and the pot is on the stove with the stove turned on, but the pot was not filled with water before placing it on the stove.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. Currently, the chicken has been placed in the pot, and the pot is on the stove with the stove turned on, but the pot was not filled with water before placing it on the stove.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for food_chicken_2050 around kitchen_counter_129.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to pot_54.
Action 14: Put food_chicken_2050 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Walk to faucet_308.
Action 22: Walk to pot_54.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot_54)
        # Select the chicken that is already inside pot_54

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot_54; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_2112_around_sink_307(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mouse,sink_instance)
        else:
            exp(mouse,sink_instance)
    eff:
        unknown[mouse]=False
        close[mouse,sink_instance]=True
        close[sink_instance,mouse]=True
    

#goal_representation
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select the chicken that is already inside pot

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pot; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_stamp_2031_around_bookshelf_372(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#goal_representation
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) 
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)
        # Select the chicken that is already inside pot

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_bookshelf_260(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==260
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(stamp,bookshelf_instance)
        else:
            exp(stamp,bookshelf_instance)
    eff:
        unknown[stamp]=False
        close[stamp,bookshelf_instance]=True
        close[bookshelf_instance,stamp]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_2003_around_sink_307(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(mouse,sink_instance)
        else:
            exp(mouse,sink_instance)
    eff:
        unknown[mouse]=False
        close[mouse,sink_instance]=True
        close[sink_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and inside(chicken, pot) 

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove)
        
        fill_pot_with_water(pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the noodles and chicken.', '2. Boil the noodles and chicken together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_kitchen_counter_128(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dough,kitchen_counter_instance)
        else:
            exp(dough,kitchen_counter_instance)
    eff:
        unknown[dough]=False
        close[dough,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dough]=True
    

#exp_behavior_end

#goal_representation
 
def has_noodles_or_chicken():
    symbol has_noodles = exists o: item : (is_food_noodles(o))
    symbol has_chicken = exists o: item : (is_food_chicken(o))
    return has_noodles or has_chicken

behavior search_for_items(food:item):
    body:
        achieve_once visited(food)
        # Visit the food item to find it

behavior __goal__():
    body:
        if has_noodles_or_chicken():
            # If weve found noodles or chicken, visit them
            foreach food: item:
                if (is_food_noodles(food) or is_food_chicken(food)) and not visited(food):
                    search_for_items(food)                
        else:
            # Explore to find unvisited items and identify noodles or chicken
            foreach food: item:
                if (is_food_noodles(food) or is_food_chicken(food)) and not visited(food):
                    search_for_items(food)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_noodles_or_chicken():
    symbol has_noodles = exists o: item : (is_food_noodles(o))
    symbol has_chicken = exists o: item : (is_food_chicken(o))
    return has_noodles or has_chicken

behavior search_for_items(food:item):
    body:
        achieve_once visited(food)
        # Visit the food item to find it

behavior __goal__():
    body:
        if has_noodles_or_chicken():
            # If weve found noodles or chicken, visit them
            foreach food: item:
                if (is_food_noodles(food) or is_food_chicken(food)) and not visited(food):
                    search_for_items(food)                
        else:
            # Explore to find unvisited items and identify noodles or chicken
            foreach food: item:
                if (is_food_noodles(food) or is_food_chicken(food)) and not visited(food):
                    search_for_items(food)

##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)obs(food_chicken_2050, look around this place)walk_executor(food_noodles_2062)obs(food_noodles_2062, look around this place)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot find: Robot is close to the pot_54. Robot is close to the food_chicken_2050. 
##############################
From agent.py
obs(food_chicken_2050, look around this place)
Get this information:  food_chicken_2050 is close to pot_54. food_chicken_2050 is close to character_219. food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside pot_54. food_chicken_2050 is CLEAN.
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
obs(food_noodles_2062, look around this place)
Get this information:  food_noodles_2062 is inside dining_room_1. food_noodles_2062 is inside fridge_140. food_noodles_2062 is close to fridge_140. food_noodles_2062 is close to character_219. food_noodles_2062 is CLEAN.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bills_2009_around_filing_cabinet_378(bills:item):
    goal: not unknown(bills)
    body:
        assert is_bills(bills)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(bills,filing_cabinet_instance)
        else:
            exp(bills,filing_cabinet_instance)
    eff:
        unknown[bills]=False
        close[bills,filing_cabinet_instance]=True
        close[filing_cabinet_instance,bills]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_towel_rack_298_around_towel_rack_298(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel_rack,towel_rack_instance)
        else:
            exp(towel_rack,towel_rack_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,towel_rack_instance]=True
        close[towel_rack_instance,towel_rack]=True
    

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_box_2023_around_kitchen_counter_128(box:item):
    goal: not unknown(box)
    body:
        assert is_box(box)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(box,kitchen_counter_instance)
        else:
            exp(box,kitchen_counter_instance)
    eff:
        unknown[box]=False
        close[box,kitchen_counter_instance]=True
        close[kitchen_counter_instance,box]=True
    

behavior find_mouse_2112_around_table_123(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mouse,table_instance)
        else:
            exp(mouse,table_instance)
    eff:
        unknown[mouse]=False
        close[mouse,table_instance]=True
        close[table_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)

        fill_pot_with_water(pot, faucet)
        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, pot)

        fill_pot_with_water(pot, faucet)
        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)walk_executor(food_noodles_2062)grab_executor(food_noodles_2062)walk_executor(pot_54)putin_executor(food_noodles_2062, pot_54)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
walk_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. 
##############################
From agent.py
grab_executor(food_noodles_2062)
Robot find: Robot is close to the fridge_140. Robot is close to the food_noodles_2062. Grabbing food_noodles_2062 by right hand. 
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. 
##############################
From agent.py
putin_executor(food_noodles_2062, pot_54)
Robot find: Robot is close to the food_noodles_2062. Robot is close to the food_chicken_2050. Robot is close to the stove_2090. Robot is close to the pot_54. food_noodles_2062 is inside pot_54. pot_54 is close food_noodles_2062. food_noodles_2062 is close pot_54. food_noodles_2062 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Currently, the pot has chicken and noodles inside and is on the stove, but the pot was not filled with water before placing it back on the stove. Switch on the faucet to fill the pot with water before proceeding to boil the contents.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. Currently, the pot has chicken and noodles inside and is on the stove, but the pot was not filled with water before placing it back on the stove. Switch on the faucet to fill the pot with water before proceeding to boil the contents.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for food_chicken_2050 around kitchen_counter_129.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to pot_54.
Action 14: Put food_chicken_2050 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Walk to faucet_308.
Action 22: Walk to pot_54.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.
Action 29: Walk to food_chicken_2050.
Action 30: Observe around food_chicken_2050 with the question of look around this place.
Action 31: Walk to food_noodles_2062.
Action 32: Observe around food_noodles_2062 with the question of look around this place.
Action 33: Walk to faucet_308.
Action 34: Walk to food_noodles_2062.
Action 35: Grab food_noodles_2062.
Action 36: Walk to pot_54.
Action 37: Put food_noodles_2062 into pot_54.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind noodles: item where:
            is_food_noodles(noodles) 
        # Select noodles
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        fill_pot_with_water(pot, faucet)
        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet) # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure faucet is on
        achieve has_water(pot) # Fill the pot with water

behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind noodles: item where:
            is_food_noodles(noodles) 
        # Select noodles
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken
        
        fill_pot_with_water(pot, faucet)
        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. Currently, the pot has noodles and chicken inside and is on the stove, but it was not filled with water before placing it on the stove. Switch on the faucet, fill the pot with water, then place it back on the stove and ensure the stove is turned on to boil the contents.
##############################
From agent.py
Human Instruction: You need to ensure the pot is filled with water. Currently, the pot has noodles and chicken inside and is on the stove, but it was not filled with water before placing it on the stove. Switch on the faucet, fill the pot with water, then place it back on the stove and ensure the stove is turned on to boil the contents.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_54 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for food_chicken_2050 around kitchen_counter_129.
Action 5: Walk to fridge_140.
Action 6: Switch off fridge_140.
Action 7: Open fridge_140.
Action 8: look for food_chicken_2050 around fridge_140.
Action 9: Walk to pot_54.
Action 10: Open pot_54.
Action 11: Walk to food_chicken_2050.
Action 12: Grab food_chicken_2050.
Action 13: Walk to pot_54.
Action 14: Put food_chicken_2050 into pot_54.
Action 15: Grab pot_54.
Action 16: Walk to faucet_134.
Action 17: Switch off faucet_134.
Action 18: Walk to stove_2090.
Action 19: Put pot_54 on stove_2090.
Action 20: Switch on stove_2090.
Action 21: Walk to faucet_308.
Action 22: Walk to pot_54.
Action 23: Grab pot_54.
Action 24: Walk to faucet_134.
Action 25: Switch on faucet_134.
Action 26: Switch off faucet_134.
Action 27: Walk to stove_2090.
Action 28: Put pot_54 on stove_2090.
Action 29: Walk to food_chicken_2050.
Action 30: Observe around food_chicken_2050 with the question of look around this place.
Action 31: Walk to food_noodles_2062.
Action 32: Observe around food_noodles_2062 with the question of look around this place.
Action 33: Walk to faucet_308.
Action 34: Walk to food_noodles_2062.
Action 35: Grab food_noodles_2062.
Action 36: Walk to pot_54.
Action 37: Put food_noodles_2062 into pot_54.
Action 38: Walk to faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_sink_307(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(stamp,sink_instance)
        else:
            exp(stamp,sink_instance)
    eff:
        unknown[stamp]=False
        close[stamp,sink_instance]=True
        close[sink_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_mouse_2112_around_kitchen_counter_128(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mouse,kitchen_counter_instance)
        else:
            exp(mouse,kitchen_counter_instance)
    eff:
        unknown[mouse]=False
        close[mouse,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mouse]=True
    

behavior find_oil_2005_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior ensure_pot_has_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove)

        bind faucet: item where:
            is_faucet(faucet)

        ensure_pot_has_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2083_around_towel_rack_298(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind towel_rack_instance:item where:
            is_towel_rack(towel_rack_instance) and id[towel_rack_instance]==298
        achieve close_char(char,towel_rack_instance)
        if can_open(towel_rack_instance):
            achieve_once open(towel_rack_instance)
            exp(towel,towel_rack_instance)
        else:
            exp(towel,towel_rack_instance)
    eff:
        unknown[towel]=False
        close[towel,towel_rack_instance]=True
        close[towel_rack_instance,towel]=True
    

behavior find_stamp_2031_around_kitchen_counter_128(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(stamp,kitchen_counter_instance)
        else:
            exp(stamp,kitchen_counter_instance)
    eff:
        unknown[stamp]=False
        close[stamp,kitchen_counter_instance]=True
        close[kitchen_counter_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_noodles_and_chicken_in_pot(noodles:item, chicken:item, pot:item):
    body:
        achieve_once inside(noodles, pot)
        achieve_once inside(chicken, pot)

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind noodles: item where:
            is_food_noodles(noodles)

        bind chicken: item where:
            is_food_chicken(chicken)

        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet)

        place_noodles_and_chicken_in_pot(noodles, chicken, pot)
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_stamp_2031_around_sink_307(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(stamp,sink_instance)
        else:
            exp(stamp,sink_instance)
    eff:
        unknown[stamp]=False
        close[stamp,sink_instance]=True
        close[sink_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet)

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_bowl_2096_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, faucet)
        # Approach the faucet to fill the pot
        achieve is_on(faucet) # Ensure the faucet is on
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the specific pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the specific faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the specific stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the pot is filled with water. After switching on the faucet, the pot should be filled with water before placing it back on the stove. Make sure the pot has water, noodles, and chicken inside, and the stove is turned on to boil the contents.
##############################
Task Summary:
Task Goal:
Boil some noodles with chicken.
Action History:
['walk_executor(cupboard_130)', 'walk_executor(kitchen_counter_129)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'walk_executor(food_chicken_2050)', 'grab_executor(food_chicken_2050)', 'walk_executor(pot_54)', 'putin_executor(food_chicken_2050, pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(faucet_308)', 'walk_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'walk_executor(food_chicken_2050)', 'walk_executor(food_noodles_2062)', 'walk_executor(faucet_308)', 'walk_executor(food_noodles_2062)', 'grab_executor(food_noodles_2062)', 'walk_executor(pot_54)', 'putin_executor(food_noodles_2062, pot_54)', 'walk_executor(faucet_308)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)']
Time info:
Time consume: 307 seconds
Exp_helper query times: 0
Guidance query times: 0
library scale: 77
goal generate times: 14
goal correct times: 0
action_num: 35

Task complete rate:
Keystate: k1 - Requires: 13 steps
Action Completion Rate: No actions required
Scene_id: 2
##############################
