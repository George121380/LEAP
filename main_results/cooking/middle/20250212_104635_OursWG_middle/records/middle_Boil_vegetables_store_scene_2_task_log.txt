From agent.py
Reset goals: The sub-goals are: 
['1. Boil the vegetables in a pot.', '2. Store the pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_cupboard_131(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_carrot,cupboard_instance)
        else:
            exp(food_carrot,cupboard_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,cupboard_instance]=True
        close[cupboard_instance,food_carrot]=True
    

behavior find_food_rice_2067_around_cupboard_131(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

behavior find_pot_2093_around_cupboard_131(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_vegetables_in_pot(vegetables, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_vegetables_in_pot(vegetables, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(pot_54, cupboard_131)exp(food_vegetable_2072, cupboard_131)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: pot_54, Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(pot_54, cupboard_131)
Find pot_54. 
##############################
From agent.py-> find a plan in act()
exp(food_vegetable_2072, cupboard_131)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
exp(food_vegetable_2072, cupboard_131)
Fail to find food_vegetable_2072 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(food_vegetable_2072, kitchen_counter_132)walk_executor(pot_54)open_executor(pot_54)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_132)
Fail to find food_vegetable_2072 around kitchen_counter_132. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find a pot and fill it with water.', '2. Boil the vegetables in the pot.', '3. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot(pot:item):
    body:
        achieve_once visited(pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        foreach pot: item:
            if is_pot(pot) and not visited(pot):
                find_pot(pot)
                
        bind pot: item where:
            is_pot(pot) and visited(pot)

        fill_pot_with_water(pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_pot(pot:item):
    body:
        achieve_once visited(pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        foreach pot: item:
            if is_pot(pot) and not visited(pot):
                find_pot(pot)
                
        bind pot: item where:
            is_pot(pot) and visited(pot)

        fill_pot_with_water(pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, look around this place)walk_executor(pot_54)open_executor(pot_54)obs(pot_54, look around this place)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(stove_2090)
Robot find: fryingpan_2107, oil_2102, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
open_executor(stove_2090)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is opened. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)obs(pot_2093, look around this place)walk_executor(pot_54)open_executor(pot_54)obs(pot_54, look around this place)grab_executor(pot_54)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. 
##############################
From agent.py
open_executor(pot_2093)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the pot_2093. pot_2093 is opened. 
##############################
From agent.py
obs(pot_2093, look around this place)
Get this information:  pot_2093 is inside dining_room_1. pot_2093 is close to kitchen_counter_129. pot_2093 is close to character_219. pot_2093 is on kitchen_counter_129. pot_2093 is OPEN.
##############################
From agent.py
walk_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. 
##############################
From agent.py
open_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. pot_54 is opened. 
##############################
From agent.py
obs(pot_54, look around this place)
Get this information:  pot_54 is on oven_141. pot_54 is close to ceiling_33. pot_54 is close to wall_2. pot_54 is close to cupboard_130. pot_54 is close to kitchen_counter_132. pot_54 is close to sink_133. pot_54 is close to kitchen_counter_129. pot_54 is close to cupboard_131. pot_54 is close to wall_8. pot_54 is close to stovefan_139. pot_54 is close to oven_141. pot_54 is close to walllamp_46. pot_54 is close to tray_142. pot_54 is close to floor_16. pot_54 is close to knifeblock_52. pot_54 is close to floor_21. pot_54 is close to ceiling_28. pot_54 is close to character_219. pot_54 is inside dining_room_1. pot_54 is CLEAN. pot_54 is OPEN.
##############################
From agent.py
grab_executor(pot_54)
Robot find: Robot is close to the oven_141. Robot is close to the pot_54. Grabbing pot_54 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot has been found and picked up, but it needs to be filled with water. You should proceed to switch on the faucet and fill pot_54 with water to complete this sub-task.
##############################
From agent.py
Human Instruction: The pot has been found and picked up, but it needs to be filled with water. You should proceed to switch on the faucet and fill pot_54 with water to complete this sub-task.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cutting_board_2080(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_vegetable,cutting_board_instance)
        else:
            exp(food_vegetable,cutting_board_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cutting_board_instance]=True
        close[cutting_board_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134

        fill_pot_with_water(pot, faucet)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: drawing_296, towel_rack_298, Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on the faucet and fill pot_54 with water to complete this sub-task.
##############################
From agent.py
Human Instruction: You need to switch on the faucet and fill pot_54 with water to complete this sub-task.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_pot_and_fill_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, pot)
        # Approach the pot
        achieve_once inhand(pot) 
        # Hold the pot in hand
        achieve close_char(char, faucet)
        # Approach the faucet
        achieve is_on(faucet)
        # Turn on the faucet
        achieve has_water(pot)
        # Fill the pot with water
        achieve is_off(faucet)
        # Turn off the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 134
        # Select faucet with ID 134

        find_pot_and_fill_with_water(pot, faucet)


#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        fill_pot_with_water(pot)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        fill_pot_with_water(pot)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)switchoff_executor(faucet_308)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_308)
Robot find: Robot is close to the pot_54. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on a faucet and fill the pot_54 with water to complete this sub-task.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_carrot_2047_around_kitchen_counter_128(food_carrot:item):
    goal: not unknown(food_carrot)
    body:
        assert is_food_carrot(food_carrot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_carrot,kitchen_counter_instance)
        else:
            exp(food_carrot,kitchen_counter_instance)
    eff:
        unknown[food_carrot]=False
        close[food_carrot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_carrot]=True
    

behavior find_food_vegetable_2072_around_kitchen_counter_128(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_rice_2067_around_cupboard_130(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_rice,cupboard_instance)
        else:
            exp(food_rice,cupboard_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,cupboard_instance]=True
        close[cupboard_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to place in the pot

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has already been filled with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables to place in the pot

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that has already been filled with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_vegetable_2072, kitchen_counter_128)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the pot_54. Robot is close to the kitchen_counter_128. 
##############################
From agent.py
exp(food_vegetable_2072, kitchen_counter_128)
Fail to find food_vegetable_2072 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_54)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Robot find: chair_138, milk_2074, dry_pasta_2073, Robot is close to the pot_54. Robot is close to the fridge_140. 
##############################
From agent.py
switchoff_executor(fridge_140)
Robot find: Robot is close to the pot_54. Robot is close to the fridge_140. fridge_140 is turned off. 
##############################
From agent.py
open_executor(fridge_140)
Robot find: food_cereal_2048, food_cheese_2049, food_chicken_2050, food_dessert_2051, food_donut_2052, food_egg_2053, food_fish_2054, food_food_2055, food_fruit_2056, food_hamburger_2057, food_ice_cream_2058, food_jam_2059, food_kiwi_2060, food_lemon_2061, food_noodles_2062, food_oatmeal_2063, food_peanut_butter_2064, food_pizza_2065, food_potato_2066, food_rice_2067, food_salt_2068, food_snack_2069, food_sugar_2070, food_turkey_2071, food_vegetable_2072, sauce_2101, food_steak_2042, food_apple_2043, food_bacon_2044, food_banana_2045, food_cake_2046, food_carrot_2047, Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. fridge_140 is opened. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)putin_executor(food_vegetable_2072, pot_54)walk_executor(stove_2090)put_executor(pot_54, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. Grabbing food_vegetable_2072 by left hand. 
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_54)
Robot find: Robot is close to the pot_54. Robot is close to the food_cereal_2048. Robot is close to the food_cheese_2049. Robot is close to the food_chicken_2050. Robot is close to the food_dessert_2051. Robot is close to the food_donut_2052. Robot is close to the food_egg_2053. Robot is close to the food_fish_2054. Robot is close to the food_food_2055. Robot is close to the food_fruit_2056. Robot is close to the food_hamburger_2057. Robot is close to the food_ice_cream_2058. Robot is close to the food_jam_2059. Robot is close to the fridge_140. Robot is close to the food_kiwi_2060. Robot is close to the food_lemon_2061. Robot is close to the food_noodles_2062. Robot is close to the food_oatmeal_2063. Robot is close to the food_peanut_butter_2064. Robot is close to the food_pizza_2065. Robot is close to the food_potato_2066. Robot is close to the food_rice_2067. Robot is close to the food_salt_2068. Robot is close to the food_snack_2069. Robot is close to the food_sugar_2070. Robot is close to the food_turkey_2071. Robot is close to the food_vegetable_2072. Robot is close to the sauce_2101. Robot is close to the food_steak_2042. Robot is close to the food_apple_2043. Robot is close to the food_bacon_2044. Robot is close to the food_banana_2045. Robot is close to the food_cake_2046. Robot is close to the food_carrot_2047. food_vegetable_2072 is close pot_54. pot_54 is close food_vegetable_2072. food_vegetable_2072 is inside pot_54. food_vegetable_2072 released by left hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. 
##############################
From agent.py
put_executor(pot_54, stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. pot_54 is on stove_2090. pot_54 is close stove_2090. stove_2090 is close pot_54. pot_54 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot find: Robot is close to the pot_54. Robot is close to the kitchen_counter_129. Robot is close to the stove_2090. stove_2090 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to switch on a faucet to fill pot_54 with water before proceeding with boiling the vegetables.
##############################
From agent.py
Human Instruction: You need to switch on a faucet to fill pot_54 with water before proceeding with boiling the vegetables.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.
Action 21: Switch on faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to kitchen_counter_128.
Action 24: look for food_vegetable_2072 around kitchen_counter_128.
Action 25: Walk to fridge_140.
Action 26: Switch off fridge_140.
Action 27: Open fridge_140.
Action 28: look for food_vegetable_2072 around fridge_140.
Action 29: Grab food_vegetable_2072.
Action 30: Put food_vegetable_2072 into pot_54.
Action 31: Walk to stove_2090.
Action 32: Put pot_54 on stove_2090.
Action 33: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_fork_2104_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_vegetables(vegetables:item):
    body:
        achieve_once visited(vegetables)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove)

        find_vegetables(vegetables)
        place_vegetables_in_pot(vegetables, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_vegetables(vegetables:item):
    body:
        achieve_once visited(vegetables)

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove)

        find_vegetables(vegetables)
        place_vegetables_in_pot(vegetables, pot)
        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2072)obs(food_vegetable_2072, look around this place)
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. 
##############################
From agent.py
obs(food_vegetable_2072, look around this place)
Get this information:  food_vegetable_2072 is close to pot_54. food_vegetable_2072 is close to character_219. food_vegetable_2072 is inside dining_room_1. food_vegetable_2072 is inside pot_54. food_vegetable_2072 is DIRTY.
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to fill pot_54 with water before placing it on the stove and turning it on.
##############################
From agent.py
Human Instruction: You need to fill pot_54 with water before placing it on the stove and turning it on.

The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.
Action 21: Switch on faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to kitchen_counter_128.
Action 24: look for food_vegetable_2072 around kitchen_counter_128.
Action 25: Walk to fridge_140.
Action 26: Switch off fridge_140.
Action 27: Open fridge_140.
Action 28: look for food_vegetable_2072 around fridge_140.
Action 29: Grab food_vegetable_2072.
Action 30: Put food_vegetable_2072 into pot_54.
Action 31: Walk to stove_2090.
Action 32: Put pot_54 on stove_2090.
Action 33: Switch on stove_2090.
Action 34: Walk to food_vegetable_2072.
Action 35: Observe around food_vegetable_2072 with the question of look around this place.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_vegetables_in_pot(vegetables, pot)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_sink_133(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(food_onion,sink_instance)
        else:
            exp(food_onion,sink_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,sink_instance]=True
        close[sink_instance,food_onion]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot) # Place the vegetables inside the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove)

        boil_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_onion_2026_around_dishwasher_143(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(food_onion,dishwasher_instance)
        else:
            exp(food_onion,dishwasher_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,dishwasher_instance]=True
        close[dishwasher_instance,food_onion]=True
    

behavior find_shoes_2001_around_basket_for_clothes_2040(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(shoes,basket_for_clothes_instance)
        else:
            exp(shoes,basket_for_clothes_instance)
    eff:
        unknown[shoes]=False
        close[shoes,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,shoes]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve_once inside(vegetables, pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        bind pot: item where:
            is_pot(pot)

        bind stove: item where:
            is_stove(stove)

        place_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. boil the vegetables in the pot." ?
Answer: Wash vegetables. Put the pot on the stove. Turn on the stove. Put the vegetables inside the pot. Then turn off the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Wash the vegetables.', '2. Put the pot on the stove and turn it on.', '3. Put the vegetables inside the pot.', '4. Turn off the stove.', '5. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2098_around_dishwasher_143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(cleaning_solution,dishwasher_instance)
        else:
            exp(cleaning_solution,dishwasher_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,dishwasher_instance]=True
        close[dishwasher_instance,cleaning_solution]=True
    

behavior find_soap_2038_around_sink_307(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==307
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        wash_vegetables(vegetables)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_vegetables(vegetables:item):
    body:
        achieve_once clean(vegetables)

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)

        wash_vegetables(vegetables)

##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2072)walk_executor(faucet_134)switchon_executor(faucet_134)wash_executor(food_vegetable_2072)switchoff_executor(faucet_134)
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot find: Robot is close to the pot_54. Robot is close to the food_vegetable_2072. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned on. 
##############################
From agent.py
wash_executor(food_vegetable_2072)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. food_vegetable_2072 is cleaned. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the kitchen_counter_132. Robot is close to the faucet_134. faucet_134 is turned off. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: Yes
The feedback instruction: None
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind faucet: item where:
            is_faucet(faucet) and (id[faucet] == 134 or id[faucet] == 308)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        fill_pot_with_water(pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the pot on the stove and turn it on." ?
Answer: Fill the pot with water before putting it on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water.', '2. Boil the vegetables in the pot.', '3. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        fill_pot_with_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        fill_pot_with_water(pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once close_char(char, pot)  # Ensure you are close to the pot
        achieve close_char(char, faucet)  # Ensure you are close to the faucet
        achieve is_on(faucet)  # Turn on the faucet
        achieve has_water(pot)  # Fill the pot with water
        achieve_once is_off(faucet)  # Turn off the faucet

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54
        
        bind faucet: item where:
            is_faucet(faucet) and is_on(faucet) and close_char(char, faucet)
        # Select a faucet that is currently on and close to you

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill the pot with water and place it on the stove.', '2. Boil the vegetables in the pot.', '3. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_stamp_2031_around_filing_cabinet_378(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(stamp,filing_cabinet_instance)
        else:
            exp(stamp,filing_cabinet_instance)
    eff:
        unknown[stamp]=False
        close[stamp,filing_cabinet_instance]=True
        close[filing_cabinet_instance,stamp]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        # Fill pot with water from the faucet
        achieve close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select a faucet

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_goal

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        # Fill pot with water from the faucet
        achieve close_char(char, faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)
        # Place pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select a faucet

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select a stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_308)
##############################
From agent.py
walk_executor(faucet_308)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The pot was not filled with water before being placed on the stove. Ensure to fill pot_54 with water using faucet_308 before placing it on stove_2090.
##############################
From agent.py
Human Instruction: The pot was not filled with water before being placed on the stove. Ensure to fill pot_54 with water using faucet_308 before placing it on stove_2090.

Human Guidance: Fill the pot with water before putting it on the stove.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.
Action 21: Switch on faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to kitchen_counter_128.
Action 24: look for food_vegetable_2072 around kitchen_counter_128.
Action 25: Walk to fridge_140.
Action 26: Switch off fridge_140.
Action 27: Open fridge_140.
Action 28: look for food_vegetable_2072 around fridge_140.
Action 29: Grab food_vegetable_2072.
Action 30: Put food_vegetable_2072 into pot_54.
Action 31: Walk to stove_2090.
Action 32: Put pot_54 on stove_2090.
Action 33: Switch on stove_2090.
Action 34: Walk to food_vegetable_2072.
Action 35: Observe around food_vegetable_2072 with the question of look around this place.
Action 36: Grab food_vegetable_2072.
Action 37: Walk to faucet_134.
Action 38: Switch on faucet_134.
Action 39: Wash food_vegetable_2072.
Action 40: Switch off faucet_134.
Action 41: Walk to faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select faucet with ID 308

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_stamp_2031_around_filing_cabinet_378(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(stamp,filing_cabinet_instance)
        else:
            exp(stamp,filing_cabinet_instance)
    eff:
        unknown[stamp]=False
        close[stamp,filing_cabinet_instance]=True
        close[filing_cabinet_instance,stamp]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_stamp_2031_around_filing_cabinet_378(stamp:item):
    goal: not unknown(stamp)
    body:
        assert is_stamp(stamp)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(stamp,filing_cabinet_instance)
        else:
            exp(stamp,filing_cabinet_instance)
    eff:
        unknown[stamp]=False
        close[stamp,filing_cabinet_instance]=True
        close[filing_cabinet_instance,stamp]=True
    

behavior find_stereo_2007_around_filing_cabinet_378(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==378
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(stereo,filing_cabinet_instance)
        else:
            exp(stereo,filing_cabinet_instance)
    eff:
        unknown[stereo]=False
        close[stereo,filing_cabinet_instance]=True
        close[filing_cabinet_instance,stereo]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. fill the pot with water and place it on the stove." ?
Answer: Fill a pot with water. Put the pot on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

behavior find_bowl_2095_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve_once cleaned(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function cleaned not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_food_butter_2018_around_cupboard_130(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_308)
##############################
From agent.py
switchon_executor(faucet_308)
Robot find: Robot is close to the food_vegetable_2072. Robot is close to the bathroom_counter_306. Robot is close to the faucet_308. faucet_308 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to fill pot_54 with water using faucet_308 before it is placed on stove_2090.
##############################
From agent.py
Human Instruction: The robot needs to fill pot_54 with water using faucet_308 before it is placed on stove_2090.

Human Guidance: Fill a pot with water. Put the pot on the stove.
The actions you have taken:
Action 1: Walk to cupboard_131.
Action 2: Open cupboard_131.
Action 3: look for pot_54 around cupboard_131.
Action 4: look for food_vegetable_2072 around cupboard_131.
Action 5: Walk to kitchen_counter_132.
Action 6: look for food_vegetable_2072 around kitchen_counter_132.
Action 7: Walk to stove_2090.
Action 8: Open stove_2090.
Action 9: look for pot_2093 around stove_2090.
Action 10: Walk to pot_2093.
Action 11: Open pot_2093.
Action 12: Observe around pot_2093 with the question of look around this place.
Action 13: Walk to pot_54.
Action 14: Open pot_54.
Action 15: Observe around pot_54 with the question of look around this place.
Action 16: Grab pot_54.
Action 17: Walk to faucet_134.
Action 18: Switch off faucet_134.
Action 19: Walk to faucet_308.
Action 20: Switch off faucet_308.
Action 21: Switch on faucet_308.
Action 22: Switch off faucet_308.
Action 23: Walk to kitchen_counter_128.
Action 24: look for food_vegetable_2072 around kitchen_counter_128.
Action 25: Walk to fridge_140.
Action 26: Switch off fridge_140.
Action 27: Open fridge_140.
Action 28: look for food_vegetable_2072 around fridge_140.
Action 29: Grab food_vegetable_2072.
Action 30: Put food_vegetable_2072 into pot_54.
Action 31: Walk to stove_2090.
Action 32: Put pot_54 on stove_2090.
Action 33: Switch on stove_2090.
Action 34: Walk to food_vegetable_2072.
Action 35: Observe around food_vegetable_2072 with the question of look around this place.
Action 36: Grab food_vegetable_2072.
Action 37: Walk to faucet_134.
Action 38: Switch on faucet_134.
Action 39: Wash food_vegetable_2072.
Action 40: Switch off faucet_134.
Action 41: Walk to faucet_308.
Action 42: Switch on faucet_308.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_oil_2005_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

behavior find_fork_2103_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_fork_2103_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_fork_2103_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot) # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove) # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill a pot with water and put it on the stove.', '2. Boil the vegetables in the pot.', '3. Store the entire pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308
        # Select the faucet with ID 308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select the pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select the stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select the faucet with ID 308

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2103_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve_once on(pot, stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select faucet with ID 308 

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Fill a pot with water.', '2. Put the pot on the stove.', '3. Boil the vegetables in the pot.', '4. Store the whole pot in the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2096_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet) 
        achieve_once has_a_free_hand(char)
        achieve_once inhand(pot)
        achieve open(pot)
        achieve is_on(faucet)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==308

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_blender_2032_around_dishwasher_143(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(blender,dishwasher_instance)
        else:
            exp(blender,dishwasher_instance)
    eff:
        unknown[blender]=False
        close[blender,dishwasher_instance]=True
        close[dishwasher_instance,blender]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        # Select pot with ID 54

        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        # Select faucet with ID 308

        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_socks_2115_around_basket_for_clothes_2040(clothes_socks:item):
    goal: not unknown(clothes_socks)
    body:
        assert is_clothes_socks(clothes_socks)
        bind basket_for_clothes_instance:item where:
            is_basket_for_clothes(basket_for_clothes_instance) and id[basket_for_clothes_instance]==2040
        achieve close_char(char,basket_for_clothes_instance)
        if can_open(basket_for_clothes_instance):
            achieve_once open(basket_for_clothes_instance)
            exp(clothes_socks,basket_for_clothes_instance)
        else:
            exp(clothes_socks,basket_for_clothes_instance)
    eff:
        unknown[clothes_socks]=False
        close[clothes_socks,basket_for_clothes_instance]=True
        close[basket_for_clothes_instance,clothes_socks]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve close_char(char, faucet)
        achieve open(pot)
        achieve has_water(pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 54
        bind faucet: item where:
            is_faucet(faucet) and id[faucet] == 308
        
        fill_pot_with_water(pot, faucet)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
Task Summary:
Task Goal:
Boil some vegetables with pot. Then store the whole pot in the fridge.
Action History:
['walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(kitchen_counter_132)', 'walk_executor(stove_2090)', 'open_executor(stove_2090)', 'walk_executor(pot_2093)', 'open_executor(pot_2093)', 'walk_executor(pot_54)', 'open_executor(pot_54)', 'grab_executor(pot_54)', 'walk_executor(faucet_134)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'switchon_executor(faucet_308)', 'switchoff_executor(faucet_308)', 'walk_executor(kitchen_counter_128)', 'walk_executor(fridge_140)', 'switchoff_executor(fridge_140)', 'open_executor(fridge_140)', 'grab_executor(food_vegetable_2072)', 'putin_executor(food_vegetable_2072, pot_54)', 'walk_executor(stove_2090)', 'put_executor(pot_54, stove_2090)', 'switchon_executor(stove_2090)', 'walk_executor(food_vegetable_2072)', 'grab_executor(food_vegetable_2072)', 'walk_executor(faucet_134)', 'switchon_executor(faucet_134)', 'wash_executor(food_vegetable_2072)', 'switchoff_executor(faucet_134)', 'walk_executor(faucet_308)', 'switchon_executor(faucet_308)']
Time info:
Time consume: 669 seconds
Exp_helper query times: 0
Guidance query times: 3
library scale: 23
goal generate times: 31
goal correct times: 1
action_num: 33

Task complete rate:
Keystate: k1 - Requires: 2 steps
Keystate: k2 - Requires: 6 steps
Keystate: k3 - Requires: 7 steps
Action Completion Rate: 1.0
Scene_id: 2
##############################
