From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior add_water_to_coffee_maker(coffee_maker:item, water:item):
    body:
        achieve_once inside(water, coffee_maker)

behavior place_coffee_filter(coffee_maker:item, filter:item):
    body:
        achieve_once inside(filter, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker)

def is_ready_to_brew(coffee_maker:item):
    symbol has_filter_and_water= exists w: item : (is_coffee_filter(w) and inside(w, coffee_maker) and has_water(coffee_maker))
    return has_filter_and_water

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        bind water: item where:
            has_water(water)
        bind filter: item where:
            is_coffee_filter(filter)

        add_water_to_coffee_maker(coffee_maker, water)
        place_coffee_filter(coffee_maker, filter)
        
        if is_ready_to_brew(coffee_maker):
            turn_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_coffee_maker(coffee_maker:item, water:item, coffee_filter:item, coffee:item):
    body:
        achieve_once inside(water, coffee_maker)
        # Add water to the coffee maker
        achieve_once inside(coffee_filter, coffee_maker)
        # Place the coffee filter in the coffee maker
        achieve_once inside(coffee, coffee_maker)
        # Add coffee grounds to the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure that the coffee maker has water before starting
        achieve_once plugged(coffee_maker)
        # Ensure that the coffee maker is plugged in
        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee

def has_coffee(cup:item):
    # Check if the cup has coffee
    symbol has_coffee=exists coffee: item : (inside(coffee, cup) and is_coffee(coffee))
    return has_coffee

behavior pour_coffee(coffee_maker:item, cup:item):
    body:
        achieve_once inside(coffee_maker, cup)
        # Pour coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind water: item where:
            can_open(water) and has_water(water)
        # Select a source of water

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        # Select a coffee filter

        bind coffee: item where:
            is_food_food(coffee)
        # Select coffee grounds

        bind cup: item where:
            is_cup(cup)
        # Select a cup to pour coffee into

        load_coffee_maker(coffee_maker, water, coffee_filter, coffee)
        # Load the coffee maker with water, coffee filter, and coffee

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to brew coffee

        if not has_coffee(cup):
            # If the cup does not have coffee, pour coffee into it
            pour_coffee(coffee_maker, cup)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cupboard_130(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_130(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve has_a_free_hand(char) # Ensure the character has a free hand
        achieve_once is_on(coffee_maker) # Turn the coffee maker on
        achieve_once inside(cup, coffee_maker) # Brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve has_water(coffee_maker) # Ensure the coffee maker has water
        achieve has_a_free_hand(char) # Ensure the character has a free hand
        achieve_once is_on(coffee_maker) # Turn the coffee maker on
        achieve_once inside(cup, coffee_maker) # Brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        make_coffee(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: fryingpan_2107, oil_2102, pot_54, pot_2093, Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py
walk_executor(cupboard_130)
Robot find: blender_2032, tea_bag_2017, Robot is close to the blender_2032. Robot is close to the tea_bag_2017. Robot is close to the cupboard_130. 
##############################
From agent.py
exp(cup_2087, cupboard_130)
Fail to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. 
##############################
From agent.py
open_executor(cupboard_131)
Robot find: Robot is close to the cupboard_131. cupboard_131 is opened. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Fail to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_187)exp(cup_2087, wallshelf_187)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(wallshelf_187)
Robot find: Robot is close to the wallshelf_187. 
##############################
From agent.py
exp(cup_2087, wallshelf_187)
Fail to find cup_2087 around wallshelf_187. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(cup_2087, wallshelf_301)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(wallshelf_301)
Robot find: towel_rack_299, towel_rack_300, drawing_296, Robot is close to the wallshelf_301. 
##############################
From agent.py
exp(cup_2087, wallshelf_301)
Fail to find cup_2087 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot find: Robot is close to the kitchen_counter_132. 
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Fail to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(cup_2087, kitchen_counter_128)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Robot find: food_orange_2008, spectacles_2106, Robot is close to the kitchen_counter_128. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: Find cup_2087 in dining_room_1. It is located on table_123, which is close to cup_2087.
Re-decompose: None

##############################
From agent.py
Human Instruction: Find cup_2087 in dining_room_1. It is located on table_123, which is close to cup_2087.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_130.
Action 4: look for cup_2087 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to wallshelf_187.
Action 9: look for cup_2087 around wallshelf_187.
Action 10: Walk to wallshelf_301.
Action 11: look for cup_2087 around wallshelf_301.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to kitchen_counter_128.

##############################
From agent.py
exp(cup_2087, kitchen_counter_128)
Fail to find cup_2087 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(table_123)
Robot find: mat_114, homework_2011, shoes_2001, mouse_2003, cup_2088, laptop_2015, fork_2103, cup_2087, bowl_2095, drawing_118, Robot is close to the mat_114. Robot is close to the table_123. 
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
walk_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. 
##############################
From agent.py
grab_executor(cup_2087)
Robot find: Robot is close to the table_123. Robot is close to the cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. 
##############################
From agent.py
putin_executor(cup_2087, coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. cup_2087 is inside coffe_maker_147. coffe_maker_147 is close cup_2087. cup_2087 is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Make sure the coffee maker is plugged in and has water before proceeding. Also, ensure the coffee maker is turned on again for brewing.
##############################
From agent.py
Human Instruction: Make sure the coffee maker is plugged in and has water before proceeding. Also, ensure the coffee maker is turned on again for brewing.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_130.
Action 4: look for cup_2087 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to wallshelf_187.
Action 9: look for cup_2087 around wallshelf_187.
Action 10: Walk to wallshelf_301.
Action 11: look for cup_2087 around wallshelf_301.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to kitchen_counter_128.
Action 15: look for cup_2087 around kitchen_counter_128.
Action 16: Walk to table_123.
Action 17: look for cup_2087 around table_123.
Action 18: Walk to coffe_maker_147.
Action 19: Switch off coffe_maker_147.
Action 20: Open coffe_maker_147.
Action 21: Walk to cup_2087.
Action 22: Grab cup_2087.
Action 23: Walk to coffe_maker_147.
Action 24: Put cup_2087 into coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_bookshelf_136(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==136
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(cup,bookshelf_instance)
        else:
            exp(cup,bookshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,bookshelf_instance]=True
        close[bookshelf_instance,cup]=True
    

behavior find_coffee_filter_2035_around_dishwasher_143(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on
        achieve inside(coffee_maker, cup)
        # Place the cup in the coffee maker to collect the coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and has_switch(coffee_maker) and has_plug(coffee_maker)
        # Select the coffee maker
        
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select the cup
        
        prepare_coffee(coffee_maker, cup)
        # Prepare coffee according to the defined behavior

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_microwave_149(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind microwave_instance:item where:
            is_microwave(microwave_instance) and id[microwave_instance]==149
        achieve close_char(char,microwave_instance)
        if can_open(microwave_instance):
            achieve_once open(microwave_instance)
            exp(coffee_filter,microwave_instance)
        else:
            exp(coffee_filter,microwave_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,microwave_instance]=True
        close[microwave_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior place_cup_for_brewing(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior start_brewing(coffee_maker: item):
    body:
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        
        ensure_coffee_maker_ready(coffee_maker)
        place_cup_for_brewing(cup, coffee_maker)
        start_brewing(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_coffee_maker_ready(coffee_maker: item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior place_cup_for_brewing(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior start_brewing(coffee_maker: item):
    body:
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        
        ensure_coffee_maker_ready(coffee_maker)
        place_cup_for_brewing(cup, coffee_maker)
        start_brewing(coffee_maker)

##############################
From agent.py-> find a plan in act()
close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure that the coffee maker is plugged in and has water to proceed with making the coffee.
##############################
From agent.py
Human Instruction: Ensure that the coffee maker is plugged in and has water to proceed with making the coffee.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to cupboard_130.
Action 4: look for cup_2087 around cupboard_130.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to wallshelf_187.
Action 9: look for cup_2087 around wallshelf_187.
Action 10: Walk to wallshelf_301.
Action 11: look for cup_2087 around wallshelf_301.
Action 12: Walk to kitchen_counter_132.
Action 13: look for cup_2087 around kitchen_counter_132.
Action 14: Walk to kitchen_counter_128.
Action 15: look for cup_2087 around kitchen_counter_128.
Action 16: Walk to table_123.
Action 17: look for cup_2087 around table_123.
Action 18: Walk to coffe_maker_147.
Action 19: Switch off coffe_maker_147.
Action 20: Open coffe_maker_147.
Action 21: Walk to cup_2087.
Action 22: Grab cup_2087.
Action 23: Walk to coffe_maker_147.
Action 24: Put cup_2087 into coffe_maker_147.
Action 25: Close coffe_maker_147.
Action 26: Switch on coffe_maker_147.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_wallshelf_191(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

behavior find_coffee_filter_2035_around_bathroom_cabinet_305(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(coffee_filter,bathroom_cabinet_instance)
        else:
            exp(coffee_filter,bathroom_cabinet_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087

        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in")
            # Plug in the coffee maker if its not already plugged in

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Ensure the coffee maker has water

        achieve_once inside(cup, coffee_maker)
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087

        if not plugged(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker is plugged in")
            # Plug in the coffee maker if its not already plugged in

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")
            # Ensure the coffee maker has water

        achieve_once inside(cup, coffee_maker)
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)obs(coffe_maker_147, Check if the coffee maker has water)close_executor(coffe_maker_147)switchon_executor(coffe_maker_147)
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot find: Robot is close to the cup_2087. Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is opened. 
##############################
From agent.py
obs(coffe_maker_147, Check if the coffee maker has water)
Get this information:  coffe_maker_147 is on kitchen_counter_129. cup_2087 is inside coffe_maker_147. coffe_maker_147 is close to kitchen_counter_129. coffe_maker_147 is close to ceiling_34. coffe_maker_147 is close to cupboard_131. coffe_maker_147 is close to ceiling_33. coffe_maker_147 is close to wall_7. coffe_maker_147 is close to wall_8. coffe_maker_147 is close to walllamp_44. coffe_maker_147 is close to dishwasher_143. coffe_maker_147 is close to toaster_144. coffe_maker_147 is close to floor_21. coffe_maker_147 is close to character_219. coffe_maker_147 is close to cup_2087. coffe_maker_147 is inside dining_room_1. coffe_maker_147 is OFF. coffe_maker_147 is PLUGGED_IN. coffe_maker_147 is OPEN. coffe_maker_147 is CLEAN.
##############################
From agent.py
close_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot find: Robot is close to the kitchen_counter_129. Robot is close to the coffe_maker_147. coffe_maker_147 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker has water before proceeding as the observation action did not confirm its presence. Then, complete the remaining task steps.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'walk_executor(cupboard_130)', 'walk_executor(cupboard_131)', 'open_executor(cupboard_131)', 'walk_executor(wallshelf_187)', 'walk_executor(wallshelf_301)', 'walk_executor(kitchen_counter_132)', 'walk_executor(kitchen_counter_128)', 'walk_executor(table_123)', 'walk_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'walk_executor(cup_2087)', 'grab_executor(cup_2087)', 'walk_executor(coffe_maker_147)', 'putin_executor(cup_2087, coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)', 'switchoff_executor(coffe_maker_147)', 'open_executor(coffe_maker_147)', 'close_executor(coffe_maker_147)', 'switchon_executor(coffe_maker_147)']
Time info:
Time consume: 198 seconds
Exp_helper query times: 1
Guidance query times: 0
library scale: 0
goal generate times: 6
goal correct times: 0
action_num: 23

Task complete rate:
1
Scene_id: 2
##############################
