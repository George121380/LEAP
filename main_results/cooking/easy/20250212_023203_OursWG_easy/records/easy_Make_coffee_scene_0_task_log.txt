From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2063_around_cupboard_229(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_coffee_filter_2000_around_cupboard_229(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior place_coffee_filter_in_machine(filter:item, coffee_maker:item):
    body:
        achieve_once inside(filter, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee:item, cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        bind cup: item where:
            is_cup(cup)

        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)
        place_coffee_filter_in_machine(coffee_filter, coffee_maker)
        turn_on_coffee_maker(coffee_maker)

        foreach coffee: item: 
            if is_food_food(coffee) and inside(coffee, coffee_maker):
                pour_coffee_into_cup(coffee, cup)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve_once plugged(coffee_maker)

behavior add_water_to_coffee_maker(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior place_coffee_filter_in_machine(filter:item, coffee_maker:item):
    body:
        achieve_once inside(filter, coffee_maker)

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior pour_coffee_into_cup(coffee:item, cup:item):
    body:
        achieve has_water(cup)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        bind cup: item where:
            is_cup(cup)

        plug_in_coffee_maker(coffee_maker)
        add_water_to_coffee_maker(coffee_maker)
        place_coffee_filter_in_machine(coffee_filter, coffee_maker)
        turn_on_coffee_maker(coffee_maker)

        foreach coffee: item: 
            if is_food_food(coffee) and inside(coffee, coffee_maker):
                pour_coffee_into_cup(coffee, cup)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_232)switchon_executor(faucet_232)switchoff_executor(faucet_232)walk_executor(cupboard_229)open_executor(cupboard_229)exp(coffee_filter_2000, cupboard_229)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(faucet_232)
Robot find: drawing_238, drawing_239, drawing_240, drawing_241, drawing_242, drawing_243, napkin_2005, oil_2079, cup_2063, knife_2050, cup_2064, pot_2069, fryingpan_2083, Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
switchon_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned on. 
##############################
From agent.py
switchoff_executor(faucet_232)
Robot find: Robot is close to the faucet_232. Robot is close to the kitchen_counter_230. faucet_232 is turned off. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. 
##############################
From agent.py
open_executor(cupboard_229)
Robot find: Robot is close to the cupboard_229. cupboard_229 is opened. 
##############################
From agent.py
exp(coffee_filter_2000, cupboard_229)
Fail to find coffee_filter_2000 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(coffee_filter_2000, closetdrawer_158)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(coffee_filter_2000, closetdrawer_158)
Fail to find coffee_filter_2000 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(coffee_filter_2000, closetdrawer_158)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(coffee_filter_2000, closetdrawer_158)
Fail to find coffee_filter_2000 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(coffee_filter_2000, closetdrawer_158)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(coffee_filter_2000, closetdrawer_158)
Fail to find coffee_filter_2000 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(coffee_filter_2000, closetdrawer_158)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py
exp(coffee_filter_2000, closetdrawer_158)
Fail to find coffee_filter_2000 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_158)exp(coffee_filter_2000, closetdrawer_158)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(closetdrawer_158)
Robot find: Robot is close to the dresser_123. 
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you help me to find coffee_filter_2000 ?
Answer: The coffee_filter_2000 is located inside the dining_room_201, on table_226. To find coffee_filter_2000, look for it directly on that table.
Re-decompose: None

##############################
From agent.py
Human Instruction: The coffee_filter_2000 is located inside the dining_room_201, on table_226. To find coffee_filter_2000, look for it directly on that table.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for coffee_filter_2000 around cupboard_229.
Action 7: Walk to closetdrawer_158.
Action 8: look for coffee_filter_2000 around closetdrawer_158.
Action 9: Walk to closetdrawer_158.
Action 10: look for coffee_filter_2000 around closetdrawer_158.
Action 11: Walk to closetdrawer_158.
Action 12: look for coffee_filter_2000 around closetdrawer_158.
Action 13: Walk to closetdrawer_158.
Action 14: look for coffee_filter_2000 around closetdrawer_158.
Action 15: Walk to closetdrawer_158.

##############################
From agent.py
exp(coffee_filter_2000, closetdrawer_158)
Fail to find coffee_filter_2000 around closetdrawer_158. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(coffee_filter_2000, table_226)walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(table_226)
Robot find: bowl_2071, coffee_filter_2000, drawing_2003, bowl_2072, mat_236, fork_2080, fork_2081, mat_237, Robot is close to the table_226. 
##############################
From agent.py
exp(coffee_filter_2000, table_226)
Find coffee_filter_2000. 
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(coffee_filter_2000)grab_executor(coffee_filter_2000)walk_executor(coffe_maker_290)putin_executor(coffee_filter_2000, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
walk_executor(coffee_filter_2000)
Robot find: Robot is close to the coffee_filter_2000. Robot is close to the table_226. 
##############################
From agent.py
grab_executor(coffee_filter_2000)
Robot find: Robot is close to the coffee_filter_2000. Robot is close to the table_226. Grabbing coffee_filter_2000 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. 
##############################
From agent.py
putin_executor(coffee_filter_2000, coffe_maker_290)
Robot find: Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is close coffee_filter_2000. coffee_filter_2000 is inside coffe_maker_290. coffee_filter_2000 is close coffe_maker_290. coffee_filter_2000 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: The robot needs to plug in the coffee maker and ensure there is water in it to complete the goal of making a cup of coffee using the coffee maker.
##############################
From agent.py
Human Instruction: The robot needs to plug in the coffee maker and ensure there is water in it to complete the goal of making a cup of coffee using the coffee maker.

The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for coffee_filter_2000 around cupboard_229.
Action 7: Walk to closetdrawer_158.
Action 8: look for coffee_filter_2000 around closetdrawer_158.
Action 9: Walk to closetdrawer_158.
Action 10: look for coffee_filter_2000 around closetdrawer_158.
Action 11: Walk to closetdrawer_158.
Action 12: look for coffee_filter_2000 around closetdrawer_158.
Action 13: Walk to closetdrawer_158.
Action 14: look for coffee_filter_2000 around closetdrawer_158.
Action 15: Walk to closetdrawer_158.
Action 16: look for coffee_filter_2000 around closetdrawer_158.
Action 17: Walk to table_226.
Action 18: look for coffee_filter_2000 around table_226.
Action 19: Walk to coffe_maker_290.
Action 20: Open coffe_maker_290.
Action 21: Walk to coffee_filter_2000.
Action 22: Grab coffee_filter_2000.
Action 23: Walk to coffe_maker_290.
Action 24: Put coffee_filter_2000 into coffe_maker_290.
Action 25: Close coffe_maker_290.
Action 26: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_maker_ready(coffee_maker:item):
    # Function to check if the coffee maker is plugged in, has water, and a coffee filter inserted
    symbol ready = plugged(coffee_maker) and has_water(coffee_maker) and closed(coffee_maker)
    return ready

behavior prepare_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

behavior insert_coffee_filter(coffee_filter:item, coffee_maker:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker)
        # Insert the coffee filter into the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Switch on the coffee maker to start brewing

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        if not is_coffee_maker_ready(coffee_maker):
            # If the coffee maker is not ready, prepare it
            prepare_coffee_maker(coffee_maker)
            bind coffee_filter: item where:
                is_coffee_filter(coffee_filter)
            insert_coffee_filter(coffee_filter, coffee_maker)

        start_coffee_maker(coffee_maker)
        # Start the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_cereal_2015_around_fridge_289(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

behavior find_food_sugar_2039_around_fridge_289(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_sugar,fridge_instance)
        else:
            exp(food_sugar,fridge_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,fridge_instance]=True
        close[fridge_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior ensure_has_water(item:item):
    body:
        achieve has_water(item)

behavior place_filter_in_coffee_maker(filter:item, coffee_maker:item):
    body:
        achieve_once inside(filter, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind filter: item where:
            is_coffee_filter(filter)

        plug_in_coffee_maker(coffee_maker)
        ensure_has_water(coffee_maker)
        place_filter_in_coffee_maker(filter, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_coffee_maker(coffee_maker:item, powersocket:item):
    body:
        achieve_once plugged(coffee_maker)

behavior fill_coffee_maker_with_water(coffee_maker:item):
    body:
        achieve has_water(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker in the scene

        bind powersocket: item where:
            is_powersocket(powersocket)
        # Select the power socket to plug in the coffee maker

        plug_coffee_maker(coffee_maker, powersocket)
        fill_coffee_maker_with_water(coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_table_107(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_food_jam_2026_around_fridge_289(food_jam:item):
    goal: not unknown(food_jam)
    body:
        assert is_food_jam(food_jam)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_jam,fridge_instance)
        else:
            exp(food_jam,fridge_instance)
    eff:
        unknown[food_jam]=False
        close[food_jam,fridge_instance]=True
        close[fridge_instance,food_jam]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        achieve plugged(coffee_maker) 

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve has_water(coffee_maker)

behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind power_socket: item where:
            is_powersocket(power_socket)

        bind faucet: item where:
            is_faucet(faucet)

        bind cup: item where:
            is_cup(cup)

        plug_in_coffee_maker(coffee_maker, power_socket)
        fill_coffee_maker_with_water(coffee_maker, faucet)
        place_cup_in_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior plug_in_coffee_maker(coffee_maker: item, power_socket: item):
    body:
        achieve plugged(coffee_maker) 

behavior fill_coffee_maker_with_water(coffee_maker: item, faucet: item):
    body:
        achieve has_water(coffee_maker)

behavior place_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind power_socket: item where:
            is_powersocket(power_socket)

        bind faucet: item where:
            is_faucet(faucet)

        bind cup: item where:
            is_cup(cup)

        plug_in_coffee_maker(coffee_maker, power_socket)
        fill_coffee_maker_with_water(coffee_maker, faucet)
        place_cup_in_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)walk_executor(cup_2064)grab_executor(cup_2064)walk_executor(coffe_maker_290)putin_executor(cup_2064, coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. Robot is close to the kitchen_counter_230. coffe_maker_290 is opened. 
##############################
From agent.py
walk_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. 
##############################
From agent.py
grab_executor(cup_2064)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Grabbing cup_2064 by right hand. 
##############################
From agent.py
walk_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. 
##############################
From agent.py
putin_executor(cup_2064, coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. coffe_maker_290 is close cup_2064. cup_2064 is inside coffe_maker_290. cup_2064 is close coffe_maker_290. cup_2064 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: You need to ensure the coffee maker is plugged in and filled with water.
##############################
From agent.py
Human Instruction: You need to ensure the coffee maker is plugged in and filled with water.

Human Guidance: Put a suitably sized cup into the coffee machine and start it.
The actions you have taken:
Action 1: Walk to faucet_232.
Action 2: Switch on faucet_232.
Action 3: Switch off faucet_232.
Action 4: Walk to cupboard_229.
Action 5: Open cupboard_229.
Action 6: look for coffee_filter_2000 around cupboard_229.
Action 7: Walk to closetdrawer_158.
Action 8: look for coffee_filter_2000 around closetdrawer_158.
Action 9: Walk to closetdrawer_158.
Action 10: look for coffee_filter_2000 around closetdrawer_158.
Action 11: Walk to closetdrawer_158.
Action 12: look for coffee_filter_2000 around closetdrawer_158.
Action 13: Walk to closetdrawer_158.
Action 14: look for coffee_filter_2000 around closetdrawer_158.
Action 15: Walk to closetdrawer_158.
Action 16: look for coffee_filter_2000 around closetdrawer_158.
Action 17: Walk to table_226.
Action 18: look for coffee_filter_2000 around table_226.
Action 19: Walk to coffe_maker_290.
Action 20: Open coffe_maker_290.
Action 21: Walk to coffee_filter_2000.
Action 22: Grab coffee_filter_2000.
Action 23: Walk to coffe_maker_290.
Action 24: Put coffee_filter_2000 into coffe_maker_290.
Action 25: Close coffe_maker_290.
Action 26: Switch on coffe_maker_290.
Action 27: Switch off coffe_maker_290.
Action 28: Open coffe_maker_290.
Action 29: Walk to cup_2064.
Action 30: Grab cup_2064.
Action 31: Walk to coffe_maker_290.
Action 32: Put cup_2064 into coffe_maker_290.
Action 33: Close coffe_maker_290.
Action 34: Switch on coffe_maker_290.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_sugar_2039_around_bowl_2071(food_sugar:item):
    goal: not unknown(food_sugar)
    body:
        assert is_food_sugar(food_sugar)
        bind bowl_instance:item where:
            is_bowl(bowl_instance) and id[bowl_instance]==2071
        achieve close_char(char,bowl_instance)
        if can_open(bowl_instance):
            achieve_once open(bowl_instance)
            exp(food_sugar,bowl_instance)
        else:
            exp(food_sugar,bowl_instance)
    eff:
        unknown[food_sugar]=False
        close[food_sugar,bowl_instance]=True
        close[bowl_instance,food_sugar]=True
    

#exp_behavior_end

#goal_representation
 
behavior plug_in_coffee_maker(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)

behavior check_and_fill_water(coffee_maker:item):
    body:
        if not has_water(coffee_maker):
            achieve has_water(coffee_maker)

behavior place_cup_in_coffee_maker(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and has_plug(coffee_maker)

        plug_in_coffee_maker(coffee_maker)
        check_and_fill_water(coffee_maker)

        bind cup: item where:
            is_cup(cup)
        
        place_cup_in_coffee_maker(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once closed(coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        ensure_coffee_maker_ready(coffee_maker)
        achieve_once inside(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker) # Ensure the coffee maker is plugged in
        achieve has_water(coffee_maker) # Ensure the coffee maker is filled with water

behavior prepare_coffee_in_machine(coffee_maker:item, coffee_filter:item):
    body:
        achieve_once inside(coffee_filter, coffee_maker) # Place the coffee filter inside the coffee maker
        achieve_once closed(coffee_maker) # Close the coffee maker before starting
        achieve is_on(coffee_maker) # Start the coffee maker

behavior place_cup_in_machine(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker) # Place the cup inside the coffee maker

behavior turn_off_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_off(coffee_maker) # Turn off the coffee maker after use

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)
        
        bind cup: item where:
            is_cup(cup)

        ensure_coffee_maker_ready(coffee_maker)
        place_cup_in_machine(cup, coffee_maker)
        prepare_coffee_in_machine(coffee_maker, coffee_filter)
        turn_off_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Error is:
'NoneType' object is not iterable
##############################
VH_pipeline: Fail to generate a valid plan
##############################
From agent.py -> query_LLM_human
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a suitably sized cup into the coffee machine and start it.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2043_around_fridge_289(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

#exp_behavior_end

#goal_representation

behavior check_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior prepare_coffee(cup:item, coffee_maker:item):
    body:
        achieve_once inside(cup, coffee_maker) # Ensure the cup is placed inside the coffee maker

behavior start_coffee_maker(coffee_maker:item):
    body:
        achieve_once is_on(coffee_maker) # Turn on the coffee maker to start brewing coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        check_coffee_maker_ready(coffee_maker)
        prepare_coffee(cup, coffee_maker)
        start_coffee_maker(coffee_maker)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior fill_coffee_maker_and_start(coffee_maker:item, cup:item, coffee_filter:item):
    body:
        achieve_once open(coffee_maker)
        achieve_once inside(coffee_filter, coffee_maker)
        achieve_once closed(coffee_maker)
        achieve_once inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        ensure_coffee_maker_ready(coffee_maker)
        fill_coffee_maker_and_start(coffee_maker, cup, coffee_filter)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior ensure_coffee_maker_ready(coffee_maker:item):
    body:
        achieve plugged(coffee_maker)
        achieve has_water(coffee_maker)

behavior fill_coffee_maker_and_start(coffee_maker:item, cup:item, coffee_filter:item):
    body:
        achieve_once open(coffee_maker)
        achieve_once inside(coffee_filter, coffee_maker)
        achieve_once closed(coffee_maker)
        achieve_once inside(cup, coffee_maker)
        achieve is_on(coffee_maker)

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)

        bind cup: item where:
            is_cup(cup)

        bind coffee_filter: item where:
            is_coffee_filter(coffee_filter)

        ensure_coffee_maker_ready(coffee_maker)
        fill_coffee_maker_and_start(coffee_maker, cup, coffee_filter)

##############################
From agent.py-> find a plan in act()
switchoff_executor(coffe_maker_290)open_executor(coffe_maker_290)close_executor(coffe_maker_290)switchon_executor(coffe_maker_290)
##############################
From agent.py
switchoff_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned off. 
##############################
From agent.py
open_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the cup_2064. Robot is close to the coffee_filter_2000. Robot is close to the coffe_maker_290. coffe_maker_290 is opened. 
##############################
From agent.py
close_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is closed. 
##############################
From agent.py
switchon_executor(coffe_maker_290)
Robot find: Robot is close to the kitchen_counter_230. Robot is close to the coffe_maker_290. coffe_maker_290 is turned on. 
##############################
From agent.py -> evaluate_current_subgoal()
The evaluation result for current subgoal: No
The feedback instruction: Ensure the coffee maker is plugged in and filled with water.
##############################
Task Summary:
Task Goal:
Make a cup of coffee using the coffee maker.
Action History:
['walk_executor(faucet_232)', 'switchon_executor(faucet_232)', 'switchoff_executor(faucet_232)', 'walk_executor(cupboard_229)', 'open_executor(cupboard_229)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(closetdrawer_158)', 'walk_executor(table_226)', 'walk_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(coffee_filter_2000)', 'grab_executor(coffee_filter_2000)', 'walk_executor(coffe_maker_290)', 'putin_executor(coffee_filter_2000, coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'walk_executor(cup_2064)', 'grab_executor(cup_2064)', 'walk_executor(coffe_maker_290)', 'putin_executor(cup_2064, coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)', 'switchoff_executor(coffe_maker_290)', 'open_executor(coffe_maker_290)', 'close_executor(coffe_maker_290)', 'switchon_executor(coffe_maker_290)']
Time info:
Time consume: 292 seconds
Exp_helper query times: 1
Guidance query times: 2
library scale: 8
goal generate times: 10
goal correct times: 0
action_num: 31

Task complete rate:
1
Scene_id: 0
##############################
