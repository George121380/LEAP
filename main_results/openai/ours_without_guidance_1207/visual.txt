############################################################
When the sub-task is: Cut the chicken into pieces and put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind fridge: item where:
            is_fridge(fridge) # Select the fridge
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        cut_chicken(chicken, cutting_board)
        store_in_fridge(chicken, fridge)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(sink)
            achieve_once is_off(faucet)
        else:
            wash(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        clean_sink(sink)

############################################################
When the sub-task is: 1. Identify all the rooms in the household.
A successful representation:
 
behavior identify_rooms():
    body:
        foreach room: item:
            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):
                observe(room, "Identify room type")
            # Add observe behaviors for other specific room types as needed

behavior __goal__():
    body:
        identify_rooms()

############################################################
When the sub-task is: 2. Turn on a light in any room that currently has no lights on.
A successful representation:
 
def has_unlit_light(room:item):
    # Function to check if theres a light that is currently off in the room
    symbol has_unlit_light=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return has_unlit_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check each one
            if has_unlit_light(room):
                # If there is an unlit light in a room
                bind light: item where:
                    is_light(light) and is_off(light) and inside(light, room)
                # Bind the unlit light in the room
                turn_on_light(light) # Turn on the unlit light

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(sink)
            achieve_once is_off(faucet)
        else:
            wash(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        clean_sink(sink)

############################################################
When the sub-task is: 1. Find a cup and fill it with water.
A successful representation:
 
def has_water_inside(x:item):
    # Function to check if an item has water
    symbol water_inside=has_water(x)
    return water_inside

behavior find_and_fill_cup(cup:item, sink:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not has_water_inside(cup):
            bind sink: item where:
                is_sink(sink)
            # Select a sink
            find_and_fill_cup(cup, sink)


############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window)

############################################################
When the sub-task is: 1. Identify all the rooms in the environment.
A successful representation:
 
behavior identify_rooms():
    body:
        foreach room: item:
            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):
                observe(room, "Identify room type")
            # Add observe behaviors for other specific room types as needed

behavior __goal__():
    body:
        identify_rooms()

############################################################
When the sub-task is: 2. Check if there is a light on in each room.
A successful representation:
 
def has_light_off_in_room(room:item):
    # Function to check if theres any light thats turned off in the room
    symbol light_off=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return light_off

behavior check_light_status(light:item):
    body:
        observe(light, "Check light status")
        # Observe to confirm the status of the light

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check each one
            if has_light_off_in_room(room):
                bind light: item where:
                    is_light(light) and is_off(light) and inside(light, room)
                # Check the status of the light if it is off
                check_light_status(light)

############################################################
When the sub-task is: 3. Turn on a light in any room where none are currently on.
A successful representation:
 
def has_unlit_light(room:item):
    # Function to check if there is a light turned off in a room
    symbol has_unlit_light=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return has_unlit_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through all rooms
            if has_unlit_light(room):
                # Check if there is an unlit light in the room
                bind light: item where:
                    is_light(light) and is_off(light) and inside(light, room)
                # Bind the unlit light in the room
                turn_on_light(light) # Turn on the unlit light

############################################################
When the sub-task is: 1. Find the basket containing clothes.
A successful representation:
 
def is_basket_for_clothes_present():
    # Function to check if there is a basket for clothes
    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)
    return basket_existence

behavior __goal__():
    body:
        if is_basket_for_clothes_present():
            # If a basket for clothes is already known to exist, find and approach it
            bind basket: item where:
                is_basket_for_clothes(basket)
            achieve close_char(char, basket)
        else:
            # If no known basket for clothes exists, explore the environment for one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Locate the basket containing clothes")

############################################################
When the sub-task is: 2. Place the clothes in the washing machine and start it.
A successful representation:
 
behavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior start_washing_machine(washing_machine:item):
    body:
        if has_switch(washing_machine):
            achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        bind basket: item where:
            is_basket_for_clothes(basket) and id[basket] == 2006
        # Select the basket with clothes

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                place_clothes_in_washing_machine(clothes, washing_machine)
        # Place all clothes from the basket into the washing machine

        start_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Ensure the cleaning solution is placed inside the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select the cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)

############################################################
When the sub-task is: 2. Wash the bowls and the plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all plates and bowls into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window)

############################################################
When the sub-task is: 1. Find the milk, turkey, egg, fish, and chicken.
A successful representation:
 
def is_item_found(item:item):
    # Function to check if the specified food item is already found
    symbol item_found=visited(item)
    return item_found

behavior find_food_item(food_item:item):
    body:
        if not is_item_found(food_item):
            # If the item is not found yet
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check for the food item inside")
            # Observe inside the fridge if the food item is there

            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            observe(kitchen_counter, "Check for the food item around the kitchen counter")
            # Observe around the kitchen counter if the food item is there

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        find_food_item(milk)
        find_food_item(turkey)
        find_food_item(egg)
        find_food_item(fish)
        find_food_item(chicken)

############################################################
When the sub-task is: 2. Put the milk, turkey, egg, fish, and chicken on the table in the dining room.
A successful representation:
 
behavior put_food_on_table(food:item, table:item):
    body:
        achieve on(food, table) # Place the food item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind dining_room_table: item where:
            is_table(dining_room_table) and surfaces(dining_room_table)
        # Select a table in the dining room that has a surface

        foreach food: item:
            if (food == milk or food == turkey or food == egg or food == fish or food == chicken):
                put_food_on_table(food, dining_room_table)
        # Place all specified food items on the dining room table

############################################################
When the sub-task is: Cut the chicken into pieces and put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind fridge: item where:
            is_fridge(fridge) # Select the fridge
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        cut_chicken(chicken, cutting_board)
        store_in_fridge(chicken, fridge)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: Turn on the lights in the bedroom. Then turn on the lights in the bathroom.
A successful representation:
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom
        
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.  
A successful representation:
 
behavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select a coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Locate the book and place it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select a coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
behavior open_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        bind window: item where:
            is_window(window) and inside(window, home_office)
        open_window(window)

############################################################
When the sub-task is: 2. Place the bowl of water on the table in the home office.
A successful representation:
 
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)

############################################################
When the sub-task is: 3. Find the cat and put it on the table in the home office.
A successful representation:
 
def is_cat_found(cat:item):
    # Function to check if the cat has already been found
    symbol cat_found=visited(cat)
    return cat_found

behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind table: item where:
            is_table(table) and surfaces(table)
        # Select a table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(table, home_office)
        # Ensure the table is in the home office

        if not is_cat_found(cat):
            # If the cat hasnt been found yet, observe likely locations
            observe(cat, "Locate the cat")
        
        find_cat_and_put_on_table(cat, table)

############################################################
When the sub-task is: 1. Check each room to identify if any lights are off.  
A successful representation:
 
def has_light_off(room:item):
    # Function to check if there are any lights off in a specified room
    symbol light_off=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return light_off

behavior check_light_status(light:item):
    body:
        observe(light, "Check light status")
        # Observe to confirm the status of the light

behavior __goal__():
    body:
        foreach room: item:
            # Iterate over all rooms to check each one
            if has_light_off(room):
                bind light: item where:
                    is_light(light) and is_off(light) and inside(light, room)
                # Check the status of the light if it is off
                check_light_status(light)

############################################################
When the sub-task is: 2. Turn on lights in rooms where none are currently on.
A successful representation:
 
def has_unlit_light(room:item):
    # Function to check if there is a light turned off in a room
    symbol unlit_light_exists=exists light: item : is_light(light) and is_off(light) and inside(light, room)
    return unlit_light_exists

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        foreach room: item:
            # Iterate through all rooms
            if has_unlit_light(room):
                # Check if there is a light turned off in the room
                bind light: item where:
                    is_light(light) and is_off(light) and inside(light, room)
                # Bind the unlit light in the room
                turn_on_light(light) # Turn on the unlit light

############################################################
When the sub-task is: 1. Identify the basket with clothes in it.  
A successful representation:
 
def is_basket_for_clothes_present():
    # Function to check if there is a basket for clothes
    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)
    return basket_existence

behavior __goal__():
    body:
        if is_basket_for_clothes_present():
            # If a basket for clothes is already known to exist, find and approach it
            bind basket: item where:
                is_basket_for_clothes(basket)
            achieve close_char(char, basket)
        else:
            # If no known basket for clothes exists, explore the environment for one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Locate the basket containing clothes")

############################################################
When the sub-task is: 2. Load the clothes into the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior start_washing_machine(washing_machine:item):
    body:
        if has_switch(washing_machine):
            achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket with clothes
        
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
        # Load all clothes from the basket into the washing machine
        
        start_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window)

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start the wash cycle.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand in the sink.
A successful representation:
 
behavior wash_forks_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink)
        # Ensure each fork is placed inside the sink
        
        wash(fork)
        # Wash each fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        foreach fork: item:
            if is_fork(fork):
                wash_forks_by_hand(fork, sink)
        # Wash all forks by hand

############################################################
When the sub-task is: Slice some chicken and give it to your cat.
A successful representation:
 
behavior slice_chicken_and_give_to_cat(chicken:item, cat:item, cutting_board:item):
    body:
        achieve cut(chicken) # Slice the chicken

behavior give_chicken_to_cat(chicken:item, cat:item, table:item):
    body:
        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind cat: item where:
            is_cat(cat) # Select the cat
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        bind table: item where:
            is_table(table) and surfaces(table) # Select a table with surface for serving
        slice_chicken_and_give_to_cat(chicken, cat, cutting_board)
        give_chicken_to_cat(chicken, cat, table)

############################################################
When the sub-task is: Slice the chicken and give it to your cat.
A successful representation:
 
behavior slice_chicken_and_give_to_cat(chicken:item, cat:item, cutting_board:item):
    body:
        achieve cut(chicken) # Slice the chicken

behavior give_chicken_to_cat(chicken:item, cat:item, table:item):
    body:
        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind cat: item where:
            is_cat(cat) # Select the cat
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        bind table: item where:
            is_table(table) and surfaces(table) # Select a table with surface for serving
        slice_chicken_and_give_to_cat(chicken, cat, cutting_board)
        give_chicken_to_cat(chicken, cat, table)

############################################################
When the sub-task is: 1. Slice the bread.
A successful representation:
 
behavior slice_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread) # Slice the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) # Select the bread
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        slice_bread(bread, cutting_board)

############################################################
When the sub-task is: 2. Toast the sliced bread.
A successful representation:
 
behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and cut(bread)
        # Select the sliced bread
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster
        
        toast_bread(bread, toaster)
        # Toast the sliced bread

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: Prepare a cup of water and place it on the nightstand.
A successful representation:
 
behavior prepare_cup_of_water(cup:item, sink:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water

behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not has_water(cup):
            bind sink: item where:
                is_sink(sink)
            # Select a sink
            
            prepare_cup_of_water(cup, sink)

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select the nightstand

        place_cup_on_nightstand(cup, nightstand)

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start the washing cycle.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink)
        # Ensure each fork is placed inside the sink
        
        wash(fork)
        # Wash each fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        foreach fork: item:
            if is_fork(fork):
                wash_fork_by_hand(fork, sink)
        # Wash all forks by hand

############################################################
When the sub-task is: 1. Find a sink in the bathroom.
A successful representation:
 
behavior find_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                observe(sink, "Locate the sink")

        bind located_sink: item where:
            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)
        
        find_sink(located_sink)

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to create soapy water.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve inside(soap, sink)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind soap: item where:
            is_soap(soap)
        fill_sink_with_water_and_add_soap(sink, faucet, soap)

############################################################
When the sub-task is: Slice some chicken and give it to your cat.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Slice the chicken

behavior give_chicken_to_cat(chicken:item, cat:item):
    body:
        achieve close(chicken, cat) # Ensure the chicken is close to the cat to receive it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind cat: item where:
            is_cat(cat) # Select the cat
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        slice_chicken(chicken, cutting_board)
        give_chicken_to_cat(chicken, cat)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
 
def is_cup_filled_with_milk(cup:item):
    # Determine if the cup has milk inside it
    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)
    return filled_with_milk

behavior find_cup_and_fill_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the milk is placed inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not is_cup_filled_with_milk(cup):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            find_cup_and_fill_with_milk(cup, milk)

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def has_milk(cup:item):
    # Function to check if the cup has milk
    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)
    return milk_in_cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave

############################################################
When the sub-task is: Prepare a sink of soapy water in the bathroom.
A successful representation:
 
def has_faucet(sink:item):
    # Function to check if the sink has a faucet
    symbol faucet_exists=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return faucet_exists

behavior prepare_soapy_water(sink:item, faucet:item, soap:item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            # Temporarily turn on the faucet to fill the sink with water
            achieve has_water(sink)
            # Ensure the sink is filled with water
            achieve inside(soap, sink)
            # Ensure the soap is inside the sink
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink with water

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink]==307
        # Select sink with ID 307

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink) and id[faucet]==308
        # Select the faucet close to sink 307 with ID 308

        bind soap: item where:
            is_soap(soap) and id[soap]==2037
        # Select soap with ID 2037

        prepare_soapy_water(sink, faucet, soap)

############################################################
When the sub-task is: 1. Turn on the lights in the bedroom.  
A successful representation:
 
def has_unlit_bedroom_light(bedroom:item):
    # Function to check if there is a light off in the bedroom
    symbol unlit_bedroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bedroom)
    return unlit_bedroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if has_unlit_bedroom_light(bedroom):
            bind light_bedroom: item where:
                is_light(light_bedroom) and is_off(light_bedroom) and inside(light_bedroom, bedroom)
            turn_on_light(light_bedroom) # Turn on the light in the bedroom

############################################################
When the sub-task is: 2. Turn on the lights in the bathroom.
A successful representation:
 
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        slice_chicken(chicken, cutting_board)
############################################################
When the sub-task is: Use a pot to boil water.
A successful representation:
 
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        place_pot_on_stove(pot, stove)

############################################################
When the sub-task is: Wash the bowls and the plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 1. Find a cup and pour milk into it.
A successful representation:
 
def is_cup_filled_with_milk(cup:item):
    # Determine if the cup has milk inside it
    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)
    return filled_with_milk

behavior find_cup_and_fill_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the milk is placed inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not is_cup_filled_with_milk(cup):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            find_cup_and_fill_with_milk(cup, milk)

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def has_milk(cup:item):
    # Function to check if the cup has milk
    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)
    return milk_in_cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
def is_window_found(window:item):
    # Function to check if a specified window has already been identified
    symbol window_found=visited(window)
    return window_found

behavior identify_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Identify the window")

behavior __goal__():
    body:
        identify_windows()

############################################################
When the sub-task is: 2. Wipe each window with a towel.
A successful representation:
 
behavior wipe_window_with_towel(window:item, towel:item):
    body:
        achieve_once inhand(towel) # Hold the towel temporarily for wiping
        wipe(window) # Perform the wiping action on the window

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not clean(window):
                # Loop through each identified window that is not yet clean
                bind towel: item where:
                    is_towel(towel)
                # Select the towel
                wipe_window_with_towel(window, towel)


############################################################
When the sub-task is: 1. Locate the book in the home office.
A successful representation:
 
behavior locate_book(book:item):
    body:
        achieve visited(book)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        locate_book(book)


############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Find a sink in the bathroom.
A successful representation:
 
behavior find_sink(sink:item):
    body:
        achieve close_char(char, sink)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                observe(sink, "Locate the sink")

        bind located_sink: item where:
            is_sink(located_sink) and inside(located_sink, bathroom) and visited(located_sink)
        
        find_sink(located_sink)

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to make it soapy.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_add_soap(sink:item, faucet:item, soap:item):
    body:
        if has_faucet(sink):
            achieve_once is_on(faucet)
            achieve has_water(sink)
            achieve inside(soap, sink)
            achieve_once is_off(faucet)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        bind soap: item where:
            is_soap(soap)
        fill_sink_with_water_and_add_soap(sink, faucet, soap)

############################################################
When the sub-task is: 1. Identify the basket that contains the clothes.
A successful representation:
 
def is_basket_for_clothes_present():
    # Function to check if there is a basket for clothes
    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)
    return basket_existence

behavior __goal__():
    body:
        if is_basket_for_clothes_present():
            # If a basket for clothes is already known to exist, find and approach it
            bind basket: item where:
                is_basket_for_clothes(basket)
            achieve close_char(char, basket)
        else:
            # If no known basket for clothes exists, explore the environment for one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Locate the basket containing clothes")

############################################################
When the sub-task is: 2. Add soap to the washing machine.
A successful representation:
 
behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)

behavior __goal__():
    body:
        bind soap: item where:
            is_soap(soap)
        # Select the soap

        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine]==2041
        # Select the washing machine with ID 2041

        add_soap_to_washing_machine(soap, washing_machine)

############################################################
When the sub-task is: 3. Place the clothes from the basket into the washing machine and run it.
A successful representation:
 
behavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior start_washing_machine(washing_machine:item):
    body:
        if has_switch(washing_machine):
            achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket with clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                place_clothes_in_washing_machine(clothes, washing_machine)
        # Place all clothes from the basket into the washing machine

        start_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Ensure the cleaning solution is placed inside the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select the cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)

############################################################
When the sub-task is: 2. Wash the bowls and the plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 1. Find and put milk and eggs on the table in the dining room.
A successful representation:
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room that has a surface

        put_item_on_table(milk, dining_table)
        # Place milk on the dining room table

        put_item_on_table(egg, dining_table)
        # Place egg on the dining room table

############################################################
When the sub-task is: 2. Remove all items from the fridge and throw them into the trashcan.
A successful representation:
 
behavior throw_in_trash(item:item, trashcan:item):
    body:
        achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        foreach item: item:
            if inside(item, fridge):
                throw_in_trash(item, trashcan)
                # Throw each item from the fridge into the trashcan

############################################################
When the sub-task is: 3. Return the milk and eggs to the fridge.
A successful representation:
 
behavior return_to_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Ensure the item is placed inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
    
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        return_to_fridge(milk, fridge)
        return_to_fridge(egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
def is_window_found(window:item):
    # Function to check if a specified window has already been identified
    symbol window_found=visited(window)
    return window_found

behavior identify_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Identify the window")

behavior __goal__():
    body:
        identify_windows()

############################################################
When the sub-task is: 2. Wipe each window using a towel.
A successful representation:
 
behavior wipe_window_with_towel(window:item, towel:item):
    body:
        achieve_once inhand(towel) # Temporarily hold the towel for wiping
        wipe(window) # Perform the wiping action on the window

behavior __goal__():
    body:
        foreach window: item:
            if is_window(window) and not clean(window):
                # Loop through each identified window that is not yet clean
                bind towel: item where:
                    is_towel(towel)
                # Select the towel
                wipe_window_with_towel(window, towel)

############################################################
When the sub-task is: 1. Put milk and eggs on the table in the dining room.
A successful representation:
behavior put_item_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room that has a surface

        put_item_on_table(milk, dining_table)
        # Place milk on the dining room table

        put_item_on_table(egg, dining_table)
        # Place egg on the dining room table
############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_in_trash(item:item, trashcan:item):
    body:
        achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        foreach item: item:
            if inside(item, fridge):
                throw_in_trash(item, trashcan)
                # Throw each item from the fridge into the trashcan

############################################################
When the sub-task is: 3. Put milk and eggs back in the fridge.
A successful representation:
 
behavior return_to_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Ensure the item is placed inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
    
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        return_to_fridge(milk, fridge)
        return_to_fridge(egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher and start it.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve inside(fork, sink)
        # Ensure each fork is placed inside the sink
        
        wash(fork)
        # Wash each fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        foreach fork: item:
            if is_fork(fork):
                wash_fork_by_hand(fork, sink)
        # Wash all forks by hand

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Locate the table in the dining room and place the milk and egg on it.
A successful representation:
behavior find_and_place_milk_and_egg(milk:item, egg:item, dining_table:item):
    body:
        achieve on(milk, dining_table) # Place the milk on the dining table
        achieve on(egg, dining_table) # Place the egg on the dining table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room that has a surface

        find_and_place_milk_and_egg(milk, egg, dining_table)
        # Find the milk and egg and place them on the dining room table
############################################################
When the sub-task is: 2. Remove all items from the fridge and throw them into the trashcan.
A successful representation:

behavior throw_in_trash(item:item, trashcan:item):
    body:
        achieve inside(item, trashcan)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Select the trashcan

        foreach item: item:
            if inside(item, fridge):
                throw_in_trash(item, trashcan)
                # Throw each item from the fridge into the trashcan

############################################################
When the sub-task is: 3. Put the milk and eggs back into the fridge.
A successful representation:
 
behavior return_to_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Ensure the item is placed inside the fridge

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Ensure the fridge door is closed

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk
    
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        return_to_fridge(milk, fridge)
        return_to_fridge(egg, fridge)
        close_fridge(fridge)

############################################################
When the sub-task is: 2. Place them on the table in the dining room.
A successful representation:
 
behavior put_food_on_table(food:item, table:item):
    body:
        achieve on(food, table) # Place the food item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room that has a surface

        foreach food: item:
            if (food == milk or food == turkey or food == egg or food == fish or food == chicken):
                put_food_on_table(food, dining_table)
        # Place all specified food items on the dining room table

############################################################
When the sub-task is: Cut the chicken into pieces, then put it back in the fridge.
A successful representation:
behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Cut the chicken into pieces

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge) # Put the chicken pieces inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge) # Close the fridge door

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind fridge: item where:
            is_fridge(fridge) # Select the fridge
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        cut_chicken(chicken, cutting_board)
        store_in_fridge(chicken, fridge)
        close_the_fridge_door(fridge)
############################################################
When the sub-task is: 1. Fill a bowl with water.
A successful representation:
 
behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve has_water(bowl) # Fill the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl
        
        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        fill_bowl_with_water(bowl, sink)

############################################################
When the sub-task is: 2. Place the bowl on the table in the home office.
A successful representation:

behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water

        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select a table inside the home office

        place_bowl_on_table(bowl, table)

############################################################
When the sub-task is: 3. Find the cat and put it on the table in the home office.
A successful representation:
 
def is_cat_found(cat:item):
    # Function to check if the cat has already been found
    symbol cat_found=visited(cat)
    return cat_found

behavior find_cat_and_put_on_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        bind table: item where:
            is_table(table) and surfaces(table)
        # Select a table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(table, home_office)
        # Ensure the table is in the home office

        if not is_cat_found(cat):
            # If the cat hasnt been found yet, observe likely locations
            observe(cat, "Locate the cat")
        
        find_cat_and_put_on_table(cat, table)

############################################################
When the sub-task is: 2. Slice a kiwi and add it to the cup.
A successful representation:
 
behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, cup:item):
    body:
        achieve cut(kiwi) # Slice the kiwi
        achieve inside(kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi) # Select the kiwi

        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
            
        bind cup: item where:
            is_cup(cup) and has_water(cup) # Select a cup that already contains water
        
        slice_kiwi_and_add_to_cup(kiwi, cutting_board, cup)

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom

############################################################
When the sub-task is: 1. Find the book and place it on the coffee table in the home office.
A successful representation:

behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Prepare a cup of hot milk and put it on the coffee table in the home office.
A successful representation:

behavior find_and_heat_cup_of_milk(cup:item, milk:item, microwave:item):
    body:
        achieve inside(milk, cup) # Ensure milk is in the cup
        achieve inside(cup, microwave) # Place the cup with milk inside the microwave
        achieve is_on(microwave) # Turn on the microwave to heat the milk

behavior place_cup_on_coffee_table(cup:item, coffee_table:item):
    body:
        achieve on(cup, coffee_table) # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_and_heat_cup_of_milk(cup, milk, microwave)
        place_cup_on_coffee_table(cup, coffee_table)

############################################################
When the sub-task is: Wash the bowls and plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
def has_unlit_bathroom_light(bathroom:item):
    # Function to check if there is a light off in the bathroom
    symbol unlit_bathroom_light=exists light: item : is_light(light) and is_off(light) and inside(light, bathroom)
    return unlit_bathroom_light

behavior turn_on_light(light:item):
    body:
        achieve is_on(light) # Turn the light on

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        if has_unlit_bathroom_light(bathroom):
            bind light_bathroom: item where:
                is_light(light_bathroom) and is_off(light_bathroom) and inside(light_bathroom, bathroom)
            turn_on_light(light_bathroom) # Turn on the light in the bathroom
############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Prepare a cup of hot milk and put it on the table.
A successful representation:
 
def is_cup_filled_with_milk(cup:item):
    # Determine if the cup has milk inside it
    symbol filled_with_milk=exists milk: item: is_milk(milk) and inside(milk, cup)
    return filled_with_milk

behavior find_and_fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the milk is placed inside the cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior place_cup_on_coffee_table(cup:item, coffee_table:item):
    body:
        achieve on(cup, coffee_table)
        # Place the cup on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if not is_cup_filled_with_milk(cup):
            bind milk: item where:
                is_milk(milk)
            # Select the milk
            find_and_fill_cup_with_milk(cup, milk)

        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_cup_on_coffee_table(cup, coffee_table)

############################################################
When the sub-task is: Boil rice in a pot.
A successful representation:
 
behavior add_rice_to_pot(rice:item, pot:item):
    body:
        achieve inside(rice, pot)

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that does not have water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        add_rice_to_pot(rice, pot)
        fill_pot_with_water(pot, sink)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

############################################################
When the sub-task is: Boil vegetables with a pot on the stove.
A successful representation:
behavior prepare_vegetables_in_pot(pot:item, vegetables:item, stove:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot
        
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water
        
behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        
behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)  # Ensure the pot does not have water initially
        # Select a pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        fill_pot_with_water(pot, sink)
        prepare_vegetables_in_pot(pot, vegetables, stove)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
############################################################
When the sub-task is: 1. Locate the book.
A successful representation:
 
behavior locate_book(book:item):
    body:
        achieve visited(book)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        locate_book(book)

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 2. Add milk and sugar to the coffee.
A successful representation:
behavior add_milk_and_sugar(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup) # Ensure the milk is added inside the cup
        achieve inside(sugar, cup) # Ensure the sugar is added inside the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_water(cup)
        # Select the cup of coffee which contains coffee

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select the sugar

        add_milk_and_sugar(cup, milk, sugar)
############################################################
When the sub-task is: 1. Slice the bread.
A successful representation:
behavior slice_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread) # Slice the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) # Select the bread
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        slice_bread(bread, cutting_board)
############################################################
When the sub-task is: 2. Toast the sliced bread.
A successful representation:

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread) and cut(bread)
        # Select the sliced bread
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster
        
        toast_bread(bread, toaster)
        # Toast the sliced bread

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        open_bathroom_window(window)

############################################################
When the sub-task is: Put the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office
        
        put_book_on_coffee_table(book, coffee_table)

############################################################
When the sub-task is: 1. Find milk, turkey, egg, fish, and chicken in the household.
A successful representation:
 
def is_item_found(item:item):
    # Function to check if a specified item has already been found
    symbol item_found=visited(item)
    return item_found

behavior find_item(item:item):
    body:
        if not is_item_found(item):
            bind fridge: item where:
                is_fridge(fridge)
            observe(fridge, "Check if the item is inside")

            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter)
            observe(kitchen_counter, "Check if the item is around the kitchen counter")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Bind milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Bind turkey

        bind egg: item where:
            is_food_egg(egg)
        # Bind egg

        bind fish: item where:
            is_food_fish(fish)
        # Bind fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind chicken

        find_item(milk)
        find_item(turkey)
        find_item(egg)
        find_item(fish)
        find_item(chicken)

############################################################
When the sub-task is: 2. Place the found items on the dining room table.
A successful representation:
 
behavior put_found_items_on_table(item:item, table:item):
    body:
        achieve on(item, table) # Place the specified item on the table

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind fish: item where:
            is_food_fish(fish)
        # Select fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind dining_table: item where:
            is_table(dining_table) and surfaces(dining_table) and inside(dining_table, dining_room)
        # Select a table in the dining room that has a surface

        foreach item: item:
            if (item == milk or item == turkey or item == egg or item == fish or item == chicken):
                put_found_items_on_table(item, dining_table)
        # Place all specified food items on the dining room table

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        slice_chicken(chicken, cutting_board)
############################################################
When the sub-task is: 1. Find a cup and fill it with water.  
A successful representation:
 
def has_water_inside(x:item):
    # Function to check if an item has water
    symbol water_inside=has_water(x)
    return water_inside

behavior find_and_fill_cup(cup:item, sink:item):
    body:
        achieve_once has_water(cup)
        # Ensure the cup is filled with water

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select a cup
        
        if not has_water_inside(cup):
            bind sink: item where:
                is_sink(sink)
            # Select a sink
            find_and_fill_cup(cup, sink)

############################################################
When the sub-task is: 2. Slice the kiwi and add it to the cup of water.
A successful representation:
behavior slice_kiwi_and_add_to_cup(kiwi:item, cutting_board:item, cup:item):
    body:
        achieve cut(kiwi) # Slice the kiwi
        achieve inside(kiwi, cup) # Add the sliced kiwi to the cup

behavior __goal__():
    body:
        bind kiwi: item where:
            is_food_kiwi(kiwi) # Select the kiwi

        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
            
        bind cup: item where:
            is_cup(cup) and has_water(cup) # Select a cup that already contains water
        
        slice_kiwi_and_add_to_cup(kiwi, cutting_board, cup)
############################################################
When the sub-task is: 1. Find a cup of milk.
A successful representation:
def is_milk_filled(cup: item):
    # Determine if the cup has milk inside it
    symbol milk_present=exists milk: item: is_milk(milk) and inside(milk, cup)
    return milk_present

behavior find_and_fill_cup_with_milk(possible_cup:item, milk:item):
    body:
        if is_cup(possible_cup) and not is_milk_filled(possible_cup):
            # Only attempt to fill if it is a cup and not already filled with milk
            achieve inside(milk, possible_cup)

behavior __goal__():
    body:
        # Attempt to find a cup and confirm it contains milk
        bind dirty_cup: item where:
            id[dirty_cup] == 2049
        
        observe(dirty_cup, "Check if there is milk inside the cup")

        bind possible_cups: item where:
            is_cup(possible_cups)

        foreach possible_cup: item:
            if is_cup(possible_cup) and not visited(possible_cup):
                observe(possible_cup, "Check if there is milk inside the cup")

        bind milk: item where:
            is_milk(milk)

        find_and_fill_cup_with_milk(dirty_cup, milk)
        
        foreach possible_cup: item:
            # Iterate through potential cups to find the one with milk or fill one if needed
            if is_cup(possible_cup) and not is_milk_filled(possible_cup):
                find_and_fill_cup_with_milk(possible_cup, milk)
############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:
 
def has_milk(cup:item):
    # Function to check if the cup has milk
    symbol milk_in_cup=exists item: item : is_milk(item) and inside(item, cup)
    return milk_in_cup

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup with milk inside the microwave
        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and has_milk(cup)
        # Select the cup with milk
        
        bind microwave: item where:
            is_microwave(microwave)
        # Select the microwave

        heat_milk_in_microwave(cup, microwave)
        # Heat the milk in the microwave

############################################################
When the sub-task is: 1. Locate the basket containing clothes.
A successful representation:
 
def is_basket_for_clothes_present():
    # Function to check if there is a basket for clothes
    symbol basket_existence=exists basket: item: is_basket_for_clothes(basket)
    return basket_existence

behavior __goal__():
    body:
        if is_basket_for_clothes_present():
            # If a basket for clothes is already known to exist, find and approach it
            bind basket: item where:
                is_basket_for_clothes(basket) and id[basket] == 2078
            achieve close_char(char, basket)
        else:
            # If no known basket for clothes exists, explore the environment for one
            bind dining_room: item where:
                is_dining_room(dining_room)
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket) and inside(basket, dining_room):
                    observe(basket, "Locate the basket containing clothes")

############################################################
When the sub-task is: 2. Put the clothes into the washing machine, add soap, and run the machine.
A successful representation:
 
behavior place_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)

behavior start_washing_machine(washing_machine:item):
    body:
        if has_switch(washing_machine):
            achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket with clothes

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        bind soap: item where:
            is_soap(soap)
        # Select the soap

        foreach clothes: item:
            if is_clothes(clothes) and inside(clothes, basket):
                place_clothes_in_washing_machine(clothes, washing_machine)
        # Place all clothes from the basket into the washing machine

        add_soap_to_washing_machine(soap, washing_machine)
        # Add soap to the washing machine

        start_washing_machine(washing_machine)
        # Start the washing machine

############################################################
When the sub-task is: 1. Put cleaning solution in the dishwasher.
A successful representation:
 
behavior put_cleaning_solution_in_dishwasher(cleaning_solution:item, dishwasher:item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Ensure the cleaning solution is placed inside the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select the cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        put_cleaning_solution_in_dishwasher(cleaning_solution, dishwasher)
 
############################################################
When the sub-task is: 2. Wash the bowls and the plates with the dishwasher.
A successful representation:
 
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Close the dishwasher door
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
            # Load all bowls and plates into the dishwasher
            if (is_plate(o) or is_bowl(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher

############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior hand_wash_jacket(jacket:item, sink:item):
    body:
        achieve inside(jacket, sink)
        # Place the jacket in the sink

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to hand wash

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        hand_wash_jacket(jacket, sink)

############################################################
When the sub-task is: 2. Use the washing machine to wash the jacket.
A successful representation:
 
behavior wash_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine) # Place jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve plugged(washing_machine) # Ensure washing machine is plugged in
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2047
        # Select the jacket with ID 2047

        wash_jacket_in_washing_machine(jacket, washing_machine) # Place the jacket in washing machine
        start_washing_machine(washing_machine)  # Start the washing machine to wash the jacket

############################################################
When the sub-task is: 1. Wash all the vegetables.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_vegetables(vegetables:item, sink:item):
    body:
        achieve inside(vegetables, sink)
        # Ensure the vegetables are placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetables

        wash(vegetables) # Wash the vegetables
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # After washing, turn off the faucet if it was turned on
        
behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing
        
        foreach vegetables: item:
            if is_food_vegetable(vegetables):
                wash_vegetables(vegetables, sink)
        # Wash all vegetables

############################################################
When the sub-task is: 2. Put the washed vegetables in a pot and boil them on the stove.
A successful representation:
 
behavior prepare_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the washed vegetables in the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select washed vegetables

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        prepare_vegetables_in_pot(vegetables, pot)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

############################################################
When the sub-task is: 3. Store the whole pot in the fridge.
A successful representation:
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126

        store_pot_in_fridge(pot, fridge)
        close_fridge(fridge)
 
############################################################
When the sub-task is: 1. Hand wash the jacket thoroughly.
A successful representation:
 
behavior hand_wash_jacket(jacket:item, sink:item):
    body:
        achieve inside(jacket, sink)
        # Place the jacket in the sink

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to hand wash

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        hand_wash_jacket(jacket, sink)

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
 
behavior wash_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine) # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve plugged(washing_machine) # Ensure the washing machine is plugged in
        achieve is_on(washing_machine) # Turn on the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2078
        # Select the jacket with ID 2078

        wash_jacket_in_washing_machine(jacket, washing_machine) # Place the jacket in washing machine
        start_washing_machine(washing_machine) # Start the washing machine to wash the jacket

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken) # Slice the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) # Select the chicken
        bind cutting_board: item where:
            is_cutting_board(cutting_board) # Select the cutting board
        slice_chicken(chicken, cutting_board)

