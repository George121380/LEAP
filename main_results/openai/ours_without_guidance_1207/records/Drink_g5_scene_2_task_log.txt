From agent.py
Reset goals: The sub-goals are: 
['Use the pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_table_123(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        # Ensure the pot is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Fill the pot with water
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select the pot that does not have water

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, sink)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior place_pot_on_stove_and_boil(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot with water
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        place_pot_on_stove_and_boil(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_plate_2105_around_stove_2090(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(plate,stove_instance)
        else:
            exp(plate,stove_instance)
    eff:
        unknown[plate]=False
        close[plate,stove_instance]=True
        close[stove_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove) # Ensure the stove is turned on to boil water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select an empty pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, sink)
        place_pot_on_stove(pot, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve has_water(pot)

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        achieve is_on(stove) # Ensure the stove is turned on to boil water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select an empty pot

        bind sink: item where:
            is_sink(sink)
        # Select a sink to fill the pot with water

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        fill_pot_with_water(pot, sink)
        place_pot_on_stove(pot, stove)
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to fill the pot with water. Currently, the actions performed do not include filling the pot with water before placing it on the stove. Perform the action of filling the pot with water using the faucet, then place the pot on the stove and ensure the stove is turned on.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_bread_2016_around_kitchen_counter_128(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water using the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that does not have water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water using the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and not has_water(pot)
        # Select a pot that does not have water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: You need to fill the pot with water using the faucet before placing it on the stove. Ensure the stove is turned on after placing the filled pot on it.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.
Action 12: Grab pot_2093.
Action 13: Walk to faucet_134.
Action 14: Switch on faucet_134.
Action 15: Switch off faucet_134.
Action 16: Walk to stove_2090.
Action 17: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_plate_2105_around_kitchen_counter_128(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(plate,kitchen_counter_instance)
        else:
            exp(plate,kitchen_counter_instance)
    eff:
        unknown[plate]=False
        close[plate,kitchen_counter_instance]=True
        close[kitchen_counter_instance,plate]=True
    

behavior find_food_bread_2016_around_fridge_140(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134 # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090 # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve_once is_on(faucet) # Turn on the faucet
        achieve has_water(pot) # Ensure the pot is filled with water
        achieve_once is_off(faucet) # Turn off the faucet

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) # Select the pot

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134 # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090 # Select the stove with ID 2090

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
##############################
From agent.py-> find a plan in act()
walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
