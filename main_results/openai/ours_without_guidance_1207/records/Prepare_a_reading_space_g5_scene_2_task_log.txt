From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles.', '2. Put the spectacles on the coffee table in the home office.', '3. Find the book.', '4. Put the book on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_desk_261(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_spectacles(spectacles: item):
    body:
        achieve visited(spectacles)
        # Ensure the spectacles have been seen
        
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select your spectacles

        find_spectacles(spectacles)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_spectacles(spectacles: item):
    body:
        achieve visited(spectacles)
        # Ensure the spectacles have been seen
        
behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select your spectacles

        find_spectacles(spectacles)

##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(spectacles_2106, desk_261)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(desk_261)
Find mat_237. Find chair_263. Find drawing_238. Robot is inside bedroom_220. Robot is close desk_261. Robot is close floor_223. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(spectacles_2106, desk_261)
Failed to find spectacles_2106 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_375)exp(spectacles_2106, desk_375)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(desk_375)
Find keyboard_382. Find glue_2013. Find mouse_380. Find chair_374. Robot is inside bedroom_327. Robot is close floor_337. Robot is close desk_375. Robot is no longer inside bedroom_220.Robot is no longer close desk_261.Robot is no longer close floor_223.
##############################
From agent.py
exp(spectacles_2106, desk_375)
Failed to find spectacles_2106 around desk_375. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_260)open_executor(bookshelf_260)exp(spectacles_2106, bookshelf_260)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(bookshelf_260)
Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. Robot is no longer inside bedroom_327.Robot is no longer close floor_337.Robot is no longer close desk_375.
##############################
From agent.py
open_executor(bookshelf_260)
Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_260)
Failed to find spectacles_2106 around bookshelf_260. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(spectacles_2106, bookshelf_188)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(bookshelf_188)
Find drawing_196. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close floor_221.Robot is no longer close floor_222.Robot is no longer close photoframe_246.
##############################
From agent.py
open_executor(bookshelf_188)
Find keyboard_2111. Find stereo_2007. Find cd_2100. Find cat_2082. Find mouse_2112. Find oil_2005. Find video_game_controller_2019. Find dvd_player_2000. Find clothes_underwear_2022. Find chair_2118. Find pillow_195. Find cup_2006. Find laser_pointer_2025. Find vacuum_cleaner_2094. Find mat_201. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From agent.py
exp(spectacles_2106, bookshelf_188)
Failed to find spectacles_2106 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(spectacles_2106, bookshelf_136)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_188.Robot is no longer close floor_165.
##############################
From agent.py
exp(spectacles_2106, bookshelf_136)
Failed to find spectacles_2106 around bookshelf_136. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(spectacles_2106, bookshelf_372)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_136.Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: The spectacles_2106 are located inside dining_room_1. You can find them on top of kitchen_counter_128, and they are situated near the center of the counter. Look for any clutter nearby, but focus on the kitchen counter surface to locate the spectacles.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2106 are located inside dining_room_1. You can find them on top of kitchen_counter_128, and they are situated near the center of the counter. Look for any clutter nearby, but focus on the kitchen counter surface to locate the spectacles.

The actions you have taken:
Action 1: Walk to desk_261.
Action 2: look for spectacles_2106 around desk_261.
Action 3: Walk to desk_375.
Action 4: look for spectacles_2106 around desk_375.
Action 5: Walk to bookshelf_260.
Action 6: Open bookshelf_260.
Action 7: look for spectacles_2106 around bookshelf_260.
Action 8: Walk to bookshelf_188.
Action 9: Open bookshelf_188.
Action 10: look for spectacles_2106 around bookshelf_188.
Action 11: Walk to bookshelf_136.
Action 12: look for spectacles_2106 around bookshelf_136.
Action 13: Walk to bookshelf_372.
Action 14: Open bookshelf_372.

##############################
From agent.py
exp(spectacles_2106, bookshelf_372)
Failed to find spectacles_2106 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)obs(spectacles_2106, look around this place)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close spectacles_2106. Robot is no longer close floor_15.
##############################
From agent.py
obs(spectacles_2106, look around this place)
Get this information:  spectacles_2106 is close to kitchen_counter_128. spectacles_2106 is close to character_219. spectacles_2106 is on kitchen_counter_128. spectacles_2106 is inside dining_room_1.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_laptop_2015_around_computer_379(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(laptop,computer_instance)
        else:
            exp(laptop,computer_instance)
    eff:
        unknown[laptop]=False
        close[laptop,computer_instance]=True
        close[computer_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_spectacles_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table)

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_spectacles_on_coffee_table(spectacles, coffee_table)

##############################
From agent.py-> find a plan in act()
grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
grab_executor(spectacles_2106)
Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close spectacles_2106. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_128.
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Robot is inside home_office_161. Robot is close spectacles_2106. Robot is close table_193. spectacles_2106 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_bowl_2096_around_kitchen_counter_132(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation

behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer inside home_office_161.Robot is no longer close table_193.Robot is no longer close spectacles_2106.
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_136.
##############################
From agent.py
put_executor(book_2091, table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. book_2091 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_123(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bench_126(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==126
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(book,bench_instance)
        else:
            exp(book,bench_instance)
    eff:
        unknown[book]=False
        close[book,bench_instance]=True
        close[bench_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book: item, coffee_table: item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select the coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select the coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_food_food_2055_around_kitchen_counter_132(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_coffee_table(coffee_table)
        # Select the coffee table

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_137(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==137
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation

behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_drawing_296(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(book,drawing_instance)
        else:
            exp(book,drawing_instance)
    eff:
        unknown[book]=False
        close[book,drawing_instance]=True
        close[drawing_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

#exp_behavior_end

#goal_representation
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select the coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table) # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind table: item where:
            is_table(table) and surfaces(table)
        # Select a table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(table, home_office)
        # Ensure the table is in the home office

        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

behavior find_clothes_scarf_2079_around_doorjamb_182(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind doorjamb_instance:item where:
            is_doorjamb(doorjamb_instance) and id[doorjamb_instance]==182
        achieve close_char(char,doorjamb_instance)
        if can_open(doorjamb_instance):
            achieve_once open(doorjamb_instance)
            exp(clothes_scarf,doorjamb_instance)
        else:
            exp(clothes_scarf,doorjamb_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,doorjamb_instance]=True
        close[doorjamb_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_drawing_296(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(book,drawing_instance)
        else:
            exp(book,drawing_instance)
    eff:
        unknown[book]=False
        close[book,drawing_instance]=True
        close[drawing_instance,book]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and id[book] == 2091
        # Select the book with ID 2091

        bind coffee_table: item where:
            is_table(coffee_table) and id[coffee_table] == 193
        # Select the coffee table with ID 193

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_bench_126(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==126
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(book,bench_instance)
        else:
            exp(book,bench_instance)
    eff:
        unknown[book]=False
        close[book,bench_instance]=True
        close[bench_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2091_around_kitchen_counter_132(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(book,kitchen_counter_instance)
        else:
            exp(book,kitchen_counter_instance)
    eff:
        unknown[book]=False
        close[book,kitchen_counter_instance]=True
        close[kitchen_counter_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_chair_374_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2091_around_powersocket_48(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind powersocket_instance:item where:
            is_powersocket(powersocket_instance) and id[powersocket_instance]==48
        achieve close_char(char,powersocket_instance)
        if can_open(powersocket_instance):
            achieve_once open(powersocket_instance)
            exp(book,powersocket_instance)
        else:
            exp(book,powersocket_instance)
    eff:
        unknown[book]=False
        close[book,powersocket_instance]=True
        close[powersocket_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation

behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_kitchen_counter_129(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(book,kitchen_counter_instance)
        else:
            exp(book,kitchen_counter_instance)
    eff:
        unknown[book]=False
        close[book,kitchen_counter_instance]=True
        close[kitchen_counter_instance,book]=True
    

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Ensure the book is on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

#exp_behavior_end

#goal_representation

behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_novel_2010_around_table_123(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==123
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(novel,table_instance)
        else:
            exp(novel,table_instance)
    eff:
        unknown[novel]=False
        close[novel,table_instance]=True
        close[table_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        place_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface
        
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_drawing_296(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(book,drawing_instance)
        else:
            exp(book,drawing_instance)
    eff:
        unknown[book]=False
        close[book,drawing_instance]=True
        close[drawing_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_table_127(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(book,table_instance)
        else:
            exp(book,table_instance)
    eff:
        unknown[book]=False
        close[book,table_instance]=True
        close[table_instance,book]=True
    

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_door_286(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind door_instance:item where:
            is_door(door_instance) and id[door_instance]==286
        achieve close_char(char,door_instance)
        if can_open(door_instance):
            achieve_once open(door_instance)
            exp(book,door_instance)
        else:
            exp(book,door_instance)
    eff:
        unknown[book]=False
        close[book,door_instance]=True
        close[door_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book
        
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_drawing_296(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind drawing_instance:item where:
            is_drawing(drawing_instance) and id[drawing_instance]==296
        achieve close_char(char,drawing_instance)
        if can_open(drawing_instance):
            achieve_once open(drawing_instance)
            exp(book,drawing_instance)
        else:
            exp(book,drawing_instance)
    eff:
        unknown[book]=False
        close[book,drawing_instance]=True
        close[drawing_instance,book]=True
    

behavior find_chair_374_around_chair_374(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==374
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation

behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) 

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_bookshelf_189(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table) # Place the book on the coffee table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_189(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==189
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        put_book_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find your spectacles and put them on the coffee table in the home office.', '2. Find the book and put it on the coffee table in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2106_around_desk_375(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(spectacles,desk_instance)
        else:
            exp(spectacles,desk_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,desk_instance]=True
        close[desk_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior find_spectacles_and_put_on_coffee_table(spectacles:item, coffee_table:item):
    body:
        achieve on(spectacles, coffee_table) # Place the spectacles on the coffee table

behavior __goal__():
    body:
        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the spectacles

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_spectacles_and_put_on_coffee_table(spectacles, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(desk_375)exp(spectacles_2106, desk_375)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(desk_375)
Find keyboard_382. Find glue_2013. Find mouse_380. Find chair_374. Robot is inside bedroom_327. Robot is close floor_337. Robot is close desk_375. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(spectacles_2106, desk_375)
Fail to find spectacles_2106 around desk_375. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_261)exp(spectacles_2106, desk_261)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(desk_261)
Find mat_237. Find chair_263. Find drawing_238. Robot is inside bedroom_220. Robot is close desk_261. Robot is close floor_223. Robot is no longer inside bedroom_327.Robot is no longer close floor_337.Robot is no longer close desk_375.
##############################
From agent.py
exp(spectacles_2106, desk_261)
Fail to find spectacles_2106 around desk_261. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(spectacles_2106, wallshelf_301)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(wallshelf_301)
Find towel_rack_300. Find drawing_296. Find towel_rack_299. Robot is inside bathroom_265. Robot is close wallshelf_301. Robot is no longer inside bedroom_220.Robot is no longer close desk_261.Robot is no longer close floor_223.
##############################
From agent.py
exp(spectacles_2106, wallshelf_301)
Fail to find spectacles_2106 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_102)exp(spectacles_2106, photoframe_102)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(photoframe_102)
Find book_2092. Find cup_2089. Find drawing_118. Robot is inside dining_room_1. Robot is close bookshelf_137. Robot is close photoframe_102. Robot is no longer inside bathroom_265.Robot is no longer close wallshelf_301.
##############################
From agent.py
exp(spectacles_2106, photoframe_102)
Fail to find spectacles_2106 around photoframe_102. 
##############################
From agent.py-> find a plan in act()
walk_executor(filing_cabinet_378)exp(spectacles_2106, filing_cabinet_378)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(filing_cabinet_378)
Find food_bread_2016. Find crayon_2020. Find needle_2024. Find check_2033. Find alcohol_2002. Find coffee_filter_2035. Find soap_2037. Find bills_2009. Robot is inside bedroom_327. Robot is close food_bread_2016. Robot is close crayon_2020. Robot is close needle_2024. Robot is close floor_335. Robot is close check_2033. Robot is close alcohol_2002. Robot is close coffee_filter_2035. Robot is close soap_2037. Robot is close bills_2009. Robot is close filing_cabinet_378. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_137.Robot is no longer close photoframe_102.
##############################
From agent.py
exp(spectacles_2106, filing_cabinet_378)
Fail to find spectacles_2106 around filing_cabinet_378. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_118)exp(spectacles_2106, drawing_118)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(drawing_118)
Find mat_114. Find mat_115. Robot is inside dining_room_1. Robot is close drawing_118. Robot is no longer inside bedroom_327.Robot is no longer close food_bread_2016.Robot is no longer close crayon_2020.Robot is no longer close needle_2024.Robot is no longer close floor_335.Robot is no longer close check_2033.Robot is no longer close alcohol_2002.Robot is no longer close coffee_filter_2035.Robot is no longer close soap_2037.Robot is no longer close bills_2009.Robot is no longer close filing_cabinet_378.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find spectacles_2106 ?
Answer: The spectacles_2106 are located inside dining_room_1. They are on top of kitchen_counter_128. Look for kitchen_counter_128 in the dining room, and you should find spectacles_2106 placed on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2106 are located inside dining_room_1. They are on top of kitchen_counter_128. Look for kitchen_counter_128 in the dining room, and you should find spectacles_2106 placed on it.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to wallshelf_301.
Action 6: look for spectacles_2106 around wallshelf_301.
Action 7: Walk to photoframe_102.
Action 8: look for spectacles_2106 around photoframe_102.
Action 9: Walk to filing_cabinet_378.
Action 10: look for spectacles_2106 around filing_cabinet_378.
Action 11: Walk to drawing_118.

##############################
From agent.py
exp(spectacles_2106, drawing_118)
Fail to find spectacles_2106 around drawing_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(spectacles_2106, kitchen_counter_128)walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer close drawing_118.
##############################
From agent.py
exp(spectacles_2106, kitchen_counter_128)
Find spectacles_2106. 
##############################
From agent.py-> find a plan in act()
walk_executor(spectacles_2106)grab_executor(spectacles_2106)walk_executor(table_193)put_executor(spectacles_2106, table_193)
##############################
From agent.py
walk_executor(spectacles_2106)
Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close spectacles_2106. Robot is no longer close floor_15.
##############################
From agent.py
grab_executor(spectacles_2106)
Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close spectacles_2106. Grabbing spectacles_2106 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Find keyboard_2111. Find drawing_196. Find mouse_2112. Find oil_2005. Find dvd_player_2000. Find chair_2118. Find pillow_195. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close spectacles_2106. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_128.
##############################
From agent.py
put_executor(spectacles_2106, table_193)
Find stereo_2007. Find cd_2100. Find cat_2082. Find video_game_controller_2019. Find clothes_underwear_2022. Find cup_2006. Find vacuum_cleaner_2094. Robot is inside home_office_161. Robot is close spectacles_2106. Robot is close table_193. spectacles_2106 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_132(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_cereal_2048_around_kitchen_counter_132(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_cereal,kitchen_counter_instance)
        else:
            exp(food_cereal,kitchen_counter_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_book_and_put_on_coffee_table(book:item, coffee_table:item):
    body:
        achieve on(book, coffee_table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select a book

        bind coffee_table: item where:
            is_table(coffee_table) and surfaces(coffee_table)
        # Select a coffee table with a surface

        bind home_office: item where:
            is_home_office(home_office) and inside(coffee_table, home_office)
        # Ensure the coffee table is in the home office

        find_book_and_put_on_coffee_table(book, coffee_table)

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(book_2091, bookshelf_372)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside home_office_161.Robot is no longer close table_193.Robot is no longer close spectacles_2106.
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From agent.py
exp(book_2091, bookshelf_372)
Fail to find book_2091 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_42)exp(book_2091, ceilinglamp_42)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(ceilinglamp_42)
Robot is inside dining_room_1. Robot is close ceilinglamp_42. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From agent.py
exp(book_2091, ceilinglamp_42)
Fail to find book_2091 around ceilinglamp_42. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_2109)open_executor(window_2109)exp(book_2091, window_2109)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. Robot is no longer close ceilinglamp_42.
##############################
From agent.py
open_executor(window_2109)
Robot is inside dining_room_1. Robot is close window_2109. 
##############################
From agent.py
exp(book_2091, window_2109)
Fail to find book_2091 around window_2109. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_188)open_executor(bookshelf_188)exp(book_2091, bookshelf_188)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_188)
Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. Robot is no longer inside dining_room_1.Robot is no longer close window_2109.
##############################
From agent.py
open_executor(bookshelf_188)
Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From agent.py
exp(book_2091, bookshelf_188)
Fail to find book_2091 around bookshelf_188. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_189)open_executor(bookshelf_189)exp(book_2091, bookshelf_189)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. Robot is no longer close bookshelf_188.Robot is no longer close floor_165.
##############################
From agent.py
open_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find book_2091 ?
Answer: Go to dining_room_1 and locate bookshelf_136. You will find book_2091 on bookshelf_136. The book is close to the bookshelf, so check for it among the other items there.
Re-decompose: None

##############################
From agent.py
Human Instruction: The spectacles_2106 are located inside dining_room_1. They are on top of kitchen_counter_128. Look for kitchen_counter_128 in the dining room, and you should find spectacles_2106 placed on it.
Go to dining_room_1 and locate bookshelf_136. You will find book_2091 on bookshelf_136. The book is close to the bookshelf, so check for it among the other items there.

The actions you have taken:
Action 1: Walk to desk_375.
Action 2: look for spectacles_2106 around desk_375.
Action 3: Walk to desk_261.
Action 4: look for spectacles_2106 around desk_261.
Action 5: Walk to wallshelf_301.
Action 6: look for spectacles_2106 around wallshelf_301.
Action 7: Walk to photoframe_102.
Action 8: look for spectacles_2106 around photoframe_102.
Action 9: Walk to filing_cabinet_378.
Action 10: look for spectacles_2106 around filing_cabinet_378.
Action 11: Walk to drawing_118.
Action 12: look for spectacles_2106 around drawing_118.
Action 13: Walk to kitchen_counter_128.
Action 14: look for spectacles_2106 around kitchen_counter_128.
Action 15: Walk to spectacles_2106.
Action 16: Grab spectacles_2106.
Action 17: Walk to table_193.
Action 18: Put spectacles_2106 on table_193.
Action 19: Walk to bookshelf_372.
Action 20: Open bookshelf_372.
Action 21: look for book_2091 around bookshelf_372.
Action 22: Walk to ceilinglamp_42.
Action 23: look for book_2091 around ceilinglamp_42.
Action 24: Walk to window_2109.
Action 25: Open window_2109.
Action 26: look for book_2091 around window_2109.
Action 27: Walk to bookshelf_188.
Action 28: Open bookshelf_188.
Action 29: look for book_2091 around bookshelf_188.
Action 30: Walk to bookshelf_189.
Action 31: Open bookshelf_189.

##############################
From agent.py
exp(book_2091, bookshelf_189)
Fail to find book_2091 around bookshelf_189. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_189.Robot is no longer close floor_167.
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_136.
##############################
From agent.py
put_executor(book_2091, table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. book_2091 released by right hand. 
##############################
