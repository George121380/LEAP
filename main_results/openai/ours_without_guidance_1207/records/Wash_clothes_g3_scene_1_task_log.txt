From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket thoroughly.', '2. Use the washing machine to wash the jacket.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_clothes_jacket_2119_around_dresser_274(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_jacket,dresser_instance)
        else:
            exp(clothes_jacket,dresser_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,dresser_instance]=True
        close[dresser_instance,clothes_jacket]=True
    

behavior find_detergent_2011_around_cupboard_118(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(detergent,cupboard_instance)
        else:
            exp(detergent,cupboard_instance)
    eff:
        unknown[detergent]=False
        close[detergent,cupboard_instance]=True
        close[cupboard_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be hand washed
        
        achieve clean(jacket)
        # Ensure the jacket is clean by hand washing
        
        if dirty(jacket):
            # If the jacket is still not clean, perform additional washing actions
            bind sink: item where:
                is_sink(sink)
            # Select a sink for additional cleaning, if needed
            
            wash(jacket)
            # Wash the jacket if its still dirty after the first wash

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select the jacket to be hand washed
        
        achieve clean(jacket)
        # Ensure the jacket is clean by hand washing
        
        if dirty(jacket):
            # If the jacket is still not clean, perform additional washing actions
            bind sink: item where:
                is_sink(sink)
            # Select a sink for additional cleaning, if needed
            
            wash(jacket)
            # Wash the jacket if its still dirty after the first wash

##############################
From agent.py-> find a plan in act()
walk_executor(dresser_274)open_executor(dresser_274)exp(clothes_jacket_2119, dresser_274)walk_executor(clothes_jacket_2119)wash_executor(clothes_jacket_2119)
##############################
From agent.py
walk_executor(dresser_274)
Find hanger_292. Find hanger_293. Find hanger_294. Find blow_dryer_2057. Find cat_2069. Find check_2075. Find clothes_pants_2036. Robot is inside home_office_241. Robot is close hanger_292. Robot is close hanger_293. Robot is close hanger_294. Robot is close blow_dryer_2057. Robot is close dresser_274. Robot is close cat_2069. Robot is close check_2075. Robot is no longer inside dining_room_41.
##############################
From agent.py
open_executor(dresser_274)
Find keyboard_278. Find brush_2002. Find stamp_2043. Find phone_2147. Find headset_2131. Find mat_284. Find pillow_287. Find cd_2145. Find shampoo_2019. Find stamp_2022. Find chair_271. Find cd_player_2129. Find pencil_2014. Find shoes_2033. Find phone_2017. Find remote_control_2124. Find drawing_288. Find pencil_2020. Find mouse_280. Find headset_2146. Find pillow_286. Find dvd_player_2130. Robot is inside home_office_241. Robot is close hanger_292. Robot is close hanger_293. Robot is close hanger_294. Robot is close blow_dryer_2057. Robot is close dresser_274. Robot is close cat_2069. Robot is close check_2075. 
##############################
From agent.py
exp(clothes_jacket_2119, dresser_274)
Failed to find clothes_jacket_2119 around dresser_274. 
##############################
From agent.py-> find a plan in act()
walk_executor(nightstand_192)exp(clothes_jacket_2119, nightstand_192)walk_executor(clothes_jacket_2119)wash_executor(clothes_jacket_2119)
##############################
From agent.py
walk_executor(nightstand_192)
Find pillow_208. Find drawing_201. Robot is inside bedroom_162. Robot is close nightstand_192. Robot is close floor_166. Robot is no longer inside home_office_241.Robot is no longer close hanger_292.Robot is no longer close hanger_293.Robot is no longer close hanger_294.Robot is no longer close blow_dryer_2057.Robot is no longer close dresser_274.Robot is no longer close cat_2069.Robot is no longer close check_2075.
##############################
From agent.py
exp(clothes_jacket_2119, nightstand_192)
Failed to find clothes_jacket_2119 around nightstand_192. 
##############################
From agent.py-> find a plan in act()
walk_executor(bed_197)exp(clothes_jacket_2119, bed_197)walk_executor(clothes_jacket_2119)wash_executor(clothes_jacket_2119)
##############################
From agent.py
walk_executor(bed_197)
Find clothes_dress_2116. Find clothes_scarf_2120. Find clothes_underwear_2121. Find pillow_207. Robot is inside bedroom_162. Robot is close bed_197. Robot is no longer close nightstand_192.Robot is no longer close floor_166.
##############################
From agent.py
exp(clothes_jacket_2119, bed_197)
Failed to find clothes_jacket_2119 around bed_197. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2079)open_executor(washing_machine_2079)exp(clothes_jacket_2119, washing_machine_2079)walk_executor(clothes_jacket_2119)wash_executor(clothes_jacket_2119)
##############################
From agent.py
walk_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. Robot is no longer inside bedroom_162.Robot is no longer close bed_197.
##############################
From agent.py
open_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. 
##############################
From agent.py
exp(clothes_jacket_2119, washing_machine_2079)
Failed to find clothes_jacket_2119 around washing_machine_2079. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Hand wash the jacket.', '2. Wash the jacket using the washing machine.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2126_around_sink_120(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(soap,sink_instance)
        else:
            exp(soap,sink_instance)
    eff:
        unknown[soap]=False
        close[soap,sink_instance]=True
        close[sink_instance,soap]=True
    

behavior find_detergent_2155_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_jacket_hand(jacket:item):
    body:
        wash(jacket)
        # Hand wash the jacket

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2119
        # Select jacket with ID 2119

        wash_jacket_hand(jacket)
        # Hand wash the selected jacket

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

#exp_behavior_end

#goal_representation
 
def has_jacket_x(jacket:item, obj:item):
    # Function to check if the specific jacket is at a specified object location
    symbol jacket_exists=exists jacket: item: is_clothes_jacket(jacket) and close(jacket, obj)
    return jacket_exists

behavior find_jacket(jacket:item):
    # Define a behavior to find the jacket
    body:
        foreach obj: item:
            if (is_dresser(obj) or is_nightstand(obj) or is_bed(obj) or is_washing_machine(obj)) and not visited(obj):
                observe(obj, "Check if the jacket is around here")
        achieve close_char(char, jacket)

behavior hand_wash_jacket(jacket:item):
    # Define a behavior to hand wash the jacket
    body:
        assert is_clothes_jacket(jacket)
        achieve clean(jacket)
        achieve has_water(jacket)

behavior __goal__():
    # Main function
    body:
        if exists jacket: item : is_clothes_jacket(jacket) and has_jacket_x(jacket, washing_machine):
            bind jacket: item where:
                is_clothes_jacket(jacket) and has_jacket_x(jacket, washing_machine)
        else:
            bind jacket: item where:
                is_clothes_jacket(jacket)
            # Use find_jacket if not already found
            find_jacket(jacket)

        hand_wash_jacket(jacket)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Variable jacket already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2010_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_clothes_jacket_2119_around_bookshelf_275(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(clothes_jacket,bookshelf_instance)
        else:
            exp(clothes_jacket,bookshelf_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bookshelf_instance]=True
        close[bookshelf_instance,clothes_jacket]=True
    

#goal_representation
 
def has_jacket_x(jacket:item, obj:item):
    # Function to check if the specific jacket is at a specified object location
    symbol jacket_exists=exists j: item: is_clothes_jacket(j) and close(j, obj)
    return jacket_exists

behavior find_jacket(jacket:item):
    # Define a behavior to find the jacket
    body:
        foreach obj: item:
            if (is_dresser(obj) or is_nightstand(obj) or is_bed(obj) or is_washing_machine(obj)) and not visited(obj):
                observe(obj, "Check if the jacket is around here")
        achieve close_char(char, jacket)

behavior hand_wash_jacket(jacket:item):
    # Define a behavior to hand wash the jacket
    body:
        assert is_clothes_jacket(jacket)
        achieve clean(jacket)
        achieve has_water(jacket)

behavior __goal__():
    # Main function
    body:
        if exists j: item : is_clothes_jacket(j) and has_jacket_x(j, washing_machine_2079):
            bind jacket: item where:
                is_clothes_jacket(jacket) and has_jacket_x(jacket, washing_machine_2079)
        else:
            bind jacket: item where:
                is_clothes_jacket(jacket)
            # Use find_jacket if not already found
            find_jacket(jacket)

        hand_wash_jacket(jacket)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: washing_machine_2079; available variables: [Variable<j: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2126_around_shower_16(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind shower_instance:item where:
            is_shower(shower_instance) and id[shower_instance]==16
        achieve close_char(char,shower_instance)
        if can_open(shower_instance):
            achieve_once open(shower_instance)
            exp(soap,shower_instance)
        else:
            exp(soap,shower_instance)
    eff:
        unknown[soap]=False
        close[soap,shower_instance]=True
        close[shower_instance,soap]=True
    

behavior find_clothes_jacket_2119_around_bookshelf_275(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==275
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(clothes_jacket,bookshelf_instance)
        else:
            exp(clothes_jacket,bookshelf_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,bookshelf_instance]=True
        close[bookshelf_instance,clothes_jacket]=True
    

#goal_representation
 
def has_jacket_x(jacket:item, obj:item):
    # Function to check if the specific jacket is at a specified object location
    symbol jacket_exists=exists j: item: is_clothes_jacket(j) and close(j, obj)
    return jacket_exists

behavior find_jacket(jacket:item):
    # Define a behavior to find the jacket
    body:
        foreach obj: item:
            if (is_dresser(obj) or is_nightstand(obj) or is_bed(obj) or is_washing_machine(obj)) and not visited(obj):
                observe(obj, "Check if the jacket is around here")
        achieve close_char(char, jacket)

behavior hand_wash_jacket(jacket:item):
    # Define a behavior to hand wash the jacket
    body:
        assert is_clothes_jacket(jacket)
        achieve clean(jacket)
        achieve has_water(jacket)

behavior __goal__():
    # Main function
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine) and id[washing_machine] == 2079
        
        if exists j: item : is_clothes_jacket(j) and has_jacket_x(j, washing_machine):
            bind jacket: item where:
                is_clothes_jacket(jacket) and has_jacket_x(jacket, washing_machine)
        else:
            bind jacket: item where:
                is_clothes_jacket(jacket)
            # Use find_jacket if not already found
            find_jacket(jacket)

        hand_wash_jacket(jacket)

#goal_representation_end

##############################
From agent.py->reset_goal
Failed to generate the goal representation
##############################
