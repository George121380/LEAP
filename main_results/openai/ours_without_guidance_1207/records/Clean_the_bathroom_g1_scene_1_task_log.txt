From agent.py
Reset goals: The sub-goals are: 
['Clean the bathroom sink directly.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_detergent_2011_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

behavior find_soap_2126_around_bathroom_counter_18(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(soap,bathroom_counter_instance)
        else:
            exp(soap,bathroom_counter_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_counter_instance]=True
        close[bathroom_counter_instance,soap]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_sink(sink:item):
    body:
        foreach dirt: item:
            if dirty(dirt) and on(dirt, sink):
                # Check each dirt spot on the sink
                scrub(dirt) # Scrub the dirt
                wipe(dirt) # Wipe the dirt away

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and dirty(sink)
        # Select the sink that is dirty
        clean_sink(sink) # Clean the selected sink

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_towel_2128_around_sink_19(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==19
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_detergent_2155_around_bathroom_cabinet_17(detergent:item):
    goal: not unknown(detergent)
    body:
        assert is_detergent(detergent)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(detergent,bathroom_cabinet_instance)
        else:
            exp(detergent,bathroom_cabinet_instance)
    eff:
        unknown[detergent]=False
        close[detergent,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,detergent]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            wipe(sink)
            achieve clean(sink)
        observe(sink, "Check if the sink is fully cleaned")

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        clean_sink(sink)
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_sink(sink:item):
    body:
        if dirty(sink):
            wipe(sink)
            achieve clean(sink)
        observe(sink, "Check if the sink is fully cleaned")

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        clean_sink(sink)
 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_19)wipe_executor(sink_19)obs(sink_19, Check if the sink is fully cleaned)
##############################
From agent.py
walk_executor(sink_19)
Find mat_32. Find detergent_2155. Find soap_2125. Find after_shave_2063. Find cleaning_solution_2143. Find drawing_33. Find phone_2029. Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer inside dining_room_41.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_soap_2125_around_soap_2125(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind soap_instance:item where:
            is_soap(soap_instance) and id[soap_instance]==2125
        achieve close_char(char,soap_instance)
        if can_open(soap_instance):
            achieve_once open(soap_instance)
            exp(soap,soap_instance)
        else:
            exp(soap,soap_instance)
    eff:
        unknown[soap]=False
        close[soap,soap_instance]=True
        close[soap_instance,soap]=True
    

behavior find_soap_2126_around_bathroom_cabinet_17(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_cleaning_solution_2143_around_cleaning_solution_2143(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind cleaning_solution_instance:item where:
            is_cleaning_solution(cleaning_solution_instance) and id[cleaning_solution_instance]==2143
        achieve close_char(char,cleaning_solution_instance)
        if can_open(cleaning_solution_instance):
            achieve_once open(cleaning_solution_instance)
            exp(cleaning_solution,cleaning_solution_instance)
        else:
            exp(cleaning_solution,cleaning_solution_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,cleaning_solution_instance]=True
        close[cleaning_solution_instance,cleaning_solution]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(sink)
            achieve_once is_off(faucet)
        else:
            wash(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        clean_sink(sink)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Function to determine whether the sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_sink(sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            wash(sink)
            achieve_once is_off(faucet)
        else:
            wash(sink)

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        clean_sink(sink)

##############################
From agent.py-> find a plan in act()
walk_executor(faucet_20)switchon_executor(faucet_20)walk_executor(sink_19)wash_executor(sink_19)walk_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(sink_19)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. Robot is no longer close faucet_20.
##############################
From agent.py
wash_executor(sink_19)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close sink_19. 
##############################
From agent.py
walk_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer close sink_19.
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
