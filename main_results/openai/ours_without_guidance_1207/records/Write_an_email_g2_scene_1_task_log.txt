From agent.py
Reset goals: The sub-goals are: 
['1. Find a chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_278_around_computer_209(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_chair_271_around_computer_209(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that can be sat on

        bind home_office: item where:
            is_home_office(home_office) and inside(chair, home_office)
        # Ensure the chair is in the home office

        find_and_sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation

def is_chair_found(chair:item):
    # Function to check if the chair has already been found
    symbol chair_found=visited(chair)
    return chair_found

behavior find_chair_and_sit_on_it(chair:item):
    body:
        achieve on_char(char, chair) # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind home_office: item where:
            is_home_office(home_office) and inside(computer, home_office)
        # Ensure the computer is in the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and inside(chair, home_office)
        # Select a sittable chair inside the home office

        if not is_chair_found(chair):
            # If the chair hasnt been found yet, observe likely locations
            observe(chair, "Locate the chair in front of the computer")
        
        find_chair_and_sit_on_it(chair)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office.', '2. Sit on the chair.', '3. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_278_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_chair_in_home_office(chair:item, home_office:item):
    body:
        achieve close_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        foreach chair: item:
            if is_chair(chair) and inside(chair, home_office) and not visited(chair):
                observe(chair, "Check if this is the chair in front of the computer")

        bind target_chair: item where:
            is_chair(target_chair) and inside(target_chair, home_office) and visited(target_chair)
        
        find_chair_in_home_office(target_chair, home_office)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_278_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_phone_2016_around_computer_209(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(phone,computer_instance)
        else:
            exp(phone,computer_instance)
    eff:
        unknown[phone]=False
        close[phone,computer_instance]=True
        close[computer_instance,phone]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_infront_of_computer(chair:item, computer:item, home_office:item):
    symbol chair_infront=inside(chair, home_office) and inside(computer, home_office) and close(chair, computer) and is_chair(chair) and is_computer(computer)
    return chair_infront

behavior find_chair_in_front_of_computer(chair:item, computer:item):
    body:
        achieve close_char(char, chair) # Move near to the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind home office

        if exists chair: item and computer: item : is_chair_infront_of_computer(chair, computer, home_office):
            bind chair: item where:
                is_chair_infront_of_computer(chair, computer, home_office)
            # If a chair in front of a computer is known, approach it
            find_chair_in_front_of_computer(chair, computer)
        
        else:
            foreach chair: item:
                if is_chair(chair) and inside(chair, home_office) and not visited(chair):
                    observe(chair, "Check if this chair is in front of a computer")
            # Explore if there is any chair in front of a computer

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('AND', 'and') at line 5552, column 31.
Expected one of: 
	* COLON
	* COMMA
	* WHERE
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_271_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_278_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#goal_representation
def is_chair_infront_of_computer(chair:item, computer:item, home_office:item):
    symbol chair_infront=inside(chair, home_office) and inside(computer, home_office) and close(chair, computer) and is_chair(chair) and is_computer(computer)
    return chair_infront

behavior find_chair_in_front_of_computer(chair:item, computer:item):
    body:
        achieve close_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        if exists chair: item and computer: item : is_chair_infront_of_computer(chair, computer, home_office):
            bind chair: item where:
                is_chair_infront_of_computer(chair, computer, home_office)
            find_chair_in_front_of_computer(chair, computer)
        
        else:
            foreach chair: item:
                if is_chair(chair) and inside(chair, home_office) and not visited(chair):
                    observe(chair, "Check if this chair is in front of a computer")
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('AND', 'and') at line 5532, column 31.
Expected one of: 
	* COLON
	* COMMA
	* WHERE
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'item')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_278_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#goal_representation
 
def is_chair_infront_of_computer(chair:item, computer:item, home_office:item):
    symbol chair_infront=inside(chair, home_office) and inside(computer, home_office) and close(chair, computer) and is_chair(chair) and is_computer(computer)
    return chair_infront

behavior find_chair_in_front_of_computer(chair:item, computer:item):
    body:
        achieve close_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        
        if exists chair: item and computer: item : is_chair_infront_of_computer(chair, computer, home_office):
            bind chair: item where:
                is_chair_infront_of_computer(chair, computer, home_office)
            find_chair_in_front_of_computer(chair, computer)
        
        else:
            foreach chair: item:
                if is_chair(chair) and inside(chair, home_office) and not visited(chair):
                    observe(chair, "Check if this chair is in front of a computer")

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
