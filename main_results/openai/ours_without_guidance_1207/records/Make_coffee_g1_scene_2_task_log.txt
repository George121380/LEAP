From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_132(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2088_around_kitchen_counter_132(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee(coffee_maker)
        pour_coffee(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior prepare_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

behavior pour_coffee(cup:item, coffee_maker:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        prepare_coffee(coffee_maker)
        pour_coffee(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(kitchen_counter_132)exp(cup_2087, kitchen_counter_132)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(coffe_maker_147)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer inside home_office_161.
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, kitchen_counter_132)
Failed to find cup_2087 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(cup_2087, cupboard_131)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(cup_2087, cupboard_131)
Failed to find cup_2087 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(cup_2087, cupboard_130)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(cup_2087, cupboard_130)
Failed to find cup_2087 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)exp(cup_2087, fryingpan_2107)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
exp(cup_2087, fryingpan_2107)
Failed to find cup_2087 around fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_144)exp(cup_2087, toaster_144)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(toaster_144)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close toaster_144. Robot is no longer close fryingpan_2107.
##############################
From agent.py
exp(cup_2087, toaster_144)
Failed to find cup_2087 around toaster_144. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(cup_2087, stove_2090)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close toaster_144.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2087 ?
Answer: The target item, cup_2087, is located on table_123 inside dining_room_1. To find cup_2087, head to dining_room_1 and look for table_123. Cup_2087 is positioned directly on this table.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, cup_2087, is located on table_123 inside dining_room_1. To find cup_2087, head to dining_room_1 and look for table_123. Cup_2087 is positioned directly on this table.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_132.
Action 4: look for cup_2087 around kitchen_counter_132.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to cupboard_130.
Action 9: look for cup_2087 around cupboard_130.
Action 10: Walk to fryingpan_2107.
Action 11: look for cup_2087 around fryingpan_2107.
Action 12: Walk to toaster_144.
Action 13: look for cup_2087 around toaster_144.
Action 14: Walk to stove_2090.
Action 15: Open stove_2090.

##############################
From agent.py
exp(cup_2087, stove_2090)
Failed to find cup_2087 around stove_2090. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close table_123.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
Human Instruction: You need to complete the process of pouring coffee into the cup. The coffee maker was turned on, but the cup has not been filled with coffee yet.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_132.
Action 4: look for cup_2087 around kitchen_counter_132.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to cupboard_130.
Action 9: look for cup_2087 around cupboard_130.
Action 10: Walk to fryingpan_2107.
Action 11: look for cup_2087 around fryingpan_2107.
Action 12: Walk to toaster_144.
Action 13: look for cup_2087 around toaster_144.
Action 14: Walk to stove_2090.
Action 15: Open stove_2090.
Action 16: look for cup_2087 around stove_2090.
Action 17: Walk to table_123.
Action 18: look for cup_2087 around table_123.
Action 19: Walk to cup_2087.
Action 20: Grab cup_2087.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_dishwasher_143(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

behavior find_cup_2087_around_sink_133(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(cup,sink_instance)
        else:
            exp(cup,sink_instance)
    eff:
        unknown[cup]=False
        close[cup,sink_instance]=True
        close[sink_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee(cup:item, coffe_maker:item):
    body:
        achieve inside(coffee, cup) # Your knowledge: Pour coffee into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
            # Select the cup with ID 2087
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 147
            # Select the coffee maker with ID 147

        make_coffee(cup, coffe_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<cup: item>, Variable<coffe_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_dishwasher_143(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(coffee_filter,dishwasher_instance)
        else:
            exp(coffee_filter,dishwasher_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,dishwasher_instance]=True
        close[dishwasher_instance,coffee_filter]=True
    

behavior find_cup_2087_around_pot_2093(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2093
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(cup,pot_instance)
        else:
            exp(cup,pot_instance)
    eff:
        unknown[cup]=False
        close[cup,pot_instance]=True
        close[pot_instance,cup]=True
    

#goal_representation

def is_coffee_inside(cup:item):
    # Check if coffee is inside the cup
    symbol coffee_exists=exists coffee: item: inside(coffee, cup)
    return coffee_exists

behavior make_coffee(cup:item, coffe_maker:item):
    body:
        if not is_coffee_inside(cup):
            achieve inside(coffee, cup) 

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 147
        # Select the coffee maker with ID 147

        make_coffee(cup, coffe_maker)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: coffee; available variables: [Variable<cup: item>, Variable<coffe_maker: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_128(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2089_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#goal_representation
 
symbol coffee:item

def is_coffee_inside(cup:item):
    # Check if coffee is inside the cup
    symbol coffee_exists=exists coffee: item: inside(coffee, cup)
    return coffee_exists

behavior make_coffee(cup:item, coffe_maker:item, coffee:item):
    body:
        if not is_coffee_inside(cup):
            achieve inside(coffee, cup) 

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 147
        # Select the coffee maker with ID 147

        make_coffee(cup, coffe_maker, coffee)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_sink_133(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(coffee_filter,sink_instance)
        else:
            exp(coffee_filter,sink_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,sink_instance]=True
        close[sink_instance,coffee_filter]=True
    

behavior find_cup_2006_around_tray_142(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==142
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(cup,tray_instance)
        else:
            exp(cup,tray_instance)
    eff:
        unknown[cup]=False
        close[cup,tray_instance]=True
        close[tray_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior fill_cup_with_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed correctly in the coffee maker for filling

behavior pour_coffee(cup:item):
    body:
        observe(cup, "Ensure the cup is filled with coffee") 
        # Confirm coffee has been poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_on(coffee_maker)
        # Select the coffee maker that is turned on

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup that needs to be filled

        fill_cup_with_coffee(cup, coffee_maker)
        pour_coffee(cup)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior fill_cup_with_coffee(cup:item, coffee_maker:item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed correctly in the coffee maker for filling

behavior pour_coffee(cup:item):
    body:
        observe(cup, "Ensure the cup is filled with coffee") 
        # Confirm coffee has been poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and is_on(coffee_maker)
        # Select the coffee maker that is turned on

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup that needs to be filled

        fill_cup_with_coffee(cup, coffee_maker)
        pour_coffee(cup)
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchoff_executor(coffe_maker_147)open_executor(coffe_maker_147)putin_executor(cup_2087, coffe_maker_147)walk_executor(cup_2087)obs(cup_2087, Ensure the cup is filled with coffee)
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
switchoff_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
open_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
putin_executor(cup_2087, coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. cup_2087 released by right hand. 
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
obs(cup_2087, Ensure the cup is filled with coffee)
Get this information:  cup_2087 is inside dining_room_1. cup_2087 is inside coffe_maker_147. cup_2087 is close to character_219. cup_2087 is close to coffe_maker_147.
##############################
From agent.py
Human Instruction: The coffee has not been poured into the cup yet. Ensure you confirm that the cup is actually filled with coffee by triggering and observing the appropriate coffee-making process.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to kitchen_counter_132.
Action 4: look for cup_2087 around kitchen_counter_132.
Action 5: Walk to cupboard_131.
Action 6: Open cupboard_131.
Action 7: look for cup_2087 around cupboard_131.
Action 8: Walk to cupboard_130.
Action 9: look for cup_2087 around cupboard_130.
Action 10: Walk to fryingpan_2107.
Action 11: look for cup_2087 around fryingpan_2107.
Action 12: Walk to toaster_144.
Action 13: look for cup_2087 around toaster_144.
Action 14: Walk to stove_2090.
Action 15: Open stove_2090.
Action 16: look for cup_2087 around stove_2090.
Action 17: Walk to table_123.
Action 18: look for cup_2087 around table_123.
Action 19: Walk to cup_2087.
Action 20: Grab cup_2087.
Action 21: Walk to faucet_134.
Action 22: Switch off faucet_134.
Action 23: Walk to coffe_maker_147.
Action 24: Switch off coffe_maker_147.
Action 25: Open coffe_maker_147.
Action 26: Put cup_2087 into coffe_maker_147.
Action 27: Walk to cup_2087.
Action 28: Observe around cup_2087 with the question of Ensure the cup is filled with coffee.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_128(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
 
def is_cup_filled_with_coffee(cup:item):
    # Function to check if the cup is filled with coffee
    symbol filled_with_coffee=exists coffee: item: is_coffee_filter(coffee) and inside(coffee, cup)
    return filled_with_coffee

behavior observe_cup(cup:item):
    body:
        observe(cup, "Ensure the cup is filled with coffee")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if not is_cup_filled_with_coffee(cup):
            observe_cup(cup)
            # Check if the cup is filled with coffee

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cup_filled_with_coffee(cup:item):
    # Function to check if the cup is filled with coffee
    symbol filled_with_coffee=exists coffee: item: is_coffee_filter(coffee) and inside(coffee, cup)
    return filled_with_coffee

behavior observe_cup(cup:item):
    body:
        observe(cup, "Ensure the cup is filled with coffee")

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if not is_cup_filled_with_coffee(cup):
            observe_cup(cup)
            # Check if the cup is filled with coffee

##############################
From agent.py-> find a plan in act()
obs(cup_2087, Ensure the cup is filled with coffee)
##############################
From agent.py
obs(cup_2087, Ensure the cup is filled with coffee)
Get this information:  cup_2087 is inside dining_room_1. cup_2087 is inside coffe_maker_147. cup_2087 is close to character_219. cup_2087 is close to coffe_maker_147.
##############################
