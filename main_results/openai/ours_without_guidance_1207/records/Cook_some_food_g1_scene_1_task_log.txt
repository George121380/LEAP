From agent.py
Reset goals: The sub-goals are: 
['Find a pot, set it on the stove, and boil the vegetables.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_stove_on_surface(surface:item):
    # Determine if there is a stove on a particular surface
    symbol stove_on_surface=exists stove: item : is_stove(stove) and on(stove, surface)
    return stove_on_surface

behavior find_pot_and_vegetables(pot:item, veg:item, surface:item):
    body:
        if not visited(pot) or not visited(veg):
            observe(surface, "Check if there is a pot and vegetables on the surface")

behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior boil_vegetables(pot:item, veg:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve inside(veg, pot)
        # Put vegetables inside the pot
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind veg: item where:
            is_food_vegetable(veg)
        # Select vegetables

        bind surface: item where:
            surfaces(surface) and not visited(surface)
        # Select an unvisited surface with a surface property

        bind stove: item where:
            is_stove(stove) and has_stove_on_surface(surface)
        # Select a stove on the given surface

        find_pot_and_vegetables(pot, veg, surface)
        move_pot_to_stove(pot, stove)
        boil_vegetables(pot, veg)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<pot: item>, Variable<veg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_mat_203_around_kitchen_counter_122(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(mat,kitchen_counter_instance)
        else:
            exp(mat,kitchen_counter_instance)
    eff:
        unknown[mat]=False
        close[mat,kitchen_counter_instance]=True
        close[kitchen_counter_instance,mat]=True
    

#goal_representation
 
def has_stove_on_surface(surface:item):
    # Determine if there is a stove on a particular surface
    symbol stove_on_surface=exists stove: item : is_stove(stove) and on(stove, surface)
    return stove_on_surface

behavior find_pot_and_vegetables(pot:item, veg:item, surface:item):
    body:
        if not visited(pot) or not visited(veg):
            observe(surface, "Check if there is a pot and vegetables on the surface")

behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior boil_vegetables(pot:item, veg:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve inside(veg, pot)
        # Put vegetables inside the pot
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind veg: item where:
            is_food_vegetable(veg)
        # Select vegetables

        bind surface: item where:
            surfaces(surface) and not visited(surface)
        # Select an unvisited surface with a surface property

        bind stove: item where:
            is_stove(stove) and has_stove_on_surface(surface)
        # Select a stove on the given surface

        find_pot_and_vegetables(pot, veg, surface)
        move_pot_to_stove(pot, stove)
        boil_vegetables(pot, veg, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_stove_on_surface(surface:item):
    # Determine if there is a stove on a particular surface
    symbol stove_on_surface=exists stove: item : is_stove(stove) and on(stove, surface)
    return stove_on_surface

behavior find_pot_and_vegetables(pot:item, veg:item, surface:item):
    body:
        if not visited(pot) or not visited(veg):
            observe(surface, "Check if there is a pot and vegetables on the surface")

behavior move_pot_to_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)

behavior boil_vegetables(pot:item, veg:item, stove:item):
    body:
        achieve has_water(pot)
        # Ensure the pot has water
        achieve inside(veg, pot)
        # Put vegetables inside the pot
        achieve is_on(stove)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind veg: item where:
            is_food_vegetable(veg)
        # Select vegetables

        bind surface: item where:
            surfaces(surface) and not visited(surface)
        # Select an unvisited surface with a surface property

        bind stove: item where:
            is_stove(stove) and has_stove_on_surface(surface)
        # Select a stove on the given surface

        find_pot_and_vegetables(pot, veg, surface)
        move_pot_to_stove(pot, stove)
        boil_vegetables(pot, veg, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)obs(kitchen_counter_119, Check if there is a pot and vegetables on the surface)walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)walk_executor(pot_2138)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_vegetable_2113, fridge_126)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(food_vegetable_2113)grab_executor(food_vegetable_2113)walk_executor(pot_2138)putin_executor(food_vegetable_2113, pot_2138)walk_executor(stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
obs(kitchen_counter_119, Check if there is a pot and vegetables on the surface)
Get this information:  pot_2138 is on kitchen_counter_119. bowl_2141 is on kitchen_counter_119. plate_2152 is on kitchen_counter_119. food_salt_2041 is on kitchen_counter_119. fork_2150 is on kitchen_counter_119. faucet_121 is on kitchen_counter_119. cutting_board_2123 is on kitchen_counter_119. kitchen_counter_119 is inside dining_room_41. bowl_2142 is on kitchen_counter_119. kitchen_counter_119 is close to tray_128. kitchen_counter_119 is close to walllamp_140. kitchen_counter_119 is close to walllamp_141. kitchen_counter_119 is close to food_salt_2041. kitchen_counter_119 is close to floor_45. kitchen_counter_119 is close to floor_46. kitchen_counter_119 is close to wall_64. kitchen_counter_119 is close to desk_193. kitchen_counter_119 is close to wall_67. kitchen_counter_119 is close to cutting_board_2123. kitchen_counter_119 is close to knifeblock_76. kitchen_counter_119 is close to pot_78. kitchen_counter_119 is close to cpuscreen_210. kitchen_counter_119 is close to stove_2135. kitchen_counter_119 is close to pot_2138. kitchen_counter_119 is close to bowl_2140. kitchen_counter_119 is close to bowl_2141. kitchen_counter_119 is close to bowl_2142. kitchen_counter_119 is close to fork_2150. kitchen_counter_119 is close to fork_2151. kitchen_counter_119 is close to plate_2152. kitchen_counter_119 is close to cupboard_117. kitchen_counter_119 is close to sink_120. kitchen_counter_119 is close to faucet_121. kitchen_counter_119 is close to kitchen_counter_123. kitchen_counter_119 is close to stovefan_125. kitchen_counter_119 is close to oven_127. kitchen_counter_119 is close to character_240. bowl_2140 is on kitchen_counter_119. fork_2151 is on kitchen_counter_119. sink_120 is inside kitchen_counter_119. stove_2135 is on kitchen_counter_119. kitchen_counter_119 is CLEAN. kitchen_counter_119 is OPEN.
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Find pot_2138. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil vegetables in a pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_pot_2138(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2138
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(pot,pot_instance)
        else:
            exp(pot,pot_instance)
    eff:
        unknown[pot]=False
        close[pot,pot_instance]=True
        close[pot_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables inside a specified pot
    symbol has_vegetables=exists o: item : is_food_vegetable(o) and inside(o, pot)
    return has_vegetables

def is_pot_on_stove(pot:item, stove:item):
    # Function to check if a pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to boil vegetables
        assert has_water(pot) # Ensure there is water in the pot
        assert has_vegetables_in_pot(pot) # Ensure vegetables are inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if has_vegetables_in_pot(pot):
            if is_pot_on_stove(pot, stove):
                boil_vegetables(pot, stove)
            else:
                observe(stove, "Check if a pot with vegetables is on the stove")
        else:
            observe(pot, "Check if there are vegetables in the pot")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_vegetables_in_pot(pot:item):
    # Function to check if there are vegetables inside a specified pot
    symbol has_vegetables=exists o: item : is_food_vegetable(o) and inside(o, pot)
    return has_vegetables

def is_pot_on_stove(pot:item, stove:item):
    # Function to check if a pot is on the stove
    symbol pot_on_stove=on(pot, stove)
    return pot_on_stove

behavior boil_vegetables(pot:item, stove:item):
    body:
        achieve is_on(stove) # Turn on the stove to boil vegetables
        assert has_water(pot) # Ensure there is water in the pot
        assert has_vegetables_in_pot(pot) # Ensure vegetables are inside the pot

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        if has_vegetables_in_pot(pot):
            if is_pot_on_stove(pot, stove):
                boil_vegetables(pot, stove)
            else:
                observe(stove, "Check if a pot with vegetables is on the stove")
        else:
            observe(pot, "Check if there are vegetables in the pot")

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2138)open_executor(pot_2138)obs(pot_2138, Check if there are vegetables in the pot)
##############################
From agent.py
walk_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
open_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. 
##############################
From agent.py
obs(pot_2138, Check if there are vegetables in the pot)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
Human Instruction: You need to ensure there are vegetables inside pot_2138, add water to it, place the pot on stove_2135, and then turn on the stove to boil the vegetables.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check if there is a pot and vegetables on the surface.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for pot_2138 around cupboard_118.
Action 6: Walk to pot_2138.
Action 7: Open pot_2138.
Action 8: Observe around pot_2138 with the question of Check if there are vegetables in the pot.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_78_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_vegetables(pot:item):
    # Function to check if the pot contains vegetables
    symbol pot_has_vegetables=exists vegetable: item: is_food_vegetable(vegetable) and inside(vegetable, pot)
    return pot_has_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water

behavior place_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select the pot with ID 2138

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        if not pot_has_vegetables(pot):
            # If the pot doesnt have vegetables, observe to ensure vegetables are inside
            observe(pot, "Check if there are vegetables in the pot")

        if not has_water(pot):
            fill_pot_with_water(pot)
            # Fill the pot with water if it doesnt have any

        place_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def pot_has_vegetables(pot:item):
    # Function to check if the pot contains vegetables
    symbol pot_has_vegetables=exists vegetable: item: is_food_vegetable(vegetable) and inside(vegetable, pot)
    return pot_has_vegetables

behavior fill_pot_with_water(pot:item):
    body:
        achieve has_water(pot) # Ensure the pot is filled with water

behavior place_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove) # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove) # Turn on the stove

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot] == 2138
        # Select the pot with ID 2138

        bind stove: item where:
            is_stove(stove) and id[stove] == 2135
        # Select the stove with ID 2135

        if not pot_has_vegetables(pot):
            # If the pot doesnt have vegetables, observe to ensure vegetables are inside
            observe(pot, "Check if there are vegetables in the pot")

        if not has_water(pot):
            fill_pot_with_water(pot)
            # Fill the pot with water if it doesnt have any

        place_on_stove(pot, stove)
        # Place the pot on the stove

        turn_on_stove(stove)
        # Turn on the stove to boil the vegetables

##############################
From agent.py-> find a plan in act()
obs(pot_2138, Check if there are vegetables in the pot)grab_executor(pot_2138)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
obs(pot_2138, Check if there are vegetables in the pot)
Get this information:  pot_2138 is on kitchen_counter_119. pot_2138 is close to kitchen_counter_119. pot_2138 is close to character_240. pot_2138 is inside dining_room_41. pot_2138 is OPEN.
##############################
From agent.py
grab_executor(pot_2138)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Grabbing pot_2138 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close pot_2138. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
put_executor(pot_2138, stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. pot_2138 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2135)
Robot is inside dining_room_41. Robot is close pot_2138. Robot is close kitchen_counter_119. Robot is close stove_2135. 
##############################
From agent.py
Human Instruction: You need to ensure that there are vegetables inside pot_2138 before the boiling process can be considered complete. Ensure that the pot contains vegetables and then follow through with placing the pot back on the stove and turning it on.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: Observe around kitchen_counter_119 with the question of Check if there is a pot and vegetables on the surface.
Action 3: Walk to cupboard_118.
Action 4: Open cupboard_118.
Action 5: look for pot_2138 around cupboard_118.
Action 6: Walk to pot_2138.
Action 7: Open pot_2138.
Action 8: Observe around pot_2138 with the question of Check if there are vegetables in the pot.
Action 9: Observe around pot_2138 with the question of Check if there are vegetables in the pot.
Action 10: Grab pot_2138.
Action 11: Walk to faucet_20.
Action 12: Switch on faucet_20.
Action 13: Switch off faucet_20.
Action 14: Walk to stove_2135.
Action 15: Put pot_2138 on stove_2135.
Action 16: Switch on stove_2135.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2040_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_vegetables_in_pot(pot:item):
    # Check if there are vegetables inside the specified pot
    symbol has_vegetables=exists veg: item : is_food_vegetable(veg) and inside(veg, pot)
    return has_vegetables

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water for boiling
        achieve is_on(stove) # Stove must be turned on for the boiling process

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select the pot with ID 2138
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        if not has_vegetables_in_pot(pot):
            observe(pot, "Check if there are vegetables inside the pot")
        # Inspect pot to ensure vegetables are inside
        
        boil_vegetables_on_stove(pot, stove)
        # Initiate the boiling process on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_vegetables_in_pot(pot:item):
    # Check if there are vegetables inside the specified pot
    symbol has_vegetables=exists veg: item : is_food_vegetable(veg) and inside(veg, pot)
    return has_vegetables

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve has_water(pot) # Ensure the pot has water for boiling
        achieve is_on(stove) # Stove must be turned on for the boiling process

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2138
        # Select the pot with ID 2138
        
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135
        
        if not has_vegetables_in_pot(pot):
            observe(pot, "Check if there are vegetables inside the pot")
        # Inspect pot to ensure vegetables are inside
        
        boil_vegetables_on_stove(pot, stove)
        # Initiate the boiling process on the stove

##############################
From agent.py-> find a plan in act()
obs(pot_2138, Check if there are vegetables inside the pot)
##############################
From agent.py
obs(pot_2138, Check if there are vegetables inside the pot)
Get this information:  pot_2138 is on stove_2135. pot_2138 is close to character_240. pot_2138 is close to stove_2135. pot_2138 is inside bathroom_1. pot_2138 is OPEN.
##############################
