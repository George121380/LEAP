From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the couch.', '2. Use the remote control to turn on the TV.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch) # Sit on the couch

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and sittable(couch)
        # Ensure the couch is sittable
        sit_on_couch(couch)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch) # Sit on the couch

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and sittable(couch)
        # Ensure the couch is sittable
        sit_on_couch(couch)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)sit_executor(couch_192)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. 
##############################
From agent.py
sit_executor(couch_192)
Find keyboard_2111. Find stereo_2007. Find cd_2100. Find mouse_2112. Find oil_2005. Find video_game_controller_2019. Find dvd_player_2000. Find clothes_underwear_2022. Find chair_2118. Find cup_2006. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television
        
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television
        
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control
        
        turn_on_tv(tv, remote_control)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(television_216)switchon_executor(television_216)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. Robot is no longer close couch_192.
##############################
From agent.py
switchon_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. 
##############################
From agent.py
Human Instruction: You need to find the remote control and use it to turn on the TV. The TV was turned on directly, but the goal specifies using the remote control.

The actions you have taken:
Action 1: Walk to couch_192.
Action 2: Sit on couch_192.
Action 3: char stand up.
Action 4: Walk to television_216.
Action 5: Switch on television_216.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote(x: item):
    # Function to determine whether an item is a remote control
    symbol is_remote=is_remote_control(x)
    return is_remote

behavior find_and_turn_on_tv_with_remote(remote:item, tv:item, couch:item):
    body:
        observe(tv, "Ensure the TV is off initially")
        # Observe TV to confirm its currently off before turning it on with the remote

        assert has_remote(remote) and inside(remote, tv_room)
        # Assert there is a remote control in the same room as the TV

        achieve_once inhand(remote)

        achieve on_char(char, couch)
        # Ensure you are sitting on the couch while operating the remote

        achieve is_on(tv)
        # Ensure the TV is on using the remote control

behavior __goal__():
    body:
        bind remote: item where:
            is_remote_control(remote)
        # Select a remote control

        bind tv: item where:
            is_television(tv) and id[tv] == 216
        # Select the TV with ID 216

        bind couch: item where:
            is_couch(couch) and id[couch] == 192
        # Select the couch with ID 192

        find_and_turn_on_tv_with_remote(remote, tv, couch)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: tv_room; available variables: [Variable<remote: item>, Variable<tv: item>, Variable<couch: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
def has_remote(x: item):
    # Function to determine whether an item is a remote control
    symbol is_remote=is_remote_control(x)
    return is_remote

behavior find_and_turn_on_tv_with_remote(remote:item, tv:item, couch:item, tv_room:item):
    body:
        observe(tv, "Ensure the TV is off initially")
        # Observe TV to confirm its currently off before turning it on with the remote

        assert has_remote(remote) and inside(remote, tv_room)
        # Assert there is a remote control in the same room as the TV

        achieve_once inhand(remote)

        achieve on_char(char, couch)
        # Ensure you are sitting on the couch while operating the remote

        achieve is_on(tv)
        # Ensure the TV is on using the remote control

behavior __goal__():
    body:
        bind remote: item where:
            is_remote_control(remote)
        # Select a remote control

        bind tv: item where:
            is_television(tv) and id[tv] == 216
        # Select the TV with ID 216

        bind couch: item where:
            is_couch(couch) and id[couch] == 192
        # Select the couch with ID 192

        bind tv_room: item where:
            inside(tv, tv_room)
        # Bind the room where the TV is located

        find_and_turn_on_tv_with_remote(remote, tv, couch, tv_room)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote_control_been_used_to_turn_on_tv(tv:item, remote:item):
    # Determine if the remote control has been used to turn on the TV
    symbol used_remote=achieve is_on(tv) and is_remote_control(remote)
    return used_remote

behavior use_remote_control_to_turn_on_tv(tv:item, remote:item):
    body:
        achieve_once inhand(remote) # Temporarily hold the remote control to operate

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv) and id[tv] == 216
        # Select the television with ID 216

        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        if not has_remote_control_been_used_to_turn_on_tv(tv, remote):
            use_remote_control_to_turn_on_tv(tv, remote)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_on') at line 5909, column 32.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#goal_representation
 
def has_remote_control_been_used_to_turn_on_tv(tv:item, remote:item):
    # Determine if the remote control has been used to turn on the TV
    symbol used_remote=exists item: item : is_on(tv) and inhand(remote) and is_remote_control(remote)
    return used_remote

behavior use_remote_control_to_turn_on_tv(tv:item, remote:item):
    body:
        achieve_once inhand(remote) # Temporarily hold the remote control to operate
        achieve is_on(tv) # Turn on the TV using the remote

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv) and id[tv] == 216
        # Select the television with ID 216

        bind remote: item where:
            is_remote_control(remote)
        # Select the remote control

        if not has_remote_control_been_used_to_turn_on_tv(tv, remote):
            use_remote_control_to_turn_on_tv(tv, remote)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
