From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta and cook the chicken.', '2. Mix the cooked pasta and chicken.', '3. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def is_chicken_cooked(chicken:item):
    # Determine if the chicken is cooked
    symbol chicken_cooked=not raw(chicken)
    return chicken_cooked

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to start boiling the pasta

behavior cook_chicken(chicken:item, frying_pan:item, stove:item):
    body:
        achieve cut(chicken)
        # Cut the chicken before cooking
        achieve inside(chicken, frying_pan)
        # Place the chicken inside the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta to cook

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the pasta

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan for cooking the chicken

        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        cook_pasta(pasta, pot, stove)
        cook_chicken(chicken, frying_pan, stove)

        assert is_chicken_cooked(chicken)
        # Ensure the chicken is cooked

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function raw not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_kitchen_counter_230(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

behavior find_food_food_2022_around_kitchen_counter_230(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_food,kitchen_counter_instance)
        else:
            exp(food_food,kitchen_counter_instance)
    eff:
        unknown[food_food]=False
        close[food_food,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_food]=True
    

#goal_representation
 
def is_chicken_cooked(chicken:item):
    # Determine if the chicken is cooked
    symbol chicken_cooked=exists heat_source: item: is_stove(heat_source) and is_on(heat_source) and close(chicken, heat_source)
    return chicken_cooked

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to start boiling the pasta

behavior cook_chicken(chicken:item, frying_pan:item, stove:item):
    body:
        achieve cut(chicken)
        # Cut the chicken before cooking
        achieve inside(chicken, frying_pan)
        # Place the chicken inside the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve plugged(stove)
        # Ensure the stove is plugged in
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta to cook

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the pasta

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan for cooking the chicken

        bind stove: item where:
            is_stove(stove)
        # Select the stove for cooking

        cook_pasta(pasta, pot, stove)
        cook_chicken(chicken, frying_pan, stove)

        assert is_chicken_cooked(chicken)
        # Ensure the chicken is cooked

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2069_around_kitchen_counter_230(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
def has_pasta_or_chicken_in_pan(pan:item):
    # Function to check if there is pasta or chicken in the pan
    symbol has_pasta_or_chicken=exists o: item : (is_dry_pasta(o) or is_food_chicken(o)) and inside(o, pan)
    return has_pasta_or_chicken

behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve inside(chicken, pan)
        # Ensure the chicken is inside the pan
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot) and not has_pasta_or_chicken_in_pan(pot)
        # Select a pot that is not currently being used for pasta or chicken

        bind pan: item where:
            inside(chicken, pan) and not has_pasta_or_chicken_in_pan(pan)
        # Select a pan that does not already contain chicken or pasta

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: pan; available variables: [Variable<pasta: item>, Variable<chicken: item>, Variable<pot: item>, Variable<stove: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fryingpan_2083_around_stove_2065(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_pot_2069_around_stove_2065(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_dry_pasta_2042_around_kitchen_counter_230(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_chicken_2017_around_stove_2065(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2065
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(food_chicken,stove_instance)
        else:
            exp(food_chicken,stove_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,stove_instance]=True
        close[stove_instance,food_chicken]=True
    

#goal_representation
 
def has_pasta_or_chicken_in_pan(pan:item):
    # Function to check if there is pasta or chicken in the pan
    symbol has_pasta_or_chicken=exists o: item : (is_dry_pasta(o) or is_food_chicken(o)) and inside(o, pan)
    return has_pasta_or_chicken

behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item, pan:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve inside(chicken, pan)
        # Ensure the chicken is inside the pan
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot) and not has_pasta_or_chicken_in_pan(pot)
        # Select a pot that is not currently being used for pasta or chicken

        bind pan: item where:
            is_fryingpan(pan) and not has_pasta_or_chicken_in_pan(pan)
        # Select a pan that does not already contain chicken or pasta

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove, pan)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_pasta_or_chicken_in_pan(pan:item):
    # Function to check if there is pasta or chicken in the pan
    symbol has_pasta_or_chicken=exists o: item : (is_dry_pasta(o) or is_food_chicken(o)) and inside(o, pan)
    return has_pasta_or_chicken

behavior boil_pasta_and_cook_chicken(pasta:item, chicken:item, pot:item, stove:item, pan:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve inside(chicken, pan)
        # Ensure the chicken is inside the pan
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pot: item where:
            is_pot(pot) and not has_pasta_or_chicken_in_pan(pot)
        # Select a pot that is not currently being used for pasta or chicken

        bind pan: item where:
            is_fryingpan(pan) and not has_pasta_or_chicken_in_pan(pan)
        # Select a pan that does not already contain chicken or pasta

        boil_pasta_and_cook_chicken(pasta, chicken, pot, stove, pan)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)exp(pot_2069, stove_2065)walk_executor(kitchen_counter_230)exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)exp(fryingpan_2083, stove_2065)exp(food_chicken_2017, stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(stove_2065)
Find drawing_174. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
exp(pot_2069, stove_2065)
Find pot_2069. 
##############################
From agent.py-> find a plan in act()
exp(dry_pasta_2042, kitchen_counter_230)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(stove_2065)exp(food_chicken_2017, stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
exp(dry_pasta_2042, kitchen_counter_230)
Fail to find dry_pasta_2042 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_229)open_executor(cupboard_229)exp(dry_pasta_2042, cupboard_229)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(dry_pasta_2042, cupboard_229)
Fail to find dry_pasta_2042 around cupboard_229. 
##############################
From agent.py-> find a plan in act()
walk_executor(walllamp_27)exp(dry_pasta_2042, walllamp_27)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(walllamp_27)
Find towel_rack_34. Robot is inside bathroom_1. Robot is close walllamp_27. Robot is no longer inside dining_room_201.Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(dry_pasta_2042, walllamp_27)
Fail to find dry_pasta_2042 around walllamp_27. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_118)exp(dry_pasta_2042, closetdrawer_118)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(closetdrawer_118)
Find hanger_110. Find hanger_140. Find hanger_109. Find mat_173. Find hanger_132. Find hanger_113. Find hanger_112. Find hanger_124. Find hanger_115. Find hanger_128. Find hanger_130. Find hanger_134. Find hanger_136. Find hanger_138. Find hanger_141. Find hanger_142. Find hanger_111. Find hanger_114. Find hanger_126. Robot is inside bedroom_67. Robot is close closetdrawer_121. Robot is close dresser_108. Robot is close closetdrawer_118. Robot is no longer inside bathroom_1.Robot is no longer close walllamp_27.
##############################
From agent.py
exp(dry_pasta_2042, closetdrawer_118)
Fail to find dry_pasta_2042 around closetdrawer_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_348)open_executor(window_348)exp(dry_pasta_2042, window_348)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(window_348)
Find mat_401. Find pillow_405. Find drawing_400. Robot is inside home_office_319. Robot is close window_348. Robot is no longer inside bedroom_67.Robot is no longer close closetdrawer_121.Robot is no longer close dresser_108.Robot is no longer close closetdrawer_118.
##############################
From agent.py
open_executor(window_348)
Find vacuum_cleaner_2070. Find headset_2062. Find hanger_363. Find hanger_374. Find drawing_404. Find keyboard_415. Find headset_2076. Find hanger_369. Find remote_control_2052. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find cat_2055. Find clothes_jacket_2047. Find chair_356. Find book_2066. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close window_348. 
##############################
From agent.py
exp(dry_pasta_2042, window_348)
Fail to find dry_pasta_2042 around window_348. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_240)exp(dry_pasta_2042, drawing_240)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(drawing_240)
Find mat_236. Find wall_clock_249. Find phone_247. Find mat_237. Robot is inside dining_room_201. Robot is close drawing_240. Robot is no longer inside home_office_319.Robot is no longer close window_348.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2042 ?
Answer: To find the dry_pasta_2042, go to the dining_room_201. Inside the dining_room_201, look for fridge_289. The dry_pasta_2042 is located inside fridge_289.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find the dry_pasta_2042, go to the dining_room_201. Inside the dining_room_201, look for fridge_289. The dry_pasta_2042 is located inside fridge_289.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to walllamp_27.
Action 9: look for dry_pasta_2042 around walllamp_27.
Action 10: Walk to closetdrawer_118.
Action 11: look for dry_pasta_2042 around closetdrawer_118.
Action 12: Walk to window_348.
Action 13: Open window_348.
Action 14: look for dry_pasta_2042 around window_348.
Action 15: Walk to drawing_240.

##############################
From agent.py
exp(dry_pasta_2042, drawing_240)
Fail to find dry_pasta_2042 around drawing_240. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(dry_pasta_2042, fridge_289)walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close drawing_240.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(dry_pasta_2042, fridge_289)
Find dry_pasta_2042. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(dry_pasta_2042)grab_executor(dry_pasta_2042)walk_executor(pot_2069)putin_executor(dry_pasta_2042, pot_2069)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(fryingpan_2083)putin_executor(food_chicken_2017, fryingpan_2083)walk_executor(pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
open_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(dry_pasta_2042)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close dry_pasta_2042. Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(dry_pasta_2042)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close dry_pasta_2042. Grabbing dry_pasta_2042 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close dry_pasta_2042. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(dry_pasta_2042, pot_2069)
Robot is inside dining_room_201. Robot is close dry_pasta_2042. Robot is close pot_2069. Robot is close kitchen_counter_230. dry_pasta_2042 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close dry_pasta_2042.Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_chicken_2017, fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close dry_pasta_2042. Robot is close pot_2069. Robot is no longer close food_chicken_2017.Robot is no longer close fryingpan_2083.
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close dry_pasta_2042. Robot is close pot_2069. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. Robot is no longer close dry_pasta_2042.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. pot_2069 released by right hand. 
##############################
From agent.py
close_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_pasta_and_chicken(cooked_pasta:item, cooked_chicken:item, mixing_bowl:item):
    body:
        achieve inside(cooked_pasta, mixing_bowl)
        # Place the cooked pasta into the mixing bowl
        achieve inside(cooked_chicken, mixing_bowl)
        # Place the cooked chicken into the mixing bowl

behavior place_on_plate(mixture:item, plate:item):
    body:
        achieve on(mixture, plate)
        # Place the mixture on the plate

behavior __goal__():
    body:
        bind cooked_pasta: item where:
            is_pot(cooked_pasta) and has_a_free_hand(cooked_pasta)
        # Select the cooked pasta present in the pot

        bind cooked_chicken: item where:
            is_fryingpan(cooked_chicken) and has_a_free_hand(cooked_chicken)
        # Select the cooked chicken from the frying pan

        bind mixing_bowl: item where:
            is_bowl(mixing_bowl) and recipient(mixing_bowl)
        # Select a mixing bowl that can receive the contents

        bind plate: item where:
            is_plate(plate) and surfaces(plate)
        # Select a plate which has a surface

        mix_pasta_and_chicken(cooked_pasta, cooked_chicken, mixing_bowl)
        # Mix the cooked pasta and chicken
        
        place_on_plate(mixing_bowl, plate)
        # Place the mixture on the plate

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Error during applying has_a_free_hand[observation, state](x: character).
  Arguments: V::cooked_pasta
Argument #0 type does not match: expect character, got item.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#goal_representation
behavior mix_pasta_and_chicken(cooked_pasta:item, cooked_chicken:item, mixing_bowl:item):
    body:
        achieve inside(cooked_pasta, mixing_bowl)
        # Place the cooked pasta into the mixing bowl
        achieve inside(cooked_chicken, mixing_bowl)
        # Place the cooked chicken into the mixing bowl

behavior place_on_plate(mixture:item, plate:item):
    body:
        achieve on(mixture, plate)
        # Place the mixture on the plate

behavior __goal__():
    body:
        bind cooked_pasta: item where:
            is_pot(cooked_pasta) and inhand(cooked_pasta)
        # Select the cooked pasta present in the pot and ensure it is in hand

        bind cooked_chicken: item where:
            is_fryingpan(cooked_chicken) and inhand(cooked_chicken)
        # Select the cooked chicken from the frying pan and ensure it is in hand

        bind mixing_bowl: item where:
            is_bowl(mixing_bowl) and recipient(mixing_bowl)
        # Select a mixing bowl that can receive the contents

        bind plate: item where:
            is_plate(plate) and surfaces(plate)
        # Select a plate which has a surface

        mix_pasta_and_chicken(cooked_pasta, cooked_chicken, mixing_bowl)
        # Mix the cooked pasta and chicken
        
        place_on_plate(mixing_bowl, plate)
        # Place the mixture on the plate
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        achieve inside(pasta, pot)
        achieve inside(chicken, pot)
        # Mix the cooked pasta and chicken inside the pot

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta) and cut(pasta)
        # Select the cooked pasta

        bind chicken: item where:
            is_food_chicken(chicken) and cut(chicken)
        # Select the cooked chicken

        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select the pot

        mix_pasta_and_chicken(pasta, chicken, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

behavior find_bowl_2071_around_cutting_board_2051(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2051
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(bowl,cutting_board_instance)
        else:
            exp(bowl,cutting_board_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cutting_board_instance]=True
        close[cutting_board_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item, fryingpan:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve inside(chicken, fryingpan)
        # Ensure the chicken is inside the frying pan
        achieve close(pot, fryingpan)
        # Ensure the pot with pasta and the frying pan with chicken are close to each other

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        mix_pasta_and_chicken(pasta, chicken, pot, fryingpan)
        # Mix the cooked pasta and chicken

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior mix_pasta_and_chicken(pasta:item, chicken:item, pot:item, fryingpan:item):
    body:
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot
        achieve inside(chicken, fryingpan)
        # Ensure the chicken is inside the frying pan
        achieve close(pot, fryingpan)
        # Ensure the pot with pasta and the frying pan with chicken are close to each other

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        mix_pasta_and_chicken(pasta, chicken, pot, fryingpan)
        # Mix the cooked pasta and chicken

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2069)walk_executor(fryingpan_2083)put_executor(pot_2069, fryingpan_2083)
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close stove_2065. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close fryingpan_2083. Robot is no longer close stove_2065.
##############################
From agent.py
put_executor(pot_2069, fryingpan_2083)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close pot_2069. Robot is close fryingpan_2083. pot_2069 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate) # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) # Select the chicken pasta
        bind plate: item where:
            is_plate(plate) # Select the plate
        put_chicken_pasta_on_plate(chicken_pasta, plate)
 
#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_chicken_pasta_on_plate(chicken_pasta:item, plate:item):
    body:
        achieve on(chicken_pasta, plate) # Place the chicken pasta on the plate

behavior __goal__():
    body:
        bind chicken_pasta: item where:
            is_food_chicken(chicken_pasta) # Select the chicken pasta
        bind plate: item where:
            is_plate(plate) # Select the plate
        put_chicken_pasta_on_plate(chicken_pasta, plate)
 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_1001)open_executor(dishwasher_1001)exp(plate_1000, dishwasher_1001)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. Robot is no longer close fryingpan_2083.Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
open_executor(dishwasher_1001)
Robot is inside dining_room_201. Robot is close dishwasher_1001. 
##############################
From agent.py
exp(plate_1000, dishwasher_1001)
Fail to find plate_1000 around dishwasher_1001. 
##############################
From agent.py-> find a plan in act()
walk_executor(drawing_404)exp(plate_1000, drawing_404)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(drawing_404)
Robot is inside home_office_319. Robot is close drawing_404. Robot is close wall_332. Robot is no longer inside dining_room_201.Robot is no longer close dishwasher_1001.
##############################
From agent.py
exp(plate_1000, drawing_404)
Fail to find plate_1000 around drawing_404. 
##############################
From agent.py-> find a plan in act()
walk_executor(headset_2076)exp(plate_1000, headset_2076)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(headset_2076)
Robot is inside home_office_319. Robot is close headset_2076. Robot is close desk_357. Robot is no longer close drawing_404.Robot is no longer close wall_332.
##############################
From agent.py
exp(plate_1000, headset_2076)
Fail to find plate_1000 around headset_2076. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_165)exp(plate_1000, doorjamb_165)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(doorjamb_165)
Robot is inside bedroom_67. Robot is close doorjamb_165. Robot is no longer inside home_office_319.Robot is no longer close headset_2076.Robot is no longer close desk_357.
##############################
From agent.py
exp(plate_1000, doorjamb_165)
Fail to find plate_1000 around doorjamb_165. 
##############################
From agent.py-> find a plan in act()
walk_executor(tray_296)exp(plate_1000, tray_296)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(tray_296)
Robot is inside dining_room_201. Robot is close tray_296. Robot is close oven_295. Robot is no longer inside bedroom_67.Robot is no longer close doorjamb_165.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find plate_1000 ?
Answer: Go to dining_room_201 and locate sink_231. The target item, plate_1000, is on sink_231. Look for the plate that is right on or very close to the sink.
Re-decompose: None

##############################
From agent.py
Human Instruction: To find the dry_pasta_2042, go to the dining_room_201. Inside the dining_room_201, look for fridge_289. The dry_pasta_2042 is located inside fridge_289.
Go to dining_room_201 and locate sink_231. The target item, plate_1000, is on sink_231. Look for the plate that is right on or very close to the sink.

The actions you have taken:
Action 1: Walk to stove_2065.
Action 2: Open stove_2065.
Action 3: look for pot_2069 around stove_2065.
Action 4: look for dry_pasta_2042 around kitchen_counter_230.
Action 5: Walk to cupboard_229.
Action 6: Open cupboard_229.
Action 7: look for dry_pasta_2042 around cupboard_229.
Action 8: Walk to walllamp_27.
Action 9: look for dry_pasta_2042 around walllamp_27.
Action 10: Walk to closetdrawer_118.
Action 11: look for dry_pasta_2042 around closetdrawer_118.
Action 12: Walk to window_348.
Action 13: Open window_348.
Action 14: look for dry_pasta_2042 around window_348.
Action 15: Walk to drawing_240.
Action 16: look for dry_pasta_2042 around drawing_240.
Action 17: Walk to fridge_289.
Action 18: Switch off fridge_289.
Action 19: Open fridge_289.
Action 20: look for dry_pasta_2042 around fridge_289.
Action 21: Walk to pot_2069.
Action 22: Open pot_2069.
Action 23: Walk to dry_pasta_2042.
Action 24: Grab dry_pasta_2042.
Action 25: Walk to pot_2069.
Action 26: Put dry_pasta_2042 into pot_2069.
Action 27: Walk to food_chicken_2017.
Action 28: Grab food_chicken_2017.
Action 29: Walk to fryingpan_2083.
Action 30: Put food_chicken_2017 into fryingpan_2083.
Action 31: Walk to pot_2069.
Action 32: Grab pot_2069.
Action 33: Walk to stove_2065.
Action 34: Put pot_2069 on stove_2065.
Action 35: Close stove_2065.
Action 36: Switch on stove_2065.
Action 37: Grab pot_2069.
Action 38: Walk to fryingpan_2083.
Action 39: Put pot_2069 on fryingpan_2083.
Action 40: Walk to dishwasher_1001.
Action 41: Open dishwasher_1001.
Action 42: look for plate_1000 around dishwasher_1001.
Action 43: Walk to drawing_404.
Action 44: look for plate_1000 around drawing_404.
Action 45: Walk to headset_2076.
Action 46: look for plate_1000 around headset_2076.
Action 47: Walk to doorjamb_165.
Action 48: look for plate_1000 around doorjamb_165.
Action 49: Walk to tray_296.

##############################
From agent.py
exp(plate_1000, tray_296)
Fail to find plate_1000 around tray_296. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_231)exp(plate_1000, sink_231)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(sink_231)
Find plate_1000. Find soap_2054. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close sink_231. Robot is no longer close tray_296.Robot is no longer close oven_295.
##############################
From agent.py
exp(plate_1000, sink_231)
Find plate_1000. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(plate_1000)put_executor(food_chicken_2017, plate_1000)
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close fryingpan_2083. Robot is no longer close kitchen_counter_230.Robot is no longer close sink_231.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close fryingpan_2083. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(plate_1000)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close plate_1000. Robot is close sink_231. Robot is no longer close fryingpan_2083.
##############################
From agent.py
put_executor(food_chicken_2017, plate_1000)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close plate_1000. Robot is close sink_231. food_chicken_2017 released by right hand. 
##############################
