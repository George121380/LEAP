From agent.py
Reset goals: The sub-goals are: 
['Turn on the computer in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

behavior find_mouse_380_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def has_computer_in_home_office():
    # Function to check if there is a computer in the home office
    symbol has_computer = exists computer: item : is_computer(computer) and inside(computer, home_office)
    return has_computer

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office item

        if has_computer_in_home_office():
            # If theres a known computer in the home office, bind it
            bind computer: item where:
                is_computer(computer) and inside(computer, home_office)
            turn_on_computer(computer)
        else:
            # If no known computer in home office, explore to locate one
            foreach computer: item:
                if is_computer(computer) and not visited(computer):
                    observe(computer, "Check if the computer is in the home office")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: home_office; available variables: [Variable<computer: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_laptop_2015_around_home_office_161(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(laptop,home_office_instance)
        else:
            exp(laptop,home_office_instance)
    eff:
        unknown[laptop]=False
        close[laptop,home_office_instance]=True
        close[home_office_instance,laptop]=True
    

behavior find_mouse_380_around_desk_261(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

behavior find_keyboard_2111_around_home_office_161(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

#goal_representation
 
def has_computer_in_home_office(home_office: item):
    # Function to check if there is a computer in the home office
    symbol has_computer = exists computer: item : is_computer(computer) and inside(computer, home_office)
    return has_computer

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office item

        if has_computer_in_home_office(home_office):
            # If theres a known computer in the home office, bind it
            bind computer: item where:
                is_computer(computer) and inside(computer, home_office)
            turn_on_computer(computer)
        else:
            # If no known computer in home office, explore to locate one
            foreach computer: item:
                if is_computer(computer) and not visited(computer):
                    observe(computer, "Check if the computer is in the home office")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_computer_in_home_office(home_office: item):
    # Function to check if there is a computer in the home office
    symbol has_computer = exists computer: item : is_computer(computer) and inside(computer, home_office)
    return has_computer

behavior turn_on_computer(computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Bind the home office item

        if has_computer_in_home_office(home_office):
            # If theres a known computer in the home office, bind it
            bind computer: item where:
                is_computer(computer) and inside(computer, home_office)
            turn_on_computer(computer)
        else:
            # If no known computer in home office, explore to locate one
            foreach computer: item:
                if is_computer(computer) and not visited(computer):
                    observe(computer, "Check if the computer is in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(computer_2110)switchon_executor(computer_2110)
##############################
From agent.py
walk_executor(computer_2110)
Find keyboard_2111. Find drawing_196. Find mouse_2112. Find oil_2005. Find dvd_player_2000. Find chair_2118. Find pillow_195. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2110. 
##############################
From agent.py
switchon_executor(computer_2110)
Find stereo_2007. Find cd_2100. Find cat_2082. Find video_game_controller_2019. Find clothes_underwear_2022. Find cup_2006. Find vacuum_cleaner_2094. Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2110. 
##############################
