From agent.py
Reset goals: The sub-goals are: 
['1. Crack the egg into a frying pan.  ', '2. Cook and scramble the egg in the frying pan.  ']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_kitchen_counter_128(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_egg_present():
    # Function to check if there is an egg present
    symbol egg_existence=exists egg: item: is_food_egg(egg)
    return egg_existence

def is_fryingpan_present():
    # Function to check if there is a frying pan present
    symbol fryingpan_existence=exists fryingpan: item: is_fryingpan(fryingpan)
    return fryingpan_existence

behavior crack_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve close(egg, fryingpan)
        # Ensure the egg is close to the frying pan to crack it into the pan

behavior __goal__():
    body:
        if is_food_egg_present() and is_fryingpan_present():
            bind egg: item where:
                is_food_egg(egg)
            # Select an egg

            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            # Select a frying pan

            crack_egg_in_pan(egg, fryingpan)
        else:
            # If either the egg or frying pan is not found, observe the environment to locate them
            foreach item: item:
                if (is_food_egg(item) or is_fryingpan(item)) and not visited(item):
                    observe(item, "Locate the egg and a frying pan")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_food_egg_present():
    # Function to check if there is an egg present
    symbol egg_existence=exists egg: item: is_food_egg(egg)
    return egg_existence

def is_fryingpan_present():
    # Function to check if there is a frying pan present
    symbol fryingpan_existence=exists fryingpan: item: is_fryingpan(fryingpan)
    return fryingpan_existence

behavior crack_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve close(egg, fryingpan)
        # Ensure the egg is close to the frying pan to crack it into the pan

behavior __goal__():
    body:
        if is_food_egg_present() and is_fryingpan_present():
            bind egg: item where:
                is_food_egg(egg)
            # Select an egg

            bind fryingpan: item where:
                is_fryingpan(fryingpan)
            # Select a frying pan

            crack_egg_in_pan(egg, fryingpan)
        else:
            # If either the egg or frying pan is not found, observe the environment to locate them
            foreach item: item:
                if (is_food_egg(item) or is_fryingpan(item)) and not visited(item):
                    observe(item, "Locate the egg and a frying pan")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(fryingpan_2107, kitchen_counter_128)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_128)
Fail to find fryingpan_2107 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_301)exp(fryingpan_2107, wallshelf_301)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_egg_2053, cupboard_131)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(wallshelf_301)
Find towel_rack_300. Find drawing_296. Find towel_rack_299. Robot is inside bathroom_265. Robot is close wallshelf_301. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
exp(fryingpan_2107, wallshelf_301)
Fail to find fryingpan_2107 around wallshelf_301. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(fryingpan_2107, cupboard_131)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(cupboard_131)
Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer inside bathroom_265.Robot is no longer close wallshelf_301.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(fryingpan_2107, cupboard_131)
Fail to find fryingpan_2107 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(doorjamb_182)exp(fryingpan_2107, doorjamb_182)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(doorjamb_182)
Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close doorjamb_182. Robot is no longer inside dining_room_1.Robot is no longer close cupboard_131.
##############################
From agent.py
exp(fryingpan_2107, doorjamb_182)
Fail to find fryingpan_2107 around doorjamb_182. 
##############################
From agent.py-> find a plan in act()
walk_executor(door_38)exp(fryingpan_2107, door_38)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(door_38)
Robot is inside dining_room_1. Robot is close floor_336. Robot is close door_38. Robot is no longer inside home_office_161.Robot is no longer close doorjamb_182.
##############################
From agent.py
exp(fryingpan_2107, door_38)
Fail to find fryingpan_2107 around door_38. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close floor_336.Robot is no longer close door_38.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(fryingpan_2107, stove_2090)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(fryingpan_2107)put_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
put_executor(food_egg_2053, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. food_egg_2053 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_and_scramble_egg(egg:item, fryingpan:item):
    body:
        achieve dirty(fryingpan) 
        # The egg is cooked and scrambled in the frying pan, making it dirty

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        cook_and_scramble_egg(egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_egg(fryingpan:item, egg:item):
    body:
        achieve on(egg, fryingpan)

behavior scramble_egg(egg:item, spatula:item):
    body:
        achieve_once inhand(spatula)
        achieve cut(egg) # Scramble the egg by cutting it continuously

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090
        # Select stove with ID 2090

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        # Select the egg already on the frying pan

        bind spatula: item where:
            is_tool(spatula) and name[spatula] == spatula
        # Select a spatula

        start_stove(stove)
        cook_egg(fryingpan, egg)
        scramble_egg(egg, spatula)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_tool not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_onion_2026_around_cutting_board_2080(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(food_onion,cutting_board_instance)
        else:
            exp(food_onion,cutting_board_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cutting_board_instance]=True
        close[cutting_board_instance,food_onion]=True
    

#goal_representation
behavior start_stove(stove:item):
    body:
        achieve is_on(stove)

behavior cook_egg(fryingpan:item, egg:item):
    body:
        achieve on(egg, fryingpan)

behavior scramble_egg(egg:item, spatula:item):
    body:
        achieve_once inhand(spatula)
        achieve cut(egg)

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2090

        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)

        bind spatula: item where:
            is_knife(spatula) or is_fork(spatula) or is_cup(spatula)
        # Bind a suitable spatulalike item since is_tool is not available

        start_stove(stove)
        cook_egg(fryingpan, egg)
        scramble_egg(egg, spatula)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_scrambled(egg:item):
    # Function to check if the egg is scrambled
    return True # Assuming scrambled means the egg has undergone cooking actions

behavior cook_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        assert_hold on(egg, fryingpan)
        assert_hold on(fryingpan, stove)
        achieve_once plugged(stove)
        achieve_once is_on(stove)
        achieve is_egg_scrambled(egg)
        achieve_once is_off(stove)
        achieve_once unplugged(stove)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove
          
        cook_and_scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_and_scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan) # Ensure the egg is in the fryingpan
        achieve cut(egg) # Scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and on(egg, fryingpan)
        # Select the egg that is already on the fryingpan
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(egg, fryingpan)
        # Select the fryingpan that the egg is in

        cook_and_scramble_egg_in_fryingpan(egg, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#goal_representation
behavior cook_and_scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan) # Ensure the egg is in the fryingpan
        achieve cut(egg) # Scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(egg, fryingpan)
        # Select the fryingpan that the egg is in

        cook_and_scramble_egg_in_fryingpan(egg, fryingpan)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is in the frying pan
        achieve is_on(stove)
        # Turn on the stove
        achieve cut(egg)
        # Scramble the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_and_scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_cutting_board_2080(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind cutting_board_instance:item where:
            is_cutting_board(cutting_board_instance) and id[cutting_board_instance]==2080
        achieve close_char(char,cutting_board_instance)
        if can_open(cutting_board_instance):
            achieve_once open(cutting_board_instance)
            exp(knife,cutting_board_instance)
        else:
            exp(knife,cutting_board_instance)
    eff:
        unknown[knife]=False
        close[knife,cutting_board_instance]=True
        close[cutting_board_instance,knife]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_and_scramble_egg(egg:item, fryingpan:item, stove:item):
    body:
        achieve on(egg, fryingpan) # Ensure the egg is on the frying pan
        achieve on(fryingpan, stove) # Place the frying pan on the stove
        achieve is_on(stove) # Turn on the stove to cook the egg
        achieve cut(egg) # Scramble the egg in the frying pan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        cook_and_scramble_egg(egg, fryingpan, stove)

#goal_representation_end

##############################
