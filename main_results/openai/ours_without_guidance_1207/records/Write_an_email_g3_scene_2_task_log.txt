From agent.py
Reset goals: The sub-goals are: 
['1. Locate the chair in front of the computer in the home office, and sit on it.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_138_around_home_office_161(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_2111_around_computer_379(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_in_home_office(chair:item):
    # Check if the chair is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(chair, room)
    return in_home_office

def is_chair_front_of_computer(chair:item, computer:item):
    # Check if the chair is in front of the computer
    symbol front_of_computer=close(chair, computer)
    return front_of_computer

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that can be sat on

        bind computer: item where:
            is_computer(computer)
        # Select a computer

        if not is_chair_in_home_office(chair):
            # If the chair is not in the home office, observe its location
            observe(chair, "Check the location of the chair")

        if not is_chair_front_of_computer(chair, computer):
            # If the chair is not in front of the computer, observe its relation to the computer
            observe(chair, "Is the chair in front of the computer")
            observe(computer, "Is the computer in the home office")

        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_chair_in_home_office(chair:item):
    # Check if the chair is in the home office
    symbol in_home_office=exists room: item : is_home_office(room) and inside(chair, room)
    return in_home_office

def is_chair_front_of_computer(chair:item, computer:item):
    # Check if the chair is in front of the computer
    symbol front_of_computer=close(chair, computer)
    return front_of_computer

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a chair that can be sat on

        bind computer: item where:
            is_computer(computer)
        # Select a computer

        if not is_chair_in_home_office(chair):
            # If the chair is not in the home office, observe its location
            observe(chair, "Check the location of the chair")

        if not is_chair_front_of_computer(chair, computer):
            # If the chair is not in front of the computer, observe its relation to the computer
            observe(chair, "Is the chair in front of the computer")
            observe(computer, "Is the computer in the home office")

        sit_on_chair(chair)

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(chair_2118, home_office_161)walk_executor(chair_2118)obs(chair_2118, Check the location of the chair)obs(chair_2118, Is the chair in front of the computer)walk_executor(computer_2110)obs(computer_2110, Is the computer in the home office)walk_executor(chair_2118)sit_executor(chair_2118)
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. 
##############################
From agent.py
exp(chair_2118, home_office_161)
Find chair_2118. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_2118)obs(chair_2118, Check the location of the chair)obs(chair_2118, Is the chair in front of the computer)walk_executor(computer_2110)obs(computer_2110, Is the computer in the home office)walk_executor(chair_2118)sit_executor(chair_2118)
##############################
From agent.py
walk_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. 
##############################
From agent.py
obs(chair_2118, Check the location of the chair)
Get this information:  chair_2118 is close to table_193. chair_2118 is close to computer_2110. chair_2118 is close to character_219. chair_2118 is inside home_office_161. chair_2118 is PLUGGED_IN. chair_2118 is CLEAN.
##############################
From agent.py
obs(chair_2118, Is the chair in front of the computer)
Get this information:  chair_2118 is close to table_193. chair_2118 is close to computer_2110. chair_2118 is close to character_219. chair_2118 is inside home_office_161. chair_2118 is PLUGGED_IN. chair_2118 is CLEAN.
##############################
From agent.py
walk_executor(computer_2110)
Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2110. Robot is no longer close chair_2118.
##############################
From agent.py
obs(computer_2110, Is the computer in the home office)
Get this information:  keyboard_2111 is on computer_2110. mouse_2112 is on computer_2110. computer_2110 is on table_193. computer_2110 is inside home_office_161. computer_2110 is close to mouse_2112. computer_2110 is close to table_193. computer_2110 is close to chair_2118. computer_2110 is close to keyboard_2111. computer_2110 is close to character_219. computer_2110 is PLUGGED_IN. computer_2110 is CLEAN. computer_2110 is OFF.
##############################
From agent.py
walk_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. Robot is no longer close table_193.Robot is no longer close computer_2110.
##############################
From agent.py
sit_executor(chair_2118)
Robot is inside home_office_161. Robot is close chair_2118. Robot is on chair_2118. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_laptop_2015_around_mouse_2112(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==2112
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(laptop,mouse_instance)
        else:
            exp(laptop,mouse_instance)
    eff:
        unknown[laptop]=False
        close[laptop,mouse_instance]=True
        close[mouse_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer_with_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        turn_on_computer_with_mouse(mouse, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_computer_with_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse close to the computer

        turn_on_computer_with_mouse(mouse, computer)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(computer_2110)switchon_executor(computer_2110)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_161. Robot is close chair_2118. Robot is on chair_2118. 
##############################
From agent.py
walk_executor(computer_2110)
Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2110. Robot is on chair_2118. Robot is no longer close chair_2118.
##############################
From agent.py
switchon_executor(computer_2110)
Robot is inside home_office_161. Robot is close table_193. Robot is close computer_2110. Robot is on chair_2118. 
##############################
From agent.py
Human Instruction: You need to touch the mouse near the computer to turn it on, as the computer is currently off.

The actions you have taken:
Action 1: Walk to home_office_161.
Action 2: look for chair_2118 around home_office_161.
Action 3: Walk to chair_2118.
Action 4: Observe around chair_2118 with the question of Check the location of the chair.
Action 5: Observe around chair_2118 with the question of Is the chair in front of the computer.
Action 6: Walk to computer_2110.
Action 7: Observe around computer_2110 with the question of Is the computer in the home office.
Action 8: Walk to chair_2118.
Action 9: Sit on chair_2118.
Action 10: char stand up.
Action 11: Walk to computer_2110.
Action 12: Switch on computer_2110.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_desk_375(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior turn_on_computer_with_mouse(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, home_office)

        turn_on_computer_with_mouse(mouse)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_laptop_2015_around_desk_375(laptop:item):
    goal: not unknown(laptop)
    body:
        assert is_laptop(laptop)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==375
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(laptop,desk_instance)
        else:
            exp(laptop,desk_instance)
    eff:
        unknown[laptop]=False
        close[laptop,desk_instance]=True
        close[desk_instance,laptop]=True
    

#exp_behavior_end

#goal_representation
 
def is_mouse_near_computer(mouse:item, computer:item):
    # Check if the mouse is close to the computer
    symbol close_to_computer=close(mouse, computer)
    return close_to_computer

behavior turn_on_computer(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and is_off(mouse) and is_mouse_near_computer(mouse, computer)
        # Select the mouse near the computer that is off

        turn_on_computer(mouse) # Turn on the computer using the mouse

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def is_mouse_near_computer(mouse:item, computer:item):
    # Function to check if the mouse is near the computer
    symbol mouse_near_computer=exists location: item : is_mouse(mouse) and is_computer(computer) and close(mouse, computer)
    return mouse_near_computer

behavior touch_mouse_to_turn_on_computer(mouse:item, computer:item):
    body:
        achieve is_on(computer) # Turn on the computer

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 2110
        # Select the computer with ID 2110

        if exists mouse: item : is_mouse(mouse) and is_mouse_near_computer(mouse, computer):
            bind mouse: item where:
                is_mouse(mouse) and close(mouse, computer)
            touch_mouse_to_turn_on_computer(mouse, computer)
        else:
            # If no mouse is known to be near the computer, search for it
            foreach mouse: item:
                if is_mouse(mouse) and not visited(mouse):
                    observe(mouse, "Check if the mouse is near the computer")

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_and_turn_on_mouse(mouse:item):
    body:
        achieve is_on(mouse) # Touch the mouse to turn it on

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and close_char(char, mouse)
        # Select the mouse that is close to the character
        touch_and_turn_on_mouse(mouse)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse_and_turn_on_computer(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer_2110)
        # Bind the mouse close to the computer

        touch_mouse_and_turn_on_computer(mouse)
        # Touch the mouse to turn on the computer

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer_2110; available variables: [Variable<mouse: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
behavior touch_mouse_and_turn_on_computer(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==2110
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        
        touch_mouse_and_turn_on_computer(mouse)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_2112_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer_mouse(mouse:item):
    body:
        achieve is_on(mouse) # Turn the mouse on

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer_2110)
        # Select the mouse close to computer_2110

        turn_on_computer_mouse(mouse)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer_2110; available variables: [Variable<mouse: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_380_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
behavior turn_on_computer_mouse(mouse:item, computer:item):
    body:
        achieve is_on(mouse) # Turn the mouse on

behavior __goal__():
    body:
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        bind computer: item where:
            is_computer(computer)
        # Select the computer

        turn_on_computer_mouse(mouse, computer)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: computer; available variables: [Variable<mouse: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_mouse_2003_around_computer_379(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==379
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#goal_representation
 
behavior turn_on_computer_mouse(mouse:item, computer:item):
    body:
        achieve is_on(mouse) # Turn the mouse on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_mouse(mouse, computer)

#goal_representation_end

##############################
