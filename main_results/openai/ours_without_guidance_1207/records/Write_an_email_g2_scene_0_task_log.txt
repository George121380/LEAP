From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_168_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
def is_home_office_chair(chair:item):
    # Function to check if chair is in front of the computer in the home office
    symbol is_correct_chair=exists office: item : is_home_office(office) and inside(chair, office) and sittable(chair)
    return is_correct_chair

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)  # Sit on the specified chair

behavior __goal__():
    body:
        if exists chair: item : is_chair(chair) and is_home_office_chair(chair):
            # If we have already found the correct chair, we can directly sit on it
            bind chair: item where:
                is_chair(chair) and is_home_office_chair(chair)
            sit_on_chair(chair)
        
        else:
            # Explore to find the chair in front of the computer in the home office
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if this chair is in front of the computer in the home office")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_home_office_chair(chair:item):
    # Function to check if chair is in front of the computer in the home office
    symbol is_correct_chair=exists office: item : is_home_office(office) and inside(chair, office) and sittable(chair)
    return is_correct_chair

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)  # Sit on the specified chair

behavior __goal__():
    body:
        if exists chair: item : is_chair(chair) and is_home_office_chair(chair):
            # If we have already found the correct chair, we can directly sit on it
            bind chair: item where:
                is_chair(chair) and is_home_office_chair(chair)
            sit_on_chair(chair)
        
        else:
            # Explore to find the chair in front of the computer in the home office
            foreach chair: item:
                if is_chair(chair) and not visited(chair):
                    observe(chair, "Check if this chair is in front of the computer in the home office")

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_319)exp(chair_103, home_office_319)walk_executor(chair_103)obs(chair_103, Check if this chair is in front of the computer in the home office)walk_executor(home_office_319)exp(chair_106, home_office_319)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(home_office_319)exp(chair_356, home_office_319)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(home_office_319)exp(chair_2004, home_office_319)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(home_office_319)
Robot is inside home_office_319. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(chair_103, home_office_319)
Fail to find chair_103 around home_office_319. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_104)exp(chair_103, desk_104)walk_executor(chair_103)obs(chair_103, Check if this chair is in front of the computer in the home office)walk_executor(desk_104)exp(chair_106, desk_104)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(desk_104)exp(chair_2004, desk_104)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(desk_104)
Find keyboard_168. Find mouse_166. Find chair_103. Find drawing_175. Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer inside home_office_319.
##############################
From agent.py
exp(chair_103, desk_104)
Find chair_103. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_103)obs(chair_103, Check if this chair is in front of the computer in the home office)walk_executor(desk_104)exp(chair_106, desk_104)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(desk_104)exp(chair_2004, desk_104)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(chair_103)
Robot is inside bedroom_67. Robot is close chair_103. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
obs(chair_103, Check if this chair is in front of the computer in the home office)
Get this information:  chair_103 is close to mouse_166. chair_103 is close to mousepad_167. chair_103 is close to keyboard_168. chair_103 is close to desk_104. chair_103 is close to computer_170. chair_103 is close to cpuscreen_171. chair_103 is close to floor_75. chair_103 is close to bookshelf_233. chair_103 is close to light_169. chair_103 is close to floor_76. chair_103 is close to floor_207. chair_103 is close to wall_209. chair_103 is close to wall_210. chair_103 is close to wall_83. chair_103 is close to wall_84. chair_103 is close to ceiling_93. chair_103 is close to character_65. chair_103 is inside bedroom_67. chair_103 is CLEAN.
##############################
From agent.py
walk_executor(desk_104)
Robot is inside bedroom_67. Robot is close desk_104. Robot is close floor_75. Robot is no longer close chair_103.
##############################
From agent.py
exp(chair_106, desk_104)
Fail to find chair_106 around desk_104. 
##############################
From agent.py-> find a plan in act()
walk_executor(computer_170)exp(chair_106, computer_170)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(computer_170)exp(chair_2004, computer_170)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(computer_170)
Find hanger_112. Find hanger_115. Find hanger_113. Robot is inside bedroom_67. Robot is close computer_170. Robot is no longer close desk_104.Robot is no longer close floor_75.
##############################
From agent.py
exp(chair_106, computer_170)
Fail to find chair_106 around computer_170. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)exp(chair_106, chair_356)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)exp(chair_2004, chair_356)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer inside bedroom_67.Robot is no longer close computer_170.
##############################
From agent.py
exp(chair_106, chair_356)
Fail to find chair_106 around chair_356. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_357)exp(chair_106, desk_357)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(desk_357)exp(chair_2004, desk_357)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(desk_357)
Robot is inside home_office_319. Robot is close desk_357. Robot is close floor_326. Robot is no longer close chair_356.
##############################
From agent.py
exp(chair_106, desk_357)
Fail to find chair_106 around desk_357. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_233)open_executor(bookshelf_233)exp(chair_106, bookshelf_233)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(bookshelf_233)exp(chair_2004, bookshelf_233)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(bookshelf_233)
Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. Robot is no longer inside home_office_319.Robot is no longer close desk_357.Robot is no longer close floor_326.
##############################
From agent.py
open_executor(bookshelf_233)
Robot is inside dining_room_201. Robot is close bookshelf_233. Robot is close floor_207. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find chair_106 ?
Answer: The target item, chair_106, is located inside bedroom_67. To find it, look near nightstand_102 and mat_173, as both are close to the chair. The chair is facing drawing_176, which is also nearby. Additionally, chair_106 is close to the floor_71 and wall_82, providing further context for its location. Proceed to bedroom_67 and search in the vicinity of these objects to locate chair_106.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, chair_106, is located inside bedroom_67. To find it, look near nightstand_102 and mat_173, as both are close to the chair. The chair is facing drawing_176, which is also nearby. Additionally, chair_106 is close to the floor_71 and wall_82, providing further context for its location. Proceed to bedroom_67 and search in the vicinity of these objects to locate chair_106.

The actions you have taken:
Action 1: Walk to home_office_319.
Action 2: look for chair_103 around home_office_319.
Action 3: Walk to desk_104.
Action 4: look for chair_103 around desk_104.
Action 5: Walk to chair_103.
Action 6: Observe around chair_103 with the question of Check if this chair is in front of the computer in the home office.
Action 7: Walk to desk_104.
Action 8: look for chair_106 around desk_104.
Action 9: Walk to computer_170.
Action 10: look for chair_106 around computer_170.
Action 11: Walk to chair_356.
Action 12: look for chair_106 around chair_356.
Action 13: Walk to desk_357.
Action 14: look for chair_106 around desk_357.
Action 15: Walk to bookshelf_233.
Action 16: Open bookshelf_233.

##############################
From agent.py
exp(chair_106, bookshelf_233)
Fail to find chair_106 around bookshelf_233. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_355)exp(chair_106, table_355)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(table_355)exp(chair_2004, table_355)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(table_355)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is close table_355. Robot is no longer inside dining_room_201.Robot is no longer close bookshelf_233.Robot is no longer close floor_207.
##############################
From agent.py
exp(chair_106, table_355)
Fail to find chair_106 around table_355. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_353)exp(chair_106, tvstand_353)walk_executor(chair_106)obs(chair_106, Check if this chair is in front of the computer in the home office)walk_executor(chair_356)obs(chair_356, Check if this chair is in front of the computer in the home office)walk_executor(tvstand_353)exp(chair_2004, tvstand_353)walk_executor(chair_2004)obs(chair_2004, Check if this chair is in front of the computer in the home office)
##############################
From agent.py
walk_executor(tvstand_353)
Robot is inside home_office_319. Robot is close tvstand_353. Robot is close floor_324. Robot is no longer close couch_352.Robot is no longer close mat_401.Robot is no longer close table_355.
##############################
From agent.py
exp(chair_106, tvstand_353)
Fail to find chair_106 around tvstand_353. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office and touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_mouse_413(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(chair,mouse_instance)
        else:
            exp(chair,mouse_instance)
    eff:
        unknown[chair]=False
        close[chair,mouse_instance]=True
        close[mouse_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_and_sit_on_chair(char: character, chair:item):
    body:
        achieve on_char(char, chair)

behavior touch_mouse_and_turn_on(mouse:item):
    body:
        achieve is_on(mouse)

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and id[chair]==106
        # Select chair with ID 106

        bind room: item where:
            is_bedroom(room) and inside(chair, room)
        # Select the bedroom containing chair 106
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, chair)
        # Select the mouse close to chair 106

        if not visited(chair):
            foreach item: item:
                if is_chair(item) and not visited(item):
                    observe(item, "Check if this chair is in front of the computer in the home office")
                    # Check if each unvisited chair is in front of the computer in the home office

        find_and_sit_on_chair(char, chair)
        touch_mouse_and_turn_on(mouse)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2004_around_computer_417(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(chair,computer_instance)
        else:
            exp(chair,computer_instance)
    eff:
        unknown[chair]=False
        close[chair,computer_instance]=True
        close[computer_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_chair_106_found(chair:item):
    # Function to check if the chair_106 has already been found
    symbol chair_found=visited(chair) and id[chair]==106
    return chair_found

def is_chair_sittable(chair:item):
    # Function to check if a specified chair is sittable
    symbol sittable_found=sittable(chair)
    return sittable_found

def is_mouse_found(mouse:item):
    # Function to check if the mouse has already been found
    symbol mouse_found=visited(mouse) and is_mouse(mouse)
    return mouse_found

behavior sit_on_chair_and_touch_mouse(chair:item, mouse:item):
    body:
        achieve on_char(char, chair) # Sit on the chair
        touch(mouse) # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        if not is_chair_106_found(bind chair_106: item where:
            is_chair(chair_106) and id[chair_106]==106):
            bind bedroom: item where:
                is_bedroom(bedroom) and id[bedroom]==67
            # Find in bedroom_67
            observe(bedroom, "Locate chair_106")
        
        bind chair_106: item where:
            is_chair(chair_106) and id[chair_106]==106 and is_chair_106_found(chair_106)
        # Retrieve the chair_106 thats already confirmed to be visited

        assert is_chair_sittable(chair_106) # Ensure the chair is sittable
        
        if not is_mouse_found(bind computer: item where:
            is_computer(computer) and inside(computer, home_office_319)):
            # Check around the home office for the mouse
            observe(computer, "Locate mouse")
        
        bind mouse: item where:
            is_mouse(mouse) and is_mouse_found(mouse) and close(mouse, computer_170) and inside(computer_170, home_office_319)
        # Retrieve the mouse thats close to the computer and confirmed to be visited

        sit_on_chair_and_touch_mouse(chair_106, mouse)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chair_106') at line 5997, column 40.
Expected one of: 
	* EQUAL
	* COMMA
	* RPAR

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_356_around_mouse_413(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(chair,mouse_instance)
        else:
            exp(chair,mouse_instance)
    eff:
        unknown[chair]=False
        close[chair,mouse_instance]=True
        close[mouse_instance,chair]=True
    

behavior find_phone_2077_around_phone_2077(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2077
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#goal_representation
 
def is_chair_106_found(chair:item):
    # Function to check if the chair_106 has already been found
    symbol chair_found=visited(chair) and id[chair]==106
    return chair_found

def is_chair_sittable(chair:item):
    # Function to check if a specified chair is sittable
    symbol sittable_found=sittable(chair)
    return sittable_found

def is_mouse_found(mouse:item):
    # Function to check if the mouse has already been found
    symbol mouse_found=visited(mouse) and is_mouse(mouse)
    return mouse_found

behavior sit_on_chair_and_touch_mouse(chair:item, mouse:item):
    body:
        achieve on_char(char, chair) # Sit on the chair
        touch(mouse) # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        if not exists chair_106: item : is_chair(chair_106) and id[chair_106]==106 and is_chair_106_found(chair_106):
            bind bedroom: item where:
                is_bedroom(bedroom) and id[bedroom]==67
            # Find in bedroom_67
            observe(bedroom, "Locate chair_106")
        
        bind chair_106: item where:
            is_chair(chair_106) and id[chair_106]==106 and is_chair_106_found(chair_106)
        # Retrieve the chair_106 thats already confirmed to be visited

        assert is_chair_sittable(chair_106) # Ensure the chair is sittable
        
        if not exists mouse: item : is_mouse(mouse) and is_mouse_found(mouse) and close(mouse, computer_170) and inside(computer_170, home_office_319):
            bind computer: item where:
                is_computer(computer) and inside(computer, home_office_319)
            # Check around the home office for the mouse
            observe(computer, "Locate mouse")
        
        bind mouse: item where:
            is_mouse(mouse) and is_mouse_found(mouse) and close(mouse, computer_170) and inside(computer_170, home_office_319)
        # Retrieve the mouse thats close to the computer and confirmed to be visited

        sit_on_chair_and_touch_mouse(chair_106, mouse)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'chair_106') at line 6015, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_103_around_mouse_413(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(chair,mouse_instance)
        else:
            exp(chair,mouse_instance)
    eff:
        unknown[chair]=False
        close[chair,mouse_instance]=True
        close[mouse_instance,chair]=True
    

#goal_representation
 
def is_chair_106_found(chair:item):
    # Function to check if the chair_106 has already been found
    symbol chair_found=visited(chair) and id[chair]==106
    return chair_found

def is_chair_sittable(chair:item):
    # Function to check if a specified chair is sittable
    symbol sittable_found=sittable(chair)
    return sittable_found

def is_mouse_found(mouse:item):
    # Function to check if the mouse has already been found
    symbol mouse_found=visited(mouse) and is_mouse(mouse)
    return mouse_found

behavior sit_on_chair_and_touch_mouse(chair:item, mouse:item):
    body:
        achieve on_char(char, chair) # Sit on the chair
        touch(mouse) # Touch the mouse to turn on the computer

behavior __goal__():
    body:
        if not exists chair_106: item : is_chair(chair_106) and id[chair_106]==106 and is_chair_106_found(chair_106):
            bind bedroom: item where:
                is_bedroom(bedroom) and id[bedroom]==67
            # Find in bedroom_67
            observe(bedroom, "Locate chair_106")
        
        bind chair_106: item where:
            is_chair(chair_106) and id[chair_106]==106 and is_chair_106_found(chair_106)
        # Retrieve the chair_106 thats already confirmed to be visited

        assert is_chair_sittable(chair_106) # Ensure the chair is sittable
        
        if not exists mouse: item : is_mouse(mouse) and is_mouse_found(mouse) and close(mouse, computer_170) and inside(computer_170, home_office_319):
            bind computer: item where:
                is_computer(computer) and inside(computer, home_office_319)
            # Check around the home office for the mouse
            observe(computer, "Locate mouse")
        
        bind mouse: item where:
            is_mouse(mouse) and is_mouse_found(mouse) and close(mouse, computer_170) and inside(computer_170, home_office_319)
        # Retrieve the mouse thats close to the computer and confirmed to be visited

        sit_on_chair_and_touch_mouse(chair_106, mouse)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
