From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_119(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_119(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread)
        # Goal to cut the bread into slices

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an available cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        observe(toaster, "Check if the toaster is plugged in")
        cut_bread(bread, cutting_board)
        toast_bread(bread, toaster)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread)
        # Goal to cut the bread into slices

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread to be sliced and toasted

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an available cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        observe(toaster, "Check if the toaster is plugged in")
        cut_bread(bread, cutting_board)
        toast_bread(bread, toaster)
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)obs(toaster_132, Check if the toaster is plugged in)walk_executor(kitchen_counter_119)exp(food_bread_2084, kitchen_counter_119)exp(cutting_board_2123, kitchen_counter_119)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
