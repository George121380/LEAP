From agent.py
Reset goals: The sub-goals are: 
['1. Find the book.', '2. Put the book on the table in the bedroom.', '3. Turn on the light in the bedroom.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table(book:item, table:item):
    # Function to check if the book is on the specified table
    symbol is_book_on_table=exists o: item : is_book(o) and on(o, table)
    return is_book_on_table

behavior find_book():
    body:
        if exists table: item : is_table(table) and is_book_on_table(book, table):
            # If we have already found the book on the table based on known info
            bind table: item where:
                is_table(table) and is_book_on_table(book, table)
            # Select a table that has the book on it
            achieve close_char(char, table)
            # Move the character closer to the table with the book

        else:
            # Explore all unvisited tables to locate the book
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there a book on the table")
                    # Observe if each table has a book on it

behavior __goal__():
    body:
        find_book()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: book; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#goal_representation
 
def is_book_on_table(book: item, table: item):
    # Function to check if the book is on the specified table
    symbol is_book_on_table = exists o: item: is_book(o) and on(o, table)
    return is_book_on_table

behavior find_book(book: item):
    body:
        if exists table: item: is_table(table) and is_book_on_table(book, table):
            # If we have already found the book on the table based on known info
            bind table: item where:
                is_table(table) and is_book_on_table(book, table)
            # Select a table that has the book on it
            achieve close_char(char, table)
            # Move the character closer to the table with the book

        else:
            # Explore all unvisited tables to locate the book
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there a book on the table")
                    # Observe if each table has a book on it

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        find_book(book)

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_book_on_table(book: item, table: item):
    # Function to check if the book is on the specified table
    symbol is_book_on_table = exists o: item: is_book(o) and on(o, table)
    return is_book_on_table

behavior find_book(book: item):
    body:
        if exists table: item: is_table(table) and is_book_on_table(book, table):
            # If we have already found the book on the table based on known info
            bind table: item where:
                is_table(table) and is_book_on_table(book, table)
            # Select a table that has the book on it
            achieve close_char(char, table)
            # Move the character closer to the table with the book

        else:
            # Explore all unvisited tables to locate the book
            foreach table: item:
                if is_table(table) and not visited(table):
                    observe(table, "Check is there a book on the table")
                    # Observe if each table has a book on it

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        find_book(book)

##############################
From agent.py-> find a plan in act()
walk_executor(table_123)obs(table_123, Check is there a book on the table)walk_executor(table_127)obs(table_127, Check is there a book on the table)walk_executor(table_193)obs(table_193, Check is there a book on the table)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer inside home_office_161.
##############################
From agent.py
obs(table_123, Check is there a book on the table)
Get this information:  laptop_2015 is on table_123. fork_2103 is on table_123. table_123 is on floor_17. table_123 is on mat_114. bowl_2095 is on table_123. table_123 is inside dining_room_1. cup_2087 is on table_123. table_123 is facing drawing_118. table_123 is close to wall_5. table_123 is close to cup_2087. table_123 is close to cup_2088. table_123 is close to ceilinglamp_41. table_123 is close to floor_12. table_123 is close to floor_13. table_123 is close to floor_14. table_123 is close to bowl_2095. table_123 is close to floor_17. table_123 is close to mat_114. table_123 is close to floor_18. table_123 is close to mouse_2003. table_123 is close to fork_2103. table_123 is close to bench_122. table_123 is close to homework_2011. table_123 is close to bench_124. table_123 is close to laptop_2015. table_123 is close to character_219. homework_2011 is on table_123. mouse_2003 is on table_123. cup_2088 is on table_123. table_123 is CLEAN.
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
obs(table_127, Check is there a book on the table)
Get this information:  plate_2105 is on table_127. console_2027 is on table_127. fork_2104 is on table_127. bowl_2096 is on table_127. table_127 is on mat_115. table_127 is on floor_20. crayon_2030 is on table_127. napkin_2014 is on table_127. table_127 is inside dining_room_1. table_127 is facing drawing_118. table_127 is close to wall_11. table_127 is close to console_2027. table_127 is close to crayon_2030. table_127 is close to bowl_2096. table_127 is close to bowl_2097. table_127 is close to mat_115. table_127 is close to floor_20. table_127 is close to floor_19. table_127 is close to napkin_2014. table_127 is close to floor_23. table_127 is close to fork_2104. table_127 is close to plate_2105. table_127 is close to bench_126. table_127 is close to bench_125. table_127 is close to floor_24. table_127 is close to character_219. bowl_2097 is on table_127. table_127 is CLEAN.
##############################
From agent.py
walk_executor(table_193)
Find keyboard_2111. Find drawing_196. Find mouse_2112. Find oil_2005. Find dvd_player_2000. Find chair_2118. Find pillow_195. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close mat_115.Robot is no longer close floor_20.Robot is no longer close table_127.
##############################
From agent.py
obs(table_193, Check is there a book on the table)
Get this information:  keyboard_2111 is on table_193. table_193 is facing drawing_196. mouse_2112 is on table_193. oil_2005 is on table_193. orchid_200 is on table_193. dvd_player_2000 is on table_193. computer_2110 is on table_193. laser_pointer_2025 is on table_193. table_193 is close to mouse_2112. table_193 is close to couch_192. table_193 is close to pillow_195. table_193 is close to floor_164. table_193 is close to floor_165. table_193 is close to chair_2118. table_193 is close to curtain_199. table_193 is close to orchid_200. table_193 is close to floor_168. table_193 is close to wall_170. table_193 is close to floor_167. table_193 is close to mat_201. table_193 is close to laser_pointer_2025. table_193 is close to wall_174. table_193 is close to dvd_player_2000. table_193 is close to oil_2005. table_193 is close to computer_2110. table_193 is close to keyboard_2111. table_193 is close to character_219. table_193 is inside home_office_161. table_193 is CLEAN.
##############################
From agent.py
Human Instruction: You need to locate the book. So far, you have observed three tables (table_123, table_127, and table_193) and confirmed that none of them have a book. Continue searching on unvisited tables or locations to find the book.

The actions you have taken:
Action 1: Walk to table_123.
Action 2: Observe around table_123 with the question of Check is there a book on the table.
Action 3: Walk to table_127.
Action 4: Observe around table_127 with the question of Check is there a book on the table.
Action 5: Walk to table_193.
Action 6: Observe around table_193 with the question of Check is there a book on the table.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book_on_table(table: item):
    # Function to check if there is a book on a specified table
    symbol has_book = exists o: item : is_book(o) and on(o, table)
    return has_book

behavior __goal__():
    body:
        if exists table: item : is_table(table) and has_book_on_table(table):
            # Check if there is a table with a book based on the available information
            bind table: item where:
                is_table(table) and has_book_on_table(table)
            # Select a table that has a book on it
            achieve close_char(char, table)
            # Move the character closer to the table with the book
        
        else:
            # If no table with a book is found, initiate exploration to locate one
            foreach table: item:
                if is_table(table) and not visited(table):
                    # Check all unvisited tables
                    observe(table, "Check is there a book on the table")
                    # Observe whether each table has a book

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_book_2092_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                # Check all unvisited tables for the book
                observe(table, "Check is there a book on the table")
                # Observe whether each table has a book on it

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. find the book." ?
Answer: Find the book on the bookshelf_354.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_bookshelf_188(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_book(bookshelf:item):
    # Function to check if there is a book on a specified bookshelf
    symbol has_book=exists o: item : is_book(o) and inside(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : is_bookshelf(bookshelf) and has_book(bookshelf):
            # Check if there is a bookshelf with a book based on the available information
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book(bookshelf) 
            # Select a bookshelf that has a book on it
            achieve close_char(char, bookshelf) 
            # Move the character closer to the bookshelf with a book

        else: 
           # If no bookshelf with a book is found, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    # Check all unvisited bookshelves
                    observe(bookshelf, "Check is there a book on the bookshelf")
                    # Observe whether each bookshelf has a book

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_book(bookshelf:item):
    # Function to check if there is a book on a specified bookshelf
    symbol has_book=exists o: item : is_book(o) and inside(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        if exists bookshelf: item : is_bookshelf(bookshelf) and has_book(bookshelf):
            # Check if there is a bookshelf with a book based on the available information
            bind bookshelf: item where:
                is_bookshelf(bookshelf) and has_book(bookshelf) 
            # Select a bookshelf that has a book on it
            achieve close_char(char, bookshelf) 
            # Move the character closer to the bookshelf with a book

        else: 
           # If no bookshelf with a book is found, initiate exploration to locate one
            foreach bookshelf: item:
                if is_bookshelf(bookshelf) and not visited(bookshelf):
                    # Check all unvisited bookshelves
                    observe(bookshelf, "Check is there a book on the bookshelf")
                    # Observe whether each bookshelf has a book

##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)obs(bookshelf_136, Check is there a book on the bookshelf)walk_executor(bookshelf_137)open_executor(bookshelf_137)obs(bookshelf_137, Check is there a book on the bookshelf)walk_executor(bookshelf_188)open_executor(bookshelf_188)obs(bookshelf_188, Check is there a book on the bookshelf)walk_executor(bookshelf_189)open_executor(bookshelf_189)obs(bookshelf_189, Check is there a book on the bookshelf)walk_executor(bookshelf_260)open_executor(bookshelf_260)obs(bookshelf_260, Check is there a book on the bookshelf)walk_executor(bookshelf_372)open_executor(bookshelf_372)obs(bookshelf_372, Check is there a book on the bookshelf)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer inside home_office_161.Robot is no longer close table_193.
##############################
From agent.py
obs(bookshelf_136, Check is there a book on the bookshelf)
Get this information:  bookshelf_136 is inside dining_room_1. book_2091 is on bookshelf_136. bookshelf_136 is close to wall_5. bookshelf_136 is close to wall_10. bookshelf_136 is close to floor_12. bookshelf_136 is close to floor_13. bookshelf_136 is close to floor_18. bookshelf_136 is close to ceiling_25. bookshelf_136 is close to doorjamb_285. bookshelf_136 is close to ceiling_30. bookshelf_136 is close to door_286. bookshelf_136 is close to door_38. bookshelf_136 is close to book_2091. bookshelf_136 is close to floor_336. bookshelf_136 is close to floor_337. bookshelf_136 is close to wall_344. bookshelf_136 is close to wall_345. bookshelf_136 is close to ceiling_355. bookshelf_136 is close to doorjamb_356. bookshelf_136 is close to desk_375. bookshelf_136 is close to computer_379. bookshelf_136 is close to mouse_380. bookshelf_136 is close to mousepad_381. bookshelf_136 is close to keyboard_382. bookshelf_136 is close to cpuscreen_383. bookshelf_136 is close to character_219. bookshelf_136 is on floor_12. bookshelf_136 is on floor_13. bookshelf_136 is CLEAN. bookshelf_136 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_137)
Find book_2092. Find cup_2089. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. Robot is no longer close bookshelf_136.Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From agent.py
open_executor(bookshelf_137)
Find drawing_387. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. 
##############################
From agent.py
obs(bookshelf_137, Check is there a book on the bookshelf)
Get this information:  book_2092 is on bookshelf_137. bookshelf_137 is on floor_24. bookshelf_137 is inside dining_room_1. photoframe_102 is inside bookshelf_137. bookshelf_137 is close to drawing_387. bookshelf_137 is close to ceiling_36. bookshelf_137 is close to photoframe_102. bookshelf_137 is close to tvstand_135. bookshelf_137 is close to doorjamb_39. bookshelf_137 is close to cup_2089. bookshelf_137 is close to wall_9. bookshelf_137 is close to wall_11. bookshelf_137 is close to book_2092. bookshelf_137 is close to floor_335. bookshelf_137 is close to floor_19. bookshelf_137 is close to drawing_118. bookshelf_137 is close to wall_343. bookshelf_137 is close to floor_24. bookshelf_137 is close to filing_cabinet_378. bookshelf_137 is close to ceiling_31. bookshelf_137 is close to character_219. cup_2089 is on bookshelf_137. bookshelf_137 is CLEAN. bookshelf_137 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_188)
Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. Robot is no longer inside dining_room_1.Robot is no longer close floor_24.Robot is no longer close bookshelf_137.Robot is no longer close photoframe_102.
##############################
From agent.py
open_executor(bookshelf_188)
Find drawing_238. Robot is inside home_office_161. Robot is close bookshelf_188. Robot is close floor_165. 
##############################
From agent.py
obs(bookshelf_188, Check is there a book on the bookshelf)
Get this information:  bookshelf_188 is close to kitchen_counter_128. bookshelf_188 is close to floor_165. bookshelf_188 is close to wall_6. bookshelf_188 is close to floor_167. bookshelf_188 is close to door_234. bookshelf_188 is close to wall_172. bookshelf_188 is close to wall_174. bookshelf_188 is close to floor_15. bookshelf_188 is close to ceiling_177. bookshelf_188 is close to ceiling_180. bookshelf_188 is close to doorjamb_182. bookshelf_188 is close to bookshelf_189. bookshelf_188 is close to character_219. bookshelf_188 is on floor_165. bookshelf_188 is inside home_office_161. bookshelf_188 is facing drawing_196. bookshelf_188 is facing drawing_238. bookshelf_188 is OPEN. bookshelf_188 is DIRTY.
##############################
From agent.py
walk_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. Robot is no longer close bookshelf_188.Robot is no longer close floor_165.
##############################
From agent.py
open_executor(bookshelf_189)
Robot is inside home_office_161. Robot is close bookshelf_189. Robot is close floor_167. 
##############################
From agent.py
obs(bookshelf_189, Check is there a book on the bookshelf)
Get this information:  bookshelf_189 is close to kitchen_counter_128. bookshelf_189 is close to wall_3. bookshelf_189 is close to doorjamb_37. bookshelf_189 is close to wall_6. bookshelf_189 is close to floor_167. bookshelf_189 is close to floor_166. bookshelf_189 is close to wall_171. bookshelf_189 is close to wall_172. bookshelf_189 is close to floor_14. bookshelf_189 is close to floor_15. bookshelf_189 is close to ceiling_176. bookshelf_189 is close to ceiling_177. bookshelf_189 is close to light_217. bookshelf_189 is close to powersocket_218. bookshelf_189 is close to ceiling_27. bookshelf_189 is close to bookshelf_188. bookshelf_189 is close to character_219. bookshelf_189 is on floor_167. bookshelf_189 is inside home_office_161. bookshelf_189 is facing television_216. bookshelf_189 is CLEAN. bookshelf_189 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_260)
Find mat_237. Find chair_263. Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. Robot is no longer inside home_office_161.Robot is no longer close bookshelf_189.Robot is no longer close floor_167.
##############################
From agent.py
open_executor(bookshelf_260)
Robot is inside bedroom_220. Robot is close floor_222. Robot is close bookshelf_260. Robot is close floor_221. Robot is close photoframe_246. 
##############################
From agent.py
obs(bookshelf_260, Check is there a book on the bookshelf)
Get this information:  bookshelf_260 is facing drawing_238. bookshelf_260 is close to ceiling_226. bookshelf_260 is close to powersocket_259. bookshelf_260 is close to ceiling_227. bookshelf_260 is close to wall_231. bookshelf_260 is close to chair_263. bookshelf_260 is close to wall_233. bookshelf_260 is close to mat_237. bookshelf_260 is close to photoframe_246. bookshelf_260 is close to floor_221. bookshelf_260 is close to floor_222. bookshelf_260 is close to floor_223. bookshelf_260 is close to character_219. bookshelf_260 is on floor_221. bookshelf_260 is on floor_222. photoframe_246 is inside bookshelf_260. bookshelf_260 is inside bedroom_220. bookshelf_260 is CLEAN. bookshelf_260 is OPEN.
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close floor_221.Robot is no longer close floor_222.Robot is no longer close photoframe_246.
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From agent.py
obs(bookshelf_372, Check is there a book on the bookshelf)
Get this information:  photoframe_361 is on bookshelf_372. bookshelf_372 is facing computer_379. bookshelf_372 is facing drawing_389. stamp_2031 is on bookshelf_372. bookshelf_372 is close to walllamp_290. bookshelf_372 is close to drawing_296. bookshelf_372 is close to photoframe_361. bookshelf_372 is close to towel_rack_298. bookshelf_372 is close to floor_331. bookshelf_372 is close to floor_332. bookshelf_372 is close to wall_269. bookshelf_372 is close to stamp_2031. bookshelf_372 is close to floor_272. bookshelf_372 is close to bathroom_cabinet_305. bookshelf_372 is close to bathroom_counter_306. bookshelf_372 is close to wall_339. bookshelf_372 is close to floor_273. bookshelf_372 is close to wall_342. bookshelf_372 is close to ceiling_279. bookshelf_372 is close to ceiling_349. bookshelf_372 is close to ceiling_350. bookshelf_372 is close to character_219. bookshelf_372 is on floor_331. bookshelf_372 is inside bedroom_327. bookshelf_372 is CLEAN. bookshelf_372 is OPEN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book that needs to be placed

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table inside the bedroom

        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_bedroom_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) 
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Define the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        put_book_on_bedroom_table(book, table)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the book on the table in the bedroom." ?
Answer: Put the book on the table in the bedroom.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_desk_261(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(novel,desk_instance)
        else:
            exp(novel,desk_instance)
    eff:
        unknown[novel]=False
        close[novel,desk_instance]=True
        close[desk_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item, bedroom:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book you have found and is in hand

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        put_book_on_table(book, table, bedroom)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_book_2092(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2092
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_bedroom_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table in the bedroom

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book that has been found

        bind bedroom_table: item where:
            is_table(bedroom_table) and inside(bedroom_table, bedroom)
        # Select a table that is inside the bedroom

        put_book_on_bedroom_table(book, bedroom_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: bedroom; available variables: [Variable<bedroom_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_book_2091(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(novel,book_instance)
        else:
            exp(novel,book_instance)
    eff:
        unknown[novel]=False
        close[novel,book_instance]=True
        close[book_instance,novel]=True
    

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#goal_representation
 
behavior put_book_on_bedroom_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table in the bedroom

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book that has been found

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Define the bedroom

        bind bedroom_table: item where:
            is_table(bedroom_table) and inside(bedroom_table, bedroom)
        # Select a table that is inside the bedroom

        put_book_on_bedroom_table(book, bedroom_table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_book_on_table(book: item, table: item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Define the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        place_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2000_around_dvd_player_2000(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2000
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(dvd_player,dvd_player_instance)
        else:
            exp(dvd_player,dvd_player_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,dvd_player_instance]=True
        close[dvd_player_instance,dvd_player]=True
    

behavior find_book_2092_around_book_2092(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2092
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Identify the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table in the bedroom

        put_book_on_table(book, table)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. put the book on the table in the bedroom." ?
Answer: Put the book on the table in the bedroom.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_desk_261(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(novel,desk_instance)
        else:
            exp(novel,desk_instance)
    eff:
        unknown[novel]=False
        close[novel,desk_instance]=True
        close[desk_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book that is already in hand

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table inside the bedroom

        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_table_in_bedroom(table: item):
    # Function to check if a table is in the bedroom
    symbol in_bedroom=exists room: item : is_bedroom(room) and inside(table, room)
    return in_bedroom

behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book to be put on the table
        
        bind table: item where:
            is_table(table) and has_table_in_bedroom(table)
        # Select a table in the bedroom
        
        put_book_on_table(book, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_novel_2010_around_desk_261(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(novel,desk_instance)
        else:
            exp(novel,desk_instance)
    eff:
        unknown[novel]=False
        close[novel,desk_instance]=True
        close[desk_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        bind table: item where:
            is_table(table) and inside(table, bedroom)
        # Select a table inside the bedroom

        bind book: item where:
            is_book(book) and inhand(book)
        # Select the book currently in hand

        put_book_on_table(book, table)
        # Execute behavior to place the book on the table in the bedroom

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_book_2092(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2092
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def is_book_on_table_in_bedroom(book:item, table:item, bedroom:item):
    # Function to check if the book is on a table in the bedroom
    symbol is_on_table_in_bedroom = on(book, table) and inside(table, bedroom)
    return is_on_table_in_bedroom

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if exists table: item : is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom):
            bind table: item where:
                is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom)
            # If a table with the book already exists in the bedroom, confirm placement
        
        else:
            foreach table: item:
                if is_table(table) and inside(table, bedroom) and not visited(table):
                    observe(table, "Check if there is any book on this table")
                    # Check unvisited tables in the bedroom
                    # If no table has the book in the bedroom, choose an unvisited table
                    
            bind table: item where:
                is_table(table) and inside(table, bedroom) and not visited(table)
            # Bind the table to place the book upon

        place_book_on_table(book, table)
        # Place the book on the selected table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_novel_2010_around_desk_261(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(novel,desk_instance)
        else:
            exp(novel,desk_instance)
    eff:
        unknown[novel]=False
        close[novel,desk_instance]=True
        close[desk_instance,novel]=True
    

#goal_representation
 
def is_book_on_table_in_bedroom(book:item, table:item, bedroom:item):
    # Function to check if the book is on a table in the bedroom
    symbol is_on_table_in_bedroom = on(book, table) and inside(table, bedroom)
    return is_on_table_in_bedroom

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if exists table: item : is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom):
            bind table: item where:
                is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom)
            # If a table with the book already exists in the bedroom, confirm placement
        
        else:
            foreach table: item:
                if is_table(table) and inside(table, bedroom) and not visited(table):
                    observe(table, "Check if there is any book on this table")
                    # Check unvisited tables in the bedroom
                    # If no table has the book in the bedroom, choose an unvisited table

            bind table: item where:
                is_table(table) and inside(table, bedroom) and not visited(table)
            # Bind the table to place the book upon

        place_book_on_table(book, table)
        # Place the book on the selected table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: table; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2091_around_book_2091(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind book_instance:item where:
            is_book(book_instance) and id[book_instance]==2091
        achieve close_char(char,book_instance)
        if can_open(book_instance):
            achieve_once open(book_instance)
            exp(book,book_instance)
        else:
            exp(book,book_instance)
    eff:
        unknown[book]=False
        close[book,book_instance]=True
        close[book_instance,book]=True
    

#goal_representation
 
def is_book_on_table_in_bedroom(book:item, table:item, bedroom:item):
    # Function to check if the book is on a table in the bedroom
    symbol is_on_table_in_bedroom = on(book, table) and inside(table, bedroom)
    return is_on_table_in_bedroom

behavior place_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)
        # Place the book on the table

behavior __goal__():
    body:
        bind book: item where:
            is_book(book)
        # Select the book

        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom

        if exists table: item : is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom):
            bind table: item where:
                is_table(table) and is_book_on_table_in_bedroom(book, table, bedroom)
            # If a table with the book already exists in the bedroom, confirm placement
        
        else:
            foreach table: item:
                if is_table(table) and inside(table, bedroom) and not visited(table):
                    observe(table, "Check if there is any book on this table")
                    # Check unvisited tables in the bedroom
                    # If no table has the book in the bedroom, choose an unvisited table

            bind table: item where:
                is_table(table) and inside(table, bedroom) and not visited(table)
            # Bind the table to place the book upon

        place_book_on_table(book, table)
        # Place the book on the selected table

#goal_representation_end

##############################
