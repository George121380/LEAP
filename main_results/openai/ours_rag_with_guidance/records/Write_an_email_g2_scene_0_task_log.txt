From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2018_around_fridge_289(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office
        
        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair_in_front_of_computer(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair: item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(chair, computer)
        # Select the chair that is sittable and close to the computer

        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Get close to the computer in the home office.', '2. Sit on the chair in front of the computer and touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_168_around_computer_417(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_mouse_166_around_mousepad_167(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==167
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mouse,mousepad_instance)
        else:
            exp(mouse,mousepad_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mousepad_instance]=True
        close[mousepad_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_417)
##############################
From agent.py
walk_executor(computer_417)
Find chair_356. Find mouse_413. Find keyboard_415. Robot is inside home_office_319. Robot is close computer_417. Robot is no longer inside bathroom_1.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_103_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_415_around_desk_357(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with the specific identifier 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with the specific identifier 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
        
        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

##############################
From agent.py-> find a plan in act()
walk_executor(chair_356)sit_executor(chair_356)walk_executor(computer_417)switchon_executor(computer_417)walk_executor(mouse_413)touch_executor(mouse_413)
##############################
From agent.py
walk_executor(chair_356)
Robot is inside home_office_319. Robot is close chair_356. Robot is no longer close computer_417.
##############################
From agent.py
sit_executor(chair_356)
Find vacuum_cleaner_2070. Find headset_2062. Find mat_401. Find hanger_363. Find hanger_374. Find drawing_404. Find headset_2076. Find hanger_369. Find remote_control_2052. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find cat_2055. Find clothes_jacket_2047. Find book_2066. Find phone_2077. Find hanger_375. Find pencil_2001. Find pillow_405. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_400. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Find pillow_406. Find hairbrush_2002. Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_357(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==357
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_415_around_keyboard_415(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind keyboard_instance:item where:
            is_keyboard(keyboard_instance) and id[keyboard_instance]==415
        achieve close_char(char,keyboard_instance)
        if can_open(keyboard_instance):
            achieve_once open(keyboard_instance)
            exp(keyboard,keyboard_instance)
        else:
            exp(keyboard,keyboard_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,keyboard_instance]=True
        close[keyboard_instance,keyboard]=True
    

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with the specific identifier 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)
        # Sit on the chair

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer
        
        turn_on_computer_by_touching_mouse(mouse, computer)
        # Touch the mouse to turn on the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with the specific identifier 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)
        # Sit on the chair

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer
        
        turn_on_computer_by_touching_mouse(mouse, computer)
        # Touch the mouse to turn on the computer

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(computer_417)switchon_executor(computer_417)standup_executor(char)walk_executor(mouse_413)touch_executor(mouse_413)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close chair_356. Robot is on chair_356. Robot is facing computer_417. 
##############################
From agent.py
walk_executor(computer_417)
Robot is inside home_office_319. Robot is close computer_417. Robot is on chair_356. Robot is no longer close chair_356.Robot is no longer facing computer_417.
##############################
From agent.py
switchon_executor(computer_417)
Robot is inside home_office_319. Robot is close computer_417. Robot is on chair_356. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_106_around_desk_104(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select the computer with ID 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair(chair)
        turn_on_computer_by_touching_mouse(mouse, computer)


#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 417
        # Select the computer with ID 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        sit_on_chair(chair)
        turn_on_computer_by_touching_mouse(mouse, computer)


##############################
From agent.py-> find a plan in act()
walk_executor(mouse_413)touch_executor(mouse_413)
##############################
From agent.py
walk_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_356. Robot is no longer close computer_417.
##############################
From agent.py
touch_executor(mouse_413)
Robot is inside home_office_319. Robot is close desk_357. Robot is close mouse_413. Robot is close mousepad_414. Robot is on chair_356. 
##############################
