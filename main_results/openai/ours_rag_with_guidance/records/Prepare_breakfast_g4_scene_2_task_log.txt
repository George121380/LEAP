From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken separately.', '2. Combine the cooked pasta and chicken together.', '3. Put the chicken pasta onto a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_noodles_2062_around_kitchen_counter_129(food_noodles:item):
    goal: not unknown(food_noodles)
    body:
        assert is_food_noodles(food_noodles)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_noodles,kitchen_counter_instance)
        else:
            exp(food_noodles,kitchen_counter_instance)
    eff:
        unknown[food_noodles]=False
        close[food_noodles,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_noodles]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot to cook
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start cooking the pasta

behavior cook_chicken(chicken:item, pan:item, stove:item):
    body:
        achieve inside(chicken, pan)
        # Place the chicken inside the pan to cook
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn on the stove to start cooking the chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_food_noodles(pasta)
        # Select the pasta to cook

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to cook

        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta

        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan for cooking chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        cook_pasta(pasta, pot, stove)
        cook_chicken(chicken, pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta_and_chicken(pasta:item, chicken:item, pot:item, stove:item, skillet:item):
    body:
        achieve inside(pasta, pot)
        achieve is_on(stove)
        # Boil the pasta in the pot on the stove

        achieve on(chicken, skillet)
        achieve is_on(skillet)
        # Cook the chicken on the skillet

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select the dry pasta

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling the pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the pasta

        bind skillet: item where:
            is_fryingpan(skillet)
        # Select a skillet to cook the chicken

        cook_pasta_and_chicken(pasta, chicken, pot, stove, skillet)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. cook the pasta and chicken separately." ?
Answer: Boil some pasta. Cook some chicken.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot for cooking
        achieve on(pot, stove)
        # Position the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the pasta

behavior cook_chicken(chicken:item, frying_pan:item, stove:item):
    body:
        achieve on(chicken, frying_pan)
        # Ensure the chicken is on the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the chicken

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking pasta

        bind stove: item where:
            is_stove(stove)
        # Select a stove for cooking

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan for cooking chicken

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select pasta for cooking

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken for cooking

        cook_pasta(pasta, pot, stove)
        cook_chicken(chicken, frying_pan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_kitchen_counter_128(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

behavior cook_chicken_in_pan(chicken:item, fryingpan:item):
    body:
        achieve on(chicken, fryingpan)
        # Place the chicken on the frying pan

behavior start_boiling_pot(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to start boiling

behavior start_cooking_chicken(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to start cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        start_boiling_pot(pot, stove)
        cook_pasta_in_pot(pasta, pot)

        start_cooking_chicken(fryingpan, stove)
        cook_chicken_in_pan(chicken, fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function fill_pot_with_water not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2024_around_stove_2090(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(needle,stove_instance)
        else:
            exp(needle,stove_instance)
    eff:
        unknown[needle]=False
        close[needle,stove_instance]=True
        close[stove_instance,needle]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_kitchen_counter_128(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_cupboard_131(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior cook_pasta_in_pot(pasta:item, pot:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

behavior cook_chicken_in_pan(chicken:item, fryingpan:item):
    body:
        achieve on(chicken, fryingpan)
        # Place the chicken on the frying pan

behavior start_boiling_pot(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to start boiling

behavior start_cooking_chicken(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to start cooking

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select chicken

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        start_boiling_pot(pot, stove)
        cook_pasta_in_pot(pasta, pot)

        start_cooking_chicken(fryingpan, stove)
        cook_chicken_in_pan(chicken, fryingpan)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(kitchen_counter_128)exp(fryingpan_2107, kitchen_counter_128)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)walk_executor(cupboard_131)open_executor(cupboard_131)exp(dry_pasta_2073, cupboard_131)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(dry_pasta_2073, cupboard_131)
Fail to find dry_pasta_2073 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(cupboard_130)exp(dry_pasta_2073, cupboard_130)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close cupboard_131.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
exp(dry_pasta_2073, cupboard_130)
Fail to find dry_pasta_2073 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(tablelamp_359)exp(dry_pasta_2073, tablelamp_359)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(fryingpan_2107)put_executor(food_chicken_2050, fryingpan_2107)
##############################
From agent.py
walk_executor(tablelamp_359)
Find drawing_389. Find coin_2004. Find pillow_368. Find mat_386. Find drawing_388. Find pillow_370. Robot is inside bedroom_327. Robot is close nightstand_373. Robot is close tablelamp_359. Robot is no longer inside dining_room_1.Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
exp(dry_pasta_2073, tablelamp_359)
Fail to find dry_pasta_2073 around tablelamp_359. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Combine the chicken and pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_kitchen_counter_128(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_orange_2008_around_fridge_140(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_orange,fridge_instance)
        else:
            exp(food_orange,fridge_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,fridge_instance]=True
        close[fridge_instance,food_orange]=True
    

behavior find_needle_2012_around_curtain_198(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==198
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(needle,curtain_instance)
        else:
            exp(needle,curtain_instance)
    eff:
        unknown[needle]=False
        close[needle,curtain_instance]=True
        close[curtain_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_pasta(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior boil_pasta(dry_pasta: item, pot: item):
    body:
        achieve inside(dry_pasta, pot)
        # Ensure the pasta is inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_pasta(pot, stove)
        boil_pasta(dry_pasta, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_pasta(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior boil_pasta(dry_pasta: item, pot: item):
    body:
        achieve inside(dry_pasta, pot)
        # Ensure the pasta is inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_pasta(pot, stove)
        boil_pasta(dry_pasta, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(dry_pasta_2073, kitchen_counter_128)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside bedroom_327.Robot is no longer close nightstand_373.Robot is no longer close tablelamp_359.
##############################
From agent.py
exp(dry_pasta_2073, kitchen_counter_128)
Fail to find dry_pasta_2073 around kitchen_counter_128. 
##############################
From agent.py-> find a plan in act()
walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(dry_pasta_2073, bathroom_cabinet_305)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)
##############################
From agent.py
walk_executor(bathroom_cabinet_305)
Find soap_2038. Find drawing_296. Find towel_rack_298. Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. Robot is no longer inside dining_room_1.Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
open_executor(bathroom_cabinet_305)
Robot is inside bathroom_265. Robot is close bathroom_cabinet_305. Robot is close wall_269. Robot is close soap_2038. 
##############################
From agent.py
exp(dry_pasta_2073, bathroom_cabinet_305)
Fail to find dry_pasta_2073 around bathroom_cabinet_305. 
##############################
From agent.py-> find a plan in act()
walk_executor(window_40)open_executor(window_40)exp(dry_pasta_2073, window_40)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)
##############################
From agent.py
walk_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. Robot is no longer inside bathroom_265.Robot is no longer close bathroom_cabinet_305.Robot is no longer close wall_269.Robot is no longer close soap_2038.
##############################
From agent.py
open_executor(window_40)
Robot is inside dining_room_1. Robot is close window_40. 
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find dry_pasta_2073 ?
Answer: Head to dining_room_1 and look for fridge_140. Once you locate fridge_140, open its door. Inside the fridge, you'll find dry_pasta_2073.
Re-decompose: None

##############################
From agent.py
Human Instruction: Head to dining_room_1 and look for fridge_140. Once you locate fridge_140, open its door. Inside the fridge, you'll find dry_pasta_2073.

Human Guidance: Boil some pasta. Cook some chicken.
The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.
Action 12: Walk to cupboard_131.
Action 13: Open cupboard_131.
Action 14: look for dry_pasta_2073 around cupboard_131.
Action 15: Walk to pot_2093.
Action 16: Grab pot_2093.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to stove_2090.
Action 21: Put pot_2093 on stove_2090.
Action 22: Walk to cupboard_130.
Action 23: look for dry_pasta_2073 around cupboard_130.
Action 24: Walk to tablelamp_359.
Action 25: look for dry_pasta_2073 around tablelamp_359.
Action 26: Walk to kitchen_counter_128.
Action 27: look for dry_pasta_2073 around kitchen_counter_128.
Action 28: Walk to bathroom_cabinet_305.
Action 29: Open bathroom_cabinet_305.
Action 30: look for dry_pasta_2073 around bathroom_cabinet_305.
Action 31: Walk to window_40.
Action 32: Open window_40.

##############################
From agent.py
exp(dry_pasta_2073, window_40)
Fail to find dry_pasta_2073 around window_40. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(dry_pasta_2073, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close window_40.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(dry_pasta_2073, fridge_140)
Find dry_pasta_2073. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)open_executor(pot_2093)walk_executor(dry_pasta_2073)grab_executor(dry_pasta_2073)walk_executor(pot_2093)putin_executor(dry_pasta_2073, pot_2093)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. 
##############################
From agent.py
walk_executor(dry_pasta_2073)
Robot is inside dining_room_1. Robot is close dry_pasta_2073. Robot is close fridge_140. Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
grab_executor(dry_pasta_2073)
Robot is inside dining_room_1. Robot is close dry_pasta_2073. Robot is close fridge_140. Grabbing dry_pasta_2073 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close dry_pasta_2073. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(dry_pasta_2073, pot_2093)
Robot is inside dining_room_1. Robot is close dry_pasta_2073. Robot is close stove_2090. Robot is close pot_2093. dry_pasta_2073 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure that the pot has been filled with water before starting to boil the pasta. Currently, there is no indication that the pot was filled with water during the described actions.

Human Guidance: Boil some pasta. Cook some chicken.
The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.
Action 12: Walk to cupboard_131.
Action 13: Open cupboard_131.
Action 14: look for dry_pasta_2073 around cupboard_131.
Action 15: Walk to pot_2093.
Action 16: Grab pot_2093.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to stove_2090.
Action 21: Put pot_2093 on stove_2090.
Action 22: Walk to cupboard_130.
Action 23: look for dry_pasta_2073 around cupboard_130.
Action 24: Walk to tablelamp_359.
Action 25: look for dry_pasta_2073 around tablelamp_359.
Action 26: Walk to kitchen_counter_128.
Action 27: look for dry_pasta_2073 around kitchen_counter_128.
Action 28: Walk to bathroom_cabinet_305.
Action 29: Open bathroom_cabinet_305.
Action 30: look for dry_pasta_2073 around bathroom_cabinet_305.
Action 31: Walk to window_40.
Action 32: Open window_40.
Action 33: look for dry_pasta_2073 around window_40.
Action 34: Walk to fridge_140.
Action 35: Switch off fridge_140.
Action 36: Open fridge_140.
Action 37: look for dry_pasta_2073 around fridge_140.
Action 38: Walk to pot_2093.
Action 39: Open pot_2093.
Action 40: Walk to dry_pasta_2073.
Action 41: Grab dry_pasta_2073.
Action 42: Walk to pot_2093.
Action 43: Put dry_pasta_2073 into pot_2093.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dvd_player_2000_around_tvstand_186(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_pasta(pasta: item, pot: item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_pasta(pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_phone_47_around_tvstand_186(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(phone,tvstand_instance)
        else:
            exp(phone,tvstand_instance)
    eff:
        unknown[phone]=False
        close[phone,tvstand_instance]=True
        close[tvstand_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_water(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling the water

behavior add_pasta_to_pot(dry_pasta: item, pot: item):
    body:
        achieve inside(dry_pasta, pot)
        # Place the dry pasta inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_water(pot, stove)
        add_pasta_to_pot(dry_pasta, pot)
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the pasta." ?
Answer: Boil some pasta.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling_pasta(pot: item, stove: item, pasta: item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_pasta(pot, stove, pasta)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_cat_2082_around_bed_376(cat:item):
    goal: not unknown(cat)
    body:
        assert is_cat(cat)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==376
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(cat,bed_instance)
        else:
            exp(cat,bed_instance)
    eff:
        unknown[cat]=False
        close[cat,bed_instance]=True
        close[bed_instance,cat]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2097_around_dishwasher_143(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(bowl,dishwasher_instance)
        else:
            exp(bowl,dishwasher_instance)
    eff:
        unknown[bowl]=False
        close[bowl,dishwasher_instance]=True
        close[dishwasher_instance,bowl]=True
    

behavior find_fork_2103_around_dishwasher_143(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(fork,dishwasher_instance)
        else:
            exp(fork,dishwasher_instance)
    eff:
        unknown[fork]=False
        close[fork,dishwasher_instance]=True
        close[dishwasher_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot with water on the stove

behavior start_boiling_pasta(pot: item, stove: item, pasta: item):
    body:
        achieve inside(pasta, pot)
        # Place the dry pasta inside the pot
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling_pasta(pot, stove, dry_pasta)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta as guided.', '2. Cook the chicken.', '3. Mix the chicken with the cooked pasta.', '4. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior start_boiling_pasta(pot: item, stove: item, pasta: item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn the stove on to start boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to fill with water

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet for filling the pot

        bind stove: item where:
            is_stove(stove)
        # Select a stove to boil the pasta

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta)
        # Select dry pasta to boil

        fill_pot_with_water(pot, faucet)
        start_boiling_pasta(pot, stove, dry_pasta)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Determine if there is water in the pot
    return has_water(pot)

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling_pasta(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling the pasta

behavior add_pasta_to_pot(pasta: item, pot: item):
    body:
        achieve inside(pasta, pot)
        # Add pasta to the pot for boiling

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select faucet

        bind stove: item where:
            is_stove(stove)
        # Select stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        start_boiling_pasta(pot, stove)
        add_pasta_to_pot(pasta, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the pasta as guided." ?
Answer: Boil the pasta.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select the pot with ID 2093

        bind dry_pasta: item where:
            is_dry_pasta(dry_pasta) and id[dry_pasta]==2073
        # Select the dry pasta with ID 2073

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta(pot, stove, dry_pasta)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta(pot, stove, pasta)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Mix the boiled pasta and cooked chicken together.', '4. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_book_2091_around_bookshelf_372(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_clothes_skirt_2116_around_dresser_377(clothes_skirt:item):
    goal: not unknown(clothes_skirt)
    body:
        assert is_clothes_skirt(clothes_skirt)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_skirt,dresser_instance)
        else:
            exp(clothes_skirt,dresser_instance)
    eff:
        unknown[clothes_skirt]=False
        close[clothes_skirt,dresser_instance]=True
        close[dresser_instance,clothes_skirt]=True
    

#exp_behavior_end

#goal_representation
 
def pot_has_water(pot:item):
    # Function to check if the specified pot has water
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water

behavior place_pot_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)
        # Turn on the stove

behavior boil_pasta(pasta:item, pot:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        if not pot_has_water(pot):
            fill_pot_with_water(pot, faucet)

        place_pot_on_stove(pot, stove)
        turn_on_stove(stove)
        boil_pasta(pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2084_around_desk_261(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(cd_player,desk_instance)
        else:
            exp(cd_player,desk_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,desk_instance]=True
        close[desk_instance,cd_player]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # A function to determine if a sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn on the stove to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and id[pot]==2093
        # Select the pot with ID 2093

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove with ID 2090

        bind pasta: item where:
            is_dry_pasta(pasta) and id[pasta]==2073
        # Select dry pasta with ID 2073

        fill_pot_with_water(pot, faucet)
        boil_pasta(pot, stove, pasta)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Mix the chicken and pasta and put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation

def has_water_in_pot(pot: item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta(pot, stove, pasta)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_300_around_bathroom_counter_306(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(towel_rack,bathroom_counter_instance)
        else:
            exp(towel_rack,bathroom_counter_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_counter_instance]=True
        close[bathroom_counter_instance,towel_rack]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot:item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_pasta(pot:item, stove:item, pasta:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(pasta, pot)
        # Place the pasta inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the pasta

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        boil_pasta(pot, stove, pasta)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
