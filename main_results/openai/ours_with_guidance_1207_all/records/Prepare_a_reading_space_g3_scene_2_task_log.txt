From agent.py
Reset goals: The sub-goals are: 
['1. Find the book and put it on the coffee table in the home office.', '2. Open the window in the home office.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2092_around_home_office_161(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==161
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_161)exp(book_2091, home_office_161)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(home_office_161)
Robot is inside home_office_161. 
##############################
From agent.py
exp(book_2091, home_office_161)
Fail to find book_2091 around home_office_161. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_137)open_executor(bookshelf_137)exp(book_2091, bookshelf_137)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_137)
Find book_2092. Find cup_2089. Find drawing_118. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(bookshelf_137)
Find drawing_387. Robot is inside dining_room_1. Robot is close floor_24. Robot is close bookshelf_137. Robot is close photoframe_102. 
##############################
From agent.py
exp(book_2091, bookshelf_137)
Fail to find book_2091 around bookshelf_137. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_136)exp(book_2091, bookshelf_136)walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(bookshelf_136)
Find book_2091. Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close floor_12. Robot is close floor_13. Robot is no longer close floor_24.Robot is no longer close bookshelf_137.Robot is no longer close photoframe_102.
##############################
From agent.py
exp(book_2091, bookshelf_136)
Find book_2091. 
##############################
From agent.py-> find a plan in act()
walk_executor(book_2091)grab_executor(book_2091)walk_executor(table_193)put_executor(book_2091, table_193)
##############################
From agent.py
walk_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Robot is no longer close floor_12.Robot is no longer close floor_13.
##############################
From agent.py
grab_executor(book_2091)
Robot is inside dining_room_1. Robot is close bookshelf_136. Robot is close book_2091. Grabbing book_2091 by right hand. 
##############################
From agent.py
walk_executor(table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. Robot is no longer inside dining_room_1.Robot is no longer close bookshelf_136.
##############################
From agent.py
put_executor(book_2091, table_193)
Robot is inside home_office_161. Robot is close book_2091. Robot is close table_193. book_2091 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_rack_299_around_bathroom_cabinet_305(towel_rack:item):
    goal: not unknown(towel_rack)
    body:
        assert is_towel_rack(towel_rack)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(towel_rack,bathroom_cabinet_instance)
        else:
            exp(towel_rack,bathroom_cabinet_instance)
    eff:
        unknown[towel_rack]=False
        close[towel_rack,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,towel_rack]=True
    

#exp_behavior_end

#goal_representation
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(window_181)open_executor(window_181)
##############################
From agent.py
walk_executor(window_181)
Robot is inside home_office_161. Robot is close window_181. Robot is no longer close table_193.Robot is no longer close book_2091.
##############################
From agent.py
open_executor(window_181)
Robot is inside home_office_161. Robot is close window_181. 
##############################
