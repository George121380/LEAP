From agent.py
Reset goals: The sub-goals are: 
['1. Find and sit on the couch.', '2. Turn on the TV using the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_356_around_table_355(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==355
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

behavior find_food_dessert_2018_around_fridge_289(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#exp_behavior_end

#goal_representation
 
def is_couch_sittable(couch:item):
    # Function to check if an item is a couch and can be sat on
    return is_couch(couch) and sittable(couch)

behavior __goal__():
    body:
        if exists couch: item : is_couch_sittable(couch):
            # If a couch has not been visited and is sittable, approach it
            bind couch: item where:
                is_couch_sittable(couch)
            achieve close_char(char, couch)
            sit_somewhere(couch)

        else:
            # Check all unvisited couches in the scene
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if the couch is sittable")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_couch_sittable(couch:item):
    # Function to check if an item is a couch and can be sat on
    return is_couch(couch) and sittable(couch)

behavior __goal__():
    body:
        if exists couch: item : is_couch_sittable(couch):
            # If a couch has not been visited and is sittable, approach it
            bind couch: item where:
                is_couch_sittable(couch)
            achieve close_char(char, couch)
            sit_somewhere(couch)

        else:
            # Check all unvisited couches in the scene
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if the couch is sittable")

##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)sit_executor(couch_352)
##############################
From agent.py
walk_executor(couch_352)
Find mat_401. Find remote_control_2052. Find clothes_jacket_2047. Find cat_2055. Find pillow_405. Find drawing_400. Find pillow_406. Find hairbrush_2002. Find vacuum_cleaner_2070. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is no longer inside bathroom_1.
##############################
From agent.py
sit_executor(couch_352)
Find headset_2062. Find hanger_363. Find hanger_374. Find drawing_404. Find keyboard_415. Find headset_2076. Find hanger_369. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find chair_356. Find book_2066. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance
        
        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, television)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, tv)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. turn on the tv using the remote control." ?
Answer: You can turn on the TV by touching the remote control.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV using the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, tv)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_phone_2077(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2077
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, television)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV by touching the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve_once inhand(remote_control)
        # Hold the remote control temporarily

        touch(remote_control)
        # Use the remote control to turn on the TV

        achieve is_on(tv)
        # Ensure the TV is switched on

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve close_char(char, tv)
        # Position character close to the television

        turn_on_tv(tv, remote_control)
        # Execute the behavior to turn on the TV

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_phone_2077(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2077
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_cd_player_2060_around_closetdrawer_116(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(cd_player,closetdrawer_instance)
        else:
            exp(cd_player,closetdrawer_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,closetdrawer_instance]=True
        close[closetdrawer_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select an instance of a remote control

        bind television: item where:
            is_television(television)
        # Select the television instance
        
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select an instance of a remote control

        bind television: item where:
            is_television(television)
        # Select the television instance
        
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(remote_control_2052)grab_executor(remote_control_2052)touch_executor(remote_control_2052)standup_executor(char)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
From agent.py
walk_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Robot is no longer close mat_401.Robot is no longer facing television_410.
##############################
From agent.py
grab_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Grabbing remote_control_2052 by right hand. 
##############################
From agent.py
touch_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(remote_control:item, television:item):
    body:
        achieve close_char(char, television)
        # Ensure you are close to the TV

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the TV

        achieve is_on(television)
        # Ensure the TV is switched on

behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        turn_on_tv_with_remote(remote_control, television)
        # Execute the behavior to turn on the TV with the remote

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve close_char(char, tv)
        # Ensure you are close to the television

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "turn on the tv by touching the remote control." ?
Answer: You can turn on the TV by touching the remote control.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, tv)
        # Ensure you are close to the TV

        touch(remote_control)
        # Use the remote control to turn on the TV

        achieve is_on(tv)
        # Ensure the TV is switched on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_tvstand_353(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2052
        # Select the remote control with ID 2052

        bind television: item where:
            is_television(television)
        # Select the television instance 

        achieve close_char(char, remote_control)
        # Move close to the remote control
        
        achieve_once inhand(remote_control)
        # Hold the remote control once
        
        touch(remote_control)
        # Touch the remote control to turn on the TV
        
        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV by touching the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_2077_around_phone_2077(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind phone_instance:item where:
            is_phone(phone_instance) and id[phone_instance]==2077
        achieve close_char(char,phone_instance)
        if can_open(phone_instance):
            achieve_once open(phone_instance)
            exp(phone,phone_instance)
        else:
            exp(phone,phone_instance)
    eff:
        unknown[phone]=False
        close[phone,phone_instance]=True
        close[phone_instance,phone]=True
    

behavior find_cd_player_2060_around_tvstand_353(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2052
        # Select the remote control with ID 2052

        bind tv: item where:
            is_television(tv)
        # Select the television

        achieve_close_to remote_control      
        # Ensure you are close to the remote control

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the TV
        
        achieve_once is_on(tv)
        # Ensure the TV is switched on

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'remote_control') at line 5972, column 26.
Expected one of: 
	* OR
	* MINUS
	* EQUAL
	* __ANON_5
	* __ANON_7
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* FLOORDIV
	* __ANON_2
	* GREATER_EQ
	* LESS_EQ
	* __ANON_6
	* AMPERSAND
	* __ANON_4
	* COMMA
	* SEMICOLON
	* LESSTHAN
	* MORETHAN
	* NOT_EQ
	* RSHIFT
	* AND
	* __ANON_3
	* __ANON_0
	* VBAR
	* __ANON_1
	* _NEWLINE
	* AT
	* PERCENT
	* STAR
	* PLUS
	* __ANON_8
	* IF
	* LSHIFT
	* SLASH

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_phone_247_around_nightstand_102(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_cd_player_2060_around_dvd_player_2061(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2061
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(cd_player,dvd_player_instance)
        else:
            exp(cd_player,dvd_player_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,dvd_player_instance]=True
        close[dvd_player_instance,cd_player]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2052
        # Select the remote control with ID 2052

        bind tv: item where:
            is_television(tv)
        # Select the television

        achieve close_char(char, remote_control)
        # Ensure you are close to the remote control

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the TV
        
        achieve is_on(tv)
        # Ensure the TV is switched on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_tvstand_353(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==353
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cd_player,tvstand_instance)
        else:
            exp(cd_player,tvstand_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,tvstand_instance]=True
        close[tvstand_instance,cd_player]=True
    

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, television)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "turn on the tv by touching the remote control." ?
Answer: First, sit on the couch before attempting to turn on the TV with the remote control.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_cpuscreen_171(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(phone,cpuscreen_instance)
        else:
            exp(phone,cpuscreen_instance)
    eff:
        unknown[phone]=False
        close[phone,cpuscreen_instance]=True
        close[cpuscreen_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve close_char(char, television)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve close_char(char, television)
        # Ensure you are close to the television

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the couch with ID 352

        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control) and visited(remote_control)
        # Select the visited remote control instance

        sit_somewhere(couch)
        # Sit on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, tv)
        # Ensure you are sitting close to the television

        touch(remote_control)
        # Use the remote control to turn on the TV

        achieve is_on(tv)
        # Ensure the television is switched on
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_247_around_nightstand_102(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(phone,nightstand_instance)
        else:
            exp(phone,nightstand_instance)
    eff:
        unknown[phone]=False
        close[phone,nightstand_instance]=True
        close[nightstand_instance,phone]=True
    

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve on_char(char, couch_352)
        # Ensure you are sitting on the couch

        achieve close_char(char, tv)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: couch_352; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cd_player_2060_around_wallshelf_235(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cd_player,wallshelf_instance)
        else:
            exp(cd_player,wallshelf_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,wallshelf_instance]=True
        close[wallshelf_instance,cd_player]=True
    

behavior find_wall_clock_249_around_wallshelf_235(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with a specific ID

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve on_char(char, couch)
        # Ensure you are sitting on the couch

        achieve close_char(char, tv)
        # Ensure you are close to the television

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2052
        # Select the remote control with ID 2052

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve on_char(char, couch)
        # Ensure the character is sitting on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2052
        # Select the remote control with ID 2052

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve on_char(char, couch)
        # Ensure the character is sitting on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

##############################
From agent.py-> find a plan in act()
touch_executor(remote_control_2052)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
touch_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. 
##############################
From agent.py
walk_executor(television_248)
Find mat_236. Find drawing_241. Find drawing_242. Find drawing_243. Find phone_247. Find cd_2075. Find cd_player_2060. Find wall_clock_249. Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. Robot is no longer inside home_office_319.Robot is no longer close couch_352.
##############################
From agent.py
switchon_executor(television_248)
Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. 
##############################
