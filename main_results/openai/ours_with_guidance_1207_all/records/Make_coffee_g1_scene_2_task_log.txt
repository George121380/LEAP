From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_and_coffee_filter_inside(coffee_maker: item):
    # Function to check if the coffee_maker has both water and a coffee filter
    symbol has_necessary_items=exists water: item: has_water(water) and inside(water, coffee_maker)
    return has_necessary_items and exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker)

def coffee_maker_is_ready(coffee_maker: item):
    # Function to check if the coffee_maker is ready to make coffee
    return is_on(coffee_maker) and has_water_and_coffee_filter_inside(coffee_maker)

behavior load_coffee_maker_with_water(coffee_maker: item, sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet

        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior load_coffee_maker_with_filter(coffee_maker: item, filter: item):
    body:
        achieve inside(filter, coffee_maker)
        # Ensure the coffee filter is placed inside the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        if not has_water_and_coffee_filter_inside(coffee_maker):
            # If the coffee maker doesnt have water or a filter, load them
            bind sink: item where:
                is_sink(sink)
            # Select an instance of a sink

            if not exists water: item: has_water(water) and inside(water, coffee_maker):
                # If the coffee maker does not have water
                load_coffee_maker_with_water(coffee_maker, sink)

            if not exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker):
                # If the coffee maker does not have a filter
                bind filter: item where:
                    is_coffee_filter(filter)
                # Select the coffee filter instance
                load_coffee_maker_with_filter(coffee_maker, filter)

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to brew coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'filter') at line 5866, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

behavior find_cup_2088_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

#goal_representation
 
def has_water_and_coffee_filter_inside(coffee_maker: item):
    # Function to check if the coffee_maker has both water and a coffee filter
    symbol has_necessary_items=exists water: item: has_water(water) and inside(water, coffee_maker)
    return has_necessary_items and exists f: item: is_coffee_filter(f) and inside(f, coffee_maker)

def coffee_maker_is_ready(coffee_maker: item):
    # Function to check if the coffee_maker is ready to make coffee
    return is_on(coffee_maker) and has_water_and_coffee_filter_inside(coffee_maker)

behavior load_coffee_maker_with_water(coffee_maker: item, sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet

        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior load_coffee_maker_with_filter(coffee_maker: item, filter: item):
    body:
        achieve inside(filter, coffee_maker)
        # Ensure the coffee filter is placed inside the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        if not has_water_and_coffee_filter_inside(coffee_maker):
            # If the coffee maker doesnt have water or a filter, load them
            bind sink: item where:
                is_sink(sink)
            # Select an instance of a sink

            if not exists water: item: has_water(water) and inside(water, coffee_maker):
                # If the coffee maker does not have water
                load_coffee_maker_with_water(coffee_maker, sink)

            if not exists f: item: is_coffee_filter(f) and inside(f, coffee_maker):
                # If the coffee maker does not have a filter
                bind filter: item where:
                    is_coffee_filter(filter)
                # Select the coffee filter instance
                load_coffee_maker_with_filter(coffee_maker, filter)

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to brew coffee

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'f') at line 5902, column 43.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#goal_representation
 
def has_water_and_coffee_filter_inside(coffee_maker: item):
    # Function to check if the coffee_maker has both water and a coffee filter
    symbol has_necessary_items = exists water: item: has_water(water) and inside(water, coffee_maker)
    return has_necessary_items and exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker)

def coffee_maker_is_ready(coffee_maker: item):
    # Function to check if the coffee_maker is ready to make coffee
    return is_on(coffee_maker) and has_water_and_coffee_filter_inside(coffee_maker)

behavior load_coffee_maker_with_water(coffee_maker: item, sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet

        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet

behavior load_coffee_maker_with_filter(coffee_maker: item, filter: item):
    body:
        achieve inside(filter, coffee_maker)
        # Ensure the coffee filter is placed inside the coffee maker

behavior start_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        if not has_water_and_coffee_filter_inside(coffee_maker):
            # If the coffee maker doesnt have water or a filter, load them
            bind sink: item where:
                is_sink(sink)
            # Select an instance of a sink

            if not exists water: item: has_water(water) and inside(water, coffee_maker):
                # If the coffee maker does not have water
                load_coffee_maker_with_water(coffee_maker, sink)

            if not exists filter: item: is_coffee_filter(filter) and inside(filter, coffee_maker):
                # If the coffee maker does not have a filter
                bind filter: item where:
                    is_coffee_filter(filter)
                # Select the coffee filter instance
                load_coffee_maker_with_filter(coffee_maker, filter)

        start_coffee_maker(coffee_maker)
        # Start the coffee maker to brew coffee

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_table_127(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(cup,table_instance)
        else:
            exp(cup,table_instance)
    eff:
        unknown[cup]=False
        close[cup,table_instance]=True
        close[table_instance,cup]=True
    

behavior find_coffee_filter_2035_around_kitchen_counter_129(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve has_water(cup)
        # Ensure the cup is filled with coffee once brewed

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup)
        # Select the cup instance

        make_coffee(coffee_maker, cup)
        # Execute the behavior to make coffee using the coffee maker
#goal_representation_end

##############################
From agent.py->reset_goal
behavior make_coffee(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in
        
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve has_water(cup)
        # Ensure the cup is filled with coffee once brewed

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup)
        # Select the cup instance

        make_coffee(coffee_maker, cup)
        # Execute the behavior to make coffee using the coffee maker
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_147)switchon_executor(coffe_maker_147)walk_executor(table_127)exp(cup_2087, table_127)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(coffe_maker_147)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer inside home_office_161.
##############################
From agent.py
switchon_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. 
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find drawing_118. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer close kitchen_counter_129.Robot is no longer close coffe_maker_147.
##############################
From agent.py
exp(cup_2087, table_127)
Fail to find cup_2087 around table_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(cup_2087, table_123)walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close mat_115.Robot is no longer close floor_20.Robot is no longer close table_127.
##############################
From agent.py
exp(cup_2087, table_123)
Find cup_2087. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2087)grab_executor(cup_2087)walk_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
walk_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(cup_2087)
Robot is inside dining_room_1. Robot is close table_123. Robot is close cup_2087. Grabbing cup_2087 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close table_123.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker has water, which hasn't been achieved yet. Additionally, the coffee needs to be brewed and poured into cup_2087, but these steps have not been accomplished in the current actions.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to table_127.
Action 4: look for cup_2087 around table_127.
Action 5: Walk to table_123.
Action 6: look for cup_2087 around table_123.
Action 7: Walk to cup_2087.
Action 8: Grab cup_2087.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_wallshelf_191(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==191
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(cup,wallshelf_instance)
        else:
            exp(cup,wallshelf_instance)
    eff:
        unknown[cup]=False
        close[cup,wallshelf_instance]=True
        close[wallshelf_instance,cup]=True
    

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

#exp_behavior_end

#goal_representation
behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        bind faucet: item where:
            is_faucet(faucet)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the coffee maker with water
        
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the coffee maker

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to start brewing coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Pour brewed coffee into the cup ensuring the cup now contains coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, coffee_maker)
        # Select a faucet close to the coffee maker

        fill_coffee_maker_with_water(coffee_maker, faucet)
        # Fill the coffee maker with water using a nearby faucet

        brew_coffee(coffee_maker)
        # Brew coffee using the filled coffee maker

        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the brewed coffee into the cup
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable faucet already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2087_around_light_325(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==325
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(cup,light_instance)
        else:
            exp(cup,light_instance)
    eff:
        unknown[cup]=False
        close[cup,light_instance]=True
        close[light_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the coffee maker with water
        
        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the coffee maker

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on to start brewing coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Pour brewed coffee into the cup ensuring the cup now contains coffee

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, coffee_maker)
        # Select a faucet close to the coffee maker

        fill_coffee_maker_with_water(coffee_maker, faucet)
        # Fill the coffee maker with water using a nearby faucet

        brew_coffee(coffee_maker)
        # Brew coffee using the filled coffee maker

        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the brewed coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=has_water(coffee_maker)
    return has_water

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        if not has_water_coffee_maker(coffee_maker):
            achieve close_char(char, faucet)
            # Ensure you are close to the faucet

            bind faucet: item where:
                is_faucet(faucet)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the coffee maker with water

            achieve has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the brewed coffee is poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if not has_water_coffee_maker(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
        
        brew_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable faucet already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2006_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def has_water_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=has_water(coffee_maker)
    return has_water

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        if not has_water_coffee_maker(coffee_maker):
            achieve close_char(char, faucet)
            # Ensure you are close to the faucet

            achieve_once is_on(faucet)
            # Turn on the faucet to fill the coffee maker with water

            achieve has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the brewed coffee is poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if not has_water_coffee_maker(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
        
        brew_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

def has_water_coffee_maker(coffee_maker:item):
    # Function to check if the coffee maker has water
    symbol has_water=has_water(coffee_maker)
    return has_water

behavior fill_coffee_maker_with_water(coffee_maker:item, faucet:item):
    body:
        if not has_water_coffee_maker(coffee_maker):
            achieve close_char(char, faucet)
            # Ensure you are close to the faucet

            achieve_once is_on(faucet)
            # Turn on the faucet to fill the coffee maker with water

            achieve has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

            achieve_once is_off(faucet)
            # Turn off the faucet after filling

behavior brew_coffee(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on to brew coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Ensure the brewed coffee is poured into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147
        
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet with ID 134

        bind cup: item where:
            is_cup(cup) and id[cup] == 2087
        # Select the cup with ID 2087

        if not has_water_coffee_maker(coffee_maker):
            fill_coffee_maker_with_water(coffee_maker, faucet)
        
        brew_coffee(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)switchoff_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
Human Instruction: You need to ensure that the coffee maker has water. Additionally, brew the coffee using the coffee maker and pour the brewed coffee into cup_2087.

The actions you have taken:
Action 1: Walk to coffe_maker_147.
Action 2: Switch on coffe_maker_147.
Action 3: Walk to table_127.
Action 4: look for cup_2087 around table_127.
Action 5: Walk to table_123.
Action 6: look for cup_2087 around table_123.
Action 7: Walk to cup_2087.
Action 8: Grab cup_2087.
Action 9: Walk to faucet_134.
Action 10: Switch off faucet_134.
Action 11: Switch on faucet_134.
Action 12: Switch off faucet_134.
Action 13: Switch on faucet_134.
Action 14: Switch off faucet_134.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2088_around_cup_2088(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cup_instance:item where:
            is_cup(cup_instance) and id[cup_instance]==2088
        achieve close_char(char,cup_instance)
        if can_open(cup_instance):
            achieve_once open(cup_instance)
            exp(cup,cup_instance)
        else:
            exp(cup,cup_instance)
    eff:
        unknown[cup]=False
        close[cup,cup_instance]=True
        close[cup_instance,cup]=True
    

behavior find_cup_2006_around_tvstand_135(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(cup,tvstand_instance)
        else:
            exp(cup,tvstand_instance)
    eff:
        unknown[cup]=False
        close[cup,tvstand_instance]=True
        close[tvstand_instance,cup]=True
    

behavior find_tea_bag_2017_around_cupboard_131(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(tea_bag,cupboard_instance)
        else:
            exp(tea_bag,cupboard_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,cupboard_instance]=True
        close[cupboard_instance,tea_bag]=True
    

behavior find_coffee_filter_2035_around_cupboard_131(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior ensure_coffee_maker_has_water(coffee_maker:item, sink:item):
    body:
        if not has_water(coffee_maker):
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                # If the sink has a faucet, turn it on to fill the coffee maker

            achieve has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the coffee maker

behavior brew_coffee_with_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on and brewing coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Once coffee is brewed, fill the cup with it

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the specified table

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        ensure_coffee_maker_has_water(coffee_maker, sink)
        brew_coffee_with_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)
        place_cup_on_table(cup, coffee_maker)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior ensure_coffee_maker_has_water(coffee_maker:item, sink:item):
    body:
        if not has_water(coffee_maker):
            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_on(faucet)
                # If the sink has a faucet, turn it on to fill the coffee maker

            achieve has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

            if has_faucet(sink):
                bind faucet: item where:
                    is_faucet(faucet) and close(faucet,sink)
                achieve_once is_off(faucet)
                # Turn off the faucet after filling the coffee maker

behavior brew_coffee_with_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is on and brewing coffee

behavior pour_coffee_into_cup(coffee_maker:item, cup:item):
    body:
        achieve has_water(cup)
        # Once coffee is brewed, fill the cup with it

behavior place_cup_on_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup on the specified table

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker]==147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        ensure_coffee_maker_has_water(coffee_maker, sink)
        brew_coffee_with_coffee_maker(coffee_maker)
        pour_coffee_into_cup(coffee_maker, cup)
        place_cup_on_table(cup, coffee_maker)

##############################
From agent.py-> find a plan in act()
switchon_executor(faucet_134)walk_executor(coffe_maker_147)put_executor(cup_2087, coffe_maker_147)
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(cup_2087, coffe_maker_147)
Robot is inside dining_room_1. Robot is close cup_2087. Robot is close kitchen_counter_129. Robot is close coffe_maker_147. cup_2087 released by right hand. 
##############################
