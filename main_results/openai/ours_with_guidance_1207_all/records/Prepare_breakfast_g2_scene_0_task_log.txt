From agent.py
Reset goals: The sub-goals are: 
['Scramble an egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_fryingpan_2083_around_kitchen_counter_230(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
def has_fryingpan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_fryingpan=exists fryingpan: item : is_fryingpan(fryingpan) and on(fryingpan, stove)
    return has_fryingpan

def has_egg_on_fryingpan(fryingpan:item):
    # Function to check if there is an egg on the frying pan
    symbol has_egg=exists egg: item : is_food_egg(egg) and on(egg, fryingpan)
    return has_egg

behavior crack_egg_on_fryingpan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Place the cracked egg on the frying pan

behavior cook_egg(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan instance

        if not has_fryingpan_on_stove(stove):
            crack_egg_on_fryingpan(egg, fryingpan)
            # Crack the egg on the frying pan

        if not has_egg_on_fryingpan(fryingpan):
            crack_egg_on_fryingpan(egg, fryingpan)

        cook_egg(fryingpan, stove)
        # Cook the egg on the stove using the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_fryingpan_on_stove(stove:item):
    # Function to check if there is a frying pan on the stove
    symbol has_fryingpan=exists fryingpan: item : is_fryingpan(fryingpan) and on(fryingpan, stove)
    return has_fryingpan

def has_egg_on_fryingpan(fryingpan:item):
    # Function to check if there is an egg on the frying pan
    symbol has_egg=exists egg: item : is_food_egg(egg) and on(egg, fryingpan)
    return has_egg

behavior crack_egg_on_fryingpan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Place the cracked egg on the frying pan

behavior cook_egg(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the egg

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan instance

        if not has_fryingpan_on_stove(stove):
            crack_egg_on_fryingpan(egg, fryingpan)
            # Crack the egg on the frying pan

        if not has_egg_on_fryingpan(fryingpan):
            crack_egg_on_fryingpan(egg, fryingpan)

        cook_egg(fryingpan, stove)
        # Cook the egg on the stove using the frying pan

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(fryingpan_2083, kitchen_counter_230)walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(fryingpan_2083, kitchen_counter_230)
Find fryingpan_2083. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_egg_2020, fridge_289)walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_egg_2020, fridge_289)
Find food_egg_2020. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)grab_executor(fryingpan_2083)walk_executor(stove_2065)put_executor(fryingpan_2083, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. food_egg_2020 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Grabbing fryingpan_2083 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is close stove_2065. Robot is no longer close food_egg_2020.
##############################
From agent.py
put_executor(fryingpan_2083, stove_2065)
Robot is inside dining_room_201. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is close stove_2065. fryingpan_2083 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close fryingpan_2083. Robot is close kitchen_counter_230. Robot is close stove_2065. 
##############################
From agent.py
Human Instruction: You have put the egg onto the frying pan and placed the frying pan on the stove, turning the stove on. However, you have not explicitly cracked the egg, which is necessary to scramble it. Ensure the egg is cracked and scrambled on the frying pan.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def has_egg_on_fryingpan(fryingpan:item):
    # Function to check if there is an egg on the specified frying pan
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, fryingpan)
    return has_egg

behavior crack_and_scramble_egg(egg:item, fryingpan:item):
    body:
        achieve close_char(char, fryingpan)
        # Ensure you are close to the frying pan

        achieve_once inhand(egg)
        # Temporarily hold the egg to crack it

        symbol cracked_egg=achieve cut(egg)
        # Crack the egg A cracked egg is treated as a cut item in this context

        if cracked_egg:
            achieve is_food(egg)
            # Ensure the egg remains classified as food after cracking

        achieve on(egg, fryingpan)
        # Place the cracked egg on the frying pan

        achieve cut(egg)
        # Scramble the egg on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind egg: item where:
            is_food_egg(egg) and not has_egg_on_fryingpan(fryingpan)
        # Select the egg not already on the frying pan

        crack_and_scramble_egg(egg, fryingpan)
        # Execute the behavior to crack and scramble the egg on the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'cut') at line 6009, column 36.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_headset_2076_around_closetdrawer_116(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#goal_representation
 
def has_egg_on_fryingpan(fryingpan:item):
    # Function to check if there is an egg on the specified frying pan
    symbol has_egg=exists o: item : is_food_egg(o) and on(o, fryingpan)
    return has_egg

behavior crack_and_scramble_egg(egg:item, fryingpan:item):
    body:
        achieve close_char(char, fryingpan)
        # Ensure you are close to the frying pan

        achieve_once inhand(egg)
        # Temporarily hold the egg to crack it

        achieve cut(egg)
        # Crack the egg

        achieve on(egg, fryingpan)
        # Place the cracked egg on the frying pan

        achieve cut(egg)
        # Scramble the egg on the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind egg: item where:
            is_food_egg(egg) and not has_egg_on_fryingpan(fryingpan)
        # Select the egg not already on the frying pan

        crack_and_scramble_egg(egg, fryingpan)
        # Execute the behavior to crack and scramble the egg on the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def egg_is_cracked(egg:item, fryingpan:item):
    # Determine whether the egg has been cracked and is in the frying pan
    symbol egg_cracked=exists e: item : is_food_egg(e) and on(e, fryingpan) and cut(e)
    return egg_cracked

behavior crack_egg(fryingpan:item, egg:item):
    body:
        achieve_once inhand(egg)
        # Temporarily hold the egg

        achieve cut(egg)
        # Ensure the egg is cracked

        achieve on(egg, fryingpan)
        # Move the cracked egg onto the frying pan

behavior scramble_egg(fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Ensure the fryingpan is in use for scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)

        bind egg: item where:
            is_food_egg(egg)

        if not egg_is_cracked(egg, fryingpan):
            crack_egg(fryingpan, egg)
            # Crack the egg onto the frying pan
        
        scramble_egg(fryingpan)
        # Scramble the egg using the frying pan

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "scramble an egg using the frying pan." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_egg_cracked(egg:item):
    # Function to check if an egg is cracked
    return cut(egg)

behavior crack_egg(egg:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cracked

behavior scramble_egg_on_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is on the frying pan
        achieve cut(egg)
        # Ensure the egg is cracked, to scramble it

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan to use
        
        if not is_egg_cracked(egg):
            crack_egg(egg)
        scramble_egg_on_pan(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_egg_cracked(egg:item):
    # Function to check if an egg is cracked
    return cut(egg)

behavior crack_egg(egg:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cracked

behavior scramble_egg_on_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is on the frying pan
        achieve cut(egg)
        # Ensure the egg is cracked, to scramble it

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan to use
        
        if not is_egg_cracked(egg):
            crack_egg(egg)
        scramble_egg_on_pan(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(cutting_board_2051)put_executor(food_egg_2020, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_egg_2020)cut_executor(food_egg_2020)grab_executor(food_egg_2020)walk_executor(fryingpan_2083)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
walk_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close fryingpan_2083. Robot is close food_egg_2020. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close fryingpan_2083. Robot is close food_egg_2020. Grabbing food_egg_2020 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer close fryingpan_2083.
##############################
From agent.py
put_executor(food_egg_2020, cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_egg_2020. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. food_egg_2020 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close cutting_board_2051.Robot is no longer close food_egg_2020.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_egg_2020. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_egg_2020. 
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_egg_2020. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
walk_executor(fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Robot is no longer close cutting_board_2051.
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: You need to ensure that the egg is properly scrambled in the frying pan. Although the egg was cut, putting the cut pieces back on the frying pan with the stove on doesn't complete the scrambling process. You should include a step to scramble the egg contents in the frying pan.

Human Guidance: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_headset_2062_around_closetdrawer_116(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(headset,closetdrawer_instance)
        else:
            exp(headset,closetdrawer_instance)
    eff:
        unknown[headset]=False
        close[headset,closetdrawer_instance]=True
        close[closetdrawer_instance,headset]=True
    

#exp_behavior_end

#goal_representation
 
behavior ensure_egg_scrambled(fryingpan:item):
    body:
        achieve cut(food_egg_2020)
        # Ensure the egg is cut
        achieve on(food_egg_2020, fryingpan)
        # Place the cut egg back on the fryingpan

behavior scramble_egg(fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Ensure the fryingpan is dirty through scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan instance

        ensure_egg_scrambled(fryingpan)
        scramble_egg(fryingpan)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: food_egg_2020; available variables: [Variable<fryingpan: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_mat_401_around_oil_2079(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2079
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(mat,oil_instance)
        else:
            exp(mat,oil_instance)
    eff:
        unknown[mat]=False
        close[mat,oil_instance]=True
        close[oil_instance,mat]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_160(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#goal_representation
 
behavior ensure_egg_scrambled(fryingpan:item, egg:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cut
        achieve on(egg, fryingpan)
        # Place the cut egg back on the fryingpan

behavior scramble_egg(fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Ensure the fryingpan is dirty through scrambling

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        ensure_egg_scrambled(fryingpan, egg)
        scramble_egg(fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(egg:item, fryingpan:item):
    body:
        achieve cut(egg)
        # The egg must be cut before scrambling

        achieve inside(egg, fryingpan)
        # Place the egg into the fryingpan

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select an instance of a fryingpan

        achieve is_on(fryingpan)
        # Ensure the fryingpan is on to scramble the egg

        scramble_egg(egg, fryingpan)
        # Execute the behavior to scramble the egg using the fryingpan

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "scramble an egg using the frying pan." ?
Answer: Put the pan on the stove. Turn on the stove. Put oil in the pan. Put the egg in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Put the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_pan_on_stove(pan, stove)
        # Execute the behavior to put the pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        achieve on(fryingpan, stove)
        # Ensure the frying pan is placed on the stove
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the pan on the stove.', '2. Turn on the stove.', '3. Put oil in the pan.', '4. Put the egg in the pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

behavior find_fork_2081_around_cupboard_229(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_fryingpan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select a stove instance
        
        place_fryingpan_on_stove(fryingpan, stove)
        # Execute the behavior to place the frying pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_clothes_scarf_2048_around_closetdrawer_116(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(clothes_scarf,closetdrawer_instance)
        else:
            exp(clothes_scarf,closetdrawer_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,closetdrawer_instance]=True
        close[closetdrawer_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        achieve on(fryingpan, stove)
        # Ensure the fryingpan is on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. put the pan on the stove." ?
Answer: Place the pan on the stove securely.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        place_pan_on_stove(fryingpan, stove)
        # Execute the behavior to place the pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Ensure the pan is placed on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        place_pan_on_stove(fryingpan, stove)
        # Execute the behavior to place the frying pan on the stove

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the pan on the stove securely, then scramble the egg using the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_mat_401_around_mousepad_414(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mousepad_instance:item where:
            is_mousepad(mousepad_instance) and id[mousepad_instance]==414
        achieve close_char(char,mousepad_instance)
        if can_open(mousepad_instance):
            achieve_once open(mousepad_instance)
            exp(mat,mousepad_instance)
        else:
            exp(mat,mousepad_instance)
    eff:
        unknown[mat]=False
        close[mat,mousepad_instance]=True
        close[mousepad_instance,mat]=True
    

behavior find_towel_2056_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Securely place the pan on the stove

behavior scramble_egg_in_pan(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan)
        # Ensure the egg is placed in the pan
        achieve is_on(stove)
        # Ensure the stove is on to scramble the egg
        # Note: The action of scrambling is implied through this behavior

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg instance

        place_pan_on_stove(fryingpan, stove)
        # Secure the frying pan on the stove

        scramble_egg_in_pan(egg, fryingpan, stove)
        # Scramble the egg using the frying pan

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Securely place the pan on the stove

behavior scramble_egg_in_pan(egg:item, pan:item, stove:item):
    body:
        achieve inside(egg, pan)
        # Ensure the egg is placed in the pan
        achieve is_on(stove)
        # Ensure the stove is on to scramble the egg
        # Note: The action of scrambling is implied through this behavior

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg) and cut(egg)
        # Select the cut egg instance

        place_pan_on_stove(fryingpan, stove)
        # Secure the frying pan on the stove

        scramble_egg_in_pan(egg, fryingpan, stove)
        # Scramble the egg using the frying pan

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: The robot needs to actually scramble the egg in the frying pan on the stove. Although the egg has been placed in the pan and the stove is on, the action of scrambling the egg must still be carried out.

Human Guidance: Place the pan on the stove securely.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.
Action 25: Grab food_egg_2020.
Action 26: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_mat_22_around_mat_22(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind mat_instance:item where:
            is_mat(mat_instance) and id[mat_instance]==22
        achieve close_char(char,mat_instance)
        if can_open(mat_instance):
            achieve_once open(mat_instance)
            exp(mat,mat_instance)
        else:
            exp(mat,mat_instance)
    eff:
        unknown[mat]=False
        close[mat,mat_instance]=True
        close[mat_instance,mat]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior secure_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Ensure the pan is securely placed on the stove

behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan that is on the stove

        bind egg: item where:
            is_food_egg(egg) and close(egg, fryingpan)
        # Select the egg close to the frying pan

        secure_pan_on_stove(fryingpan, stove)
        # Secure the pan on the stove

        scramble_egg_in_pan(egg, fryingpan)
        # Scramble the egg in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior scramble_egg_in_fryingpan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Ensuring the egg is properly scrambled

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove

        bind pan: item where:
            is_fryingpan(pan) and on(pan, stove)
        # Select the frying pan currently on the stove

        bind egg: item where:
            is_food_egg(egg) and inside(egg, pan)
        # Select the egg already in the frying pan

        place_pan_on_stove(pan, stove)
        scramble_egg_in_fryingpan(egg, pan)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the pan on the stove securely, then scramble the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior scramble_egg_in_pan(egg:item, pan:item, stove:item):
    body:
        achieve on(egg, pan)
        achieve is_on(stove)
        achieve cut(egg)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        place_pan_on_stove(pan, stove)
        scramble_egg_in_pan(egg, pan, stove)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior scramble_egg_in_pan(egg:item, pan:item, stove:item):
    body:
        achieve on(egg, pan)
        achieve is_on(stove)
        achieve cut(egg)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        place_pan_on_stove(pan, stove)
        scramble_egg_in_pan(egg, pan, stove)
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: You need to actually scramble the egg in the frying pan on the stove, as the action of scrambling has not been carried out yet.

Human Guidance: Place the pan on the stove securely.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.
Action 25: Grab food_egg_2020.
Action 26: Put food_egg_2020 into fryingpan_2083.
Action 27: Grab food_egg_2020.
Action 28: Put food_egg_2020 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2058_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove_correctly(fryingpan:item, stove:item):
    # Function to check if a frying pan is correctly placed on a stove
    return on(fryingpan, stove)

behavior securely_place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is placed on the stove

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select a stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg instance

        securely_place_pan_on_stove(fryingpan, stove)
        # Securely place the pan on the stove

        scramble_egg_in_pan(egg, fryingpan)
        # Scramble the egg in the pan on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fryingpan_on_stove_correctly(fryingpan:item, stove:item):
    # Function to check if a frying pan is correctly placed on a stove
    return on(fryingpan, stove)

behavior securely_place_pan_on_stove(fryingpan:item, stove:item):
    body:
        achieve on(fryingpan, stove)
        # Ensure the frying pan is placed on the stove

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select a stove instance

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg instance

        securely_place_pan_on_stove(fryingpan, stove)
        # Securely place the pan on the stove

        scramble_egg_in_pan(egg, fryingpan)
        # Scramble the egg in the pan on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: The egg is repeatedly being placed into the frying pan, but the actual action of scrambling the egg in the pan, while it is on the stove, has not been carried out. You need to perform the action of scrambling the egg within the frying pan on the stove.

Human Guidance: Place the pan on the stove securely.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.
Action 25: Grab food_egg_2020.
Action 26: Put food_egg_2020 into fryingpan_2083.
Action 27: Grab food_egg_2020.
Action 28: Put food_egg_2020 on fryingpan_2083.
Action 29: Grab food_egg_2020.
Action 30: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def is_fryingpan_on_stove_securely(fryingpan:item, stove:item):
    # Function to check if a frying pan is securely on the stove
    return on(fryingpan, stove)

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        if is_fryingpan_on_stove_securely(fryingpan, stove):
            scramble_egg_in_pan(egg, fryingpan)
            # Scramble the egg in the frying pan

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Place the pan on the stove securely

behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cut

        achieve inside(egg, pan)
        # Scramble the egg within the pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        place_pan_on_stove(pan, stove)
        scramble_egg_in_pan(egg, pan)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the pan securely on the stove and scramble the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_closetdrawer_116(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(spectacles,closetdrawer_instance)
        else:
            exp(spectacles,closetdrawer_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,closetdrawer_instance]=True
        close[closetdrawer_instance,spectacles]=True
    

behavior find_towel_2056_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_fork_2081_around_closetdrawer_120(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==120
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Ensure the frying pan is placed securely on the stove

behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled in the pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with ID 2083

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the egg with ID 2020

        place_pan_on_stove(fryingpan, stove)
        scramble_egg_in_pan(egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

behavior find_plate_1000_around_cupboard_229(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(plate,cupboard_instance)
        else:
            exp(plate,cupboard_instance)
    eff:
        unknown[plate]=False
        close[plate,cupboard_instance]=True
        close[cupboard_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg(fryingpan:item, food_egg:item, stove:item):
    body:
        achieve on(food_egg, fryingpan)
        # Ensure the egg is on the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on

        achieve cut(food_egg)
        # Scramble the egg by cutting it in the frying pan

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2083
        # Select the frying pan with id 2083

        bind food_egg: item where:
            is_food_egg(food_egg) and on(food_egg, fryingpan)
        # Select the egg that is on the frying pan

        bind stove: item where:
            is_stove(stove) and id[stove] == 2065
        # Select the stove with id 2065

        scramble_egg(fryingpan, food_egg, stove)
        # Execute the behavior to place the pan on the stove and scramble the egg

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the pan on the stove securely to scramble the egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_wallshelf_235(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==235
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(spectacles,wallshelf_instance)
        else:
            exp(spectacles,wallshelf_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,wallshelf_instance]=True
        close[wallshelf_instance,spectacles]=True
    

behavior find_fork_2080_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove(pan:item, stove:item):
    body:
        achieve close_char(char, stove)
        # Ensure you are close to the stove
        achieve on(pan, stove)
        # Place the frying pan securely on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan]==2083
        # Select the frying pan with ID 2083

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        place_pan_on_stove(fryingpan, stove)
        # Execute the behavior to place the frying pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
behavior place_pan_on_stove_securely(pan:item, stove:item):
    body:
        achieve on(pan, stove)
        # Ensure the pan is securely placed on the stove

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        place_pan_on_stove_securely(fryingpan, stove)
        # Securely place the frying pan on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Place the pan on the stove securely and scramble the egg by the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2067_around_bookshelf_233(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==233
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_spectacles_2082_around_nightstand_102(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==102
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(spectacles,nightstand_instance)
        else:
            exp(spectacles,nightstand_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,nightstand_instance]=True
        close[nightstand_instance,spectacles]=True
    

behavior find_mat_401_around_ceilinglamp_26(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind ceilinglamp_instance:item where:
            is_ceilinglamp(ceilinglamp_instance) and id[ceilinglamp_instance]==26
        achieve close_char(char,ceilinglamp_instance)
        if can_open(ceilinglamp_instance):
            achieve_once open(ceilinglamp_instance)
            exp(mat,ceilinglamp_instance)
        else:
            exp(mat,ceilinglamp_instance)
    eff:
        unknown[mat]=False
        close[mat,ceilinglamp_instance]=True
        close[ceilinglamp_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def has_correctly_placed_pan(stove:item, fryingpan:item):
    # Check if the frying pan is correctly placed on the stove
    symbol correct_placement=on(fryingpan, stove)
    return correct_placement

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cut before scrambling

        achieve on(egg, fryingpan)
        # Ensure the egg is placed inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on for scrambling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        if has_correctly_placed_pan(stove, fryingpan):
            achieve on(fryingpan, stove)
            # Ensure the frying pan is placed on the stove

        scramble_egg_in_fryingpan(egg, fryingpan, stove)
        # Execute the behavior to scramble the egg in the frying pan
 
#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_correctly_placed_pan(stove:item, fryingpan:item):
    # Check if the frying pan is correctly placed on the stove
    symbol correct_placement=on(fryingpan, stove)
    return correct_placement

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve cut(egg)
        # Ensure the egg is cut before scrambling

        achieve on(egg, fryingpan)
        # Ensure the egg is placed inside the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on for scrambling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        if has_correctly_placed_pan(stove, fryingpan):
            achieve on(fryingpan, stove)
            # Ensure the frying pan is placed on the stove

        scramble_egg_in_fryingpan(egg, fryingpan, stove)
        # Execute the behavior to scramble the egg in the frying pan
 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: You have successfully placed the frying pan on the stove and placed the egg in it. However, you need to scramble the egg in the frying pan while it's on the stove, which has not been done yet. Proceed with the scrambling action to complete the task.

Human Guidance: Place the pan on the stove securely.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.
Action 25: Grab food_egg_2020.
Action 26: Put food_egg_2020 into fryingpan_2083.
Action 27: Grab food_egg_2020.
Action 28: Put food_egg_2020 on fryingpan_2083.
Action 29: Grab food_egg_2020.
Action 30: Put food_egg_2020 into fryingpan_2083.
Action 31: Grab food_egg_2020.
Action 32: Put food_egg_2020 on fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is placed in the frying pan

        achieve is_on(stove)
        # Ensure the stove is turned on

        achieve cut(egg)
        # Scramble the egg in the frying pan
   
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        scramble_egg_in_fryingpan(egg, fryingpan, stove)
        # Execute behavior to scramble the egg in the frying pan on the stove

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_towel_2057_around_sink_231(towel:item):
    goal: not unknown(towel)
    body:
        assert is_towel(towel)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==231
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(towel,sink_instance)
        else:
            exp(towel,sink_instance)
    eff:
        unknown[towel]=False
        close[towel,sink_instance]=True
        close[sink_instance,towel]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def has_fryingpan_on_stove(stove:item, fryingpan:item):
    # Function to check if a frying pan is securely placed on a stove
    symbol fryingpan_on_stove=on(fryingpan, stove) 
    return fryingpan_on_stove

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve cut(egg)
        achieve inside(egg, fryingpan)
        # Ensure the egg is cut and placed inside the frying pan for scrambling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_fryingpan_on_stove(stove, fryingpan)
        # Select a frying pan that is securely placed on the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled

        scramble_egg_in_fryingpan(egg, fryingpan)
        # Execute the behavior to scramble the egg in the frying pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_fryingpan_on_stove(stove:item, fryingpan:item):
    # Function to check if a frying pan is securely placed on a stove
    symbol fryingpan_on_stove=on(fryingpan, stove) 
    return fryingpan_on_stove

behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item):
    body:
        achieve cut(egg)
        achieve inside(egg, fryingpan)
        # Ensure the egg is cut and placed inside the frying pan for scrambling

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and has_fryingpan_on_stove(stove, fryingpan)
        # Select a frying pan that is securely placed on the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg to be scrambled

        scramble_egg_in_fryingpan(egg, fryingpan)
        # Execute the behavior to scramble the egg in the frying pan

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)putin_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
putin_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
From agent.py
Human Instruction: You have securely placed the frying pan on the stove and placed the egg in it, but you still need to scramble the egg in the frying pan on the stove to complete the task.

Human Guidance: Place the pan on the stove securely.
The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for fryingpan_2083 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_egg_2020 around fridge_289.
Action 7: Grab food_egg_2020.
Action 8: Walk to fryingpan_2083.
Action 9: Put food_egg_2020 on fryingpan_2083.
Action 10: Grab fryingpan_2083.
Action 11: Walk to stove_2065.
Action 12: Put fryingpan_2083 on stove_2065.
Action 13: Switch on stove_2065.
Action 14: Walk to food_egg_2020.
Action 15: Grab food_egg_2020.
Action 16: Walk to cutting_board_2051.
Action 17: Put food_egg_2020 on cutting_board_2051.
Action 18: Walk to knife_2050.
Action 19: Grab knife_2050.
Action 20: Walk to food_egg_2020.
Action 21: Cut food_egg_2020.
Action 22: Grab food_egg_2020.
Action 23: Walk to fryingpan_2083.
Action 24: Put food_egg_2020 on fryingpan_2083.
Action 25: Grab food_egg_2020.
Action 26: Put food_egg_2020 into fryingpan_2083.
Action 27: Grab food_egg_2020.
Action 28: Put food_egg_2020 on fryingpan_2083.
Action 29: Grab food_egg_2020.
Action 30: Put food_egg_2020 into fryingpan_2083.
Action 31: Grab food_egg_2020.
Action 32: Put food_egg_2020 on fryingpan_2083.
Action 33: Grab food_egg_2020.
Action 34: Put food_egg_2020 into fryingpan_2083.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_pan(egg:item, pan:item):
    body:
        achieve cut(egg) 
        # Ensure the egg is cracked and scrambled

behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        achieve on(fryingpan, stove)
        # Ensure the frying pan is securely placed on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on

        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan

        scramble_egg_in_pan(egg, fryingpan)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_headset_2062_around_cpuscreen_171(headset:item):
    goal: not unknown(headset)
    body:
        assert is_headset(headset)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==171
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(headset,cpuscreen_instance)
        else:
            exp(headset,cpuscreen_instance)
    eff:
        unknown[headset]=False
        close[headset,cpuscreen_instance]=True
        close[cpuscreen_instance,headset]=True
    

behavior find_fork_2081_around_closetdrawer_116(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(fork,closetdrawer_instance)
        else:
            exp(fork,closetdrawer_instance)
    eff:
        unknown[fork]=False
        close[fork,closetdrawer_instance]=True
        close[closetdrawer_instance,fork]=True
    

#exp_behavior_end

#goal_representation
 
def is_stove_on(stove:item):
    # Check if the stove is on
    return is_on(stove)

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Place the egg on the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        if is_stove_on(stove):
            scramble_egg_in_pan(egg, fryingpan)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_stove_on(stove:item):
    # Check if the stove is on
    return is_on(stove)

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Place the egg on the frying pan

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove)
        # Select the frying pan on the stove

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        if is_stove_on(stove):
            scramble_egg_in_pan(egg, fryingpan)

##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2020)put_executor(food_egg_2020, fryingpan_2083)
##############################
From agent.py
grab_executor(food_egg_2020)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. Grabbing food_egg_2020 by left hand. 
##############################
From agent.py
put_executor(food_egg_2020, fryingpan_2083)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_egg_2020. Robot is close stove_2065. Robot is close fryingpan_2083. food_egg_2020 released by left hand. 
##############################
