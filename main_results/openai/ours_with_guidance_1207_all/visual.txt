############################################################
When the sub-task is: Turn on the DVD player using the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select the DVD player instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, dvd_player)
        # Ensure you are close to the DVD player

        touch(remote_control)
        # Use the remote control to turn on the DVD player

        achieve is_on(dvd_player)
        # Ensure the DVD player is switched on

############################################################
When the sub-task is: Place a cup of water on the nightstand.
A successful representation:
 
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup
        
        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select an instance of a nightstand
        
        place_cup_on_nightstand(cup, nightstand)
        # Execute the behavior to place the cup on the nightstand

############################################################
When the sub-task is: Cut the chicken into pieces, then put it back to the fridge.
A successful representation:
 
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) 

behavior place_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge instance

        cut_chicken(chicken)
        # Execute behavior to cut the chicken

        place_in_fridge(chicken, fridge)
        # Place the cut chicken back into the fridge

        close_fridge(fridge)
        # Close the fridge after placing the chicken inside
 
############################################################
When the sub-task is: 1. Fill a bowl with water.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this pool has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_bowl_with_water(bowl:item, sink:item):
    body:
        achieve_once inside(bowl, sink)
        # Place the bowl inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the bowl with water

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after filling the bowl with water

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink
        
        fill_bowl_with_water(bowl, sink)
        # Execute the behavior to fill the bowl with water

############################################################
When the sub-task is: 2. Place the bowl on the table in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select the instance of a bowl

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        achieve has_water(bowl)
        # Ensure the bowl is filled with water

        achieve on(bowl, table)
        # Place the bowl filled with water on the table in the home office

############################################################
When the sub-task is: 3. Find your cat and place it on the table in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and id[table] == 270
        # Select the table with ID 270 in the home office
        
        bind cat: item where:
            is_cat(cat) and id[cat] == 2069
        # Select the cat with ID 2069

        achieve on(cat, table)
        # Place the cat on the table

############################################################
When the sub-task is: 1. Find and sit on the couch.
A successful representation:
 
def is_couch_sittable(couch:item):
    # Function to check if an item is a couch and can be sat on
    return is_couch(couch) and sittable(couch)

behavior __goal__():
    body:
        if exists couch: item : is_couch_sittable(couch):
            # If a couch has not been visited and is sittable, approach it
            bind couch: item where:
                is_couch_sittable(couch)
            achieve close_char(char, couch)
            sit_somewhere(couch)

        else:
            # Check all unvisited couches in the scene
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if the couch is sittable")

############################################################
When the sub-task is: Turn on the TV with the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # Select the couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control]==2052
        # Select the remote control with ID 2052

        bind television: item where:
            is_television(television)
        # Select the television instance

        achieve on_char(char, couch)
        # Ensure the character is sitting on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

############################################################
When the sub-task is: Clean the bathroom sink.
A successful representation:
 
def has_faucet(sink:item):
    # Function to determine if a sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior clean_sink(sink:item, faucet:item):
    body:
        achieve clean(sink)
        # Ensure the sink is clean

behavior __goal__():
    body:
        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==20
        # Select the faucet with ID 20

        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink with ID 19

        if has_faucet(sink):
            clean_sink(sink, faucet)
            turn_off_faucet(faucet)

############################################################
When the sub-task is: Clean the bathroom sink directly.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior turn_off_faucet(faucet:item):
    body:
        achieve is_off(faucet)

behavior ensure_sink_clean(sink:item):
    body:
        achieve clean(sink)
        # Ensure the bathroom sink is clean

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select the bathroom sink instance

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            ensure_sink_clean(sink)
            turn_off_faucet(faucet)
        else:
            ensure_sink_clean(sink)

############################################################
When the sub-task is: Get a cup of water and freeze it.
A successful representation:
 
behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior store_cup_in_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Place the cup inside the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer)
        # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind freezer: item where:
            is_fridge(freezer)
        # Select a fridge (used as a freezer)

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water

        store_cup_in_freezer(cup, freezer)
        # Store the waterfilled cup in the freezer

        close_the_freezer_door(freezer)
        # Close the freezer door after storing the cup

############################################################
When the sub-task is: 2. Put the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

############################################################
When the sub-task is: 3. Open the window in the home office.
A successful representation:
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

############################################################
When the sub-task is: 1. Identify all the rooms in the household.
A successful representation:
 
def has_confirmed_rooms(room:item):
    # Determine if a room has been confirmed through observation
    return visited(room)

behavior identify_rooms():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
                observe(room, "Verify the existence of this room")

behavior __goal__():
    body:
        if exists room: item : (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not has_confirmed_rooms(room):
            # If rooms without confirmed visits are present, identify them
            identify_rooms()

############################################################
When the sub-task is: 2. Ensure there is at least one light on in each room.
A successful representation:
 
def has_light_on_in_room(room:item):
    # Function to check if there is at least one light on in a specified room
    symbol light_on=exists o: item : is_light(o) and is_on(o) and inside(o, room)
    return light_on

behavior ensure_light_on(room:item):
    body:
        if not has_light_on_in_room(room):
            foreach light: item:
                if is_light(light) and not is_on(light) and inside(light, room):
                    achieve is_on(light)
                    # Turn on the light if its off in the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_dining_room(room) or is_bathroom(room) or is_bedroom(room) or is_home_office(room):
                ensure_light_on(room)

############################################################
When the sub-task is: 1. Find the basket containing the clothes.
A successful representation:

def is_basket_for_clothes_found():
    # Check if a basket for clothes is already found and visited
    symbol basket_found=exists basket: item : is_basket_for_clothes(basket) and visited(basket)
    return basket_found

behavior __goal__():
    body:
        if not is_basket_for_clothes_found():
            # If no basket is found yet, search for an unvisited basket
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if this is the basket containing clothes")

############################################################
When the sub-task is: 2. Wash the clothes in the basket using the washing machine.
A successful representation:
behavior wash_clothes_in_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Ensure the clothes are placed inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Ensure the washing machine is turned on to start washing

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket containing clothes

        bind clothes_pants: item where:
            is_clothes_pants(clothes_pants) and inside(clothes_pants, basket)
        # Select pants inside the basket

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)
        # Select shirt inside the basket

        bind clothes_socks: item where:
            is_clothes_socks(clothes_socks) and inside(clothes_socks, basket)
        # Select socks inside the basket

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)
        # Select skirt inside the basket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine

        foreach clothes: item:
            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                wash_clothes_in_washing_machine(clothes, washing_machine)
                
        start_washing_machine(washing_machine)
        # Start the washing machine after all clothes are loaded
############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        
        open_bathroom_window(window)
############################################################
When the sub-task is: Wash the bowls and the plates using the dishwasher.
A successful representation:
 
def has_bowls_and_plates(dishwasher:item):
    # Function to check if there are bowls and plates in a specified dishwasher
    symbol has_bowls_and_plates=exists o: item : (is_bowl(o) or is_plate(o)) and inside(o, dishwasher)
    return has_bowls_and_plates

behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher) and id[dishwasher] == 1001
        # Select the dishwasher with ID 1001

        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if (is_bowl(o) or is_plate(o)) and not inside(o, dishwasher):
                load_dishwasher(o, dishwasher)
        
        if has_bowls_and_plates(dishwasher):
            start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: 1. Locate the milk, turkey, egg, fish, and chicken in the household.
A successful representation:
 
def is_fridge_open(fridge:item):
    # Check if the fridge is open
    return open(fridge)

behavior find_and_locate_food_items(fridge:item):
    body:
        if not is_fridge_open(fridge):
            achieve_once open(fridge)
            # Open the fridge to locate items

        observe(fridge, "Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge")
        # Look inside the fridge to locate the specified items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140
        # Select fridge with ID 140

        find_and_locate_food_items(fridge)
        # Execute the behavior to locate all specified food items in the fridge

############################################################
When the sub-task is: 2. Bring the milk, turkey, egg, fish, and chicken to the table in the dining room.
A successful representation:
 
behavior bring_item_to_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bring_item_to_table(milk, dining_room_table)
        bring_item_to_table(turkey, dining_room_table)
        bring_item_to_table(egg, dining_room_table)
        bring_item_to_table(fish, dining_room_table)
        bring_item_to_table(chicken, dining_room_table)

############################################################
When the sub-task is: Cut the chicken into pieces and put it back in the fridge.
A successful representation:
behavior cut_chicken(chicken:item):
    body:
        achieve cut(chicken) 

behavior place_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)

behavior close_fridge(fridge:item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge instance

        cut_chicken(chicken)
        # Execute behavior to cut the chicken

        place_in_fridge(chicken, fridge)
        # Place the cut chicken back into the fridge

        close_fridge(fridge)
        # Close the fridge after placing the chicken inside
############################################################
When the sub-task is: Get a cup of water.
A successful representation:
behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink) and close(sink, cup)
        # Select the sink instance close to the cup

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water
############################################################
When the sub-task is: 1. Turn on the lights in the bedroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom instance

        bind light: item where:
            is_light(light) and inside(light, bedroom)
        # Select the light that is inside the bedroom

        achieve is_on(light)
        # Ensure the light in the bedroom is turned on

############################################################
When the sub-task is: 2. Turn on the lights in the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light_bathroom: item where:
            is_light(light_bathroom) and inside(light_bathroom, bathroom)
        # Select the light inside the bathroom

        achieve is_on(light_bathroom)
        # Ensure the light in the bathroom is turned on

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:

behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the instance of spectacles

        put_spectacles_on_table(spectacles, coffee_table)
        # Execute the behavior to put the spectacles on the coffee table in the home office
############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

############################################################
When the sub-task is: 1. Find the specific book you need.
A successful representation:

def has_book_on_bookshelf(bookshelf:item):
    # Function to check if there is a book on a specified bookshelf
    symbol has_book=exists o: item : is_book(o) and on(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        foreach bookshelf: item:
            # Loop through all bookshelves to find an unvisited one with a book
            if is_bookshelf(bookshelf) and not visited(bookshelf):
                observe(bookshelf,"Check if there is a book on the bookshelf")
                # Observe the bookshelf to check for a book
                if has_book_on_bookshelf(bookshelf):
                    bind book: item where:
                        is_book(book) and on(book, bookshelf)
                    # Select the book on the bookshelf

                    bind home_office: item where:
                        is_home_office(home_office)
                    # Select the home office as the target location

                    bind coffee_table: item where:
                        is_coffee_table(coffee_table) and inside(coffee_table, home_office)
                    # Select the coffee table within the home office

                    achieve on(book, coffee_table)
                    # Place the book on the coffee table in the home office

############################################################
When the sub-task is: 2. Put the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table

############################################################
When the sub-task is: 3. Open the window in the home office.
A successful representation:

# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

############################################################
When the sub-task is: 1. Wash all the vegetables.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

############################################################
When the sub-task is: 2. Put the vegetables in a pot and boil them on the stove.
A successful representation:
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

############################################################
When the sub-task is: 3. Cool the boiled vegetables in a bowl.
A successful representation:
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

############################################################
When the sub-task is: Get a cup and fill it with water.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with the specific ID

        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink instance

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water

############################################################
When the sub-task is: 1. Identify all the rooms in the house.
A successful representation:
behavior identify_rooms():
    body:
        foreach room: item:
            if (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
                observe(room, "Verify the existence of this room")

behavior __goal__():
    body:
        if exists room: item : (is_bathroom(room) or is_bedroom(room) or is_kitchen(room) or is_dining_room(room) or is_home_office(room)) and not visited(room):
            identify_rooms()
############################################################
When the sub-task is: 2. Turn on at least one light in each room.
A successful representation:
 
def has_light_in_room(room: item):
    # Function to check if there is at least one light in a specified room
    symbol light_exists = exists o: item : is_light(o) and inside(o, room)
    return light_exists

behavior turn_on_light_in_room(room: item):
    body:
        foreach light: item:
            if is_light(light) and not is_on(light) and inside(light, room):
                # Check all lights inside the room that are off
                achieve is_on(light)
                # Turn on the light if it is off in the specified room

behavior __goal__():
    body:
        foreach room: item:
            if is_bathroom(room) or is_bedroom(room) or is_dining_room(room) or is_home_office(room):
                if has_light_in_room(room):
                    turn_on_light_in_room(room)

############################################################
When the sub-task is: 1. Identify a basket with clothes.
A successful representation:
 
def has_clothes(basket: item):
    # Function to check if there are clothes in the specified basket
    symbol has_clothes_instance = exists c: item : is_clothes(c) and inside(c, basket)
    return has_clothes_instance

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and has_clothes(basket):
            # If a basket with clothes is found based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and has_clothes(basket)
            achieve close_char(char, basket)
        else:
            # If no basket with clothes is found, search for a suitable basket
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are clothes in this basket")

############################################################
When the sub-task is: 2. Load the clothes into the washing machine and start the wash cycle.
A successful representation:
 
behavior load_clothes_into_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)

behavior start_wash_cycle(washing_machine:item):
    body:
        achieve closed(washing_machine)
        achieve is_on(washing_machine)

behavior __goal__():
    body:
        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket containing clothes

        bind clothes_pants: item where:
            is_clothes_pants(clothes_pants) and inside(clothes_pants, basket)
        # Select pants inside the basket

        bind clothes_shirt: item where:
            is_clothes_shirt(clothes_shirt) and inside(clothes_shirt, basket)
        # Select shirt inside the basket

        bind clothes_socks: item where:
            is_clothes_socks(clothes_socks) and inside(clothes_socks, basket)
        # Select socks inside the basket

        bind clothes_skirt: item where:
            is_clothes_skirt(clothes_skirt) and inside(clothes_skirt, basket)
        # Select skirt inside the basket

        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine
        
        foreach clothes: item:
            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                load_clothes_into_washing_machine(clothes, washing_machine)
                
        start_wash_cycle(washing_machine)
        # Start the washing machine after all clothes are loaded

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
 
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        
        open_bathroom_window(window)

############################################################
When the sub-task is: 1. Place the bowls and plates into the dishwasher and run it.
A successful representation:
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach item: item:
        # Load all bowls and plates into the dishwasher
            if (is_bowl(item) or is_plate(item)):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher after loading items into it
############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve_once inside(fork, sink)
        # Place the fork inside the sink

        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select an instance of a fork

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        wash_fork_by_hand(fork, sink)
        # Execute the behavior to wash the fork by hand

############################################################
When the sub-task is: Turn on the vacuum cleaner, hold it, and push and pull it to vacuum the floor.
A successful representation:
 
def is_vacuum_cleaner_on_floor(vacuum_cleaner:item, floor:item):
    # Check if the vacuum cleaner is on the floor
    return close(vacuum_cleaner, floor)

behavior start_vacuum_cleaning(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on
        achieve_once inhand(vacuum_cleaner)
        # Temporarily hold the vacuum cleaner

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is working
        pull(vacuum_cleaner)
        push(vacuum_cleaner)
        # Vacuum the floor by pushing and pulling the vacuum cleaner over it

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Bind to vacuum cleaner instance

        bind floor: item where:
            is_floor(floor) and id[floor] == 10
        # Bind to floor instance with ID 10

        if not is_vacuum_cleaner_on_floor(vacuum_cleaner, floor):
            achieve close_char(char, vacuum_cleaner)

        start_vacuum_cleaning(vacuum_cleaner, floor)
        vacuum_floor(vacuum_cleaner, floor)

############################################################
When the sub-task is: Cut the bread, put it in the toaster, and turn on the toaster.
A successful representation:
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is cut

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the cut bread inside the toaster

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        # Execute behavior to cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread into the toaster

        turn_on_toaster(toaster)
        # Turn on the toaster to toast the bread
############################################################
When the sub-task is: 1. Put the pan on the stove.
A successful representation:
 
behavior __goal__():
    body:
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select an instance of a frying pan

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        achieve on(fryingpan, stove)
        # Place the frying pan on the stove

############################################################
When the sub-task is: 2. Turn on the stove.
A successful representation:
 
behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove) and id[stove]==2135
        # Select the stove with ID 2135

        achieve is_on(stove)
        # Ensure the stove is turned on

############################################################
When the sub-task is: 3. Put oil in the pan.
A successful representation:
 
behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)
        # Ensure the oil is put inside the pan

behavior __goal__():
    body:
        bind oil: item where:
            is_oil(oil)
        # Select the oil instance

        bind pan: item where:
            is_fryingpan(pan)
        # Select the frying pan instance

        put_oil_in_pan(oil, pan)
        # Execute the behavior to put oil in the pan

############################################################
When the sub-task is: 4. Put the egg in the pan.
A successful representation:
 
behavior put_egg_in_pan(egg: item, fryingpan: item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is placed inside the fryingpan
        
behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the fryingpan instance

        put_egg_in_pan(egg, fryingpan)
        # Execute the behavior to put the egg in the fryingpan

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the instance of spectacles

        put_spectacles_on_table(spectacles, coffee_table)
        # Execute the behavior to put the spectacles on the coffee table in the home office
############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table
############################################################
When the sub-task is: 1. Find the couch and sit on it.
A successful representation:
behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and sittable(couch):
            # If a sittable couch has not been visited, approach it
            bind couch: item where:
                is_couch(couch) and sittable(couch)
            achieve close_char(char, couch)
            sit_somewhere(couch)

        else:
            # Check all unvisited couches in the scene
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if the couch is sittable")

############################################################
When the sub-task is: 2. Locate the remote control and turn on the TV.
A successful representation:
behavior locate_remote_control(remote_control: item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control is located and marked as visited

behavior turn_on_television(television: item, remote_control: item):
    body:
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        bind television: item where:
            is_television(television)
        # Select the television instance

        locate_remote_control(remote_control)
        turn_on_television(television, remote_control)
        # Execute the behaviors to locate the remote and turn on the television with it
############################################################
When the sub-task is: Vacuum the floor.
A successful representation:
 
def is_vacuum_cleaner_plugged(vacuum_cleaner: item):
    # Check if the vacuum cleaner is plugged in
    return plugged(vacuum_cleaner)

behavior start_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is on
        
        achieve_once inhand(vacuum_cleaner)
        # Temporarily hold the vacuum cleaner

        pull(vacuum_cleaner)
        push(vacuum_cleaner)
        # Vacuum the floor by pushing and pulling the vacuum cleaner over it

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor)
        # Select the floor to be vacuumed

        if not is_vacuum_cleaner_plugged(vacuum_cleaner):
            achieve plugged(vacuum_cleaner)

        start_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)

############################################################
When the sub-task is: Vacuum the floor.
A successful representation:
behavior start_vacuum_cleaner(vacuum_cleaner: item):
    body:
        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in
        
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

behavior vacuum_floor(vacuum_cleaner: item, floor: item):
    body:
        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is on
        
        achieve_once inhand(vacuum_cleaner)
        # Temporarily hold the vacuum cleaner

        pull(vacuum_cleaner)
        push(vacuum_cleaner)
        # Vacuum the floor by pushing and pulling the vacuum cleaner over it

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner instance

        bind floor: item where:
            is_floor(floor)
        # Select the floor to be vacuumed

        start_vacuum_cleaner(vacuum_cleaner)
        vacuum_floor(vacuum_cleaner, floor)
############################################################
When the sub-task is: Prepare a cup of water and place it on the nightstand.
A successful representation:
behavior place_cup_on_nightstand(cup:item, nightstand:item):
    body:
        achieve has_water(cup)
        # Ensure the cup is filled with water
        achieve on(cup, nightstand)
        # Place the cup on the nightstand

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind nightstand: item where:
            is_nightstand(nightstand)
        # Select an instance of a nightstand
        
        place_cup_on_nightstand(cup, nightstand)
        # Execute the behavior to place the cup on the nightstand
############################################################
When the sub-task is: 1. Hold the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

############################################################
When the sub-task is: 2. Get close to the DVD player.
A successful representation:
 
behavior __goal__():
    body:
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select the DVD player instance

        achieve close_char(char, dvd_player)
        # Ensure you are close to the DVD player

############################################################
When the sub-task is: 3. Touch the remote control.
A successful representation:
 
behavior touch_remote_control(remote_control: item):
    body:
        touch(remote_control)
        # Ensure the remote control is touched

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the instance of the remote control

        achieve close_char(char, remote_control)
        # Ensure you are close to the remote control

        touch_remote_control(remote_control)
        # Execute the behavior to touch the remote control

############################################################
When the sub-task is: 1. Get close to the computer in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        achieve close_char(char, computer)
        # Ensure you get close to the computer in the home office

############################################################
When the sub-task is: 2. Sit on the chair in front of the computer.
A successful representation:
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a sittable chair instance

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

############################################################
When the sub-task is: 3. Touch the mouse near the computer to turn it on.
A successful representation:
 
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse
 
############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
behavior identify_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Verify that this is a window")

behavior __goal__():
    body:
        if exists window: item : is_window(window) and not visited(window):
            identify_windows()
############################################################
When the sub-task is: 2. Use a towel to wipe each window.
A successful representation:
 
def is_dirty_window(window: item):
    # Function to check if a window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior wipe_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel

        wipe(window)
        # Wipe the window with the towel

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel instance

        foreach window: item:
            if is_window(window) and is_dirty_window(window) and open(window):
                wipe_window(window, towel)

############################################################
When the sub-task is: 1. Place the bowls and plates in the dishwasher and start it.
A successful representation:
behavior load_dishwasher(item: item, dishwasher: item):
    body:
        achieve inside(item, dishwasher)

behavior start_dishwasher(dishwasher: item):
    body:
        achieve closed(dishwasher)
        achieve is_on(dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher
        
        foreach item: item:
            if is_bowl(item) or is_plate(item):
                load_dishwasher(item, dishwasher)
        # Load all bowls and plates into the dishwasher 

        start_dishwasher(dishwasher)
        # Start the dishwasher after loading items into it
############################################################
When the sub-task is: 2. Wash the forks by hand.
A successful representation:
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve_once inside(fork, sink)
        # Place the fork inside the sink

        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select an instance of a fork

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        wash_fork_by_hand(fork, sink)
        # Execute the behavior to wash the fork by hand

############################################################
When the sub-task is: 1. Find the sink that is suitable for washing a cat.
A successful representation:
 
def is_sink_suitable_for_washing_cat(sink: item):
    # A function that checks if a sink is suitable for washing a cat
    # In this case defined as a sink that has not been visited
    return is_sink(sink) and not visited(sink)

behavior __goal__():
    body:
        if exists sink: item : is_sink_suitable_for_washing_cat(sink):
            # If a suitable sink is already known, move closer to it
            bind sink: item where:
                is_sink_suitable_for_washing_cat(sink)
            achieve close_char(char, sink)

        else:
            # If no suitable sink is known, explore unvisited items
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Check if this sink is suitable for washing a cat")

############################################################
When the sub-task is: Put the cat in the sink and wash it.
A successful representation:
behavior put_cat_in_sink(cat:item, sink:item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat:item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink
        
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink instance with ID 19

        put_cat_in_sink(cat, sink)
        wash_cat(cat)
############################################################
When the sub-task is: 1. Find a sink in the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If there is an unvisited sink, approach to find it
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            achieve close_char(char, sink)
        else:
            # If no sink is known, explore to find one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    observe(sink, "Locate the sink in the bathroom")

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to make it soapy.
A successful representation:
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_soap(sink: item, soap: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve inside(soap, sink)
        # Add soap to the sink to make it soapy

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 19
        # Select the sink with ID 19

        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        fill_sink_with_water_and_soap(sink, soap)
        # Execute the behavior to fill the sink with water and add soap

############################################################
When the sub-task is: Turn on the TV with the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind tv: item where:
            is_television(tv)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(tv)
        # Ensure the television is switched on
 
############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light_bathroom: item where:
            is_light(light_bathroom) and inside(light_bathroom, bathroom)
        # Select the light inside the bathroom

        achieve is_on(light_bathroom)
        # Ensure the light in the bathroom is turned on
############################################################
When the sub-task is: Get a cup of water and place it in the freezer to freeze.
A successful representation:
behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the cup

behavior store_cup_in_freezer(cup:item, freezer:item):
    body:
        achieve inside(cup, freezer)
        # Place the cup inside the freezer

behavior close_the_freezer_door(freezer:item):
    body:
        achieve closed(freezer)
        # Close the freezer door

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind freezer: item where:
            is_fridge(freezer)
        # Select a fridge (used as a freezer)

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water

        store_cup_in_freezer(cup, freezer)
        # Store the waterfilled cup in the freezer

        close_the_freezer_door(freezer)
        # Close the freezer door after storing the cup
############################################################
When the sub-task is: 1. Find a cup suitable for holding milk.
A successful representation:
behavior __goal__():
    body:
        if exists cup: item : is_cup(cup) and recipient(cup):
            # Check if there is a cup suitable for holding milk
            bind cup: item where:
                is_cup(cup) and recipient(cup)
            achieve visited(cup)
            # Mark the cup as visited

        else:
            # If no suitable cup is found, observe unvisited cups
            foreach cup: item:
                if is_cup(cup) and not visited(cup):
                    observe(cup, "Check if this cup is suitable for holding milk")
############################################################
When the sub-task is: 2. Pour milk into the cup.
A successful representation:
 
behavior pour_milk_into_cup(milk:item, cup:item):
    body:
        achieve inside(milk, cup)
        # Ensure the milk is poured into the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2063
        # Select the cup with ID 2063
        
        bind milk: item where:
            is_milk(milk)
        # Select the instance of milk

        pour_milk_into_cup(milk, cup)
        # Execute the behavior to pour the milk into the cup
 
############################################################
When the sub-task is: 3. Place the cup of milk in the microwave and heat it.
A successful representation:
 
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Ensure the cup is placed inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave)  # Turn on the microwave to heat

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2063
        # Select the cup with ID 2063

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        place_cup_in_microwave(cup, microwave)
        # Place the cup inside the microwave

        start_microwave(microwave)
        # Start the microwave to heat the cup of milk

############################################################
When the sub-task is: 1. Find the bathroom sink.
A successful representation:
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom instance

        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                # Check all unvisited sinks inside the bathroom
                observe(sink, "Locate the bathroom sink")

############################################################
When the sub-task is: 2. Fill the sink with water and add soap to create soapy water.
A successful representation:
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water(sink: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 307
        # Select the sink with ID 307

        fill_sink_with_water(sink)
        # Execute the behavior to fill the sink with water

############################################################
When the sub-task is: 2. Put the vegetables in a pot and boil them on the stove.
A successful representation:
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        if exists faucet: item: is_faucet(faucet) and is_on(faucet):
            bind faucet: item where:
                is_faucet(faucet) and is_on(faucet)
            achieve_once is_off(faucet)
            # Ensure the faucet is turned off after washing vegetables

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

############################################################
When the sub-task is: 3. Cool the boiled vegetables in a bowl.
A successful representation:
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl
############################################################
When the sub-task is: Turn on the lights in the bedroom. Then turn on the lights in the bathroom.
A successful representation:

behavior turn_on_light_in_bedroom(light:item):
    body:
        achieve is_on(light)

behavior turn_on_light_in_bathroom(light:item):
    body:
        achieve is_on(light)

behavior __goal__():
    body:
        bind bedroom: item where:
            is_bedroom(bedroom)
        # Select the bedroom instance
        
        bind light_in_bedroom: item where:
            is_light(light_in_bedroom) and inside(light_in_bedroom, bedroom)
        # Select the light inside the bedroom

        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom instance

        bind light_in_bathroom: item where:
            is_light(light_in_bathroom) and inside(light_in_bathroom, bathroom)
        # Select the light inside the bathroom

        turn_on_light_in_bedroom(light_in_bedroom)
        turn_on_light_in_bathroom(light_in_bathroom)

############################################################
When the sub-task is: 1. Hold a knife.
A successful representation:
behavior __goal__():
    body:
        bind knife: item where:
            is_knife(knife)
        # Select the knife

        achieve_once inhand(knife)
        # Temporarily hold the knife
############################################################
When the sub-task is: 2. Find the cutting board.
A successful representation:
 
def has_cutting_board():
    # Determine if there is a cutting board present in the area
    symbol has_cutting_board=exists cb: item : is_cutting_board(cb)
    return has_cutting_board

behavior __goal__():
    body:
        if has_cutting_board():
            # If a cutting board is known, move closer to it
            bind cutting_board: item where:
                is_cutting_board(cutting_board)
            achieve close_char(char, cutting_board)
        else:
            # If no cutting board is known, explore to find one
            foreach cb: item:
                if is_cutting_board(cb) and not visited(cb):
                    observe(cb, "Verify the existence of this cutting board")

############################################################
When the sub-task is: 3. Put the chicken on the cutting board.
A successful representation:
 
behavior place_chicken_on_board(chicken: item, cutting_board: item):
    body:
        achieve on(chicken, cutting_board)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        place_chicken_on_board(chicken, cutting_board)
        # Execute the behavior to place the chicken on the cutting board

############################################################
When the sub-task is: 4. Cut the chicken.
A successful representation:
behavior cut_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and id[cutting_board] == 2123
        # Ensure the cutting board instance is defined
        
        bind chicken: item where:
            is_food_chicken(chicken) and on(chicken, cutting_board)
        # Select the chicken on the cutting board identified as cutting_board_2123
        
        cut_chicken(chicken, cutting_board)
        # Execute behavior to cut the chicken
############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior find_jacket(jacket: item):
    body:
        observe(jacket, "Check if this is clothes_jacket_2119")
        # Observe the specific location to find the jacket

behavior wash_jacket_by_hand(jacket: item, sink: item):
    body:
        achieve_once inside(jacket, sink)
        # Ensure the jacket is placed inside the sink

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2119
        # Select the jacket with the specific ID

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        if not visited(jacket):
            find_jacket(jacket)
        # Ensure the jacket is located before starting the wash

        wash_jacket_by_hand(jacket, sink)
        # Execute the behavior to wash the jacket by hand

############################################################
When the sub-task is: 2. Use the washing machine to wash the jacket.
A successful representation:
 
behavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Turn on the washing machine to start washing the jacket

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance
        
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket]==2119
        # Select the specific jacket with ID 2119

        put_jacket_in_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)
        # Place the jacket in the washing machine and start the wash cycle

############################################################
When the sub-task is: Use a pot to boil water.
A successful representation:
behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to use the pot to boil water on the stove
############################################################
When the sub-task is: Wash the bowls and the plates using the dishwasher.
A successful representation:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: Find a cup, fill it with water, and have it ready.
A successful representation:
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water

############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
behavior find_cup(cup:item, milk:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the cup has milk inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive substances

        bind milk: item where:
            is_milk(milk)
        # Select milk instance

        find_cup(cup, milk)
        # Find and hold the cup

        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk
############################################################
When the sub-task is: 2. Heat the cup of milk using the microwave.
A successful representation:
 
behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Ensure the cup is placed inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave)  # Turn on the microwave to heat

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        place_cup_in_microwave(cup, microwave)
        # Place the cup inside the microwave

        start_microwave(microwave)
        # Start the microwave to heat the cup of milk

############################################################
When the sub-task is: 1. Locate all windows in the house.
A successful representation:
 
behavior identify_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Verify that this is a window")

behavior __goal__():
    body:
        if exists window: item : is_window(window) and not visited(window):
            identify_windows()

############################################################
When the sub-task is: 2. Wipe each window using a towel.
A successful representation:
behavior wipe_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel

        wipe(window)
        # Wipe the window with the towel

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel instance

        foreach window: item:
            if is_window(window) and open(window):
                wipe_window(window, towel)
                # Use the towel to wipe each open window in the house
############################################################
When the sub-task is: 1. Identify the correct book.
A successful representation:
 
def has_book_on_bookshelf(bookshelf:item):
    # Function to check if there is a book on a specified bookshelf
    symbol has_book=exists o: item : is_book(o) and on(o, bookshelf)
    return has_book

behavior __goal__():
    body:
        foreach bookshelf: item:
            # Loop through all bookshelves to find an unvisited one with a book
            if is_bookshelf(bookshelf) and not visited(bookshelf):
                observe(bookshelf,"Check if there is a book on the bookshelf")
                # Observe the bookshelf to check for a book
                if has_book_on_bookshelf(bookshelf):
                    bind book: item where:
                        is_book(book) and on(book, bookshelf)
                    # Select the book on the bookshelf
                    
                    bind home_office: item where:
                        is_home_office(home_office)
                    # Select the home office as the target location

                    bind coffee_table: item where:
                        is_coffee_table(coffee_table) and inside(coffee_table, home_office)
                    # Select the coffee table within the home office

                    achieve on(book, coffee_table)
                    # Place the book on the coffee table in the home office

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_coffee_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table in the home office
############################################################
When the sub-task is: 1. Locate the bathroom sink.
A successful representation:
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom instance

        foreach sink: item:
            if is_sink(sink) and inside(sink, bathroom) and not visited(sink):
                # Check all unvisited sinks inside the bathroom
                observe(sink, "Locate the bathroom sink")
############################################################
When the sub-task is: 2. Fill the sink with water and add soap to create soapy water.
A successful representation:
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet = exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_sink_with_water_and_soap(sink: item, soap: item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the sink with water

        achieve has_water(sink)
        # Ensure the sink is filled with water

        achieve inside(soap, sink)
        # Add soap to the sink to make the water soapy

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the sink

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink with ID 42

        bind soap: item where:
            is_soap(soap)
        # Select an instance of soap

        fill_sink_with_water_and_soap(sink, soap)
        # Execute the behavior to fill the sink with water and add soap

############################################################
When the sub-task is: 1. Locate the basket with clothes in it.
A successful representation:
behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket):
            # If a basket with clothes is identified based on available information
            bind basket: item where:
                is_basket_for_clothes(basket)
            achieve close_char(char, basket)
            # Move the character towards the basket with clothes

        else:
            # If no basket with clothes is found, initiate search
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    observe(basket, "Check if there are clothes in this basket")
                    # Observe each unvisited basket to check for clothes
############################################################
When the sub-task is: 2. Add soap and the clothes to the washing machine.
A successful representation:
 
behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place clothing item inside the washing machine

behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)
        # Add soap to the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket instance containing clothes

        foreach clothes: item:
            if is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes) and inside(clothes, basket):
                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)
                # Load all clothes from the basket into the washing machine
                
        bind soap: item where:
            is_soap(soap)
        # Choose an instance of soap

        add_soap_to_washing_machine(soap, washing_machine)
        # Add soap to the washing machine

############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:
 
behavior start_washing_machine(washing_machine:item):
    body:
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        start_washing_machine(washing_machine)
        # Execute the behavior to turn on the washing machine

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
def has_clothes_in_basket(basket: item):
    # Function to check if there are clothes in a specified basket
    symbol has_clothes=exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and has_clothes_in_basket(basket):
            # Check if there is a basket with clothes based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)
            # Select a basket that has clothes in it
            achieve close_char(char, basket)
            # Move the character closer to the basket with clothes

        else: 
           # If no basket with clothes is found, initiate exploration to locate one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    # Check all unvisited baskets
                    observe(basket,"Check if there are clothes in this basket")
                    # Observe whether each basket has any clothes

############################################################
When the sub-task is: 2. Add the clothes and soap into the washing machine.
A successful representation:
behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place clothing item inside the washing machine

behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)
        # Add soap to the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket instance containing clothes

        foreach clothes: item:
            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)
                # Load all clothes from the basket into the washing machine
                
        bind soap: item where:
            is_soap(soap)
        # Choose an instance of soap

        add_soap_to_washing_machine(soap, washing_machine)
        # Add soap to the washing machine
############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:
 
behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        start_washing_machine(washing_machine)
        # Execute the behavior to turn on the washing machine

############################################################
When the sub-task is: Put cleaning solution in the dishwasher and wash the bowls and plates with it.
A successful representation:
 
behavior load_dishwasher_with_solution(cleaning_solution:item, dishwasher:item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Put the cleaning solution inside the dishwasher

behavior load_and_wash_bowls_and_plates(dishwasher:item):
    body:
        foreach o: item:
            if is_bowl(o) or is_plate(o):
                achieve inside(o, dishwasher)
                # Load bowls and plates into the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select an instance of cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        load_dishwasher_with_solution(cleaning_solution, dishwasher)
        load_and_wash_bowls_and_plates(dishwasher)
        start_dishwasher(dishwasher) # Start the dishwasher

############################################################
When the sub-task is: Put a cup inside the coffee maker and turn it on.
A successful representation:
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

############################################################
When the sub-task is: 1. Put the milk and egg on the table in the dining room.
A successful representation:
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Achieve putting the item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_item_on_table(milk, dining_room_table)
        put_item_on_table(egg, dining_room_table)
        # Execute behaviors to put milk and egg on the table

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        achieve open(fridge)
        # Ensure the fridge is open to take out items

        foreach o: item:
            if inside(o, fridge):
                achieve inside(o, trashcan)
                # Throw each item from the fridge into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Bind the fridge with the specific ID

        bind trashcan: item where:
            is_trashcan(trashcan) and id[trashcan] == 99
        # Bind the trashcan with the specific ID

        throw_items_in_trash(fridge, trashcan)
        # Execute the behavior to throw all items in the fridge into the trashcan

############################################################
When the sub-task is: 3. Put the milk and eggs back in the fridge.
A successful representation:
 
behavior store_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Place the item inside the fridge

behavior close_the_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2115
        # Select the specific milk instance with ID 2115

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2092
        # Select the specific egg instance with ID 2092

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 126
        # Select the fridge with ID 126
        
        store_in_fridge(milk, fridge)
        store_in_fridge(egg, fridge)
        close_the_fridge(fridge)

############################################################
When the sub-task is: 1. Identify all the windows in the house.
A successful representation:
 
behavior identify_windows():
    body:
        foreach window: item:
            if is_window(window) and not visited(window):
                observe(window, "Verify that this is a window")

behavior __goal__():
    body:
        if exists window: item : is_window(window) and not visited(window):
            identify_windows()

############################################################
When the sub-task is: 2. Use a towel to wipe each window clean.
A successful representation:
 
def is_dirty_window(window: item):
    # Function to check if a window is dirty
    symbol is_dirty = dirty(window)
    return is_dirty

behavior wipe_window(window: item, towel: item):
    body:
        achieve_once inhand(towel)
        # Temporarily hold the towel

        wipe(window)
        # Wipe the window with the towel

behavior __goal__():
    body:
        bind towel: item where:
            is_towel(towel)
        # Select a towel instance

        foreach window: item:
            if is_window(window) and is_dirty_window(window) and open(window):
                wipe_window(window, towel)

############################################################
When the sub-task is: 1. Put the milk and egg on the table in the dining room.
A successful representation:
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Achieve putting the item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_item_on_table(milk, dining_room_table)
        put_item_on_table(egg, dining_room_table)

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        achieve open(fridge)
        # Ensure the fridge is open to take out items

        foreach o: item:
            if inside(o, fridge):
                achieve inside(o, trashcan)
                # Throw each item from the fridge into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Bind the fridge with the specific ID

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Bind the trashcan (assuming the trashcan is unambiguously identifiable)

        throw_items_in_trash(fridge, trashcan)
        # Execute the behavior to throw all items in the fridge into the trashcan
############################################################
When the sub-task is: 3. Return the milk and eggs to the fridge.
A successful representation:
behavior store_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Place the item inside the fridge

behavior close_the_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk) and id[milk] == 2043
        # Select the specific milk instance with ID 2043

        bind egg: item where:
            is_food_egg(egg) and id[egg] == 2020
        # Select the specific egg instance with ID 2020

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Select the fridge with ID 289
        
        store_in_fridge(milk, fridge)
        store_in_fridge(egg, fridge)
        close_the_fridge(fridge)
############################################################
When the sub-task is: 1. Load the bowls and plates into the dishwasher.
A successful representation:
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach item: item:
            if is_bowl(item) or is_plate(item):
                load_dishwasher(item, dishwasher)
        # Load all bowls and plates into the dishwasher
############################################################
When the sub-task is: 2. Start the dishwasher.
A successful representation:

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        achieve is_on(dishwasher)
        # Ensure the dishwasher is turned on

############################################################
When the sub-task is: 3. Wash the forks by hand.
A successful representation:
 
behavior wash_fork_by_hand(fork:item, sink:item):
    body:
        achieve_once inside(fork, sink)
        # Place the fork inside the sink

        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select an instance of a fork

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        wash_fork_by_hand(fork, sink)
        # Execute the behavior to wash the fork by hand

############################################################
When the sub-task is: Turn on the TV with the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television instance

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

############################################################
When the sub-task is: 1. Find your spectacles and put them on the coffee table in the home office.
A successful representation:
 
behavior put_spectacles_on_table(spectacles:item, table:item):
    body:
        achieve on(spectacles, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind spectacles: item where:
            is_spectacles(spectacles)
        # Select the instance of spectacles

        put_spectacles_on_table(spectacles, coffee_table)
        # Execute the behavior to put the spectacles on the coffee table in the home office

############################################################
When the sub-task is: 2. Find the book and put it on the coffee table in the home office.
A successful representation:

behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

############################################################
When the sub-task is: 1. Place milk and egg on the table in the dining room.
A successful representation:
 
behavior put_item_on_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Achieve putting the item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_item_on_table(milk, dining_room_table)
        put_item_on_table(egg, dining_room_table)

############################################################
When the sub-task is: 2. Throw all the items in the fridge into the trashcan.
A successful representation:
 
behavior throw_items_in_trash(fridge:item, trashcan:item):
    body:
        achieve open(fridge)
        # Ensure the fridge is open to take out items

        foreach o: item:
            if inside(o, fridge):
                achieve inside(o, trashcan)
                # Throw each item from the fridge into the trashcan

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Bind the fridge with the specific ID

        bind trashcan: item where:
            is_trashcan(trashcan)
        # Bind the trashcan (assuming the trashcan is unambiguously identifiable)

        throw_items_in_trash(fridge, trashcan)
        # Execute the behavior to throw all items in the fridge into the trashcan

############################################################
When the sub-task is: 3. Put milk and eggs back in the fridge.
A successful representation:
 
behavior store_in_fridge(item:item, fridge:item):
    body:
        achieve inside(item, fridge)
        # Place the item inside the fridge

behavior close_the_fridge(fridge:item):
    body:
        achieve closed(fridge)
        # Close the fridge door

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select the fridge with ID 140
        
        store_in_fridge(milk, fridge)
        store_in_fridge(egg, fridge)
        close_the_fridge(fridge)

############################################################
When the sub-task is: 1. Find a cup and fill it with water.
A successful representation:

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_cup_with_water(cup:item, sink:item):
    body:
        achieve_once inside(cup, sink)
        # Place the cup inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the cup with water

        achieve has_water(cup)
        # Ensure the cup is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind sink: item where:
            is_sink(sink) and close(sink, cup)
        # Select the sink instance close to the cup

        fill_cup_with_water(cup, sink)
        # Execute the behavior to fill the cup with water

############################################################
When the sub-task is: 2. Place the cup in the freezer to freeze the water.
A successful representation:
 
behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087

        bind freezer: item where:
            is_fridge(freezer)
        # Select a fridge (used as a freezer)

        achieve inside(cup, freezer)
        # Place the cup inside the freezer

############################################################
When the sub-task is: 1. Go to the home office and sit on the chair in front of the computer.
A successful representation:
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

############################################################
When the sub-task is: 2. Touch the mouse near the computer to turn it on.
A successful representation:
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch(mouse)
        # Execute the behavior to touch the mouse to turn it on
############################################################
When the sub-task is: 1. Find the dining room table.
A successful representation:
behavior find_dining_room_table():
    body:
        foreach table: item:
            if is_table(table) and not visited(table):
                observe(table, "Check if this is the dining room table")

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        if exists table: item : is_table(table) and inside(table, dining_room):
            # Check if the dining room table is known based on available information
            bind table: item where:
                is_table(table) and inside(table, dining_room)
            achieve close_char(char, table)
        else:
            # Find the dining room table if not known
            find_dining_room_table()
############################################################
When the sub-task is: 2. Place the milk, turkey, egg, fish, and chicken on the dining room table.
A successful representation:
 
behavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish instance

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        put_items_on_table(milk, turkey, egg, fish, chicken, table)

############################################################
When the sub-task is: Cut the chicken into pieces and put it back in the fridge.
A successful representation:
 
behavior cut_chicken(chicken: item):
    body:
        achieve cut(chicken) 

behavior place_in_fridge(item: item, fridge: item):
    body:
        achieve inside(item, fridge)

behavior close_fridge(fridge: item):
    body:
        achieve closed(fridge)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge instance

        cut_chicken(chicken)
        # Execute behavior to cut the chicken

        place_in_fridge(chicken, fridge)
        # Place the cut chicken back into the fridge

        close_fridge(fridge)
        # Close the fridge after placing the chicken inside

############################################################
When the sub-task is: Put the pan on the stove, turn on the stove, put oil in the pan, and put the egg in the pan to scramble it.
A successful representation:
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)

behavior put_egg_in_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind oil: item where:
            is_oil(oil)
        # Select the oil instance
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_pan_on_stove(pan, stove)
        # Place the pan on the stove

        turn_on_stove(stove)
        # Turn on the stove

        put_oil_in_pan(oil, pan)
        # Add oil to the pan

        put_egg_in_pan(egg, pan)
        # Add the egg to the pan

############################################################
When the sub-task is: 1. Get close to the computer in the home office.
A successful representation:
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        achieve close_char(char, computer)
        # Ensure you get close to the computer in the home office

############################################################
When the sub-task is: 2. Sit on the chair in front of the computer.
A successful representation:
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

############################################################
When the sub-task is: 3. Touch the mouse near the computer to turn it on.
A successful representation:
 
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select the computer with ID 276

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse

############################################################
When the sub-task is: 1. Wash the fish.
A successful representation:
 
behavior __goal__():
    body:
        bind fish: item where:
            is_food_fish(fish)
        # Select the fish instance

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        achieve inside(fish, sink)
        # Place the fish inside the sink

        wash(fish)
        # Wash the fish

############################################################
When the sub-task is: 2. Put the milk, turkey, eggs, fish, and chicken on the table in the dining room.
A successful representation:
 
behavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish instance

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        put_items_on_table(milk, turkey, egg, fish, chicken, dining_room_table)

############################################################
When the sub-task is: 1. Hold the remote control and get close to the DVD player.
A successful representation:
 
behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance
        
        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select the DVD player instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve close_char(char, dvd_player)
        # Ensure you are close to the DVD player

############################################################
When the sub-task is: 2. Touch the remote control to activate the DVD player.
A successful representation:
 
behavior touch_remote_control(remote_control: item):
    body:
        touch(remote_control)
        # Ensure the remote control is touched to activate the DVD player

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the instance of the remote control

        bind dvd_player: item where:
            is_dvd_player(dvd_player)
        # Select the DVD player instance

        achieve close_char(char, dvd_player)
        # Ensure you are close to the DVD player

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch_remote_control(remote_control)
        # Touch the remote control to activate the DVD player

############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
 
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light_bathroom: item where:
            is_light(light_bathroom) and inside(light_bathroom, bathroom)
        # Select the light inside the bathroom

        achieve is_on(light_bathroom)
        # Ensure the light in the bathroom is turned on

############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table in the home office

############################################################
When the sub-task is: 2. Prepare a cup of hot milk and put it on the table.
A successful representation:
 
behavior find_cup(cup:item, milk:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the cup has milk inside

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup inside the microwave

        achieve closed(microwave)
        # Close the microwave door

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior place_cup_on_coffee_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup of hot milk on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive substances

        bind milk: item where:
            is_milk(milk)
        # Select milk instance

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        find_cup(cup, milk)
        # Find and hold the cup

        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk

        heat_milk_in_microwave(cup, microwave)
        # Execute behavior to heat the milk in the microwave

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        place_cup_on_coffee_table(cup, table)
        # Place the cup of hot milk on the coffee table in the home office

############################################################
When the sub-task is: Identify the bowls and plates that need washing, and then use the dishwasher to clean them.
A successful representation:
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher)
        # Ensure the dishwasher door is closed
        achieve is_on(dishwasher)
        # Turn on the dishwasher

behavior identify_dishwasher(dishwasher:item):
    body:
        achieve visited(dishwasher)
        # Mark the dishwasher as visited

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        identify_dishwasher(dishwasher)

        foreach item: item:
            if is_bowl(item) or is_plate(item) and dirty(item):
                load_dishwasher(item, dishwasher)

        start_dishwasher(dishwasher)
        # Start the dishwasher after loading items into it
############################################################
When the sub-task is: Turn on the lights in the bathroom.
A successful representation:
behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        # Select the bathroom

        bind light_bathroom: item where:
            is_light(light_bathroom) and inside(light_bathroom, bathroom)
        # Select the light inside the bathroom

        achieve is_on(light_bathroom)
        # Ensure the light in the bathroom is turned on
############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.  
A successful representation:
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table in the home office
############################################################
When the sub-task is: 2. Prepare a cup of hot milk and put it on the coffee table in the home office.
A successful representation:
behavior find_cup(cup:item, milk:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the cup has milk inside

behavior heat_milk_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Place the cup inside the microwave

        achieve closed(microwave)
        # Close the microwave door

        achieve is_on(microwave)
        # Turn on the microwave to heat the milk

behavior place_cup_on_coffee_table(cup:item, table:item):
    body:
        achieve on(cup, table)
        # Place the cup of hot milk on the coffee table

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive substances

        bind milk: item where:
            is_milk(milk)
        # Select milk instance

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        find_cup(cup, milk)
        # Find and hold the cup

        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk

        heat_milk_in_microwave(cup, microwave)
        # Execute behavior to heat the milk in the microwave

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location
        
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        place_cup_on_coffee_table(cup, table)
        # Place the cup of hot milk on the coffee table in the home office
############################################################
When the sub-task is: 1. Clean the chicken and the onion.
A successful representation:
behavior clean_item(item:item, sink:item):
    body:
        achieve_once inside(item, sink)
        # Place the item inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to clean the item

        wash(item)
        # Wash the item

        achieve_once is_off(faucet)
        # Turn off the faucet after cleaning

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        clean_item(chicken, sink)
        clean_item(onion, sink)
        # Execute the behavior to clean the chicken and onion in the sink
############################################################
When the sub-task is: 2. Place the chicken and the onion into the oven to roast.
A successful representation:
 
behavior put_inside_oven(item: item, oven: item):
    body:
        achieve inside(item, oven)
        # Ensure the item is placed inside the oven

behavior start_roasting(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion instance

        bind oven: item where:
            is_oven(oven)
        # Select the oven instance

        put_inside_oven(chicken, oven)
        put_inside_oven(onion, oven)
        start_roasting(oven)
 
############################################################
When the sub-task is: 1. Identify a sink suitable for washing a cat.  
A successful representation:
behavior is_sink_suitable_for_washing_cat(sink: item):
    body:
        observe(sink, "Check if this sink is suitable for washing a cat")
        # Observe the sink to determine if it is suitable for washing a cat

behavior __goal__():
    body:
        if exists sink: item : is_sink(sink) and not visited(sink):
            # If a sink is found and has not been visited, check its suitability for washing a cat
            bind sink: item where:
                is_sink(sink) and not visited(sink)
            is_sink_suitable_for_washing_cat(sink)   
        else:
            # If no suitable sink is found, explore to identify one
            foreach sink: item:
                if is_sink(sink) and not visited(sink):
                    is_sink_suitable_for_washing_cat(sink)   
            # Observe each unvisited sink in the environment to check its suitability for washing a cat
############################################################
When the sub-task is: 2. Wash the cat in the identified sink.
A successful representation:
behavior put_cat_in_sink(cat: item, sink: item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat: item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink) and id[sink] == 42
        # Select the sink instance with ID 42

        put_cat_in_sink(cat, sink)
        wash_cat(cat)
############################################################
When the sub-task is: Turn on the TV with the remote control.
A successful representation:
 
behavior __goal__():
    body:
        bind television: item where:
            is_television(television)
        # Select the television instance
        
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

############################################################
When the sub-task is: 1. Locate the book in the household environment.
A successful representation:
 
def has_book_in_environment():
    # Function to determine if any book can be located in the environment
    symbol book_found = exists book: item : is_book(book)
    return book_found

behavior locate_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if this is the book to locate")

behavior __goal__():
    body:
        if has_book_in_environment():
            # If a book has already been determined to exist in the known environment
            bind book: item where:
                is_book(book)
            achieve visited(book)
        else:
            # If no known book is determined to exist, commence search for a book in the environment
            locate_book()

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table in the home office

############################################################
When the sub-task is: 1. Put a cup inside the coffee maker and turn it on to make the coffee.
A successful representation:
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 147
        # Select the coffee maker with ID 147

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        if not has_water(coffee_maker):
            observe(coffee_maker, "Check if the coffee maker has water")

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

############################################################
When the sub-task is: 2. Add milk and sugar to the coffee.
A successful representation:
 
behavior add_milk_and_sugar_to_coffee(cup:item, milk:item, sugar:item):
    body:
        achieve inside(milk, cup)
        # Pour milk into the coffee cup

        achieve inside(sugar, cup)
        # Add sugar to the coffee cup

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2087
        # Select the cup with ID 2087 (the one you used for making coffee)

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind sugar: item where:
            is_food_sugar(sugar)
        # Select an instance of sugar

        add_milk_and_sugar_to_coffee(cup, milk, sugar)
        # Add milk and sugar to the coffee in the cup

############################################################
When the sub-task is: Open the windows in the bathroom.
A successful representation:
behavior open_bathroom_window(window:item):
    body:
        achieve open(window)

behavior __goal__():
    body:
        bind bathroom: item where:
            is_bathroom(bathroom)
        
        bind window: item where:
            is_window(window) and inside(window, bathroom)
        
        open_bathroom_window(window)
############################################################
When the sub-task is: 1. Locate the book in the house.
A successful representation:
 
def has_book_in_environment():
    # Function to determine if any book can be located in the environment
    symbol book_found = exists book: item : is_book(book)
    return book_found

behavior locate_book():
    body:
        foreach book: item:
            if is_book(book) and not visited(book):
                observe(book, "Check if this is the book to locate")

behavior __goal__():
    body:
        if has_book_in_environment():
            # If a book has already been determined to exist in the known environment
            bind book: item where:
                is_book(book)
            achieve visited(book)
        else:
            # If no known book is determined to exist, commence search for a book in the environment
            locate_book()

############################################################
When the sub-task is: 2. Place the book on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind coffee_table: item where:
            is_table(coffee_table) and inside(coffee_table, home_office)
        # Select the coffee table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, coffee_table)
        # Execute the behavior to put the book on the coffee table in the home office

############################################################
When the sub-task is: Wash your cat in a sink.
A successful representation:
 
behavior put_cat_in_sink(cat:item, sink:item):
    body:
        achieve inside(cat, sink)

behavior wash_cat(cat:item):
    body:
        wash(cat)
        # Wash the cat once it is placed inside the sink
        
behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        put_cat_in_sink(cat, sink)
        wash_cat(cat)

############################################################
When the sub-task is: 1. Find the milk, turkey, egg, fish, and chicken in the kitchen.
A successful representation:

behavior observe_around_items(fridge:item):
    body:
        observe(fridge, "Locate milk, turkey, egg, fish, and chicken")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 289
        # Bind the fridge instance, assuming it is fridge_289

        bind milk: item where:
            is_milk(milk)
        # Bind milk instance

        bind turkey: item where:
            is_food_turkey(turkey)
        # Bind turkey instance

        bind egg: item where:
            is_food_egg(egg)
        # Bind egg instance

        bind fish: item where:
            is_food_fish(fish)
        # Bind fish instance

        bind chicken: item where:
            is_food_chicken(chicken)
        # Bind chicken instance

        observe_around_items(fridge)
        # Ensure all designated food items are located and marked around fridge_289

############################################################
When the sub-task is: 2. Place them on the table in the dining room.
A successful representation:
 
behavior put_items_on_table(item1:item, item2:item, item3:item, item4:item, item5:item, table:item):
    body:
        achieve on(item1, table)
        achieve on(item2, table)
        achieve on(item3, table)
        achieve on(item4, table)
        achieve on(item5, table)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk instance

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey instance

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish instance

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        put_items_on_table(milk, turkey, egg, fish, chicken, dining_room_table)

############################################################
When the sub-task is: Slice the chicken.
A successful representation:
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board
############################################################
When the sub-task is: 1. Find a cup and fill it with milk.
A successful representation:
 
behavior find_cup(cup:item, milk:item):
    body:
        achieve_once inhand(cup)
        # Temporarily hold the cup

behavior fill_cup_with_milk(cup:item, milk:item):
    body:
        achieve inside(milk, cup)
        # Ensure the cup has milk inside

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and recipient(cup)
        # Select a cup that can receive substances

        bind milk: item where:
            is_milk(milk)
        # Select milk instance

        find_cup(cup, milk)
        # Find and hold the cup

        fill_cup_with_milk(cup, milk)
        # Fill the cup with milk

############################################################
When the sub-task is: 2. Heat the cup of milk in the microwave.
A successful representation:

behavior place_cup_in_microwave(cup:item, microwave:item):
    body:
        achieve inside(cup, microwave)
        # Ensure the cup is placed inside the microwave

behavior start_microwave(microwave:item):
    body:
        achieve closed(microwave) # Close the microwave door
        achieve is_on(microwave)  # Turn on the microwave to heat

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with ID 2132

        bind microwave: item where:
            is_microwave(microwave)
        # Select an instance of a microwave

        place_cup_in_microwave(cup, microwave)
        # Place the cup inside the microwave

        start_microwave(microwave)
        # Start the microwave to heat the cup of milk

############################################################
When the sub-task is: 1. Find the basket that contains clothes.
A successful representation:
 
def has_clothes_in_basket(basket: item):
    # Function to check if there are clothes in a specified basket
    symbol has_clothes = exists o: item : is_clothes(o) and inside(o, basket)
    return has_clothes

behavior __goal__():
    body:
        if exists basket: item : is_basket_for_clothes(basket) and has_clothes_in_basket(basket):
            # Check if there is a basket with clothes based on the available information
            bind basket: item where:
                is_basket_for_clothes(basket) and has_clothes_in_basket(basket)
            # Select a basket that has clothes in it
            achieve close_char(char, basket)
            # Move the character closer to the basket with clothes

        else:
            # If no basket with clothes is found, initiate exploration to locate one
            foreach basket: item:
                if is_basket_for_clothes(basket) and not visited(basket):
                    # Check all unvisited baskets
                    observe(basket, "Check if there are clothes in this basket")
                    # Observe whether each basket has any clothes

############################################################
When the sub-task is: 2. Add soap and the clothes to the washing machine.
A successful representation:
behavior add_clothes_and_soap_to_washing_machine(clothes:item, washing_machine:item):
    body:
        achieve inside(clothes, washing_machine)
        # Place clothing item inside the washing machine

behavior add_soap_to_washing_machine(soap:item, washing_machine:item):
    body:
        achieve inside(soap, washing_machine)
        # Add soap to the washing machine

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        bind basket: item where:
            is_basket_for_clothes(basket)
        # Select the basket instance containing clothes

        foreach clothes: item:
            if (is_clothes_pants(clothes) or is_clothes_shirt(clothes) or is_clothes_socks(clothes) or is_clothes_skirt(clothes)) and inside(clothes, basket):
                add_clothes_and_soap_to_washing_machine(clothes, washing_machine)
                # Load all clothes from the basket into the washing machine
                
        bind soap: item where:
            is_soap(soap)
        # Choose an instance of soap

        add_soap_to_washing_machine(soap, washing_machine)
        # Add soap to the washing machine
############################################################
When the sub-task is: 3. Run the washing machine.
A successful representation:

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Turn on the washing machine to start the wash cycle

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance

        start_washing_machine(washing_machine)
        # Execute the behavior to turn on the washing machine

############################################################
When the sub-task is: 1. Put the cleaning solution in the dishwasher.
A successful representation:
 
behavior load_cleaning_solution_into_dishwasher(cleaning_solution: item, dishwasher: item):
    body:
        achieve inside(cleaning_solution, dishwasher)
        # Ensure the cleaning solution is placed inside the dishwasher

behavior __goal__():
    body:
        bind cleaning_solution: item where:
            is_cleaning_solution(cleaning_solution)
        # Select an instance of cleaning solution

        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select an instance of dishwasher

        load_cleaning_solution_into_dishwasher(cleaning_solution, dishwasher)
        # Execute the behavior to load the cleaning solution into the dishwasher

############################################################
When the sub-task is: 2. Wash the bowls and plates with the dishwasher.
A successful representation:
behavior load_dishwasher(o:item, dishwasher:item):
    body:
        achieve inside(o, dishwasher)
        # Place the item inside the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Close the dishwasher door
        achieve is_on(dishwasher) # Turn on the dishwasher

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select the dishwasher

        foreach o: item:
        # Load all bowls and plates into the dishwasher
            if is_bowl(o) or is_plate(o):
                load_dishwasher(o, dishwasher)
        
        start_dishwasher(dishwasher) # Start the dishwasher
############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior find_jacket(jacket: item):
    body:
        achieve close_char(char, jacket)
        observe(jacket, "Check if this is the correct jacket")
        # Find the jacket by getting close to it and inspecting its ID

behavior wash_jacket_by_hand(jacket: item, sink: item):
    body:
        achieve_once inside(jacket, sink)
        # Ensure the jacket is placed inside the sink

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket] == 2047
        # Select the jacket with specific ID 2047

        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        if not visited(jacket):
            find_jacket(jacket)
        
        wash_jacket_by_hand(jacket, sink)
        # Execute the behavior to hand wash the jacket

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
 
behavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Turn on the washing machine to start washing the jacket

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance
        
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket]==2047
        # Select the specific jacket with ID 2047

        put_jacket_in_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)
        # Place the jacket in the washing machine and start the wash cycle

############################################################
When the sub-task is: 1. Find the book and put it on the coffee table in the home office.
A successful representation:
 
behavior put_book_on_table(book:item, table:item):
    body:
        achieve on(book, table)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table within the home office

        bind book: item where:
            is_book(book)
        # Select the instance of a book

        put_book_on_table(book, table)
        # Execute the behavior to put the book on the table

############################################################
When the sub-task is: 2. Open the window in the home office.
A successful representation:
 
# Define a behavior to open a window in the home office
behavior open_window(window:item):
    body:
        achieve open(window)
        # Ensure the window is opened

# Define the main behavior to achieve the given goal
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind window: item where:
            is_window(window) and inside(window, home_office)
        # Select the window in the home office
        
        open_window(window)
        # Execute the behavior to open the window in the home office

############################################################
When the sub-task is: 1. Find a couch and sit on it.
A successful representation:
 
behavior __goal__():
    body:
        if exists couch: item : is_couch(couch) and sittable(couch):
            # If a sittable couch is identified, approach it and sit
            bind couch: item where:
                is_couch(couch) and sittable(couch)
            achieve close_char(char, couch)
            sit_somewhere(couch)
        else:
            # Check all unvisited couches in the scene
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if the couch is sittable")

############################################################
When the sub-task is: 2. Locate the remote control and use it to turn on the TV.
A successful representation:
 
behavior locate_remote_control(remote_control: item):
    body:
        achieve visited(remote_control)
        # Ensure the remote control is located and marked as visited

behavior turn_on_television(television: item, remote_control: item):
    body:
        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        touch(remote_control)
        # Use the remote control to turn on the television

        achieve is_on(television)
        # Ensure the television is switched on

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control instance

        bind television: item where:
            is_television(television)
        # Select the television instance

        locate_remote_control(remote_control)
        turn_on_television(television, remote_control)
        # Execute the behaviors to locate the remote and turn on the television with it

############################################################
When the sub-task is: 2. Put the vegetables in a pot and boil them on the stove.
A successful representation:
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        if exists faucet: item: is_faucet(faucet) and is_on(faucet):
            bind faucet: item where:
                is_faucet(faucet) and is_on(faucet)
            achieve_once is_off(faucet)
            # Ensure the faucet is turned off after washing vegetables

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

############################################################
When the sub-task is: 3. Store the whole pot in the fridge.
A successful representation:
 
behavior store_pot_in_fridge(pot:item, fridge:item):
    body:
        achieve inside(pot, fridge)
        # Place the pot inside the fridge

behavior close_the_fridge_door(fridge:item):
    body:
        achieve closed(fridge)
        # Make sure the fridge door is closed

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge instance

        store_pot_in_fridge(pot, fridge)
        close_the_fridge_door(fridge)

############################################################
When the sub-task is: 1. Hand wash the jacket.
A successful representation:
 
behavior find_jacket(jacket: item):
    body:
        observe(jacket, "Check if this is the correct jacket")
        # Observe the specific item to ensure it is the jacket you want to hand wash

behavior wash_jacket_by_hand(jacket: item, sink: item):
    body:
        achieve_once inside(jacket, sink)
        # Ensure the jacket is placed inside the sink

        wash(jacket)
        # Wash the jacket by hand

behavior __goal__():
    body:
        bind jacket: item where:
            is_clothes_jacket(jacket)
        # Select an instance of a jacket

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        if not visited(jacket):
            find_jacket(jacket)
        # Ensure the jacket is located before starting the wash

        wash_jacket_by_hand(jacket, sink)
        # Execute the behavior to wash the jacket by hand

############################################################
When the sub-task is: 2. Wash the jacket using the washing machine.
A successful representation:
behavior put_jacket_in_washing_machine(jacket:item, washing_machine:item):
    body:
        achieve inside(jacket, washing_machine)
        # Place the jacket inside the washing machine

behavior start_washing_machine(washing_machine:item):
    body:
        achieve closed(washing_machine)
        # Ensure the washing machine door is closed
        achieve is_on(washing_machine)
        # Turn on the washing machine to start washing the jacket

behavior __goal__():
    body:
        bind washing_machine: item where:
            is_washing_machine(washing_machine)
        # Select the washing machine instance
        
        bind jacket: item where:
            is_clothes_jacket(jacket) and id[jacket]==2078
        # Select the specific jacket with ID 2078

        put_jacket_in_washing_machine(jacket, washing_machine)
        start_washing_machine(washing_machine)
        # Place the jacket in the washing machine and start the wash cycle
############################################################
When the sub-task is: Slice the chicken.
A successful representation:
 
behavior slice_chicken(chicken:item, cutting_board:item):
    body:
        achieve cut(chicken)

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board instance

        slice_chicken(chicken, cutting_board)
        # Execute behavior to slice the chicken on the cutting board

############################################################
When the sub-task is: Place the chicken and onion in the oven and turn on the oven.
A successful representation:

behavior put_inside_oven(item: item, oven: item):
    body:
        achieve inside(item, oven)
        # Ensure the item is placed inside the oven

behavior start_oven(oven: item):
    body:
        achieve closed(oven)
        # Close the oven door
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken instance

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion instance

        bind oven: item where:
            is_oven(oven)
        # Select the oven instance

        put_inside_oven(chicken, oven)
        put_inside_oven(onion, oven)
        start_oven(oven)

