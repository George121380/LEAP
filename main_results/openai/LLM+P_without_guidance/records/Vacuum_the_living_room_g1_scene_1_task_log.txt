From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_vacuum_cleaner_2139_around_kitchen_counter_122(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(vacuum_cleaner,kitchen_counter_instance)
        else:
            exp(vacuum_cleaner,kitchen_counter_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,kitchen_counter_instance]=True
        close[kitchen_counter_instance,vacuum_cleaner]=True
    

behavior find_mat_284_around_table_270(mat:item):
    goal: not unknown(mat)
    body:
        assert is_mat(mat)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(mat,table_instance)
        else:
            exp(mat,table_instance)
    eff:
        unknown[mat]=False
        close[mat,table_instance]=True
        close[table_instance,mat]=True
    

#exp_behavior_end

#goal_representation
 
def has_vacuum_cleaner_available():
    # Determine if a vacuum cleaner is available in the environment
    symbol available=exists vc: item : is_vacuum_cleaner(vc)
    return available

behavior prepare_vacuum_cleaner(vc: item):
    body:
        assert is_vacuum_cleaner(vc) 
        # Ensure the item is a vacuum cleaner

        achieve plugged(vc) 
        # Plug in the vacuum cleaner

        achieve is_on(vc) 
        # Turn on the vacuum cleaner

behavior perform_vacuuming(vc: item, floor: item):
    body:
        assert is_floor(floor) 
        # Ensure the floor is identified

        achieve clean(floor) 
        # Vacuum the floor

behavior stop_vacuum_cleaner(vc: item):
    body:
        achieve is_off(vc) 
        # Turn off the vacuum cleaner

        achieve unplugged(vc) 
        # Unplug the vacuum cleaner

behavior __goal__():
    body:
        if has_vacuum_cleaner_available():
            bind vc: item where:
                is_vacuum_cleaner(vc)
            # Select the vacuum cleaner

            bind floor: item where:
                is_floor(floor)
            # Select the floor to clean

            prepare_vacuum_cleaner(vc)
            perform_vacuuming(vc, floor)
            stop_vacuum_cleaner(vc)
        else:
            observe(char, "Find a vacuum cleaner")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_vacuum_cleaner_available():
    # Determine if a vacuum cleaner is available in the environment
    symbol available=exists vc: item : is_vacuum_cleaner(vc)
    return available

behavior prepare_vacuum_cleaner(vc: item):
    body:
        assert is_vacuum_cleaner(vc) 
        # Ensure the item is a vacuum cleaner

        achieve plugged(vc) 
        # Plug in the vacuum cleaner

        achieve is_on(vc) 
        # Turn on the vacuum cleaner

behavior perform_vacuuming(vc: item, floor: item):
    body:
        assert is_floor(floor) 
        # Ensure the floor is identified

        achieve clean(floor) 
        # Vacuum the floor

behavior stop_vacuum_cleaner(vc: item):
    body:
        achieve is_off(vc) 
        # Turn off the vacuum cleaner

        achieve unplugged(vc) 
        # Unplug the vacuum cleaner

behavior __goal__():
    body:
        if has_vacuum_cleaner_available():
            bind vc: item where:
                is_vacuum_cleaner(vc)
            # Select the vacuum cleaner

            bind floor: item where:
                is_floor(floor)
            # Select the floor to clean

            prepare_vacuum_cleaner(vc)
            perform_vacuuming(vc, floor)
            stop_vacuum_cleaner(vc)
        else:
            observe(char, "Find a vacuum cleaner")

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(vacuum_cleaner_2139, kitchen_counter_122)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(vacuum_cleaner_2139, kitchen_counter_122)
Fail to find vacuum_cleaner_2139 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(washing_machine_2079)open_executor(washing_machine_2079)exp(vacuum_cleaner_2139, washing_machine_2079)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
open_executor(washing_machine_2079)
Robot is inside dining_room_41. Robot is close washing_machine_2079. 
##############################
From agent.py
exp(vacuum_cleaner_2139, washing_machine_2079)
Fail to find vacuum_cleaner_2139 around washing_machine_2079. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(vacuum_cleaner_2139, cupboard_117)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close washing_machine_2079.
##############################
From agent.py
exp(vacuum_cleaner_2139, cupboard_117)
Fail to find vacuum_cleaner_2139 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(vacuum_cleaner_2139, cupboard_118)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(vacuum_cleaner_2139, cupboard_118)
Fail to find vacuum_cleaner_2139 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(vacuum_cleaner_2139, kitchen_counter_119)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(vacuum_cleaner_2139, kitchen_counter_119)
Fail to find vacuum_cleaner_2139 around kitchen_counter_119. 
##############################
From agent.py-> find a plan in act()
walk_executor(trashcan_99)exp(vacuum_cleaner_2139, trashcan_99)walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(trashcan_99)
Find food_orange_2061. Find food_onion_2009. Find glue_2045. Find vacuum_cleaner_2139. Robot is inside dining_room_41. Robot is close trashcan_99. Robot is close food_orange_2061. Robot is close floor_51. Robot is close food_onion_2009. Robot is close glue_2045. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(vacuum_cleaner_2139, trashcan_99)
Find vacuum_cleaner_2139. 
##############################
From agent.py-> find a plan in act()
walk_executor(vacuum_cleaner_2139)plugin_executor(vacuum_cleaner_2139)switchon_executor(vacuum_cleaner_2139)walk_executor(floor_10)wash_executor(floor_10)walk_executor(vacuum_cleaner_2139)switchoff_executor(vacuum_cleaner_2139)plugout_executor(vacuum_cleaner_2139)
##############################
From agent.py
walk_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. Robot is no longer close trashcan_99.Robot is no longer close food_orange_2061.Robot is no longer close floor_51.Robot is no longer close food_onion_2009.Robot is no longer close glue_2045.
##############################
From agent.py
plugin_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
switchon_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
walk_executor(floor_10)
Robot is inside bathroom_1. Robot is close floor_10. Robot is no longer inside dining_room_41.Robot is no longer close vacuum_cleaner_2139.
##############################
From agent.py
wash_executor(floor_10)
Robot is inside bathroom_1. Robot is close floor_10. 
##############################
From agent.py
walk_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. Robot is no longer inside bathroom_1.Robot is no longer close floor_10.
##############################
From agent.py
switchoff_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
plugout_executor(vacuum_cleaner_2139)
Robot is inside dining_room_41. Robot is close vacuum_cleaner_2139. 
##############################
From agent.py
Human Instruction: Vacuum the floor using the vacuum cleaner that was found and prepared. The previous actions included washing the bathroom floor, which does not fulfill the goal of vacuuming.

The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for vacuum_cleaner_2139 around kitchen_counter_122.
Action 3: Walk to washing_machine_2079.
Action 4: Open washing_machine_2079.
Action 5: look for vacuum_cleaner_2139 around washing_machine_2079.
Action 6: Walk to cupboard_117.
Action 7: look for vacuum_cleaner_2139 around cupboard_117.
Action 8: Walk to cupboard_118.
Action 9: Open cupboard_118.
Action 10: look for vacuum_cleaner_2139 around cupboard_118.
Action 11: Walk to kitchen_counter_119.
Action 12: look for vacuum_cleaner_2139 around kitchen_counter_119.
Action 13: Walk to trashcan_99.
Action 14: look for vacuum_cleaner_2139 around trashcan_99.
Action 15: Walk to vacuum_cleaner_2139.
Action 16: Plug in vacuum_cleaner_2139.
Action 17: Switch on vacuum_cleaner_2139.
Action 18: Walk to floor_10.
Action 19: Wash floor_10.
Action 20: Walk to vacuum_cleaner_2139.
Action 21: Switch off vacuum_cleaner_2139.
Action 22: Plug out vacuum_cleaner_2139.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(vacuum_cleaner:item, floor:item):
    body:
        achieve close_char(char, vacuum_cleaner)
        achieve plugged(vacuum_cleaner)
        achieve is_on(vacuum_cleaner)
        achieve clean(floor)
        achieve is_off(vacuum_cleaner)
        achieve unplugged(vacuum_cleaner)

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner) and close_char(char, vacuum_cleaner)
        bind floor: item where:
            is_floor(floor) and dirty(floor)
        vacuum_floor(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_counter_18(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==18
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

behavior find_brush_2002_around_bathroom_cabinet_17(brush:item):
    goal: not unknown(brush)
    body:
        assert is_brush(brush)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(brush,bathroom_cabinet_instance)
        else:
            exp(brush,bathroom_cabinet_instance)
    eff:
        unknown[brush]=False
        close[brush,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,brush]=True
    

behavior find_rag_2052_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior vacuum_floor(floor:item, vacuum_cleaner:item):
    body:
        achieve clean(floor)
        # Ensure the floor is clean by using the vacuum cleaner

behavior __goal__():
    body:
        bind floor: item where:
            is_floor(floor)
        # Select the floor to vacuum

        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        achieve plugged(vacuum_cleaner)
        # Ensure the vacuum cleaner is plugged in

        achieve is_on(vacuum_cleaner)
        # Ensure the vacuum cleaner is turned on

        vacuum_floor(floor, vacuum_cleaner)

        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner after use

        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner after use

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Vacuum the floor.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cleaning_solution_2143_around_bathroom_cabinet_17(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
behavior operate_vacuum_cleaner(vacuum_cleaner:item, floor:item):
    body:
        achieve plugged(vacuum_cleaner)
        # Plug the vacuum cleaner in
        
        achieve is_on(vacuum_cleaner)
        # Turn on the vacuum cleaner

        achieve clean(floor)
        # Clean the floor

        achieve is_off(vacuum_cleaner)
        # Turn off the vacuum cleaner

        achieve unplugged(vacuum_cleaner)
        # Unplug the vacuum cleaner

behavior __goal__():
    body:
        bind vacuum_cleaner: item where:
            is_vacuum_cleaner(vacuum_cleaner)
        # Select the vacuum cleaner

        bind floor: item where:
            is_floor(floor) and dirty(floor)
        # Select a dirty floor

        operate_vacuum_cleaner(vacuum_cleaner, floor)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
