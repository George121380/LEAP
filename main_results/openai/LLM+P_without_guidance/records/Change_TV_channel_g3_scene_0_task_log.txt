From agent.py
Reset goals: The sub-goals are: 
['Sitting on the couch, then turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_coffee_table_2068(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(remote_control,coffee_table_instance)
        else:
            exp(remote_control,coffee_table_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,coffee_table_instance]=True
        close[coffee_table_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve is_on(tv)
        # Ensure the TV is turned on

behavior sit_on_couch(couch:item):
    body:
        assert sittable(couch)
        # Ensure the couch can be sat on
        achieve on_char(char, couch)
        # Sit on the couch

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Select a couch

        bind tv: item where:
            is_television(tv)
        # Select a television

        bind remote_control: item where:
            is_remote_control(remote_control) and close(remote_control, tv)
        # Select a remote control close to the TV
        
        sit_on_couch(couch)
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sitting on the couch, then turn on the TV with the remote control.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2052_around_television_248(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind television_instance:item where:
            is_television(television_instance) and id[television_instance]==248
        achieve close_char(char,television_instance)
        if can_open(television_instance):
            achieve_once open(television_instance)
            exp(remote_control,television_instance)
        else:
            exp(remote_control,television_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,television_instance]=True
        close[television_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)

behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve_once inhand(remote_control)
        # Holding the remote control temporarily
        achieve is_on(tv)

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Select the couch

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        sit_on_couch(couch)
        turn_on_tv(tv, remote_control)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior sit_on_couch(couch:item):
    body:
        achieve on_char(char, couch)

behavior turn_on_tv(tv:item, remote_control:item):
    body:
        achieve_once inhand(remote_control)
        # Holding the remote control temporarily
        achieve is_on(tv)

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch)
        # Select the couch

        bind tv: item where:
            is_television(tv)
        # Select the television

        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        sit_on_couch(couch)
        turn_on_tv(tv, remote_control)

##############################
From agent.py-> find a plan in act()
walk_executor(couch_352)sit_executor(couch_352)walk_executor(television_248)exp(remote_control_2052, television_248)walk_executor(remote_control_2052)grab_executor(remote_control_2052)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
walk_executor(couch_352)
Find mat_401. Find remote_control_2052. Find clothes_jacket_2047. Find cat_2055. Find pillow_405. Find drawing_400. Find pillow_406. Find hairbrush_2002. Find vacuum_cleaner_2070. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is no longer inside bathroom_1.
##############################
From agent.py
sit_executor(couch_352)
Find headset_2062. Find hanger_363. Find hanger_374. Find drawing_404. Find keyboard_415. Find headset_2076. Find hanger_369. Find hanger_361. Find spectacles_2082. Find drawing_402. Find hanger_372. Find chair_356. Find book_2066. Find phone_2077. Find mouse_413. Find hanger_375. Find pencil_2001. Find hanger_367. Find hanger_359. Find dvd_player_2061. Find drawing_403. Find hanger_365. Find book_2067. Find hanger_376. Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_mouse_413(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==413
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_remote_control(television:item):
    # Function to check if the television has a remote control nearby
    symbol has_remote=exists remote: item : is_remote_control(remote) and close(remote, television)
    return has_remote

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # The user has already sat on couch_352

        bind television: item where:
            is_television(television) and id[television]==248
        # Select the television with ID 248 to turn it on

        if has_remote_control(television):
            # Check if there is a remote control near the television
            bind remote: item where:
                is_remote_control(remote) and close(remote, television)
            achieve_once inhand(remote)
            # Temporarily take the remote control
            achieve is_on(television)
            # Turn on the television

        else:
            # If the remote is not found, observe the surroundings for the remote control
            observe(couch, "Check if the remote control is near or on the couch")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_remote_control(television:item):
    # Function to check if the television has a remote control nearby
    symbol has_remote=exists remote: item : is_remote_control(remote) and close(remote, television)
    return has_remote

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch]==352
        # The user has already sat on couch_352

        bind television: item where:
            is_television(television) and id[television]==248
        # Select the television with ID 248 to turn it on

        if has_remote_control(television):
            # Check if there is a remote control near the television
            bind remote: item where:
                is_remote_control(remote) and close(remote, television)
            achieve_once inhand(remote)
            # Temporarily take the remote control
            achieve is_on(television)
            # Turn on the television

        else:
            # If the remote is not found, observe the surroundings for the remote control
            observe(couch, "Check if the remote control is near or on the couch")

##############################
From agent.py-> find a plan in act()
obs(couch_352, Check if the remote control is near or on the couch)
##############################
From agent.py
obs(couch_352, Check if the remote control is near or on the couch)
Get this information:  couch_352 is inside home_office_319. table_355 is inside couch_352. cat_2055 is on couch_352. couch_352 is facing television_410. couch_352 is on mat_401. curtain_409 is on couch_352. couch_352 is close to remote_control_2052. couch_352 is close to cat_2055. couch_352 is close to drawing_400. couch_352 is close to mat_401. couch_352 is close to pillow_405. couch_352 is close to vacuum_cleaner_2070. couch_352 is close to curtain_407. couch_352 is close to pillow_406. couch_352 is close to curtain_408. couch_352 is close to curtain_409. couch_352 is close to television_410. couch_352 is close to floor_321. couch_352 is close to floor_322. couch_352 is close to floor_323. couch_352 is close to floor_324. couch_352 is close to wall_329. couch_352 is close to wall_333. couch_352 is close to wall_335. couch_352 is close to hairbrush_2002. couch_352 is close to window_348. couch_352 is close to ceilinglamp_349. couch_352 is close to walllamp_350. couch_352 is close to tvstand_353. couch_352 is close to table_355. couch_352 is close to clothes_jacket_2047. couch_352 is close to character_65. hairbrush_2002 is on couch_352. remote_control_2052 is on couch_352. clothes_jacket_2047 is on couch_352. pillow_406 is inside couch_352. character_65 is on couch_352. couch_352 is CLEAN.
##############################
From agent.py
Human Instruction: You need to use the remote control to turn on the television.

Trial and Error: You can not walk television_248
The actions you have taken:
Action 1: Walk to couch_352.
Action 2: Sit on couch_352.
Action 3: Observe around couch_352 with the question of Check if the remote control is near or on the couch.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the couch with ID 352

        bind television: item where:
            is_television(television) and id[television] == 248
        # Select the television with ID 248

        bind remote_control: item where:
            is_remote_control(remote_control) and close(remote_control, couch)
        # Select the remote control close to the couch

        sit_somewhere(couch)
        # Sit on the selected couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve is_on(television)
        # Turn on the television

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the couch with ID 352

        bind television: item where:
            is_television(television) and id[television] == 248
        # Select the television with ID 248

        bind remote_control: item where:
            is_remote_control(remote_control) and close(remote_control, couch)
        # Select the remote control close to the couch

        sit_somewhere(couch)
        # Sit on the selected couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control

        achieve is_on(television)
        # Turn on the television

##############################
From agent.py-> find a plan in act()
sit_executor(couch_352)standup_executor(char)walk_executor(remote_control_2052)grab_executor(remote_control_2052)standup_executor(char)walk_executor(television_248)switchon_executor(television_248)
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
def find_remote_control(couch: item):
    # Function to check if there is a remote control on or near the couch
    symbol has_remote_control = exists o: item : is_remote_control(o) and (on(o, couch) or close(o, couch))
    return has_remote_control

behavior turn_on_tv(remote: item, tv: item):
    body:
        achieve_once inhand(remote) # Hold the remote control once
        achieve is_on(tv) # Turn on the TV

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the known couch with the ID 352

        if not find_remote_control(couch):
            # Check if the remote control is on or near the couch
            foreach o: item:
                if is_remote_control(o) and not visited(o):
                    observe(o, "Check if the remote control is on or near the couch")
                    # Observe the remote control to confirm its placement

        bind remote: item where:
            is_remote_control(remote) and (on(remote, couch) or close(remote, couch))
        # Select the remote control that is on or near the couch

        bind tv: item where:
            is_television(tv) and id[tv] == 248
        # Select the television with the known ID 248

        achieve on_char(char, couch) # Ensure the character is sitting on the couch

        turn_on_tv(remote, tv) # Turn on the TV using the remote control

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def find_remote_control(couch: item):
    # Function to check if there is a remote control on or near the couch
    symbol has_remote_control = exists o: item : is_remote_control(o) and (on(o, couch) or close(o, couch))
    return has_remote_control

behavior turn_on_tv(remote: item, tv: item):
    body:
        achieve_once inhand(remote) # Hold the remote control once
        achieve is_on(tv) # Turn on the TV

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select the known couch with the ID 352

        if not find_remote_control(couch):
            # Check if the remote control is on or near the couch
            foreach o: item:
                if is_remote_control(o) and not visited(o):
                    observe(o, "Check if the remote control is on or near the couch")
                    # Observe the remote control to confirm its placement

        bind remote: item where:
            is_remote_control(remote) and (on(remote, couch) or close(remote, couch))
        # Select the remote control that is on or near the couch

        bind tv: item where:
            is_television(tv) and id[tv] == 248
        # Select the television with the known ID 248

        achieve on_char(char, couch) # Ensure the character is sitting on the couch

        turn_on_tv(remote, tv) # Turn on the TV using the remote control

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(remote_control_2052)grab_executor(remote_control_2052)standup_executor(char)walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_319. Robot is close couch_352. Robot is close mat_401. Robot is on couch_352. Robot is facing television_410. 
##############################
From agent.py
walk_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Robot is no longer close mat_401.Robot is no longer facing television_410.
##############################
From agent.py
grab_executor(remote_control_2052)
Robot is inside home_office_319. Robot is close couch_352. Robot is close remote_control_2052. Robot is on couch_352. Grabbing remote_control_2052 by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cd_player_2060_around_dvd_player_2061(cd_player:item):
    goal: not unknown(cd_player)
    body:
        assert is_cd_player(cd_player)
        bind dvd_player_instance:item where:
            is_dvd_player(dvd_player_instance) and id[dvd_player_instance]==2061
        achieve close_char(char,dvd_player_instance)
        if can_open(dvd_player_instance):
            achieve_once open(dvd_player_instance)
            exp(cd_player,dvd_player_instance)
        else:
            exp(cd_player,dvd_player_instance)
    eff:
        unknown[cd_player]=False
        close[cd_player,dvd_player_instance]=True
        close[dvd_player_instance,cd_player]=True
    

behavior find_wall_clock_249_around_wallshelf_234(wall_clock:item):
    goal: not unknown(wall_clock)
    body:
        assert is_wall_clock(wall_clock)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(wall_clock,wallshelf_instance)
        else:
            exp(wall_clock,wallshelf_instance)
    eff:
        unknown[wall_clock]=False
        close[wall_clock,wallshelf_instance]=True
        close[wallshelf_instance,wall_clock]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_from_couch(remote_control:item, couch:item, television:item):
    body:
        achieve on_char(char, couch)
        # Ensure the character is on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to operate it

        achieve is_on(television)
        # Turn on the television

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2052
        # Select remote control with ID 2052

        bind television: item where:
            is_television(television) and id[television] == 248
        # Select television with ID 248

        turn_on_tv_from_couch(remote_control, couch, television)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_tv_from_couch(remote_control:item, couch:item, television:item):
    body:
        achieve on_char(char, couch)
        # Ensure the character is on the couch

        achieve_once inhand(remote_control)
        # Temporarily hold the remote control to operate it

        achieve is_on(television)
        # Turn on the television

behavior __goal__():
    body:
        bind couch: item where:
            is_couch(couch) and id[couch] == 352
        # Select couch with ID 352

        bind remote_control: item where:
            is_remote_control(remote_control) and id[remote_control] == 2052
        # Select remote control with ID 2052

        bind television: item where:
            is_television(television) and id[television] == 248
        # Select television with ID 248

        turn_on_tv_from_couch(remote_control, couch, television)

##############################
From agent.py-> find a plan in act()
walk_executor(television_248)switchon_executor(television_248)
##############################
From agent.py
walk_executor(television_248)
Find mat_236. Find drawing_241. Find drawing_242. Find drawing_243. Find phone_247. Find cd_2075. Find cd_player_2060. Find wall_clock_249. Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. Robot is no longer inside home_office_319.Robot is no longer close couch_352.
##############################
From agent.py
switchon_executor(television_248)
Robot is inside dining_room_201. Robot is close remote_control_2052. Robot is close television_248. Robot is close tvstand_225. Robot is on couch_352. 
##############################
