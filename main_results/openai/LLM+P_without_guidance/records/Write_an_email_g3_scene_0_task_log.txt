From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office. Touch the mouse near the computer to turn it on. Then type the keyboard to send a e-mail.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_166_around_computer_417(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==417
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_keyboard_168_around_desk_104(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==104
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior turn_on_computer(mouse:item, computer:item):
    body:
        achieve close(mouse, computer)  # Find the mouse next to the computer
        touch(mouse)
        # Touch the mouse to turn on the computer

behavior send_email(keyboard:item, computer:item):
    body:
        achieve is_on(computer)  # Ensure the computer is turned on
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select a chair inside the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select a computer in the home office

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select a mouse that is close to the computer

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select a keyboard close to the computer

        sit_on_chair(chair)
        turn_on_computer(mouse, computer)
        send_email(keyboard, computer)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Sit on the chair in front of the computer in the home office. Touch the mouse near the computer to turn it on. Then type the keyboard to send a e-mail.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_413_around_computer_170(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(mouse,computer_instance)
        else:
            exp(mouse,computer_instance)
    eff:
        unknown[mouse]=False
        close[mouse,computer_instance]=True
        close[computer_instance,mouse]=True
    

behavior find_keyboard_415_around_computer_170(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==170
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

behavior find_chair_106_around_home_office_319(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==319
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior turn_on_computer(mouse:item):
    body:
        achieve is_on(mouse)
        # Turn the computer on by touching the mouse

behavior send_email(computer:item):
    body:
        achieve open(computer)
        # Assume typing on the keyboard opens the computer and allows sending an email

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind chair: item where:
            is_chair(chair) and inside(chair, home_office)
        # Select the chair in the home office

        bind computer_mouse: item where:
            is_mouse(computer_mouse) and close(computer_mouse, char)
        # Select the mouse near the computer

        bind computer: item where:
            is_computer(computer) and close(computer, computer_mouse)
        # Select the computer near the mouse

        sit_on_chair(chair)
        turn_on_computer(computer_mouse)
        send_email(computer)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
