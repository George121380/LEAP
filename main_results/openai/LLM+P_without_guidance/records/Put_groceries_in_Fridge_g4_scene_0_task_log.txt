From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item, surface:item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is appropriate for cutting

        achieve_once inhand(chicken)
        # Temporarily hold the chicken to simulate cutting

        achieve cut(chicken)
        # Achieve the state of the chicken being cut

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Ensure the chicken is placed inside the fridge

        achieve closed(fridge)
        # Make sure the fridge is closed after storing the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind surface: item where:
            surfaces(surface)
        # Select a suitable surface for cutting

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_chicken(chicken, surface)
        store_in_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item, surface:item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is appropriate for cutting

        achieve_once inhand(chicken)
        # Temporarily hold the chicken to simulate cutting

        achieve cut(chicken)
        # Achieve the state of the chicken being cut

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Ensure the chicken is placed inside the fridge

        achieve closed(fridge)
        # Make sure the fridge is closed after storing the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind surface: item where:
            surfaces(surface)
        # Select a suitable surface for cutting

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_chicken(chicken, surface)
        store_in_fridge(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the chicken into pieces, then put back to the fridge.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_chicken(chicken:item, surface:item):
    body:
        assert is_cutting_board(surface) or surfaces(surface)
        # Ensure the surface is appropriate for cutting

        achieve_once inhand(chicken)
        # Temporarily hold the chicken to simulate cutting

        achieve cut(chicken)
        # Achieve the state of the chicken being cut

behavior store_in_fridge(chicken:item, fridge:item):
    body:
        achieve inside(chicken, fridge)
        # Ensure the chicken is placed inside the fridge

        achieve closed(fridge)
        # Make sure the fridge is closed after storing the chicken

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind surface: item where:
            surfaces(surface)
        # Select a suitable surface for cutting

        bind fridge: item where:
            is_fridge(fridge)
        # Select the fridge

        cut_chicken(chicken, surface)
        store_in_fridge(chicken, fridge)
 
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
