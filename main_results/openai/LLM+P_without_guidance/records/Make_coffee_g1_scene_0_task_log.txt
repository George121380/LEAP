From agent.py
Reset goals: The sub-goals are: 
['make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2064_around_kitchen_counter_230(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2000_around_kitchen_counter_230(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(coffee_filter,kitchen_counter_instance)
        else:
            exp(coffee_filter,kitchen_counter_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,kitchen_counter_instance]=True
        close[kitchen_counter_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_and_water(coffee_maker: item):
    # Function to check if the coffee maker contains both coffee grounds and water
    symbol has_coffee=exists o: item : is_coffee_filter(o) and inside(o, coffee_maker)
    symbol has_water=has_water(coffee_maker)
    return has_coffee and has_water

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Place the cup under the coffee maker spout

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without liquid

        if has_coffee_and_water(coffee_maker):
            # If the coffee maker is ready with coffee and water
            prepare_coffee(coffee_maker, cup)
        else:
            # Explore further for unvisited coffee makers and observe the state
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check if coffee maker has coffee and water")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_coffee_and_water(coffee_maker: item):
    # Function to check if the coffee maker contains both coffee grounds and water
    symbol has_coffee=exists o: item : is_coffee_filter(o) and inside(o, coffee_maker)
    symbol has_water=has_water(coffee_maker)
    return has_coffee and has_water

behavior prepare_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Place the cup under the coffee maker spout

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to brew coffee into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select a coffee maker

        bind cup: item where:
            is_cup(cup) and not has_water(cup)
        # Select a cup without liquid

        if has_coffee_and_water(coffee_maker):
            # If the coffee maker is ready with coffee and water
            prepare_coffee(coffee_maker, cup)
        else:
            # Explore further for unvisited coffee makers and observe the state
            foreach coffee_maker: item:
                if is_coffe_maker(coffee_maker) and not visited(coffee_maker):
                    observe(coffee_maker, "Check if coffee maker has coffee and water")

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_290)open_executor(coffe_maker_290)obs(coffe_maker_290, Check if coffee maker has coffee and water)
##############################
From agent.py
walk_executor(coffe_maker_290)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
open_executor(coffe_maker_290)
Find drawing_174. Robot is inside dining_room_201. Robot is close coffe_maker_290. Robot is close kitchen_counter_230. 
##############################
From agent.py
obs(coffe_maker_290, Check if coffee maker has coffee and water)
Get this information:  coffe_maker_290 is inside dining_room_201. coffe_maker_290 is facing drawing_238. coffe_maker_290 is facing drawing_239. coffe_maker_290 is facing drawing_240. coffe_maker_290 is facing drawing_241. coffe_maker_290 is facing drawing_242. coffe_maker_290 is facing drawing_243. coffe_maker_290 is on kitchen_counter_230. coffe_maker_290 is close to stovefan_288. coffe_maker_290 is close to toaster_292. coffe_maker_290 is close to cupboard_229. coffe_maker_290 is close to kitchen_counter_230. coffe_maker_290 is close to oven_295. coffe_maker_290 is close to tray_296. coffe_maker_290 is close to faucet_232. coffe_maker_290 is close to sink_231. coffe_maker_290 is close to shower_36. coffe_maker_290 is close to floor_204. coffe_maker_290 is close to wall_11. coffe_maker_290 is close to wall_15. coffe_maker_290 is close to wall_211. coffe_maker_290 is close to wall_212. coffe_maker_290 is close to wall_215. coffe_maker_290 is close to ceiling_221. coffe_maker_290 is close to character_65. coffe_maker_290 is CLEAN. coffe_maker_290 is PLUGGED_IN. coffe_maker_290 is OFF. coffe_maker_290 is OPEN.
##############################
From agent.py
Human Instruction: The robot needs to verify if the coffee maker already contains coffee grounds and water. If it has both, the robot should place a cup under the spout and turn on the coffee maker to brew the coffee into the cup. If the coffee maker doesn't contain them, they should be added before proceeding.

The actions you have taken:
Action 1: Walk to coffe_maker_290.
Action 2: Open coffe_maker_290.
Action 3: Observe around coffe_maker_290 with the question of Check if coffee maker has coffee and water.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coffee_filter_2000_around_wallshelf_234(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(coffee_filter,wallshelf_instance)
        else:
            exp(coffee_filter,wallshelf_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,wallshelf_instance]=True
        close[wallshelf_instance,coffee_filter]=True
    

behavior find_cleaning_solution_2073_around_bathroom_cabinet_40(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==40
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(cleaning_solution,bathroom_cabinet_instance)
        else:
            exp(cleaning_solution,bathroom_cabinet_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def check_coffee_maker_ready(coffee_maker:item):
    # Check if the coffee maker has both coffee grounds and water
    symbol ready=has_water(coffee_maker) and not dirty(coffee_maker)
    return ready

behavior place_cup_under_spout(cup:item, coffee_maker:item):
    body:
        achieve on(cup, coffee_maker)
        # Place the cup under the coffee makers spout

behavior turn_on_coffee_maker(coffee_maker:item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select a cup

        if check_coffee_maker_ready(coffee_maker):
            place_cup_under_spout(cup, coffee_maker)
            turn_on_coffee_maker(coffee_maker)
        else:
            if not has_water(coffee_maker):
                achieve has_water(coffee_maker)
            if dirty(coffee_maker):
                clean(coffee_maker)
            place_cup_under_spout(cup, coffee_maker)
            turn_on_coffee_maker(coffee_maker)

#goal_representation_end

##############################
