From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the couch.', '2. Use the remote control to turn on the TV.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation

behavior sit_on_couch(couch: item):
    body:
        achieve on_char(char, couch)
        # Sit on the couch

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch):
            # Check for the presence of a couch
            bind couch: item where:
                is_couch(couch)
            sit_on_couch(couch)
        else:
            # Explore to locate a couch if it is not known
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if this is a suitable couch to sit on")

#goal_representation_end

##############################
From agent.py->reset_goal

behavior sit_on_couch(couch: item):
    body:
        achieve on_char(char, couch)
        # Sit on the couch

behavior __goal__():
    body:
        if exists couch: item : is_couch(couch):
            # Check for the presence of a couch
            bind couch: item where:
                is_couch(couch)
            sit_on_couch(couch)
        else:
            # Explore to locate a couch if it is not known
            foreach couch: item:
                if is_couch(couch) and not visited(couch):
                    observe(couch, "Check if this is a suitable couch to sit on")

##############################
From agent.py-> find a plan in act()
walk_executor(couch_192)sit_executor(couch_192)
##############################
From agent.py
walk_executor(couch_192)
Find vacuum_cleaner_2094. Find cat_2082. Find pillow_195. Find drawing_196. Robot is inside home_office_161. Robot is close couch_192. 
##############################
From agent.py
sit_executor(couch_192)
Find keyboard_2111. Find stereo_2007. Find cd_2100. Find mouse_2112. Find oil_2005. Find video_game_controller_2019. Find dvd_player_2000. Find clothes_underwear_2022. Find chair_2118. Find cup_2006. Find laser_pointer_2025. Find mat_201. Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_186(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==186
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

behavior find_chair_138_around_tvstand_135(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(chair,tvstand_instance)
        else:
            exp(chair,tvstand_instance)
    eff:
        unknown[chair]=False
        close[chair,tvstand_instance]=True
        close[tvstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(remote_control: item, television: item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        turn_on_tv_with_remote(remote_control, television)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_tv_with_remote(remote_control: item, television: item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        turn_on_tv_with_remote(remote_control, television)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(television_216)switchon_executor(television_216)standup_executor(char)walk_executor(tvstand_186)exp(remote_control_2081, tvstand_186)standup_executor(char)walk_executor(remote_control_2081)touch_executor(remote_control_2081)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_161. Robot is close couch_192. Robot is on couch_192. 
##############################
From agent.py
walk_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. Robot is no longer close couch_192.
##############################
From agent.py
switchon_executor(television_216)
Robot is inside home_office_161. Robot is close television_216. Robot is close tvstand_186. Robot is on couch_192. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_remote_control_2081_around_tvstand_135(remote_control:item):
    goal: not unknown(remote_control)
    body:
        assert is_remote_control(remote_control)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==135
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(remote_control,tvstand_instance)
        else:
            exp(remote_control,tvstand_instance)
    eff:
        unknown[remote_control]=False
        close[remote_control,tvstand_instance]=True
        close[tvstand_instance,remote_control]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        use_remote_to_turn_on_tv(remote_control, television)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        use_remote_to_turn_on_tv(remote_control, television)

##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_135)exp(remote_control_2081, tvstand_135)walk_executor(remote_control_2081)touch_executor(remote_control_2081)
##############################
From agent.py
walk_executor(tvstand_135)
Find remote_control_2081. Find cd_player_2084. Find dvd_player_2085. Find drawing_118. Robot is inside dining_room_1. Robot is close floor_19. Robot is close tvstand_135. Robot is on couch_192. Robot is no longer inside home_office_161.Robot is no longer close television_216.Robot is no longer close tvstand_186.
##############################
From agent.py
exp(remote_control_2081, tvstand_135)
Find remote_control_2081. 
##############################
From agent.py-> find a plan in act()
walk_executor(remote_control_2081)touch_executor(remote_control_2081)
##############################
From agent.py
walk_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. Robot is no longer close floor_19.
##############################
From agent.py
touch_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. 
##############################
From agent.py
Human Instruction: You need to use the remote control to turn on the TV, as the TV was turned on directly earlier without using the remote control. Please ensure you turn on the TV using the remote control while sitting on the couch.

Trial and Error: You can not standup char
The actions you have taken:
Action 1: Walk to couch_192.
Action 2: Sit on couch_192.
Action 3: char stand up.
Action 4: Walk to television_216.
Action 5: Switch on television_216.
Action 6: Walk to tvstand_135.
Action 7: look for remote_control_2081 around tvstand_135.
Action 8: Walk to remote_control_2081.
Action 9: Touch remote_control_2081.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_tv_with_remote(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television) and id[television] == 216
        # Select the television with ID 216

        turn_on_tv_with_remote(remote_control, television)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_tv_with_remote(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television) and id[television] == 216
        # Select the television with ID 216

        turn_on_tv_with_remote(remote_control, television)

##############################
From agent.py-> find a plan in act()
touch_executor(remote_control_2081)
##############################
From agent.py
touch_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. 
##############################
From agent.py
Human Instruction: You need to sit on the couch and use the remote control to turn on the TV. Currently, the TV was turned on directly without using the remote control while sitting on the couch.

Trial and Error: You can not standup char
The actions you have taken:
Action 1: Walk to couch_192.
Action 2: Sit on couch_192.
Action 3: char stand up.
Action 4: Walk to television_216.
Action 5: Switch on television_216.
Action 6: Walk to tvstand_135.
Action 7: look for remote_control_2081 around tvstand_135.
Action 8: Walk to remote_control_2081.
Action 9: Touch remote_control_2081.
Action 10: Touch remote_control_2081.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control) and visited(remote_control)
        # Select the remote control that was visited
        
        bind television: item where:
            is_television(television)
        # Select the television

        touch_remote_to_turn_on_tv(remote_control, television)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_console_2027_around_desk_261(console:item):
    goal: not unknown(console)
    body:
        assert is_console(console)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(console,desk_instance)
        else:
            exp(console,desk_instance)
    eff:
        unknown[console]=False
        close[console,desk_instance]=True
        close[desk_instance,console]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        use_remote_to_turn_on_tv(remote_control, television)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior use_remote_to_turn_on_tv(remote_control:item, television:item):
    body:
        achieve is_on(television)
        touch(remote_control)

behavior __goal__():
    body:
        bind remote_control: item where:
            is_remote_control(remote_control)
        # Select the remote control

        bind television: item where:
            is_television(television)
        # Select the television

        use_remote_to_turn_on_tv(remote_control, television)

##############################
From agent.py-> find a plan in act()
touch_executor(remote_control_2081)
##############################
From agent.py
touch_executor(remote_control_2081)
Robot is inside dining_room_1. Robot is close tvstand_135. Robot is close remote_control_2081. Robot is on couch_192. 
##############################
