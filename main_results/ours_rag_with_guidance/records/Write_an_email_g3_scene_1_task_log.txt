From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.', '3. Type the keyboard to send an e-mail.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        
        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_278_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_keyboard_211_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        achieve close_char(char, computer)
        # Get close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.  ', '2. Touch the mouse near the computer to turn it on.  ', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the computer

        sit_on_chair(chair)
        # Sit on the chair in front of the computer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
        # Execute the goal of sitting on the chair

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office.  " ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer) and inside(chair, home_office)
        # Select the chair in front of the computer in the home office

        sit_on_chair(chair)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Approach the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse to turn on the computer.', '4. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer inside the home office

        achieve close_char(char, computer)
        # Move the character close to the computer

##############################
From agent.py-> find a plan in act()
walk_executor(computer_276)
##############################
From agent.py
walk_executor(computer_276)
Find chair_271. Find keyboard_278. Find mouse_280. Find mat_284. Robot is inside home_office_241. Robot is close computer_276. Robot is no longer inside dining_room_41.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair in front of the computer

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with ID 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer]==417
        # Select the computer with the specific identifier 417

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer

        sit_on_chair(chair)
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. sit on the chair in front of the computer." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select the computer with a specific identifier

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair(chair:item):
    body:
        achieve on_char(char, chair)
        # Sit on the chair

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select the computer with a specific identifier

        bind chair: item where:
            is_chair(chair) and close(chair, computer)
        # Select the chair close to the specified computer
        
        sit_on_chair(chair)

##############################
From agent.py-> find a plan in act()
walk_executor(chair_271)sit_executor(chair_271)
##############################
From agent.py
walk_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is no longer close computer_276.
##############################
From agent.py
sit_executor(chair_271)
Find check_2075. Find blow_dryer_2057. Find brush_2002. Find stamp_2043. Find hanger_292. Find phone_2147. Find headset_2131. Find pillow_287. Find cd_2145. Find shampoo_2019. Find stamp_2022. Find cat_2069. Find hanger_293. Find cd_player_2129. Find pencil_2014. Find shoes_2033. Find clothes_pants_2036. Find phone_2017. Find remote_control_2124. Find drawing_288. Find pencil_2020. Find headset_2146. Find hanger_294. Find pillow_286. Find dvd_player_2130. Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_271. Robot is facing computer_276. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_desk_272(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(mouse,desk_instance)
        else:
            exp(mouse,desk_instance)
    eff:
        unknown[mouse]=False
        close[mouse,desk_instance]=True
        close[desk_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(computer_276)switchon_executor(computer_276)standup_executor(char)walk_executor(mouse_280)touch_executor(mouse_280)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_271. Robot is facing computer_276. 
##############################
From agent.py
walk_executor(computer_276)
Robot is inside home_office_241. Robot is close computer_276. Robot is on chair_271. Robot is no longer close chair_271.Robot is no longer facing computer_276.
##############################
From agent.py
switchon_executor(computer_276)
Robot is inside home_office_241. Robot is close computer_276. Robot is on chair_271. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_mouse_280_around_mouse_280(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==280
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal

behavior turn_on_computer_by_touching_mouse(mouse:item, computer:item):
    body:
        achieve is_on(computer)
        touch(mouse)

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse close to the computer

        turn_on_computer_by_touching_mouse(mouse, computer)

##############################
From agent.py-> find a plan in act()
walk_executor(mouse_280)touch_executor(mouse_280)
##############################
From agent.py
walk_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_271. Robot is no longer close computer_276.
##############################
From agent.py
touch_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_271. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_211_around_table_270(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(keyboard,table_instance)
        else:
            exp(keyboard,table_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,table_instance]=True
        close[table_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior type_email_on_keyboard(keyboard:item, computer:item):
    body:
        achieve is_on(computer)
        # Ensure the computer is on before typing
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select a keyboard

        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select computer_276

        type_email_on_keyboard(keyboard, computer)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior type_email_on_keyboard(keyboard:item, computer:item):
    body:
        achieve is_on(computer)
        # Ensure the computer is on before typing
        type(keyboard)
        # Type on the keyboard to send an email

behavior __goal__():
    body:
        bind keyboard: item where:
            is_keyboard(keyboard)
        # Select a keyboard

        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select computer_276

        type_email_on_keyboard(keyboard, computer)

##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(keyboard_211, table_270)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close couch_269. Robot is close table_270. Robot is on chair_271. Robot is no longer close desk_272.Robot is no longer close mouse_280.Robot is no longer close mousepad_279.
##############################
From agent.py
exp(keyboard_211, table_270)
Fail to find keyboard_211 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_199)exp(keyboard_211, table_199)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(table_199)
Find mat_203. Find wooden_spoon_2000. Find drawing_201. Find drawing_202. Find tea_bag_2023. Robot is inside bedroom_162. Robot is close table_199. Robot is on chair_271. Robot is no longer inside home_office_241.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
exp(keyboard_211, table_199)
Fail to find keyboard_211 around table_199. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_278)exp(keyboard_211, keyboard_278)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(keyboard_278)
Robot is inside home_office_241. Robot is close desk_272. Robot is close keyboard_278. Robot is on chair_271. Robot is no longer inside bedroom_162.Robot is no longer close table_199.
##############################
From agent.py
exp(keyboard_211, keyboard_278)
Fail to find keyboard_211 around keyboard_278. 
##############################
From agent.py-> find a plan in act()
walk_executor(cpuscreen_277)exp(keyboard_211, cpuscreen_277)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(cpuscreen_277)
Robot is inside home_office_241. Robot is close desk_272. Robot is close cpuscreen_277. Robot is on chair_271. Robot is no longer close keyboard_278.
##############################
From agent.py
exp(keyboard_211, cpuscreen_277)
Fail to find keyboard_211 around cpuscreen_277. 
##############################
From agent.py-> find a plan in act()
walk_executor(tvstand_273)exp(keyboard_211, tvstand_273)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(tvstand_273)
Robot is inside home_office_241. Robot is close tvstand_273. Robot is close floor_259. Robot is close floor_260. Robot is on chair_271. Robot is no longer close desk_272.Robot is no longer close cpuscreen_277.
##############################
From agent.py
exp(keyboard_211, tvstand_273)
Fail to find keyboard_211 around tvstand_273. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_275)exp(keyboard_211, bookshelf_275)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(bookshelf_275)
Robot is inside home_office_241. Robot is close bookshelf_275. Robot is close floor_262. Robot is on chair_271. Robot is no longer close tvstand_273.Robot is no longer close floor_259.Robot is no longer close floor_260.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find keyboard_211 ?
Answer: Robot, to locate keyboard_211, proceed to bedroom_162. It is placed on desk_193. Nearby, you will find computer_209 and cpuscreen_210 as well as mouse_213 and mousepad_214. The area is surrounded by various walls: wall_66, wall_67, wall_175, and wall_179. Light_73 provides illumination in this section. Fridge_126 and kitchen_counter_123 are also in proximity. Stand facing drawing_201, which keyboard_211 faces, to better orient yourself.
Re-decompose: None

##############################
From agent.py
Human Instruction: Robot, to locate keyboard_211, proceed to bedroom_162. It is placed on desk_193. Nearby, you will find computer_209 and cpuscreen_210 as well as mouse_213 and mousepad_214. The area is surrounded by various walls: wall_66, wall_67, wall_175, and wall_179. Light_73 provides illumination in this section. Fridge_126 and kitchen_counter_123 are also in proximity. Stand facing drawing_201, which keyboard_211 faces, to better orient yourself.

Trial and Error: You can not standup char
The actions you have taken:
Action 1: Walk to computer_276.
Action 2: Walk to chair_271.
Action 3: Sit on chair_271.
Action 4: char stand up.
Action 5: Walk to computer_276.
Action 6: Switch on computer_276.
Action 7: Walk to mouse_280.
Action 8: Touch mouse_280.
Action 9: Walk to table_270.
Action 10: look for keyboard_211 around table_270.
Action 11: Walk to table_199.
Action 12: look for keyboard_211 around table_199.
Action 13: Walk to keyboard_278.
Action 14: look for keyboard_211 around keyboard_278.
Action 15: Walk to cpuscreen_277.
Action 16: look for keyboard_211 around cpuscreen_277.
Action 17: Walk to tvstand_273.
Action 18: look for keyboard_211 around tvstand_273.
Action 19: Walk to bookshelf_275.

##############################
From agent.py
exp(keyboard_211, bookshelf_275)
Fail to find keyboard_211 around bookshelf_275. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_193)exp(keyboard_211, desk_193)walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(desk_193)
Find chair_194. Find mouse_213. Find keyboard_211. Find check_2026. Find laser_pointer_2034. Robot is inside bedroom_162. Robot is close desk_193. Robot is close floor_163. Robot is close floor_164. Robot is on chair_271. Robot is no longer inside home_office_241.Robot is no longer close bookshelf_275.Robot is no longer close floor_262.
##############################
From agent.py
exp(keyboard_211, desk_193)
Find keyboard_211. 
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_211)type_executor(keyboard_211)
##############################
From agent.py
walk_executor(keyboard_211)
Robot is inside bedroom_162. Robot is close desk_193. Robot is close keyboard_211. Robot is on chair_271. Robot is no longer close floor_163.Robot is no longer close floor_164.
##############################
From agent.py
type_executor(keyboard_211)
Robot is inside bedroom_162. Robot is close desk_193. Robot is close keyboard_211. Robot is on chair_271. 
##############################
