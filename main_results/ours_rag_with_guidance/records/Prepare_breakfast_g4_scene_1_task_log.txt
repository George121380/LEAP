From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken.', '2. Combine the cooked pasta and chicken on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_dry_pasta_2073_around_kitchen_counter_129(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
def has_stove(fryingpan:item):
    # Check if the frying pan is on the stove
    symbol has_stove=exists stove:item: is_stove(stove) and on(fryingpan, stove)
    return has_stove

def has_pot_with_water(stove:item):
    # Check if there is a pot with water on the stove
    symbol has_pot=exists pot:item: is_pot(pot) and has_water(pot) and on(pot, stove)
    return has_pot

behavior cook_chicken(chicken:item, fryingpan:item):
    body:
        achieve inside(chicken, fryingpan) # Put the chicken inside the frying pan
        
        if has_stove(fryingpan):
            bind stove: item where:
                is_stove(stove) and on(fryingpan, stove)
            achieve is_on(stove) # Turn on the stove
        
        # Wait for some time to ensure chicken is properly cooked
        # Due to lack of specific behaviors to indicate cooking time, this step is assumed to be carried out correctly by the algorithm

        if has_stove(fryingpan):
            bind stove: item where:
                is_stove(stove) and on(fryingpan, stove)
            achieve is_off(stove) # Turn off the stove once the chicken is cooked

behavior boil_pasta(pasta:item, pot:item):
    body:
        achieve inside(pasta, pot) # Place pasta inside the pot

        if has_pot_with_water(pot):
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            achieve is_on(stove) # Turn on the stove to boil water

        # Wait for some time to ensure pasta is boiled
        # Due to lack of specific behaviors to indicate boiling time, this step is assumed to be carried out correctly by the algorithm

        if has_pot_with_water(pot):
            bind stove: item where:
                is_stove(stove) and on(pot, stove)
            achieve is_off(stove) # Turn off the stove once the pasta is boiled

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select a chicken item

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        cook_chicken(chicken, fryingpan)
        boil_pasta(pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2073_around_kitchen_counter_128(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation

def is_dry_pasta_on_stove(stove:item):
    # Function to check if dry pasta is on the stove
    symbol has_pasta=exists o: item : is_dry_pasta(o) and on(o, stove)
    return has_pasta

def is_food_chicken_on_stove(stove:item):
    # Function to check if there is chicken on the stove
    symbol has_chicken=exists o: item : is_food_chicken(o) and on(o, stove)
    return has_chicken

behavior cook_item(o:item, stove:item):
    body:
        achieve on(o, stove)
        # Item is on the stove
        observe(stove, "Check if there is heat for cooking")
        # Check if the stove is on heat for cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if exists o: item : is_dry_pasta(o) and on(o, stove):
            bind dry_pasta: item where:
                is_dry_pasta(dry_pasta) and on(dry_pasta, stove)
            # Bind the dry pasta on the stove
            
            cook_item(dry_pasta, stove)
            # Cook the dry pasta
        
        else:
            observe(stove, "Check is there any dry pasta on the stove")
            # Observe to check if there is dry pasta on the stove
        
        if exists o: item : is_food_chicken(o) and on(o, stove):
            bind chicken: item where:
                is_food_chicken(chicken) and on(chicken, stove)
            # Bind the chicken on the stove
            
            cook_item(chicken, stove)
            # Cook the chicken
        
        else:
            observe(stove, "Check is there any chicken on the stove")
            # Observe to check if there is chicken on the stove

#goal_representation_end

##############################
From agent.py->reset_goal

def is_dry_pasta_on_stove(stove:item):
    # Function to check if dry pasta is on the stove
    symbol has_pasta=exists o: item : is_dry_pasta(o) and on(o, stove)
    return has_pasta

def is_food_chicken_on_stove(stove:item):
    # Function to check if there is chicken on the stove
    symbol has_chicken=exists o: item : is_food_chicken(o) and on(o, stove)
    return has_chicken

behavior cook_item(o:item, stove:item):
    body:
        achieve on(o, stove)
        # Item is on the stove
        observe(stove, "Check if there is heat for cooking")
        # Check if the stove is on heat for cooking

behavior __goal__():
    body:
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        if exists o: item : is_dry_pasta(o) and on(o, stove):
            bind dry_pasta: item where:
                is_dry_pasta(dry_pasta) and on(dry_pasta, stove)
            # Bind the dry pasta on the stove
            
            cook_item(dry_pasta, stove)
            # Cook the dry pasta
        
        else:
            observe(stove, "Check is there any dry pasta on the stove")
            # Observe to check if there is dry pasta on the stove
        
        if exists o: item : is_food_chicken(o) and on(o, stove):
            bind chicken: item where:
                is_food_chicken(chicken) and on(chicken, stove)
            # Bind the chicken on the stove
            
            cook_item(chicken, stove)
            # Cook the chicken
        
        else:
            observe(stove, "Check is there any chicken on the stove")
            # Observe to check if there is chicken on the stove

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)obs(stove_2090, Check is there any dry pasta on the stove)obs(stove_2090, Check is there any chicken on the stove)
##############################
