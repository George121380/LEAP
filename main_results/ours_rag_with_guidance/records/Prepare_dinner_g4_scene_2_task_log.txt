From agent.py
Reset goals: The sub-goals are: 
['1. Gather and wash the rice and eggs.', '2. Cook the rice and scramble the eggs.', '3. Combine the cooked rice and scrambled eggs in a pan and fry them together.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2067_around_kitchen_counter_128(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation

behavior gather_and_wash(item:item):
    body:
        if dirty(item):
            wash(item)    

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg
        
        gather_and_wash(rice)
        gather_and_wash(egg)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_kitchen_counter_129(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_rice_2067_around_kitchen_counter_129(food_rice:item):
    goal: not unknown(food_rice)
    body:
        assert is_food_rice(food_rice)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_rice,kitchen_counter_instance)
        else:
            exp(food_rice,kitchen_counter_instance)
    eff:
        unknown[food_rice]=False
        close[food_rice,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_rice]=True
    

#exp_behavior_end

#goal_representation
behavior wash_rice_and_egg(rice:item, egg:item):
    body:
        wash(rice)
        # Wash the rice

        wash(egg)
        # Wash the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        wash_rice_and_egg(rice, egg)
        # Wash the rice and the eggs
#goal_representation_end

##############################
From agent.py->reset_goal
behavior wash_rice_and_egg(rice:item, egg:item):
    body:
        wash(rice)
        # Wash the rice

        wash(egg)
        # Wash the eggs

behavior __goal__():
    body:
        bind rice: item where:
            is_food_rice(rice)
        # Select the rice

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        wash_rice_and_egg(rice, egg)
        # Wash the rice and the eggs
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(food_rice_2067, kitchen_counter_129)walk_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)wash_executor(food_egg_2053)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(food_rice_2067, kitchen_counter_129)
Fail to find food_rice_2067 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_rice_2067, fridge_140)walk_executor(food_rice_2067)wash_executor(food_rice_2067)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)wash_executor(food_egg_2053)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_rice_2067, fridge_140)
Find food_rice_2067. 
##############################
From agent.py-> find a plan in act()
wash_executor(food_rice_2067)wash_executor(food_egg_2053)
##############################
From agent.py
wash_executor(food_rice_2067)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
wash_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_plate_2105_around_oven_141(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(plate,oven_instance)
        else:
            exp(plate,oven_instance)
    eff:
        unknown[plate]=False
        close[plate,oven_instance]=True
        close[oven_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior scramble_eggs(egg: item, frying_pan: item, stove: item):
    body:
        achieve inside(egg, frying_pan)
        # Place the egg in the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

        scramble_eggs(egg, frying_pan, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior scramble_eggs(egg: item, frying_pan: item, stove: item):
    body:
        achieve inside(egg, frying_pan)
        # Place the egg in the frying pan
        achieve on(frying_pan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn on the stove to cook the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind frying_pan: item where:
            is_fryingpan(frying_pan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

        scramble_eggs(egg, frying_pan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_rice_2067)grab_executor(food_rice_2067)walk_executor(pot_2093)putin_executor(food_rice_2067, pot_2093)walk_executor(stove_2090)switchon_executor(stove_2090)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(food_rice_2067)
Robot is inside dining_room_1. Robot is close food_rice_2067. Robot is close fridge_140. Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
grab_executor(food_rice_2067)
Robot is inside dining_room_1. Robot is close food_rice_2067. Robot is close fridge_140. Grabbing food_rice_2067 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close food_rice_2067. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_rice_2067, pot_2093)
Robot is inside dining_room_1. Robot is close food_rice_2067. Robot is close stove_2090. Robot is close pot_2093. food_rice_2067 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close kitchen_counter_129. Robot is no longer close food_rice_2067.Robot is no longer close pot_2093.
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close kitchen_counter_129. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. Robot is no longer close food_egg_2053.
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to ensure the rice is cooked by filling the pot with water. Currently, the pot doesn't have water or rice being cooked, and it seems that the stove needs to be turned on in order to boil the rice. Additionally, ensuring the rice is properly boiled is essential. Also, the stove should be actively turned on to scramble the eggs, which hasn't been explicitly completed yet.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_rice_2067 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_rice_2067 around fridge_140.
Action 7: Wash food_rice_2067.
Action 8: Wash food_egg_2053.
Action 9: Walk to pot_2093.
Action 10: Grab pot_2093.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to stove_2090.
Action 14: Put pot_2093 on stove_2090.
Action 15: Walk to pot_2093.
Action 16: Open pot_2093.
Action 17: Walk to food_rice_2067.
Action 18: Grab food_rice_2067.
Action 19: Walk to pot_2093.
Action 20: Put food_rice_2067 into pot_2093.
Action 21: Walk to stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to food_egg_2053.
Action 24: Grab food_egg_2053.
Action 25: Walk to fryingpan_2107.
Action 26: Put food_egg_2053 into fryingpan_2107.
Action 27: Grab fryingpan_2107.
Action 28: Walk to stove_2090.
Action 29: Put fryingpan_2107 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_130(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior scramble_egg(fryingpan:item, stove:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to scramble the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)
        scramble_egg(fryingpan, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior scramble_egg(fryingpan:item, stove:item, egg:item):
    body:
        achieve inside(egg, fryingpan)
        # Place the egg inside the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to scramble the egg

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind egg: item where:
            is_food_egg(egg)
        # Select an egg
        
        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)
        scramble_egg(fryingpan, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close food_rice_2067. Robot is close pot_2093. Robot is no longer close kitchen_counter_129.Robot is no longer close fryingpan_2107.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close food_rice_2067. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close stove_2090.Robot is no longer close food_rice_2067.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: The pot was not correctly filled with water before putting it on the stove, and the rice needs to be properly boiled. Additionally, the eggs in the frying pan have not been scrambled yet. Ensure the pot has water and rice is boiled, and the stove is actively used to scramble the eggs before moving to the next sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_rice_2067 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_rice_2067 around fridge_140.
Action 7: Wash food_rice_2067.
Action 8: Wash food_egg_2053.
Action 9: Walk to pot_2093.
Action 10: Grab pot_2093.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to stove_2090.
Action 14: Put pot_2093 on stove_2090.
Action 15: Walk to pot_2093.
Action 16: Open pot_2093.
Action 17: Walk to food_rice_2067.
Action 18: Grab food_rice_2067.
Action 19: Walk to pot_2093.
Action 20: Put food_rice_2067 into pot_2093.
Action 21: Walk to stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to food_egg_2053.
Action 24: Grab food_egg_2053.
Action 25: Walk to fryingpan_2107.
Action 26: Put food_egg_2053 into fryingpan_2107.
Action 27: Grab fryingpan_2107.
Action 28: Walk to stove_2090.
Action 29: Put fryingpan_2107 on stove_2090.
Action 30: Walk to pot_2093.
Action 31: Grab pot_2093.
Action 32: Walk to faucet_134.
Action 33: Switch on faucet_134.
Action 34: Switch off faucet_134.
Action 35: Walk to stove_2090.
Action 36: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_fork_2104_around_kitchen_counter_128(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fork,kitchen_counter_instance)
        else:
            exp(fork,kitchen_counter_instance)
    eff:
        unknown[fork]=False
        close[fork,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fork]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior scramble_eggs(eggs:item, fryingpan:item, stove:item):
    body:
        achieve inside(eggs, fryingpan)
        # Put the eggs in the frying pan
        achieve on(fryingpan, stove)
        # Place the frying pan on the stove
        achieve is_on(stove)
        # Turn the stove on to scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan

        bind eggs: item where:
            is_food_egg(eggs)
        # Select eggs

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)
        scramble_eggs(eggs, fryingpan, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_oven_141(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_butter,oven_instance)
        else:
            exp(food_butter,oven_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,oven_instance]=True
        close[oven_instance,food_butter]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2102_around_kitchen_counter_128(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(oil,kitchen_counter_instance)
        else:
            exp(oil,kitchen_counter_instance)
    eff:
        unknown[oil]=False
        close[oil,kitchen_counter_instance]=True
        close[kitchen_counter_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior start_boiling_rice(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling the rice

behavior boil_rice(rice:item, pot:item):
    body:
        achieve inside(rice, pot)
        # Ensure the rice is inside the pot

behavior scramble_eggs(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is inside the frying pan
        achieve is_on(stove)
        # Turn on the stove to scramble the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind egg: item where:
            is_food_egg(egg)
        # Select eggs
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select a frying pan
        
        fill_pot_with_water(pot, faucet)
        start_boiling_rice(pot, stove)
        boil_rice(rice, pot)
        scramble_eggs(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "2. cook the rice and scramble the eggs." ?
Answer: Boil some rice by pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the rice in a pot.', '2. Fry the boiled rice with the eggs.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_130(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice_with_egg(pot: item, stove: item, rice: item, egg: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice
        achieve inside(egg, pot)
        # Ensure the egg is inside the pot

behavior scramble_eggs(pan: item, stove: item, egg: item):
    body:
        achieve inside(egg, pan)
        # Place the egg inside the pan
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn the stove on to cook the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        fill_pot_with_water(pot, faucet)
        boil_rice_with_egg(pot, stove, rice, egg)
        scramble_eggs(pan, stove, egg)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice_with_egg(pot: item, stove: item, rice: item, egg: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice
        achieve inside(egg, pot)
        # Ensure the egg is inside the pot

behavior scramble_eggs(pan: item, stove: item, egg: item):
    body:
        achieve inside(egg, pan)
        # Place the egg inside the pan
        achieve on(pan, stove)
        # Place the pan on the stove
        achieve is_on(stove)
        # Turn the stove on to cook the eggs

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind egg: item where:
            is_food_egg(egg)
        # Select egg

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        bind pan: item where:
            is_fryingpan(pan)
        # Select a frying pan

        fill_pot_with_water(pot, faucet)
        boil_rice_with_egg(pot, stove, rice, egg)
        scramble_eggs(pan, stove, egg)

##############################
From agent.py-> find a plan in act()
walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(pot_2093)putin_executor(food_egg_2053, pot_2093)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fryingpan_2107. Robot is close food_egg_2053. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fryingpan_2107. Robot is close food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close stove_2090. Robot is close food_rice_2067. Robot is close pot_2093. Robot is no longer close fryingpan_2107.
##############################
From agent.py
putin_executor(food_egg_2053, pot_2093)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close stove_2090. Robot is close food_rice_2067. Robot is close pot_2093. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close pot_2093. Robot is no longer close stove_2090.Robot is no longer close food_rice_2067.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close pot_2093. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close stove_2090. Robot is close fryingpan_2107. Robot is no longer close pot_2093.
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close stove_2090. Robot is close fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
Human Instruction: Ensure the pot is correctly filled with water before placing it on the stove and turning it on. The rice needs to properly boil in the water.

Human Guidance: Boil some rice by pot.
The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for food_rice_2067 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_rice_2067 around fridge_140.
Action 7: Wash food_rice_2067.
Action 8: Wash food_egg_2053.
Action 9: Walk to pot_2093.
Action 10: Grab pot_2093.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to stove_2090.
Action 14: Put pot_2093 on stove_2090.
Action 15: Walk to pot_2093.
Action 16: Open pot_2093.
Action 17: Walk to food_rice_2067.
Action 18: Grab food_rice_2067.
Action 19: Walk to pot_2093.
Action 20: Put food_rice_2067 into pot_2093.
Action 21: Walk to stove_2090.
Action 22: Switch on stove_2090.
Action 23: Walk to food_egg_2053.
Action 24: Grab food_egg_2053.
Action 25: Walk to fryingpan_2107.
Action 26: Put food_egg_2053 into fryingpan_2107.
Action 27: Grab fryingpan_2107.
Action 28: Walk to stove_2090.
Action 29: Put fryingpan_2107 on stove_2090.
Action 30: Walk to pot_2093.
Action 31: Grab pot_2093.
Action 32: Walk to faucet_134.
Action 33: Switch on faucet_134.
Action 34: Switch off faucet_134.
Action 35: Walk to stove_2090.
Action 36: Put pot_2093 on stove_2090.
Action 37: Walk to food_egg_2053.
Action 38: Grab food_egg_2053.
Action 39: Walk to pot_2093.
Action 40: Put food_egg_2053 into pot_2093.
Action 41: Walk to food_egg_2053.
Action 42: Grab food_egg_2053.
Action 43: Walk to fryingpan_2107.
Action 44: Put food_egg_2053 into fryingpan_2107.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_124(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_clothes_jacket_2078_around_washing_machine_2041(clothes_jacket:item):
    goal: not unknown(clothes_jacket)
    body:
        assert is_clothes_jacket(clothes_jacket)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(clothes_jacket,washing_machine_instance)
        else:
            exp(clothes_jacket,washing_machine_instance)
    eff:
        unknown[clothes_jacket]=False
        close[clothes_jacket,washing_machine_instance]=True
        close[washing_machine_instance,clothes_jacket]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the rice in a pot." ?
Answer: Boil some rice in a pot.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_curtain_120(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind curtain_instance:item where:
            is_curtain(curtain_instance) and id[curtain_instance]==120
        achieve close_char(char,curtain_instance)
        if can_open(curtain_instance):
            achieve_once open(curtain_instance)
            exp(shoes,curtain_instance)
        else:
            exp(shoes,curtain_instance)
    eff:
        unknown[shoes]=False
        close[shoes,curtain_instance]=True
        close[curtain_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_dresser_377(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==377
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(shoes,dresser_instance)
        else:
            exp(shoes,dresser_instance)
    eff:
        unknown[shoes]=False
        close[shoes,dresser_instance]=True
        close[dresser_instance,shoes]=True
    

behavior find_phone_47_around_light_49(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==49
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(phone,light_instance)
        else:
            exp(phone,light_instance)
    eff:
        unknown[phone]=False
        close[phone,light_instance]=True
        close[light_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Boil the rice in a pot.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_tray_142(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind tray_instance:item where:
            is_tray(tray_instance) and id[tray_instance]==142
        achieve close_char(char,tray_instance)
        if can_open(tray_instance):
            achieve_once open(tray_instance)
            exp(shoes,tray_instance)
        else:
            exp(shoes,tray_instance)
    eff:
        unknown[shoes]=False
        close[shoes,tray_instance]=True
        close[tray_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_122(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==122
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the rice in a pot." ?
Answer: Boil some rice by pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior boil_rice(pot:item, stove:item, rice:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        boil_rice(pot, stove, rice)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind rice: item where:
            is_food_rice(rice)
        # Select rice
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet
        
        bind stove: item where:
            is_stove(stove)
        # Select a stove
        
        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil rice in a pot.', '2. Fry the boiled rice with egg.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_coin_2004_around_pot_54(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==54
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(coin,pot_instance)
        else:
            exp(coin,pot_instance)
    eff:
        unknown[coin]=False
        close[coin,pot_instance]=True
        close[pot_instance,coin]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn on the stove to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_shoes_2001_around_kitchen_counter_128(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(shoes,kitchen_counter_instance)
        else:
            exp(shoes,kitchen_counter_instance)
    eff:
        unknown[shoes]=False
        close[shoes,kitchen_counter_instance]=True
        close[kitchen_counter_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the rice in a pot.', '2. Fry the rice with the egg.']
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior boil_rice(pot: item, stove: item, rice: item):
    body:
        achieve inside(rice, pot)
        # Place the rice inside the pot
        achieve is_on(stove)
        # Turn the stove on to start boiling the rice

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind rice: item where:
            is_food_rice(rice)
        # Select rice

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        boil_rice(pot, stove, rice)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
