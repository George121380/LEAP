From agent.py
Reset goals: The sub-goals are: 
['1. Load the bowls and plates into the dishwasher and start it.', '2. Wash the forks by hand.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_2105_around_dishwasher_143(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==143
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_bowl_2096_around_kitchen_counter_129(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed
        achieve is_on(dishwasher) # Turn on the dishwasher to start cleaning

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if is_plate(item) or is_bowl(item):
                load_dishwasher(item, dishwasher)
                # Load plates and bowls into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the items

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior load_dishwasher(item:item, dishwasher:item):
    body:
        achieve inside(item, dishwasher)
        # Load the item into the dishwasher

behavior start_dishwasher(dishwasher:item):
    body:
        achieve closed(dishwasher) # Ensure the dishwasher is closed
        achieve is_on(dishwasher) # Turn on the dishwasher to start cleaning

behavior __goal__():
    body:
        bind dishwasher: item where:
            is_dishwasher(dishwasher)
        # Select a dishwasher

        foreach item: item:
            if is_plate(item) or is_bowl(item):
                load_dishwasher(item, dishwasher)
                # Load plates and bowls into the dishwasher

        start_dishwasher(dishwasher)
        # Start the dishwasher to wash the items

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(bowl_2095, kitchen_counter_129)walk_executor(dishwasher_143)open_executor(dishwasher_143)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(kitchen_counter_129)exp(bowl_2096, kitchen_counter_129)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(kitchen_counter_129)exp(bowl_2097, kitchen_counter_129)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)exp(plate_2105, dishwasher_143)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(bowl_2095, kitchen_counter_129)
Fail to find bowl_2095 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_143)open_executor(dishwasher_143)exp(bowl_2095, dishwasher_143)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)exp(bowl_2096, dishwasher_143)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)exp(bowl_2097, dishwasher_143)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)exp(plate_2105, dishwasher_143)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(dishwasher_143)
Find knife_2036. Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
open_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. 
##############################
From agent.py
exp(bowl_2095, dishwasher_143)
Fail to find bowl_2095 around dishwasher_143. 
##############################
From agent.py-> find a plan in act()
walk_executor(curtain_120)open_executor(curtain_120)exp(bowl_2095, curtain_120)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(curtain_120)exp(bowl_2096, curtain_120)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(curtain_120)exp(bowl_2097, curtain_120)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(curtain_120)exp(plate_2105, curtain_120)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(curtain_120)
Robot is inside dining_room_1. Robot is close curtain_120. Robot is close curtain_119. Robot is no longer close knife_2036.Robot is no longer close floor_21.Robot is no longer close dishwasher_143.
##############################
From agent.py
open_executor(curtain_120)
Robot is inside dining_room_1. Robot is close curtain_120. Robot is close curtain_119. 
##############################
From agent.py
exp(bowl_2095, curtain_120)
Fail to find bowl_2095 around curtain_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_131)open_executor(cupboard_131)exp(bowl_2095, cupboard_131)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(cupboard_131)exp(bowl_2096, cupboard_131)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(cupboard_131)exp(bowl_2097, cupboard_131)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(cupboard_131)exp(plate_2105, cupboard_131)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close curtain_120.Robot is no longer close curtain_119.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(bowl_2095, cupboard_131)
Fail to find bowl_2095 around cupboard_131. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(bowl_2095, cupboard_130)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(cupboard_130)exp(bowl_2096, cupboard_130)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(cupboard_130)exp(bowl_2097, cupboard_130)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(cupboard_130)exp(plate_2105, cupboard_130)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close cupboard_131.
##############################
From agent.py
exp(bowl_2095, cupboard_130)
Fail to find bowl_2095 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_132)exp(bowl_2095, kitchen_counter_132)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(kitchen_counter_132)exp(bowl_2096, kitchen_counter_132)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(kitchen_counter_132)exp(bowl_2097, kitchen_counter_132)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(bathroom_cabinet_305)open_executor(bathroom_cabinet_305)exp(plate_2105, bathroom_cabinet_305)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(kitchen_counter_132)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2095 ?
Answer: Navigate to dining_room_1. Once inside, locate table_123. You will find bowl_2095 on table_123.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to dining_room_1. Once inside, locate table_123. You will find bowl_2095 on table_123.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for bowl_2095 around kitchen_counter_129.
Action 3: Walk to dishwasher_143.
Action 4: Open dishwasher_143.
Action 5: look for bowl_2095 around dishwasher_143.
Action 6: Walk to curtain_120.
Action 7: Open curtain_120.
Action 8: look for bowl_2095 around curtain_120.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for bowl_2095 around cupboard_131.
Action 12: Walk to cupboard_130.
Action 13: look for bowl_2095 around cupboard_130.
Action 14: Walk to kitchen_counter_132.

##############################
From agent.py
exp(bowl_2095, kitchen_counter_132)
Fail to find bowl_2095 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_123)exp(bowl_2095, table_123)walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(table_123)exp(bowl_2096, table_123)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(table_123)exp(bowl_2097, table_123)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(plate_2105, fridge_140)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
exp(bowl_2095, table_123)
Find bowl_2095. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2095)grab_executor(bowl_2095)walk_executor(dishwasher_143)putin_executor(bowl_2095, dishwasher_143)walk_executor(table_123)exp(bowl_2096, table_123)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(table_123)exp(bowl_2097, table_123)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(plate_2105, fridge_140)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close table_123. Robot is close bowl_2095. Robot is no longer close floor_17.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(bowl_2095)
Robot is inside dining_room_1. Robot is close table_123. Robot is close bowl_2095. Grabbing bowl_2095 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2095. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. Robot is no longer close table_123.
##############################
From agent.py
putin_executor(bowl_2095, dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2095. Robot is close knife_2036. Robot is close floor_21. Robot is close dishwasher_143. bowl_2095 released by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close dishwasher_143.Robot is no longer close knife_2036.Robot is no longer close floor_21.Robot is no longer close bowl_2095.
##############################
From agent.py
exp(bowl_2096, table_123)
Fail to find bowl_2096 around table_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(bookshelf_372)open_executor(bookshelf_372)exp(bowl_2096, bookshelf_372)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(bookshelf_372)exp(bowl_2097, bookshelf_372)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(tray_142)exp(plate_2105, tray_142)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(bookshelf_372)
Find drawing_389. Find stamp_2031. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. Robot is no longer inside dining_room_1.Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.
##############################
From agent.py
open_executor(bookshelf_372)
Find towel_rack_298. Find drawing_296. Robot is inside bedroom_327. Robot is close floor_331. Robot is close bookshelf_372. 
##############################
From agent.py
exp(bowl_2096, bookshelf_372)
Fail to find bowl_2096 around bookshelf_372. 
##############################
From agent.py-> find a plan in act()
walk_executor(homework_2011)exp(bowl_2096, homework_2011)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(homework_2011)exp(bowl_2097, homework_2011)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(tray_142)exp(plate_2105, tray_142)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(homework_2011)
Robot is inside dining_room_1. Robot is close table_123. Robot is close homework_2011. Robot is no longer inside bedroom_327.Robot is no longer close floor_331.Robot is no longer close bookshelf_372.
##############################
From agent.py
exp(bowl_2096, homework_2011)
Fail to find bowl_2096 around homework_2011. 
##############################
From agent.py-> find a plan in act()
walk_executor(ceilinglamp_185)exp(bowl_2096, ceilinglamp_185)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(ceilinglamp_185)exp(bowl_2097, ceilinglamp_185)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(table_127)exp(plate_2105, table_127)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(ceilinglamp_185)
Find drawing_196. Robot is inside home_office_161. Robot is close ceilinglamp_185. Robot is no longer inside dining_room_1.Robot is no longer close table_123.Robot is no longer close homework_2011.
##############################
From agent.py
exp(bowl_2096, ceilinglamp_185)
Fail to find bowl_2096 around ceilinglamp_185. 
##############################
From agent.py-> find a plan in act()
walk_executor(photoframe_246)exp(bowl_2096, photoframe_246)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(photoframe_246)exp(bowl_2097, photoframe_246)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(oven_141)open_executor(oven_141)exp(plate_2105, oven_141)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(photoframe_246)
Find mat_237. Find drawing_238. Find chair_263. Robot is inside bedroom_220. Robot is close bookshelf_260. Robot is close photoframe_246. Robot is no longer inside home_office_161.Robot is no longer close ceilinglamp_185.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2096 ?
Answer: Locate dining_room_1. Inside dining_room_1, find table_127. Bowl_2096 is on table_127. Look for it among other objects that might be present on the table to ensure you have the correct bowl.
Re-decompose: None

##############################
From agent.py
Human Instruction: Navigate to dining_room_1. Once inside, locate table_123. You will find bowl_2095 on table_123.
Locate dining_room_1. Inside dining_room_1, find table_127. Bowl_2096 is on table_127. Look for it among other objects that might be present on the table to ensure you have the correct bowl.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for bowl_2095 around kitchen_counter_129.
Action 3: Walk to dishwasher_143.
Action 4: Open dishwasher_143.
Action 5: look for bowl_2095 around dishwasher_143.
Action 6: Walk to curtain_120.
Action 7: Open curtain_120.
Action 8: look for bowl_2095 around curtain_120.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for bowl_2095 around cupboard_131.
Action 12: Walk to cupboard_130.
Action 13: look for bowl_2095 around cupboard_130.
Action 14: Walk to kitchen_counter_132.
Action 15: look for bowl_2095 around kitchen_counter_132.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to dishwasher_143.
Action 21: Put bowl_2095 into dishwasher_143.
Action 22: Walk to table_123.
Action 23: look for bowl_2096 around table_123.
Action 24: Walk to bookshelf_372.
Action 25: Open bookshelf_372.
Action 26: look for bowl_2096 around bookshelf_372.
Action 27: Walk to homework_2011.
Action 28: look for bowl_2096 around homework_2011.
Action 29: Walk to ceilinglamp_185.
Action 30: look for bowl_2096 around ceilinglamp_185.
Action 31: Walk to photoframe_246.

##############################
From agent.py
exp(bowl_2096, photoframe_246)
Fail to find bowl_2096 around photoframe_246. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_127)exp(bowl_2096, table_127)walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(table_127)exp(bowl_2097, table_127)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(table_127)exp(plate_2105, table_127)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(table_127)
Find mat_115. Find plate_2105. Find bowl_2097. Find console_2027. Find fork_2104. Find bowl_2096. Find crayon_2030. Find napkin_2014. Robot is inside dining_room_1. Robot is close mat_115. Robot is close floor_20. Robot is close table_127. Robot is no longer inside bedroom_220.Robot is no longer close bookshelf_260.Robot is no longer close photoframe_246.
##############################
From agent.py
exp(bowl_2096, table_127)
Find bowl_2096. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2096)grab_executor(bowl_2096)walk_executor(dishwasher_143)putin_executor(bowl_2096, dishwasher_143)walk_executor(bowl_2097)grab_executor(bowl_2097)walk_executor(dishwasher_143)putin_executor(bowl_2097, dishwasher_143)walk_executor(plate_2105)grab_executor(plate_2105)walk_executor(dishwasher_143)putin_executor(plate_2105, dishwasher_143)close_executor(dishwasher_143)switchon_executor(dishwasher_143)
##############################
From agent.py
walk_executor(bowl_2096)
Robot is inside dining_room_1. Robot is close table_127. Robot is close bowl_2096. Robot is no longer close mat_115.Robot is no longer close floor_20.
##############################
From agent.py
grab_executor(bowl_2096)
Robot is inside dining_room_1. Robot is close table_127. Robot is close bowl_2096. Grabbing bowl_2096 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2096. Robot is close floor_21. Robot is close knife_2036. Robot is close bowl_2095. Robot is close dishwasher_143. Robot is no longer close table_127.
##############################
From agent.py
putin_executor(bowl_2096, dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2096. Robot is close floor_21. Robot is close knife_2036. Robot is close bowl_2095. Robot is close dishwasher_143. bowl_2096 released by right hand. 
##############################
From agent.py
walk_executor(bowl_2097)
Robot is inside dining_room_1. Robot is close bowl_2097. Robot is close table_127. Robot is no longer close dishwasher_143.Robot is no longer close bowl_2096.Robot is no longer close bowl_2095.Robot is no longer close knife_2036.Robot is no longer close floor_21.
##############################
From agent.py
grab_executor(bowl_2097)
Robot is inside dining_room_1. Robot is close bowl_2097. Robot is close table_127. Grabbing bowl_2097 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2097. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. Robot is no longer close table_127.
##############################
From agent.py
putin_executor(bowl_2097, dishwasher_143)
Robot is inside dining_room_1. Robot is close bowl_2097. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. bowl_2097 released by right hand. 
##############################
From agent.py
walk_executor(plate_2105)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close table_127. Robot is no longer close dishwasher_143.Robot is no longer close bowl_2096.Robot is no longer close bowl_2097.Robot is no longer close bowl_2095.Robot is no longer close knife_2036.Robot is no longer close floor_21.
##############################
From agent.py
grab_executor(plate_2105)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close table_127. Grabbing plate_2105 by right hand. 
##############################
From agent.py
walk_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close bowl_2097. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. Robot is no longer close table_127.
##############################
From agent.py
putin_executor(plate_2105, dishwasher_143)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close bowl_2097. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. plate_2105 released by right hand. 
##############################
From agent.py
close_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close bowl_2097. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. 
##############################
From agent.py
switchon_executor(dishwasher_143)
Robot is inside dining_room_1. Robot is close plate_2105. Robot is close bowl_2095. Robot is close bowl_2096. Robot is close bowl_2097. Robot is close dishwasher_143. Robot is close knife_2036. Robot is close floor_21. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_forks(fork:item, sink:item):
    body:
        achieve inside(fork, sink)
        # Ensure the fork is in the sink

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            wash(fork)
            achieve_once is_off(faucet)
        else:
            wash(fork)

behavior __goal__():
    body:
        bind forks: item where:
            is_fork(forks)
        # Select the forks to wash

        bind sink: item where:
            is_sink(sink)
        # Select a sink for washing

        foreach fork: item:
            if is_fork(fork) and dirty(fork):
                wash_forks(fork, sink)
                # Wash each dirty fork by hand

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_sauce_2101_around_oven_141(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(sauce,oven_instance)
        else:
            exp(sauce,oven_instance)
    eff:
        unknown[sauce]=False
        close[sauce,oven_instance]=True
        close[oven_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
behavior wash_fork_by_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select a fork to wash

        wash_fork_by_hand(fork)
        # Wash the fork by hand

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior wash_fork_by_hand(fork: item):
    body:
        wash(fork)

behavior __goal__():
    body:
        bind fork: item where:
            is_fork(fork)
        # Select a fork to wash

        wash_fork_by_hand(fork)
        # Wash the fork by hand

##############################
From agent.py-> find a plan in act()
walk_executor(fork_2103)wash_executor(fork_2103)
##############################
From agent.py
walk_executor(fork_2103)
Robot is inside dining_room_1. Robot is close table_123. Robot is close fork_2103. Robot is no longer close bowl_2095.Robot is no longer close bowl_2096.Robot is no longer close bowl_2097.Robot is no longer close dishwasher_143.Robot is no longer close knife_2036.Robot is no longer close floor_21.Robot is no longer close plate_2105.
##############################
From agent.py
wash_executor(fork_2103)
Robot is inside dining_room_1. Robot is close table_123. Robot is close fork_2103. 
##############################
From agent.py
Human Instruction: You need to finish washing all the forks by hand. The actions indicate that only one fork, fork_2103, has been washed so far. Find and wash any remaining forks.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for bowl_2095 around kitchen_counter_129.
Action 3: Walk to dishwasher_143.
Action 4: Open dishwasher_143.
Action 5: look for bowl_2095 around dishwasher_143.
Action 6: Walk to curtain_120.
Action 7: Open curtain_120.
Action 8: look for bowl_2095 around curtain_120.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for bowl_2095 around cupboard_131.
Action 12: Walk to cupboard_130.
Action 13: look for bowl_2095 around cupboard_130.
Action 14: Walk to kitchen_counter_132.
Action 15: look for bowl_2095 around kitchen_counter_132.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to dishwasher_143.
Action 21: Put bowl_2095 into dishwasher_143.
Action 22: Walk to table_123.
Action 23: look for bowl_2096 around table_123.
Action 24: Walk to bookshelf_372.
Action 25: Open bookshelf_372.
Action 26: look for bowl_2096 around bookshelf_372.
Action 27: Walk to homework_2011.
Action 28: look for bowl_2096 around homework_2011.
Action 29: Walk to ceilinglamp_185.
Action 30: look for bowl_2096 around ceilinglamp_185.
Action 31: Walk to photoframe_246.
Action 32: look for bowl_2096 around photoframe_246.
Action 33: Walk to table_127.
Action 34: look for bowl_2096 around table_127.
Action 35: Walk to bowl_2096.
Action 36: Grab bowl_2096.
Action 37: Walk to dishwasher_143.
Action 38: Put bowl_2096 into dishwasher_143.
Action 39: Walk to bowl_2097.
Action 40: Grab bowl_2097.
Action 41: Walk to dishwasher_143.
Action 42: Put bowl_2097 into dishwasher_143.
Action 43: Walk to plate_2105.
Action 44: Grab plate_2105.
Action 45: Walk to dishwasher_143.
Action 46: Put plate_2105 into dishwasher_143.
Action 47: Close dishwasher_143.
Action 48: Switch on dishwasher_143.
Action 49: Walk to fork_2103.
Action 50: Wash fork_2103.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_cleaning_solution_2098_around_bathroom_counter_306(cleaning_solution:item):
    goal: not unknown(cleaning_solution)
    body:
        assert is_cleaning_solution(cleaning_solution)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(cleaning_solution,bathroom_counter_instance)
        else:
            exp(cleaning_solution,bathroom_counter_instance)
    eff:
        unknown[cleaning_solution]=False
        close[cleaning_solution,bathroom_counter_instance]=True
        close[bathroom_counter_instance,cleaning_solution]=True
    

#exp_behavior_end

#goal_representation
 
def has_dirty_fork_unwashed():
    # Determine whether there is any dirty fork that has not yet been washed
    symbol has_dirty_fork=exists f: item: is_fork(f) and dirty(f) and not visited(f)
    return has_dirty_fork

behavior wash_fork(fork:item, sink:item):
    body:
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean the fork

        wash(fork)
        # Perform direct washing of the fork

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if has_dirty_fork_unwashed():
            # Check if there are any dirty forks that have not been washed
            foreach fork: item:
                if is_fork(fork) and dirty(fork) and not visited(fork):
                    wash_fork(fork, sink)
        else:
            observe(sink, "Check if there are any forks unwashed")
            # Observe additional forks needing washing

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#goal_representation
 
def has_dirty_fork_unwashed():
    # Determine whether there is any dirty fork that has not yet been washed
    symbol has_dirty_fork=exists f: item: is_fork(f) and dirty(f) and not visited(f)
    return has_dirty_fork

def has_faucet_nearby(sink:item):
    # Determine whether there is a faucet close to the sink
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_fork(fork:item, sink:item):
    body:
        if has_faucet_nearby(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean the fork

        wash(fork)
        # Perform direct washing of the fork

        if has_faucet_nearby(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if has_dirty_fork_unwashed():
            # Check if there are any dirty forks that have not been washed
            foreach fork: item:
                if is_fork(fork) and dirty(fork) and not visited(fork):
                    wash_fork(fork, sink)
        else:
            observe(sink, "Check if there are any forks unwashed")
            # Observe additional forks needing washing

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_dirty_fork_unwashed():
    # Determine whether there is any dirty fork that has not yet been washed
    symbol has_dirty_fork=exists f: item: is_fork(f) and dirty(f) and not visited(f)
    return has_dirty_fork

def has_faucet_nearby(sink:item):
    # Determine whether there is a faucet close to the sink
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior wash_fork(fork:item, sink:item):
    body:
        if has_faucet_nearby(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn on the faucet to clean the fork

        wash(fork)
        # Perform direct washing of the fork

        if has_faucet_nearby(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing the fork

behavior __goal__():
    body:
        bind sink: item where:
            is_sink(sink)
        # Select a sink

        if has_dirty_fork_unwashed():
            # Check if there are any dirty forks that have not been washed
            foreach fork: item:
                if is_fork(fork) and dirty(fork) and not visited(fork):
                    wash_fork(fork, sink)
        else:
            observe(sink, "Check if there are any forks unwashed")
            # Observe additional forks needing washing

##############################
From agent.py-> find a plan in act()
walk_executor(sink_133)obs(sink_133, Check if there are any forks unwashed)
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close table_123.Robot is no longer close fork_2103.
##############################
From agent.py
obs(sink_133, Check if there are any forks unwashed)
Get this information:  sink_133 is close to kitchen_counter_128. sink_133 is close to wall_2. sink_133 is close to cupboard_130. sink_133 is close to kitchen_counter_132. sink_133 is close to faucet_134. sink_133 is close to wall_6. sink_133 is close to walllamp_45. sink_133 is close to after_shave_2029. sink_133 is close to floor_15. sink_133 is close to floor_16. sink_133 is close to cleaning_solution_2098. sink_133 is close to juice_2034. sink_133 is close to knifeblock_52. sink_133 is close to microwave_149. sink_133 is close to pot_54. sink_133 is close to character_219. juice_2034 is inside sink_133. cleaning_solution_2098 is on sink_133. after_shave_2029 is inside sink_133. sink_133 is inside dining_room_1. sink_133 is inside kitchen_counter_132. sink_133 is DIRTY.
##############################
From agent.py
Human Instruction: You need to continue searching for any other forks that are not yet washed in the environment as only one fork (fork_2103) has been washed. Verify if there are additional dirty forks and wash them to complete the sub-task.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for bowl_2095 around kitchen_counter_129.
Action 3: Walk to dishwasher_143.
Action 4: Open dishwasher_143.
Action 5: look for bowl_2095 around dishwasher_143.
Action 6: Walk to curtain_120.
Action 7: Open curtain_120.
Action 8: look for bowl_2095 around curtain_120.
Action 9: Walk to cupboard_131.
Action 10: Open cupboard_131.
Action 11: look for bowl_2095 around cupboard_131.
Action 12: Walk to cupboard_130.
Action 13: look for bowl_2095 around cupboard_130.
Action 14: Walk to kitchen_counter_132.
Action 15: look for bowl_2095 around kitchen_counter_132.
Action 16: Walk to table_123.
Action 17: look for bowl_2095 around table_123.
Action 18: Walk to bowl_2095.
Action 19: Grab bowl_2095.
Action 20: Walk to dishwasher_143.
Action 21: Put bowl_2095 into dishwasher_143.
Action 22: Walk to table_123.
Action 23: look for bowl_2096 around table_123.
Action 24: Walk to bookshelf_372.
Action 25: Open bookshelf_372.
Action 26: look for bowl_2096 around bookshelf_372.
Action 27: Walk to homework_2011.
Action 28: look for bowl_2096 around homework_2011.
Action 29: Walk to ceilinglamp_185.
Action 30: look for bowl_2096 around ceilinglamp_185.
Action 31: Walk to photoframe_246.
Action 32: look for bowl_2096 around photoframe_246.
Action 33: Walk to table_127.
Action 34: look for bowl_2096 around table_127.
Action 35: Walk to bowl_2096.
Action 36: Grab bowl_2096.
Action 37: Walk to dishwasher_143.
Action 38: Put bowl_2096 into dishwasher_143.
Action 39: Walk to bowl_2097.
Action 40: Grab bowl_2097.
Action 41: Walk to dishwasher_143.
Action 42: Put bowl_2097 into dishwasher_143.
Action 43: Walk to plate_2105.
Action 44: Grab plate_2105.
Action 45: Walk to dishwasher_143.
Action 46: Put plate_2105 into dishwasher_143.
Action 47: Close dishwasher_143.
Action 48: Switch on dishwasher_143.
Action 49: Walk to fork_2103.
Action 50: Wash fork_2103.
Action 51: Walk to sink_133.
Action 52: Observe around sink_133 with the question of Check if there are any forks unwashed.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_sauce_2101_around_stove_2090(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(sauce,stove_instance)
        else:
            exp(sauce,stove_instance)
    eff:
        unknown[sauce]=False
        close[sauce,stove_instance]=True
        close[stove_instance,sauce]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_needle_2012_around_desk_261(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(needle,desk_instance)
        else:
            exp(needle,desk_instance)
    eff:
        unknown[needle]=False
        close[needle,desk_instance]=True
        close[desk_instance,needle]=True
    

behavior find_food_dessert_2051_around_toaster_144(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_dessert,toaster_instance)
        else:
            exp(food_dessert,toaster_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,toaster_instance]=True
        close[toaster_instance,food_dessert]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_cereal_2048_around_fridge_140(food_cereal:item):
    goal: not unknown(food_cereal)
    body:
        assert is_food_cereal(food_cereal)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_cereal,fridge_instance)
        else:
            exp(food_cereal,fridge_instance)
    eff:
        unknown[food_cereal]=False
        close[food_cereal,fridge_instance]=True
        close[fridge_instance,food_cereal]=True
    

#exp_behavior_end

#goal_representation

def has_unwashed_fork():
    # Check if there is any dirty fork
    symbol has_unwashed=exists fork: item : is_fork(fork) and dirty(fork)
    return has_unwashed

behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        if has_unwashed_fork():
            foreach fork: item:
                # Wash all forks that are dirty
                if is_fork(fork) and dirty(fork):
                    wash_fork(fork)
        else:
            # If no unwashed forks are identified, perform an observation to confirm
            bind sink: item where:
                is_sink(sink)
            observe(sink, "Check if there are any forks unwashed")

#goal_representation_end

##############################
From agent.py->reset_sub_goal

def has_unwashed_fork():
    # Check if there is any dirty fork
    symbol has_unwashed=exists fork: item : is_fork(fork) and dirty(fork)
    return has_unwashed

behavior wash_fork(fork:item):
    body:
        wash(fork)
        # Wash the fork by hand

behavior __goal__():
    body:
        if has_unwashed_fork():
            foreach fork: item:
                # Wash all forks that are dirty
                if is_fork(fork) and dirty(fork):
                    wash_fork(fork)
        else:
            # If no unwashed forks are identified, perform an observation to confirm
            bind sink: item where:
                is_sink(sink)
            observe(sink, "Check if there are any forks unwashed")

##############################
From agent.py-> find a plan in act()
obs(sink_133, Check if there are any forks unwashed)
##############################
From agent.py
obs(sink_133, Check if there are any forks unwashed)
Get this information:  sink_133 is close to kitchen_counter_128. sink_133 is close to wall_2. sink_133 is close to cupboard_130. sink_133 is close to kitchen_counter_132. sink_133 is close to faucet_134. sink_133 is close to wall_6. sink_133 is close to walllamp_45. sink_133 is close to after_shave_2029. sink_133 is close to floor_15. sink_133 is close to floor_16. sink_133 is close to cleaning_solution_2098. sink_133 is close to juice_2034. sink_133 is close to knifeblock_52. sink_133 is close to microwave_149. sink_133 is close to pot_54. sink_133 is close to character_219. juice_2034 is inside sink_133. cleaning_solution_2098 is on sink_133. after_shave_2029 is inside sink_133. sink_133 is inside dining_room_1. sink_133 is inside kitchen_counter_132. sink_133 is DIRTY.
##############################
