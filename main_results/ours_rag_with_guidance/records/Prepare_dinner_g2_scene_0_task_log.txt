From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onions.', '2. Place the chicken and onions in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken(chicken:item):
    body:
        wash(chicken)
        # Action to clean the chicken

behavior clean_onions(onion:item):
    body:
        wash(onion)
        # Action to clean the onions

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to be cleaned

        bind onion: item where:
            is_food_onion(onion)
        # Select the onions to be cleaned
        
        clean_chicken(chicken)
        # Execute the cleaning of the chicken
        
        clean_onions(onion)
        # Execute the cleaning of the onions

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_turkey_2040_around_coffee_table_2068(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind coffee_table_instance:item where:
            is_coffee_table(coffee_table_instance) and id[coffee_table_instance]==2068
        achieve close_char(char,coffee_table_instance)
        if can_open(coffee_table_instance):
            achieve_once open(coffee_table_instance)
            exp(food_turkey,coffee_table_instance)
        else:
            exp(food_turkey,coffee_table_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,coffee_table_instance]=True
        close[coffee_table_instance,food_turkey]=True
    

#exp_behavior_end

#goal_representation
 
def should_clean(obj:item):
    # Function to check if an item is dirty
    return dirty(obj)

behavior clean_item(item:item, sink:item):
    body: 
        achieve once inside(item, sink)
        # Ensure the item is placed inside the sink
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onions: item where:
            is_food_onion(onions)
        # Select the onions

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        if should_clean(chicken):
            clean_item(chicken, sink)
        
        if should_clean(onions):
            clean_item(onions, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 5845, column 22.
Expected one of: 
	* _NEWLINE
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2017_around_fridge_289(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def should_clean(obj:item):
    # Function to check if an item is dirty
    return dirty(obj)

behavior clean_item(item:item, sink:item):
    body: 
        achieve_once inside(item, sink)
        # Ensure the item is placed inside the sink
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onions: item where:
            is_food_onion(onions)
        # Select the onions

        bind sink: item where:
            is_sink(sink)
        # Select the sink

        if should_clean(chicken):
            clean_item(chicken, sink)
        
        if should_clean(onions):
            clean_item(onions, sink)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onions." ?
Answer: Put the chicken and onion in the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2032_around_kitchen_counter_230(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_turkey_2040_around_fridge_289(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_chicken_2017_around_oven_295(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==295
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_chicken,oven_instance)
        else:
            exp(food_chicken,oven_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,oven_instance]=True
        close[oven_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to roast

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to roast

        bind oven: item where:
            is_oven(oven)
        # Select the oven for roasting

        put_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(oven_295)switchoff_executor(oven_295)open_executor(oven_295)exp(food_chicken_2017, oven_295)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(stove_2065)putin_executor(food_chicken_2017, stove_2065)walk_executor(kitchen_counter_230)exp(food_onion_2032, kitchen_counter_230)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(stove_2065)putin_executor(food_onion_2032, stove_2065)
##############################
From agent.py
walk_executor(oven_295)
Find tray_296. Find drawing_240. Find drawing_238. Find drawing_239. Robot is inside dining_room_201. Robot is close tray_296. Robot is close oven_295. Robot is no longer inside bathroom_1.
##############################
From agent.py
switchoff_executor(oven_295)
Robot is inside dining_room_201. Robot is close tray_296. Robot is close oven_295. 
##############################
From agent.py
open_executor(oven_295)
Robot is inside dining_room_201. Robot is close tray_296. Robot is close oven_295. 
##############################
From agent.py
exp(food_chicken_2017, oven_295)
Fail to find food_chicken_2017 around oven_295. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_chicken_2017, fridge_289)walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(stove_2065)putin_executor(food_chicken_2017, stove_2065)walk_executor(fridge_289)exp(food_onion_2032, fridge_289)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(stove_2065)putin_executor(food_onion_2032, stove_2065)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close tray_296.Robot is no longer close oven_295.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Find drawing_174. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_chicken_2017, fridge_289)
Find food_chicken_2017. 
##############################
From agent.py-> find a plan in act()
walk_executor(stove_2065)open_executor(stove_2065)walk_executor(food_chicken_2017)grab_executor(food_chicken_2017)walk_executor(stove_2065)putin_executor(food_chicken_2017, stove_2065)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(stove_2065)putin_executor(food_onion_2032, stove_2065)
##############################
From agent.py
walk_executor(stove_2065)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
open_executor(stove_2065)
Robot is inside dining_room_201. Robot is close stove_2065. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close fridge_289. Robot is close food_chicken_2017. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_chicken_2017, stove_2065)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close stove_2065. Robot is close kitchen_counter_230. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Robot is no longer close food_chicken_2017.Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close fridge_289. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. Robot is no longer close fridge_289.
##############################
From agent.py
putin_executor(food_onion_2032, stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. food_onion_2032 released by right hand. 
##############################
From agent.py
Human Instruction: You need to put the chicken and onion into the oven, not the stove. Move the chicken and onion from the stove to the oven to complete the task.

Human Guidance: Put the chicken and onion in the oven.
The actions you have taken:
Action 1: Walk to oven_295.
Action 2: Switch off oven_295.
Action 3: Open oven_295.
Action 4: look for food_chicken_2017 around oven_295.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_chicken_2017 around fridge_289.
Action 9: Walk to stove_2065.
Action 10: Open stove_2065.
Action 11: Walk to food_chicken_2017.
Action 12: Grab food_chicken_2017.
Action 13: Walk to stove_2065.
Action 14: Put food_chicken_2017 into stove_2065.
Action 15: Walk to food_onion_2032.
Action 16: Grab food_onion_2032.
Action 17: Walk to stove_2065.
Action 18: Put food_onion_2032 into stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_405_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Goal to place the chicken inside the oven
        achieve inside(onion, oven)
        # Goal to place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior prepare_chicken_and_onion(oven:item, chicken:item, onion:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven)
        # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove_2065)
        # Select the chicken currently inside stove_2065

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove_2065)
        # Select the onion currently inside stove_2065

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        prepare_chicken_and_onion(oven, chicken, onion)
        # Execute the behavior to place chicken and onion inside the oven

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove_2065; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_pillow_183_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#goal_representation
behavior prepare_chicken_and_onion(oven:item, chicken:item, onion:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven)
        # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove)
        # Select the chicken currently inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove)
        # Select the onion currently inside the stove

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        prepare_chicken_and_onion(oven, chicken, onion)
        # Execute the behavior to place chicken and onion inside the oven
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [Variable<chicken: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation

behavior prepare_chicken_and_onion(oven:item, chicken:item, onion:item):
    body:
        achieve inside(chicken, oven)
        # Ensure the chicken is placed inside the oven
        achieve inside(onion, oven)
        # Ensure the onion is placed inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, stove)
        # Select the chicken currently inside the stove

        bind onion: item where:
            is_food_onion(onion) and inside(onion, stove)
        # Select the onion currently inside the stove

        bind stove: item where:
            is_stove(stove) and id[stove]==2065
        # Select the stove with ID 2065

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        prepare_chicken_and_onion(oven, chicken, onion)
        # Execute the behavior to place chicken and onion inside the oven

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the chicken and onion in the oven to roast." ?
Answer: Put the chicken and onion in the oven. Turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place both the chicken and onion in the oven
        turn_on_oven(oven)
        # Turn on the oven to roast the chicken and onion

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior place_chicken_and_onion_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven to start roasting

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        place_chicken_and_onion_in_oven(chicken, onion, oven)
        # Place both the chicken and onion in the oven
        turn_on_oven(oven)
        # Turn on the oven to roast the chicken and onion

##############################
From agent.py-> find a plan in act()
close_executor(stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
close_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
Human Instruction: Move both the chicken and onion from the stove to the oven and then turn on the oven.

Human Guidance: Put the chicken and onion in the oven. Turn on the oven.
The actions you have taken:
Action 1: Walk to oven_295.
Action 2: Switch off oven_295.
Action 3: Open oven_295.
Action 4: look for food_chicken_2017 around oven_295.
Action 5: Walk to fridge_289.
Action 6: Switch off fridge_289.
Action 7: Open fridge_289.
Action 8: look for food_chicken_2017 around fridge_289.
Action 9: Walk to stove_2065.
Action 10: Open stove_2065.
Action 11: Walk to food_chicken_2017.
Action 12: Grab food_chicken_2017.
Action 13: Walk to stove_2065.
Action 14: Put food_chicken_2017 into stove_2065.
Action 15: Walk to food_onion_2032.
Action 16: Grab food_onion_2032.
Action 17: Walk to stove_2065.
Action 18: Put food_onion_2032 into stove_2065.
Action 19: Close stove_2065.
Action 20: Switch on stove_2065.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_plate_1000_around_dishwasher_1001(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind dishwasher_instance:item where:
            is_dishwasher(dishwasher_instance) and id[dishwasher_instance]==1001
        achieve close_char(char,dishwasher_instance)
        if can_open(dishwasher_instance):
            achieve_once open(dishwasher_instance)
            exp(plate,dishwasher_instance)
        else:
            exp(plate,dishwasher_instance)
    eff:
        unknown[plate]=False
        close[plate,dishwasher_instance]=True
        close[dishwasher_instance,plate]=True
    

behavior find_pillow_406_around_bed_105(pillow:item):
    goal: not unknown(pillow)
    body:
        assert is_pillow(pillow)
        bind bed_instance:item where:
            is_bed(bed_instance) and id[bed_instance]==105
        achieve close_char(char,bed_instance)
        if can_open(bed_instance):
            achieve_once open(bed_instance)
            exp(pillow,bed_instance)
        else:
            exp(pillow,bed_instance)
    eff:
        unknown[pillow]=False
        close[pillow,bed_instance]=True
        close[bed_instance,pillow]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven) and id[oven] == 295
        # Select the oven with ID 295

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)open_executor(stove_2065)grab_executor(food_chicken_2017)walk_executor(oven_295)putin_executor(food_chicken_2017, oven_295)walk_executor(food_onion_2032)grab_executor(food_onion_2032)walk_executor(oven_295)putin_executor(food_onion_2032, oven_295)close_executor(oven_295)switchon_executor(oven_295)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
open_executor(stove_2065)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. 
##############################
From agent.py
grab_executor(food_chicken_2017)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is close food_chicken_2017. Robot is close kitchen_counter_230. Grabbing food_chicken_2017 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close tray_296. Robot is close oven_295. Robot is no longer close food_onion_2032.Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
putin_executor(food_chicken_2017, oven_295)
Robot is inside dining_room_201. Robot is close food_chicken_2017. Robot is close tray_296. Robot is close oven_295. food_chicken_2017 released by right hand. 
##############################
From agent.py
walk_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Robot is no longer close tray_296.Robot is no longer close food_chicken_2017.Robot is no longer close oven_295.
##############################
From agent.py
grab_executor(food_onion_2032)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close stove_2065. Grabbing food_onion_2032 by right hand. 
##############################
From agent.py
walk_executor(oven_295)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close tray_296. Robot is close food_chicken_2017. Robot is close oven_295. Robot is no longer close stove_2065.
##############################
From agent.py
putin_executor(food_onion_2032, oven_295)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close tray_296. Robot is close food_chicken_2017. Robot is close oven_295. food_onion_2032 released by right hand. 
##############################
From agent.py
close_executor(oven_295)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close tray_296. Robot is close food_chicken_2017. Robot is close oven_295. 
##############################
From agent.py
switchon_executor(oven_295)
Robot is inside dining_room_201. Robot is close food_onion_2032. Robot is close tray_296. Robot is close food_chicken_2017. Robot is close oven_295. 
##############################
