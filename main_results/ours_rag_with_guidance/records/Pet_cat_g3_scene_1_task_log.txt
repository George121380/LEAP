From agent.py
Reset goals: The sub-goals are: 
['1. Fill a bowl with water and place it on the table in the home office.', '2. Find your cat and place it on the same table.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2113_around_fridge_126(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_chair_194_around_desk_193(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==193
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_bowl_2140_around_kitchen_counter_119(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl is filled with water
        if can_open(faucet):
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the bowl
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the bowl
            
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to be filled with water
        
        bind faucet: item where:
            is_faucet(faucet)
        # Ensure a faucet is selected for water source
        
        bind table: item where:
            is_table(table)
        # Ensure a table is selected in the home office
        
        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_bowl_with_water(bowl:item, faucet:item):
    body:
        achieve has_water(bowl)
        # Ensure the bowl is filled with water
        if can_open(faucet):
            achieve_once is_on(faucet)
            # Turn on the faucet to fill the bowl
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the bowl
            
behavior place_bowl_on_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Place the bowl on the table

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select a bowl to be filled with water
        
        bind faucet: item where:
            is_faucet(faucet)
        # Ensure a faucet is selected for water source
        
        bind table: item where:
            is_table(table)
        # Ensure a table is selected in the home office
        
        fill_bowl_with_water(bowl, faucet)
        place_bowl_on_table(bowl, table)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(bowl_2140, kitchen_counter_119)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(table_114)put_executor(bowl_2140, table_114)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find tray_128. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find pot_78. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. 
##############################
From agent.py
exp(bowl_2140, kitchen_counter_119)
Find bowl_2140. 
##############################
From agent.py-> find a plan in act()
walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)walk_executor(table_114)put_executor(bowl_2140, table_114)
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. 
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close bowl_2140. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
put_executor(bowl_2140, table_114)
Robot is inside dining_room_41. Robot is close bowl_2140. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. bowl_2140 released by right hand. 
##############################
From agent.py
Human Instruction: The robot needs to find a table in the home office to place the bowl filled with water. Currently, the bowl has been placed on a table in the dining room, not the home office.

The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to bowl_2140.
Action 4: Grab bowl_2140.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to table_114.
Action 9: Put bowl_2140 on table_114.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2154_around_stove_2135(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior move_bowl_to_home_office_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Move the bowl to the specified table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind dining_room_table: item where:
            is_table(dining_room_table) and on(bowl, dining_room_table)
        # Select the table in the dining room where the bowl is currently located

        observe(home_office,"Find a table in the home office")
        foreach table: item:
            if is_table(table) and inside(table, home_office) and not on(bowl, table):
                move_bowl_to_home_office_table(bowl, table)
                break

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: break; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_stereo_2050_around_tvstand_273(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

behavior find_food_donut_2091_around_fridge_126(food_donut:item):
    goal: not unknown(food_donut)
    body:
        assert is_food_donut(food_donut)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_donut,fridge_instance)
        else:
            exp(food_donut,fridge_instance)
    eff:
        unknown[food_donut]=False
        close[food_donut,fridge_instance]=True
        close[fridge_instance,food_donut]=True
    

behavior find_food_snack_2110_around_fridge_126(food_snack:item):
    goal: not unknown(food_snack)
    body:
        assert is_food_snack(food_snack)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_snack,fridge_instance)
        else:
            exp(food_snack,fridge_instance)
    eff:
        unknown[food_snack]=False
        close[food_snack,fridge_instance]=True
        close[fridge_instance,food_snack]=True
    

#goal_representation
behavior move_bowl_to_home_office_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Move the bowl to the specified table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select a table in the home office

        bind dining_room_table: item where:
            is_table(dining_room_table) and on(bowl, dining_room_table)
        # Select the table in the dining room where the bowl is currently located

        observe(home_office_table, "Find a suitable table in the home office")
        move_bowl_to_home_office_table(bowl, home_office_table)
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<home_office_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dvd_player_2130_around_tvstand_273(dvd_player:item):
    goal: not unknown(dvd_player)
    body:
        assert is_dvd_player(dvd_player)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(dvd_player,tvstand_instance)
        else:
            exp(dvd_player,tvstand_instance)
    eff:
        unknown[dvd_player]=False
        close[dvd_player,tvstand_instance]=True
        close[tvstand_instance,dvd_player]=True
    

#goal_representation
behavior move_bowl_to_home_office_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Move the bowl to the specified table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select a table in the home office

        bind dining_room_table: item where:
            is_table(dining_room_table) and on(bowl, dining_room_table)
        # Select the table in the dining room where the bowl is currently located

        observe(home_office_table, "Find a suitable table in the home office")
        move_bowl_to_home_office_table(bowl, home_office_table)
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior move_bowl_to_home_office_table(bowl:item, table:item):
    body:
        achieve on(bowl, table)
        # Move the bowl to the specified table in the home office

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl) and has_water(bowl)
        # Select the bowl with water
        
        bind home_office: item where:
            is_home_office(home_office)
        # Define the home office

        bind home_office_table: item where:
            is_table(home_office_table) and inside(home_office_table, home_office)
        # Select a table in the home office

        bind dining_room_table: item where:
            is_table(dining_room_table) and on(bowl, dining_room_table)
        # Select the table in the dining room where the bowl is currently located

        observe(home_office_table, "Find a suitable table in the home office")
        move_bowl_to_home_office_table(bowl, home_office_table)
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)obs(table_270, Find a suitable table in the home office)walk_executor(bowl_2140)grab_executor(bowl_2140)walk_executor(table_270)put_executor(bowl_2140, table_270)
##############################
From agent.py
walk_executor(table_270)
Find shampoo_2019. Find pillow_286. Find pencil_2014. Find pillow_287. Find brush_2002. Find drawing_288. Find shoes_2033. Find phone_2017. Robot is inside home_office_241. Robot is close couch_269. Robot is close table_270. Robot is no longer inside dining_room_41.Robot is no longer close table_114.Robot is no longer close bowl_2140.Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
obs(table_270, Find a suitable table in the home office)
Get this information:  table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to character_240. table_270 is inside home_office_241. table_270 is inside couch_269. shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. table_270 is CLEAN.
##############################
From agent.py
walk_executor(bowl_2140)
Robot is inside bathroom_1. Robot is close table_114. Robot is close bowl_2140. Robot is no longer inside home_office_241.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
grab_executor(bowl_2140)
Robot is inside bathroom_1. Robot is close table_114. Robot is close bowl_2140. Grabbing bowl_2140 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. Robot is no longer inside bathroom_1.Robot is no longer close table_114.
##############################
From agent.py
put_executor(bowl_2140, table_270)
Robot is inside home_office_241. Robot is close bowl_2140. Robot is close couch_269. Robot is close table_270. bowl_2140 released by right hand. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_toy_2056_around_cat_2069(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind cat_instance:item where:
            is_cat(cat_instance) and id[cat_instance]==2069
        achieve close_char(char,cat_instance)
        if can_open(cat_instance):
            achieve_once open(cat_instance)
            exp(toy,cat_instance)
        else:
            exp(toy,cat_instance)
    eff:
        unknown[toy]=False
        close[toy,cat_instance]=True
        close[cat_instance,toy]=True
    

#exp_behavior_end

#goal_representation
 
def is_table_in_home_office(table: item):
    # Function to check if a table is inside the home office
    symbol inside_home_office = exists room: item : is_home_office(room) and inside(table, room)
    return inside_home_office

behavior find_cat_and_place_on_table(cat: item, table: item):
    body:
        achieve close_char(char, cat)
        achieve_once inhand(cat)
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Find the cat

        bind table: item where:
            is_table(table) and is_table_in_home_office(table)
        # Find a table inside the home office

        find_cat_and_place_on_table(cat, table)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_toy_2056_around_cat_2069(toy:item):
    goal: not unknown(toy)
    body:
        assert is_toy(toy)
        bind cat_instance:item where:
            is_cat(cat_instance) and id[cat_instance]==2069
        achieve close_char(char,cat_instance)
        if can_open(cat_instance):
            achieve_once open(cat_instance)
            exp(toy,cat_instance)
        else:
            exp(toy,cat_instance)
    eff:
        unknown[toy]=False
        close[toy,cat_instance]=True
        close[cat_instance,toy]=True
    

#exp_behavior_end

#goal_representation
 
def is_cat_near_table(cat:item, table:item):
    # Function to check if the cat is close to the specified table
    symbol near_table=close(cat, table)
    return near_table

behavior move_cat_to_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not is_cat_near_table(cat, table):
            observe(cat, "Check if the cat is close to the table in the home office")
            # Observe if the cat is close to the table

        move_cat_to_table(cat, table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_cat_near_table(cat:item, table:item):
    # Function to check if the cat is close to the specified table
    symbol near_table=close(cat, table)
    return near_table

behavior move_cat_to_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not is_cat_near_table(cat, table):
            observe(cat, "Check if the cat is close to the table in the home office")
            # Observe if the cat is close to the table

        move_cat_to_table(cat, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_cat_near_table(cat:item, table:item):
    # Function to check if the cat is close to the specified table
    symbol near_table=close(cat, table)
    return near_table

behavior move_cat_to_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind table: item where:
            is_table(table) and inside(table, home_office)
        # Select the table inside the home office
        
        bind cat: item where:
            is_cat(cat)
        # Select the cat

        if not is_cat_near_table(cat, table):
            observe(cat, "Check if the cat is close to the table in the home office")
            # Observe if the cat is close to the table

        move_cat_to_table(cat, table)

##############################
From agent.py-> find a plan in act()
walk_executor(cat_2069)obs(cat_2069, Check if the cat is close to the table in the home office)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
walk_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Robot is no longer close bowl_2140.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
obs(cat_2069, Check if the cat is close to the table in the home office)
Get this information:  cat_2069 is inside home_office_241. cat_2069 is inside dresser_274. cat_2069 is close to dresser_274. cat_2069 is close to character_240. cat_2069 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_desk_272(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind table_home_office: item where:
            is_table(table_home_office) and inside(table_home_office, home_office)
        # Select the table inside the home office

        bind table_dining_room: item where:
            is_table(table_dining_room) and inside(table_dining_room, dining_room)
        # Select the table inside the dining room
        
        bind my_cat: item where:
            is_cat(my_cat)
        # Select the cat

        if not visited(table_home_office):
            observe(table_home_office, "Check the location of my cat relative to the table home office")
            # Observe the location of the table in the home office

        if not on(my_cat, table_home_office) and not close(my_cat, table_home_office):
            observe(my_cat, "Check if the cat is close to the table in the home office")
            # If the cat is not close, observe my_cat to find it

        if close(my_cat, table_home_office):
            achieve on(my_cat, table_home_office)
            # Place the cat on the table in the home office once its close enough

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: home_office; available variables: [Variable<table_home_office: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_1000_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_stereo_2050_around_tvstand_273(stereo:item):
    goal: not unknown(stereo)
    body:
        assert is_stereo(stereo)
        bind tvstand_instance:item where:
            is_tvstand(tvstand_instance) and id[tvstand_instance]==273
        achieve close_char(char,tvstand_instance)
        if can_open(tvstand_instance):
            achieve_once open(tvstand_instance)
            exp(stereo,tvstand_instance)
        else:
            exp(stereo,tvstand_instance)
    eff:
        unknown[stereo]=False
        close[stereo,tvstand_instance]=True
        close[tvstand_instance,stereo]=True
    

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room
        
        bind table_home_office: item where:
            is_table(table_home_office) and inside(table_home_office, home_office)
        # Select the table inside the home office

        bind table_dining_room: item where:
            is_table(table_dining_room) and inside(table_dining_room, dining_room)
        # Select the table inside the dining room
        
        bind my_cat: item where:
            is_cat(my_cat)
        # Select the cat

        if not visited(table_home_office):
            observe(table_home_office, "Check the location of my cat relative to the table home office")
            # Observe the location of the table in the home office

        if not on(my_cat, table_home_office) and not close(my_cat, table_home_office):
            observe(my_cat, "Check if the cat is close to the table in the home office")
            # If the cat is not close, observe my_cat to find it

        if close(my_cat, table_home_office):
            achieve on(my_cat, table_home_office)
            # Place the cat on the table in the home office once its close enough

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office

        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room
        
        bind table_home_office: item where:
            is_table(table_home_office) and inside(table_home_office, home_office)
        # Select the table inside the home office

        bind table_dining_room: item where:
            is_table(table_dining_room) and inside(table_dining_room, dining_room)
        # Select the table inside the dining room
        
        bind my_cat: item where:
            is_cat(my_cat)
        # Select the cat

        if not visited(table_home_office):
            observe(table_home_office, "Check the location of my cat relative to the table home office")
            # Observe the location of the table in the home office

        if not on(my_cat, table_home_office) and not close(my_cat, table_home_office):
            observe(my_cat, "Check if the cat is close to the table in the home office")
            # If the cat is not close, observe my_cat to find it

        if close(my_cat, table_home_office):
            achieve on(my_cat, table_home_office)
            # Place the cat on the table in the home office once its close enough

##############################
From agent.py-> find a plan in act()
walk_executor(table_270)obs(table_270, Check the location of my cat relative to the table home office)walk_executor(cat_2069)obs(cat_2069, Check if the cat is close to the table in the home office)
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close couch_269. Robot is close table_270. Robot is no longer close dresser_274.Robot is no longer close cat_2069.
##############################
From agent.py
obs(table_270, Check the location of my cat relative to the table home office)
Get this information:  table_270 is close to shampoo_2019. table_270 is close to floor_264. table_270 is close to floor_265. table_270 is close to floor_266. table_270 is close to floor_267. table_270 is close to couch_269. table_270 is close to wall_248. table_270 is close to pillow_286. table_270 is close to orchid_285. table_270 is close to pencil_2014. table_270 is close to pillow_287. table_270 is close to bowl_2140. table_270 is close to character_240. table_270 is inside home_office_241. table_270 is inside couch_269. shampoo_2019 is on table_270. pencil_2014 is on table_270. orchid_285 is on table_270. table_270 is facing drawing_288. table_270 is facing television_281. table_270 is facing computer_276. bowl_2140 is on table_270. table_270 is CLEAN.
##############################
From agent.py
walk_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
obs(cat_2069, Check if the cat is close to the table in the home office)
Get this information:  cat_2069 is inside home_office_241. cat_2069 is inside dresser_274. cat_2069 is close to dresser_274. cat_2069 is close to character_240. cat_2069 is CLEAN.
##############################
From agent.py
Human Instruction: The robot needs to place the cat on the table in the home office. Currently, the cat is close to the dresser and not on the table.

Trial and Error: You can not grab cat_2069
The actions you have taken:
Action 1: Walk to kitchen_counter_119.
Action 2: look for bowl_2140 around kitchen_counter_119.
Action 3: Walk to bowl_2140.
Action 4: Grab bowl_2140.
Action 5: Walk to faucet_20.
Action 6: Switch on faucet_20.
Action 7: Switch off faucet_20.
Action 8: Walk to table_114.
Action 9: Put bowl_2140 on table_114.
Action 10: Walk to table_270.
Action 11: Observe around table_270 with the question of Find a suitable table in the home office.
Action 12: Walk to bowl_2140.
Action 13: Grab bowl_2140.
Action 14: Walk to table_270.
Action 15: Put bowl_2140 on table_270.
Action 16: Walk to cat_2069.
Action 17: Observe around cat_2069 with the question of Check if the cat is close to the table in the home office.
Action 18: Walk to table_270.
Action 19: Observe around table_270 with the question of Check the location of my cat relative to the table home office.
Action 20: Walk to cat_2069.
Action 21: Observe around cat_2069 with the question of Check if the cat is close to the table in the home office.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior move_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and close(cat, dresser)
        # Select the cat that is close to the dresser
        
        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 in the home office

        move_cat_on_table(cat, table)
        # Move the cat onto the specified table
 
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dresser; available variables: [Variable<cat: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_2003_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

#goal_representation
 
behavior move_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and exists d: item : is_dresser(d) and close(cat, d)
        # Select the cat that is close to the dresser
        
        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 in the home office

        move_cat_on_table(cat, table)
        # Move the cat onto the specified table

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'd') at line 5754, column 36.
Expected one of: 
	* _NEWLINE
	* COMMA
	* SEMICOLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
behavior move_cat_on_table(cat:item, table:item):
    body:
        achieve on(cat, table) # Place the cat on the table

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat) and exists d: item : is_dresser(d) and close(cat, d)
        # Select the cat that is close to the dresser

        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 in the home office

        move_cat_on_table(cat, table)
        # Move the cat onto the specified table
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior find_cat_and_place_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat with the ID 2069
        
        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 in the home office

        find_cat_and_place_on_table(cat, table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior find_cat_and_place_on_table(cat:item, table:item):
    body:
        achieve on(cat, table)

behavior __goal__():
    body:
        bind cat: item where:
            is_cat(cat)
        # Select the cat with the ID 2069
        
        bind table: item where:
            is_table(table) and id[table]==270
        # Select the table with ID 270 in the home office

        find_cat_and_place_on_table(cat, table)

##############################
From agent.py-> find a plan in act()
open_executor(dresser_274)grab_executor(cat_2069)walk_executor(table_270)put_executor(cat_2069, table_270)
##############################
From agent.py
open_executor(dresser_274)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. 
##############################
From agent.py
grab_executor(cat_2069)
Robot is inside home_office_241. Robot is close dresser_274. Robot is close cat_2069. Grabbing cat_2069 by right hand. 
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close cat_2069. Robot is close couch_269. Robot is close table_270. Robot is no longer close dresser_274.
##############################
From agent.py
put_executor(cat_2069, table_270)
Robot is inside home_office_241. Robot is close cat_2069. Robot is close couch_269. Robot is close table_270. cat_2069 released by right hand. 
##############################
