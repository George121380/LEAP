From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Put the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2036_around_kitchen_counter_128(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item, sink:item):
    body:
        achieve_once inside(item, sink) 
        # Ensure the item is placed inside the sink for cleaning

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(item)
        # Execute the washing process

        if exists faucet: item : is_faucet(faucet) and close(faucet, sink):
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to clean

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to clean

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        clean_item(chicken, sink)
        clean_item(onion, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: faucet; available variables: [Variable<item: item>, Variable<sink: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether the sink has a faucet
    symbol has_faucet = exists faucet: item : is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior clean_item(item: item, sink: item):
    body:
        achieve_once inside(item, sink)
        # Ensure the item is placed inside the sink for cleaning

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(item)
        # Execute the washing process

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after cleaning

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken to clean

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion to clean

        bind sink: item where:
            is_sink(sink)
        # Select a sink

        clean_item(chicken, sink)
        clean_item(onion, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_chicken_2050_around_kitchen_counter_128(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_chicken,kitchen_counter_instance)
        else:
            exp(food_chicken,kitchen_counter_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item: item):
    body:
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        # Clean the chicken
        
        clean_item(onion)
        # Clean the onion

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(item: item):
    body:
        wash(item)
        # Wash the item

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        # Clean the chicken
        
        clean_item(onion)
        # Clean the onion

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_128)exp(food_chicken_2050, kitchen_counter_128)walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_128)exp(food_onion_2026, kitchen_counter_128)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(kitchen_counter_128)
Find spectacles_2106. Find cutting_board_2080. Find food_orange_2008. Robot is inside dining_room_1. Robot is close kitchen_counter_128. Robot is close floor_15. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(food_chicken_2050, kitchen_counter_128)
Fail to find food_chicken_2050 around kitchen_counter_128. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and the onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_vegetable_2072_around_cupboard_131(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_vegetable,cupboard_instance)
        else:
            exp(food_vegetable,cupboard_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,cupboard_instance]=True
        close[cupboard_instance,food_vegetable]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_item(item:item):
    body:
        wash(item)
        # Wash the item to clean it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        clean_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior clean_item(item:item):
    body:
        wash(item)
        # Wash the item to clean it

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        clean_item(chicken)
        clean_item(onion)

##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_128.Robot is no longer close floor_15.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_chicken_2050, fridge_140)
Find food_chicken_2050. 
##############################
From agent.py-> find a plan in act()
wash_executor(food_chicken_2050)walk_executor(kitchen_counter_132)exp(food_onion_2026, kitchen_counter_132)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
wash_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
walk_executor(kitchen_counter_132)
Find pot_54. Find tray_142. Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_132)
Fail to find food_onion_2026 around kitchen_counter_132. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_chicken_2050)wash_executor(food_chicken_2050)walk_executor(cupboard_131)open_executor(cupboard_131)exp(food_onion_2026, cupboard_131)walk_executor(food_onion_2026)wash_executor(food_onion_2026)
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
wash_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. 
##############################
From agent.py
walk_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. Robot is no longer close food_chicken_2050.Robot is no longer close fridge_140.
##############################
From agent.py
open_executor(cupboard_131)
Robot is inside dining_room_1. Robot is close cupboard_131. 
##############################
From agent.py
exp(food_onion_2026, cupboard_131)
Fail to find food_onion_2026 around cupboard_131. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Clean the chicken and onion.', '2. Place the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior clean_chicken_and_onion(chicken:item, onion:item, sink:item):
    body:
        achieve_once inside(chicken, sink)
        # Place the chicken inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the chicken

        wash(chicken)
        # Wash the chicken
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the chicken

        achieve_once inside(onion, sink)
        # Place the onion inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the onion
            
        wash(onion)
        # Wash the onion
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        clean_chicken_and_onion(chicken, onion, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function has_faucet not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_light_49(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind light_instance:item where:
            is_light(light_instance) and id[light_instance]==49
        achieve close_char(char,light_instance)
        if can_open(light_instance):
            achieve_once open(light_instance)
            exp(food_onion,light_instance)
        else:
            exp(food_onion,light_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,light_instance]=True
        close[light_instance,food_onion]=True
    

#goal_representation

def has_faucet_in_sink(sink:item):
    # Determine whether a sink has a faucet
    symbol has faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior clean_chicken_and_onion(chicken:item, onion:item, sink:item):
    body:
        achieve_once inside(chicken, sink)
        # Place the chicken inside the sink

        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the chicken

        wash(chicken)
        # Wash the chicken
        
        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the chicken

        achieve_once inside(onion, sink)
        # Place the onion inside the sink

        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the onion
            
        wash(onion)
        # Wash the onion
        
        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        clean_chicken_and_onion(chicken, onion, sink)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('BASIC_TYPENAME', 'faucet') at line 6037, column 16.
Expected one of: 
	* EQUAL
Previous tokens: [Token('VARNAME', 'has')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#goal_representation
 
def has_faucet_in_sink(sink:item):
    # Determine whether a sink has a faucet
    symbol has_faucet = exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior clean_chicken_and_onion(chicken:item, onion:item, sink:item):
    body:
        achieve_once inside(chicken, sink)
        # Place the chicken inside the sink

        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the chicken

        wash(chicken)
        # Wash the chicken
        
        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the chicken

        achieve_once inside(onion, sink)
        # Place the onion inside the sink

        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # Turn the faucet on to clean the onion
            
        wash(onion)
        # Wash the onion
        
        if has_faucet_in_sink(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn the faucet off after washing the onion

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind sink: item where:
            is_sink(sink)
        # Select a sink
        
        clean_chicken_and_onion(chicken, onion, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_chicken_or_onion_to_clean(kitchen_counter:item):
    # Function to check if there is chicken or onion on the specified kitchen counter
    symbol has_chicken_or_onion=exists item: item : (is_food_chicken(item) or is_food_onion(item)) and on(item, kitchen_counter)
    return has_chicken_or_onion

behavior observe_if_not_clean(chicken:item, onion:item):
    body:
        if not clean(chicken) or not clean(onion):
            observe(chicken, "Check if chicken is clean")
            observe(onion, "Check if onion is clean")

behavior clean_item(item:item):
    body:
        achieve clean(item)
        # Ensure the item is clean

behavior __goal__():
    body:
        bind kitchen_counter: item where:
            is_kitchen_counter(kitchen_counter)
        # Select a kitchen counter

        if exists kitchen_counter: item : has_chicken_or_onion_to_clean(kitchen_counter):
            bind chicken: item where:
                is_food_chicken(chicken) and on(chicken, kitchen_counter)
            # Select the chicken on the kitchen counter

            bind onion: item where:
                is_food_onion(onion) and on(onion, kitchen_counter)
            # Select the onion on the kitchen counter

            observe_if_not_clean(chicken, onion)
            clean_item(chicken)
            clean_item(onion)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. clean the chicken and onion." ?
Answer: Your current plan significantly deviates from the ideal steps. Please replan based on putting the chicken and onion in the oven and turning on the oven.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the chicken and onion in the oven.', '2. Turn on the oven.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(stove_2090)putin_executor(food_chicken_2050, stove_2090)walk_executor(kitchen_counter_129)exp(food_onion_2026, kitchen_counter_129)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close cupboard_131.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_chicken_2050, stove_2090)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close kitchen_counter_129. Robot is close stove_2090. food_chicken_2050 released by right hand. 
##############################
From agent.py
walk_executor(kitchen_counter_129)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close food_chicken_2050.Robot is no longer close stove_2090.
##############################
From agent.py
exp(food_onion_2026, kitchen_counter_129)
Fail to find food_onion_2026 around kitchen_counter_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(food_onion_2026, cupboard_130)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
exp(food_onion_2026, cupboard_130)
Fail to find food_onion_2026 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_141)open_executor(oven_141)exp(food_onion_2026, oven_141)walk_executor(food_onion_2026)grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(oven_141)
Find food_butter_2018. Find dough_2021. Find food_onion_2026. Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
open_executor(oven_141)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. 
##############################
From agent.py
exp(food_onion_2026, oven_141)
Find food_onion_2026. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_onion_2026)walk_executor(stove_2090)putin_executor(food_onion_2026, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_onion_2026)
Robot is inside dining_room_1. Robot is close food_butter_2018. Robot is close dough_2021. Robot is close food_onion_2026. Robot is close oven_141. Robot is close tray_142. Grabbing food_onion_2026 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. Robot is no longer close food_butter_2018.Robot is no longer close dough_2021.Robot is no longer close oven_141.Robot is no longer close tray_142.
##############################
From agent.py
putin_executor(food_onion_2026, stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. food_onion_2026 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close food_onion_2026. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is close food_chicken_2050. 
##############################
From agent.py
Human Instruction: You need to put both the chicken and the onion into the oven, not the stove, in order to complete the sub-task.

Human Guidance: Your current plan significantly deviates from the ideal steps. Please replan based on putting the chicken and onion in the oven and turning on the oven.
The actions you have taken:
Action 1: Walk to kitchen_counter_128.
Action 2: look for food_chicken_2050 around kitchen_counter_128.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_chicken_2050 around fridge_140.
Action 7: Wash food_chicken_2050.
Action 8: Walk to kitchen_counter_132.
Action 9: look for food_onion_2026 around kitchen_counter_132.
Action 10: Walk to food_chicken_2050.
Action 11: Wash food_chicken_2050.
Action 12: Walk to cupboard_131.
Action 13: Open cupboard_131.
Action 14: look for food_onion_2026 around cupboard_131.
Action 15: Walk to stove_2090.
Action 16: Open stove_2090.
Action 17: Walk to food_chicken_2050.
Action 18: Grab food_chicken_2050.
Action 19: Walk to stove_2090.
Action 20: Put food_chicken_2050 into stove_2090.
Action 21: Walk to kitchen_counter_129.
Action 22: look for food_onion_2026 around kitchen_counter_129.
Action 23: Walk to cupboard_130.
Action 24: look for food_onion_2026 around cupboard_130.
Action 25: Walk to oven_141.
Action 26: Open oven_141.
Action 27: look for food_onion_2026 around oven_141.
Action 28: Grab food_onion_2026.
Action 29: Walk to stove_2090.
Action 30: Put food_onion_2026 into stove_2090.
Action 31: Close stove_2090.
Action 32: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. put the chicken and onion in the oven." ?
Answer: Put the chicken and onion in the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven to roast.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put the chicken and onion in the oven to roast." ?
Answer: Put the chicken and onion in the oven. Turn on the oven.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)
#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the chicken and onion in the oven and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_toaster_144(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_bread,toaster_instance)
        else:
            exp(food_bread,toaster_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,toaster_instance]=True
        close[toaster_instance,food_bread]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_needle_2012_around_bookshelf_188(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==188
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(needle,bookshelf_instance)
        else:
            exp(needle,bookshelf_instance)
    eff:
        unknown[needle]=False
        close[needle,bookshelf_instance]=True
        close[bookshelf_instance,needle]=True
    

behavior find_coin_2004_around_tablelamp_359(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind tablelamp_instance:item where:
            is_tablelamp(tablelamp_instance) and id[tablelamp_instance]==359
        achieve close_char(char,tablelamp_instance)
        if can_open(tablelamp_instance):
            achieve_once open(tablelamp_instance)
            exp(coin,tablelamp_instance)
        else:
            exp(coin,tablelamp_instance)
    eff:
        unknown[coin]=False
        close[coin,tablelamp_instance]=True
        close[tablelamp_instance,coin]=True
    

#exp_behavior_end

#goal_representation
behavior put_in_oven(chicken:item, onion:item, oven:item):
    body:
        achieve inside(chicken, oven)
        # Place the chicken inside the oven
        achieve inside(onion, oven)
        # Place the onion inside the oven

behavior turn_on_oven(oven:item):
    body:
        achieve is_on(oven)
        # Turn on the oven

behavior __goal__():
    body:
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bind onion: item where:
            is_food_onion(onion)
        # Select the onion

        bind oven: item where:
            is_oven(oven)
        # Select the oven

        put_in_oven(chicken, onion, oven)
        turn_on_oven(oven)
#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
