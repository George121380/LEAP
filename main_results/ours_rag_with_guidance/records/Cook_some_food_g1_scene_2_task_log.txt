From agent.py
Reset goals: The sub-goals are: 
['Boil the vegetables with a pot on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_54_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_food_vegetable_2072_around_fridge_140(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_vegetable,fridge_instance)
        else:
            exp(food_vegetable,fridge_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,fridge_instance]=True
        close[fridge_instance,food_vegetable]=True
    

behavior find_food_butter_2018_around_fridge_140(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_needle_2012_around_stove_2090(needle:item):
    goal: not unknown(needle)
    body:
        assert is_needle(needle)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(needle,stove_instance)
        else:
            exp(needle,stove_instance)
    eff:
        unknown[needle]=False
        close[needle,stove_instance]=True
        close[stove_instance,needle]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)

##############################
From agent.py-> find a plan in act()
walk_executor(stove_2090)open_executor(stove_2090)exp(pot_2093, stove_2090)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
walk_executor(stove_2090)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer inside home_office_161.
##############################
From agent.py
open_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
exp(pot_2093, stove_2090)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)close_executor(stove_2090)switchon_executor(stove_2090)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_vegetable_2072, fridge_140)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
close_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_vegetable_2072, fridge_140)
Find food_vegetable_2072. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)walk_executor(pot_2093)open_executor(pot_2093)walk_executor(food_vegetable_2072)grab_executor(food_vegetable_2072)walk_executor(pot_2093)putin_executor(food_vegetable_2072, pot_2093)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close stove_2090. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
open_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close stove_2090. 
##############################
From agent.py
walk_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close fridge_140. Robot is no longer close stove_2090.Robot is no longer close pot_2093.
##############################
From agent.py
grab_executor(food_vegetable_2072)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close fridge_140. Grabbing food_vegetable_2072 by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close stove_2090. Robot is close pot_2093. Robot is no longer close fridge_140.
##############################
From agent.py
putin_executor(food_vegetable_2072, pot_2093)
Robot is inside dining_room_1. Robot is close food_vegetable_2072. Robot is close stove_2090. Robot is close pot_2093. food_vegetable_2072 released by right hand. 
##############################
From agent.py
Human Instruction: The pot must be filled with water before starting to cook the vegetables. Please ensure that the pot is filled with water, which has not been done yet, before proceeding with boiling the vegetables on the stove.

The actions you have taken:
Action 1: Walk to stove_2090.
Action 2: Open stove_2090.
Action 3: look for pot_2093 around stove_2090.
Action 4: Walk to pot_2093.
Action 5: Grab pot_2093.
Action 6: Walk to faucet_134.
Action 7: Switch off faucet_134.
Action 8: Walk to stove_2090.
Action 9: Put pot_2093 on stove_2090.
Action 10: Close stove_2090.
Action 11: Switch on stove_2090.
Action 12: Walk to fridge_140.
Action 13: Switch off fridge_140.
Action 14: Open fridge_140.
Action 15: look for food_vegetable_2072 around fridge_140.
Action 16: Walk to pot_2093.
Action 17: Grab pot_2093.
Action 18: Walk to faucet_134.
Action 19: Switch on faucet_134.
Action 20: Switch off faucet_134.
Action 21: Walk to stove_2090.
Action 22: Put pot_2093 on stove_2090.
Action 23: Walk to pot_2093.
Action 24: Open pot_2093.
Action 25: Walk to food_vegetable_2072.
Action 26: Grab food_vegetable_2072.
Action 27: Walk to pot_2093.
Action 28: Put food_vegetable_2072 into pot_2093.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_coin_2004_around_faucet_308(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind faucet_instance:item where:
            is_faucet(faucet_instance) and id[faucet_instance]==308
        achieve close_char(char,faucet_instance)
        if can_open(faucet_instance):
            achieve_once open(faucet_instance)
            exp(coin,faucet_instance)
        else:
            exp(coin,faucet_instance)
    eff:
        unknown[coin]=False
        close[coin,faucet_instance]=True
        close[faucet_instance,coin]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot) 
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove) 
        # Place the pot on the stove 
        achieve is_on(stove)
        # Turn the stove on to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot 

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select pot_2093

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select food_vegetable_2072

        bind faucet: item where:
            is_faucet(faucet) and id[faucet]==134
        # Select the faucet

        bind stove: item where:
            is_stove(stove) and id[stove]==2090
        # Select the stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)
 
#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "boil the vegetables with a pot on the stove." ?
Answer: Put vegetables in a pot. Fill the pot with water. Put the pot on the stove. Turn on the stove.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(vegetables, pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put vegetables in a pot.', '2. Fill the pot with water.', '3. Put the pot on the stove.', '4. Turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_washing_machine_2041(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
def fill_pot_water_needed(pot: item):
    # Determine if the pot needs to be filled with water
    symbol need_fill=not has_water(pot)
    return need_fill

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot to use

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        if fill_pot_water_needed(pot):
            fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_washing_machine_2041(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(shoes,washing_machine_instance)
        else:
            exp(shoes,washing_machine_instance)
    eff:
        unknown[shoes]=False
        close[shoes,washing_machine_instance]=True
        close[washing_machine_instance,shoes]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Function to check if there is water in a specified pot
    symbol has_water=has_water(pot)
    return has_water

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_vegetables_in_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill the pot

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        place_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. put vegetables in a pot." ?
Answer: Put vegetables in a pot.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_oven_141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_onion,oven_instance)
        else:
            exp(food_onion,oven_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,oven_instance]=True
        close[oven_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and has_water(pot)
        # Select a pot that contains water

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables to put in the pot

        put_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Put the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put vegetables in a pot on the stove and boil them.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_food_onion_2026_around_cupboard_130(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior start_boiling(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)
        # Select a stove

        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(vegetables, pot)
        start_boiling(pot, stove)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_phone_47_around_desk_261(phone:item):
    goal: not unknown(phone)
    body:
        assert is_phone(phone)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(phone,desk_instance)
        else:
            exp(phone,desk_instance)
    eff:
        unknown[phone]=False
        close[phone,desk_instance]=True
        close[desk_instance,phone]=True
    

behavior find_coin_2004_around_bathroom_cabinet_305(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(coin,bathroom_cabinet_instance)
        else:
            exp(coin,bathroom_cabinet_instance)
    eff:
        unknown[coin]=False
        close[coin,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,coin]=True
    

behavior find_novel_2010_around_bookshelf_372(novel:item):
    goal: not unknown(novel)
    body:
        assert is_novel(novel)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==372
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(novel,bookshelf_instance)
        else:
            exp(novel,bookshelf_instance)
    eff:
        unknown[novel]=False
        close[novel,bookshelf_instance]=True
        close[bookshelf_instance,novel]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior place_pot_on_stove(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

behavior start_boiling(pot: item, stove: item):
    body:
        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select the pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        bind stove: item where:
            is_stove(stove)

        fill_pot_with_water(pot, faucet)
        place_pot_on_stove(pot, stove)
        start_boiling(pot, stove)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "put vegetables in a pot on the stove and boil them." ?
Answer: Put vegetables in a pot. Fill the pot with water. Put the pot on the stove. Turn on the stove.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put the vegetables in a pot and fill it with water.', '2. Put the pot on the stove and turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_124(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

behavior find_food_onion_2026_around_oven_141(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==141
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(food_onion,oven_instance)
        else:
            exp(food_onion,oven_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,oven_instance]=True
        close[oven_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water

behavior add_vegetables_to_pot(vegetables:item, pot:item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_shoes_2001_around_bench_124(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==124
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put vegetables in a pot.', '2. Fill the pot with water.', '3. Put the pot on the stove.', '4. Turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_shoes_2001_around_bench_125(shoes:item):
    goal: not unknown(shoes)
    body:
        assert is_shoes(shoes)
        bind bench_instance:item where:
            is_bench(bench_instance) and id[bench_instance]==125
        achieve close_char(char,bench_instance)
        if can_open(bench_instance):
            achieve_once open(bench_instance)
            exp(shoes,bench_instance)
        else:
            exp(shoes,bench_instance)
    eff:
        unknown[shoes]=False
        close[shoes,bench_instance]=True
        close[bench_instance,shoes]=True
    

#exp_behavior_end

#goal_representation
 
behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot
        
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables
        
        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_kitchen_counter_128(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

behavior find_bowl_2095_around_kitchen_counter_128(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(bowl,kitchen_counter_instance)
        else:
            exp(bowl,kitchen_counter_instance)
    eff:
        unknown[bowl]=False
        close[bowl,kitchen_counter_instance]=True
        close[kitchen_counter_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the vegetables

        assert has_water(pot)
        # Ensure the pot is filled with water before adding the vegetables

        add_vegetables_to_pot(vegetables, pot)
        # Add vegetables to the pot

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Put vegetables in a pot.', '2. Fill the pot with water.', '3. Put the pot on the stove.', '4. Turn on the stove.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_coin_2004_around_bathroom_counter_306(coin:item):
    goal: not unknown(coin)
    body:
        assert is_coin(coin)
        bind bathroom_counter_instance:item where:
            is_bathroom_counter(bathroom_counter_instance) and id[bathroom_counter_instance]==306
        achieve close_char(char,bathroom_counter_instance)
        if can_open(bathroom_counter_instance):
            achieve_once open(bathroom_counter_instance)
            exp(coin,bathroom_counter_instance)
        else:
            exp(coin,bathroom_counter_instance)
    eff:
        unknown[coin]=False
        close[coin,bathroom_counter_instance]=True
        close[bathroom_counter_instance,coin]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_in_pot(pot: item):
    # Check if the pot already has water
    symbol has_water = has_water(pot)
    return has_water

behavior fill_pot_with_water(pot: item, faucet: item):
    body:
        achieve has_water(pot)
        # Fill the pot with water using the faucet

behavior put_vegetables_in_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet

        if not has_water_in_pot(pot):
            fill_pot_with_water(pot, faucet)
        put_vegetables_in_pot(vegetables, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_onion_2026_around_toaster_144(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind toaster_instance:item where:
            is_toaster(toaster_instance) and id[toaster_instance]==144
        achieve close_char(char,toaster_instance)
        if can_open(toaster_instance):
            achieve_once open(toaster_instance)
            exp(food_onion,toaster_instance)
        else:
            exp(food_onion,toaster_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,toaster_instance]=True
        close[toaster_instance,food_onion]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior add_vegetables_to_pot(vegetables: item, pot: item):
    body:
        achieve inside(vegetables, pot)
        # Place the vegetables inside the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select vegetables

        add_vegetables_to_pot(vegetables, pot)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
