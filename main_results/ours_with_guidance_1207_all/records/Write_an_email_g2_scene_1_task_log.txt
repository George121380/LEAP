From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_home_office_241(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(book,home_office_instance)
        else:
            exp(book,home_office_instance)
    eff:
        unknown[book]=False
        close[book,home_office_instance]=True
        close[home_office_instance,book]=True
    

behavior find_keyboard_278_around_cpuscreen_277(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==277
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(keyboard,cpuscreen_instance)
        else:
            exp(keyboard,cpuscreen_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,cpuscreen_instance]=True
        close[cpuscreen_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_keyboard_211_around_home_office_241(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. sit on the chair in front of the computer in the home office." ?
Answer: Get close to the computer in the home office. Then sit on the chair in front of the computer.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Get close to the computer in the home office.', '2. Sit on the chair in front of the computer.', '3. Touch the mouse near the computer to turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

behavior find_keyboard_278_around_home_office_241(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(keyboard,home_office_instance)
        else:
            exp(keyboard,home_office_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,home_office_instance]=True
        close[home_office_instance,keyboard]=True
    

behavior find_mouse_280_around_cpuscreen_277(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind cpuscreen_instance:item where:
            is_cpuscreen(cpuscreen_instance) and id[cpuscreen_instance]==277
        achieve close_char(char,cpuscreen_instance)
        if can_open(cpuscreen_instance):
            achieve_once open(cpuscreen_instance)
            exp(mouse,cpuscreen_instance)
        else:
            exp(mouse,cpuscreen_instance)
    eff:
        unknown[mouse]=False
        close[mouse,cpuscreen_instance]=True
        close[cpuscreen_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        achieve close_char(char, computer)
        # Ensure you get close to the computer in the home office

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        achieve close_char(char, computer)
        # Ensure you get close to the computer in the home office

##############################
From agent.py-> find a plan in act()
walk_executor(computer_276)
##############################
From agent.py
walk_executor(computer_276)
Find chair_271. Find keyboard_278. Find mouse_280. Find mat_284. Robot is inside home_office_241. Robot is close computer_276. Robot is no longer inside dining_room_41.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_2003_around_chair_271(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==271
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(chair,chair_instance)
        else:
            exp(chair,chair_instance)
    eff:
        unknown[chair]=False
        close[chair,chair_instance]=True
        close[chair_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a sittable chair instance

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind chair: item where:
            is_chair(chair) and sittable(chair)
        # Select a sittable chair instance

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

##############################
From agent.py-> find a plan in act()
walk_executor(chair_271)exp(chair_194, chair_271)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is no longer close computer_276.
##############################
From agent.py
exp(chair_194, chair_271)
Fail to find chair_194 around chair_271. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_272)exp(chair_194, desk_272)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(desk_272)
Robot is inside home_office_241. Robot is close desk_272. Robot is close floor_263. Robot is no longer close chair_271.
##############################
From agent.py
exp(chair_194, desk_272)
Fail to find chair_194 around desk_272. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_270)exp(chair_194, table_270)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(table_270)
Robot is inside home_office_241. Robot is close couch_269. Robot is close table_270. Robot is no longer close desk_272.Robot is no longer close floor_263.
##############################
From agent.py
exp(chair_194, table_270)
Fail to find chair_194 around table_270. 
##############################
From agent.py-> find a plan in act()
walk_executor(desk_193)exp(chair_194, desk_193)walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(desk_193)
Find chair_194. Find mouse_213. Find keyboard_211. Find check_2026. Find laser_pointer_2034. Robot is inside bedroom_162. Robot is close desk_193. Robot is close floor_163. Robot is close floor_164. Robot is no longer inside home_office_241.Robot is no longer close couch_269.Robot is no longer close table_270.
##############################
From agent.py
exp(chair_194, desk_193)
Find chair_194. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_194)sit_executor(chair_194)
##############################
From agent.py
walk_executor(chair_194)
Robot is inside bedroom_162. Robot is close chair_194. Robot is no longer close desk_193.Robot is no longer close floor_163.Robot is no longer close floor_164.
##############################
From agent.py
sit_executor(chair_194)
Robot is inside bedroom_162. Robot is close chair_194. Robot is on chair_194. Robot is facing computer_209. 
##############################
From agent.py
Human Instruction: You need to sit on a chair in front of the computer in the home office. Currently, you are sitting on a chair in the bedroom. Return to the home office and sit on the correct chair in front of computer_276.

The actions you have taken:
Action 1: Walk to computer_276.
Action 2: Walk to chair_271.
Action 3: look for chair_194 around chair_271.
Action 4: Walk to desk_272.
Action 5: look for chair_194 around desk_272.
Action 6: Walk to table_270.
Action 7: look for chair_194 around table_270.
Action 8: Walk to desk_193.
Action 9: look for chair_194 around desk_193.
Action 10: Walk to chair_194.
Action 11: Sit on chair_194.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_cd_2145(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind cd_instance:item where:
            is_cd(cd_instance) and id[cd_instance]==2145
        achieve close_char(char,cd_instance)
        if can_open(cd_instance):
            achieve_once open(cd_instance)
            exp(chair,cd_instance)
        else:
            exp(chair,cd_instance)
    eff:
        unknown[chair]=False
        close[chair,cd_instance]=True
        close[cd_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair_in_front_of_computer(char, chair)
        # Execute the behavior to sit on the chair in front of the computer

##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(chair_271)sit_executor(chair_271)
##############################
From agent.py
standup_executor(char)
Robot is inside bedroom_162. Robot is close chair_194. Robot is on chair_194. Robot is facing computer_209. 
##############################
From agent.py
walk_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is no longer inside bedroom_162.Robot is no longer close chair_194.Robot is no longer facing computer_209.
##############################
From agent.py
sit_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is on chair_271. Robot is facing computer_276. 
##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse to turn it on
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse to turn it on
##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_213)touch_executor(mouse_213)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_194. Robot is on chair_271. Robot is facing computer_276. 
##############################
From agent.py
walk_executor(mouse_213)
Robot is inside bedroom_162. Robot is close desk_193. Robot is close mouse_213. Robot is close mousepad_214. Robot is on chair_194. Robot is on chair_271. Robot is no longer inside home_office_241.Robot is no longer close chair_271.Robot is no longer facing computer_276.
##############################
From agent.py
touch_executor(mouse_213)
Robot is inside bedroom_162. Robot is close desk_193. Robot is close mouse_213. Robot is close mousepad_214. Robot is on chair_194. Robot is on chair_271. 
##############################
From agent.py
Human Instruction: You need to return to the home office and touch the mouse that is near computer_276 to turn it on.

The actions you have taken:
Action 1: Walk to computer_276.
Action 2: Walk to chair_271.
Action 3: look for chair_194 around chair_271.
Action 4: Walk to desk_272.
Action 5: look for chair_194 around desk_272.
Action 6: Walk to table_270.
Action 7: look for chair_194 around table_270.
Action 8: Walk to desk_193.
Action 9: look for chair_194 around desk_193.
Action 10: Walk to chair_194.
Action 11: Sit on chair_194.
Action 12: char stand up.
Action 13: Walk to chair_271.
Action 14: Sit on chair_271.
Action 15: char stand up.
Action 16: Walk to mouse_213.
Action 17: Touch mouse_213.

##############################
Goal representation from planning.py

#exp_behavior

#exp_behavior_end

#goal_representation
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse
##############################
From agent.py-> find a plan in act()
touch_executor(mouse_213)
##############################
From agent.py
touch_executor(mouse_213)
Robot is inside bedroom_162. Robot is close desk_193. Robot is close mouse_213. Robot is close mousepad_214. Robot is on chair_194. Robot is on chair_271. 
##############################
From agent.py
Human Instruction: You need to touch the mouse near computer_276 in the home office. Currently, the mouse touched was near a different computer in the bedroom. Return to the home office and ensure you touch the correct mouse near computer_276.

The actions you have taken:
Action 1: Walk to computer_276.
Action 2: Walk to chair_271.
Action 3: look for chair_194 around chair_271.
Action 4: Walk to desk_272.
Action 5: look for chair_194 around desk_272.
Action 6: Walk to table_270.
Action 7: look for chair_194 around table_270.
Action 8: Walk to desk_193.
Action 9: look for chair_194 around desk_193.
Action 10: Walk to chair_194.
Action 11: Sit on chair_194.
Action 12: char stand up.
Action 13: Walk to chair_271.
Action 14: Sit on chair_271.
Action 15: char stand up.
Action 16: Walk to mouse_213.
Action 17: Touch mouse_213.
Action 18: Touch mouse_213.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_nightstand_192(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==192
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(chair,nightstand_instance)
        else:
            exp(chair,nightstand_instance)
    eff:
        unknown[chair]=False
        close[chair,nightstand_instance]=True
        close[nightstand_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select the computer with ID 276

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior touch_mouse(mouse: item):
    body:
        touch(mouse)
        # Ensure the mouse is touched to turn it on

behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer) and id[computer] == 276
        # Select the computer with ID 276

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch_mouse(mouse)
        # Execute the behavior to touch the mouse

##############################
From agent.py-> find a plan in act()
walk_executor(mouse_280)touch_executor(mouse_280)
##############################
From agent.py
walk_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_194. Robot is on chair_271. Robot is no longer inside bedroom_162.Robot is no longer close desk_193.Robot is no longer close mouse_213.Robot is no longer close mousepad_214.
##############################
From agent.py
touch_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_194. Robot is on chair_271. 
##############################
