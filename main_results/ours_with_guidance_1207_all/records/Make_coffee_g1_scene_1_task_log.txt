From agent.py
Reset goals: The sub-goals are: 
['Make a cup of coffee using the coffee maker.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2134_around_cupboard_118(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_coffee_filter_2065_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
 
def is_coffee_ready(coffee_maker: item):
    # Check if the coffee is ready in the coffee maker
    return has_water(coffee_maker) and is_on(coffee_maker)

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        if not has_water(coffee_maker):
            achieve_once has_water(coffee_maker)
            # Ensure the coffee maker is filled with water

        achieve_once is_on(coffee_maker)
        # Turn on the coffee maker

behavior pour_coffee_into_cup(coffee_maker: item, cup: item):
    body:
        achieve inside(coffee_maker, cup)
        # Pour the coffee from the coffee maker into the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup)
        # Select a cup instance

        if not is_coffee_ready(coffee_maker):
            make_coffee(coffee_maker, cup)
            # Execute the behavior to make coffee with the coffee maker

        pour_coffee_into_cup(coffee_maker, cup)
        # Pour the made coffee into the cup

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2049_around_kitchen_counter_123(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_coffee_filter_2053_around_cupboard_118(coffee_filter:item):
    goal: not unknown(coffee_filter)
    body:
        assert is_coffee_filter(coffee_filter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(coffee_filter,cupboard_instance)
        else:
            exp(coffee_filter,cupboard_instance)
    eff:
        unknown[coffee_filter]=False
        close[coffee_filter,cupboard_instance]=True
        close[cupboard_instance,coffee_filter]=True
    

#exp_behavior_end

#goal_representation
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

        achieve has_water(cup)
        # Ensure the cup is filled with coffee once brewing is complete

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)
        # Execute the behavior to make coffee using the coffee maker and fill the cup
#goal_representation_end

##############################
From agent.py->reset_goal
behavior make_coffee_with_coffee_maker(coffee_maker:item, cup:item):
    body:
        achieve plugged(coffee_maker)
        # Ensure the coffee maker is plugged in

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water

        achieve is_on(coffee_maker)
        # Turn on the coffee maker to start brewing

        achieve has_water(cup)
        # Ensure the cup is filled with coffee once brewing is complete

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker

        bind cup: item where:
            is_cup(cup)
        # Select an instance of a cup

        make_coffee_with_coffee_maker(coffee_maker, cup)
        # Execute the behavior to make coffee using the coffee maker and fill the cup
##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchon_executor(coffe_maker_130)walk_executor(kitchen_counter_123)exp(cup_2132, kitchen_counter_123)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(coffe_maker_130)
Find coffee_filter_2065. Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close coffee_filter_2065.Robot is no longer close kitchen_counter_122.Robot is no longer close coffe_maker_130.
##############################
From agent.py
exp(cup_2132, kitchen_counter_123)
Fail to find cup_2132 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cup_2132, cupboard_118)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(cup_2132, cupboard_118)
Fail to find cup_2132 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cup_2132, cupboard_117)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(cup_2132, cupboard_117)
Fail to find cup_2132 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(oven_127)open_executor(oven_127)exp(cup_2132, oven_127)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(oven_127)
Find food_cheese_2072. Find oil_2013. Find food_carrot_2015. Find food_food_2064. Robot is inside dining_room_41. Robot is close tray_128. Robot is close food_cheese_2072. Robot is close oven_127. Robot is close oil_2013. Robot is close food_carrot_2015. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
open_executor(oven_127)
Robot is inside dining_room_41. Robot is close tray_128. Robot is close food_cheese_2072. Robot is close oven_127. Robot is close oil_2013. Robot is close food_carrot_2015. 
##############################
From agent.py
exp(cup_2132, oven_127)
Fail to find cup_2132 around oven_127. 
##############################
From agent.py-> find a plan in act()
walk_executor(dishwasher_129)open_executor(dishwasher_129)exp(cup_2132, dishwasher_129)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(dishwasher_129)
Find detergent_2011. Find measuring_cup_2012. Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. Robot is no longer close tray_128.Robot is no longer close food_cheese_2072.Robot is no longer close oven_127.Robot is no longer close oil_2013.Robot is no longer close food_carrot_2015.
##############################
From agent.py
open_executor(dishwasher_129)
Robot is inside dining_room_41. Robot is close dishwasher_129. Robot is close detergent_2011. Robot is close measuring_cup_2012. 
##############################
From agent.py
exp(cup_2132, dishwasher_129)
Fail to find cup_2132 around dishwasher_129. 
##############################
From agent.py-> find a plan in act()
walk_executor(sink_120)exp(cup_2132, sink_120)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(sink_120)
Find basket_for_clothes_2078. Find soap_2010. Find pot_2138. Find ice_2024. Find soap_2126. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close sink_120. Robot is close kitchen_counter_119. Robot is no longer close dishwasher_129.Robot is no longer close detergent_2011.Robot is no longer close measuring_cup_2012.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find cup_2132 ?
Answer: Locate dining_room_41. Inside dining_room_41, find table_114. Cup_2132 is on table_114. Look closely around the area on the table to identify and retrieve cup_2132.
Re-decompose: None

##############################
From agent.py
Human Instruction: Locate dining_room_41. Inside dining_room_41, find table_114. Cup_2132 is on table_114. Look closely around the area on the table to identify and retrieve cup_2132.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_123.
Action 4: look for cup_2132 around kitchen_counter_123.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for cup_2132 around cupboard_118.
Action 8: Walk to cupboard_117.
Action 9: look for cup_2132 around cupboard_117.
Action 10: Walk to oven_127.
Action 11: Open oven_127.
Action 12: look for cup_2132 around oven_127.
Action 13: Walk to dishwasher_129.
Action 14: Open dishwasher_129.
Action 15: look for cup_2132 around dishwasher_129.
Action 16: Walk to sink_120.

##############################
From agent.py
exp(cup_2132, sink_120)
Fail to find cup_2132 around sink_120. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_114)exp(cup_2132, table_114)walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(table_114)
Find mat_102. Find dry_pasta_2114. Find food_food_2021. Find drawing_110. Find drawing_111. Find knife_2122. Find cup_2133. Find table_cloth_2005. Find food_bread_2084. Find pillow_104. Find cup_2049. Find box_2038. Find clothes_hat_2117. Find clothes_gloves_2118. Find milk_2115. Find pillow_103. Find pillow_105. Find pillow_106. Find lighter_2004. Find lighter_2039. Find cup_2134. Find check_2058. Find cup_2132. Robot is inside dining_room_41. Robot is close table_114. Robot is close mat_102. Robot is close floor_47. Robot is no longer close sink_120.Robot is no longer close kitchen_counter_119.
##############################
From agent.py
exp(cup_2132, table_114)
Find cup_2132. 
##############################
From agent.py-> find a plan in act()
walk_executor(cup_2132)grab_executor(cup_2132)walk_executor(faucet_20)switchon_executor(faucet_20)switchoff_executor(faucet_20)
##############################
From agent.py
walk_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Robot is no longer close mat_102.Robot is no longer close floor_47.
##############################
From agent.py
grab_executor(cup_2132)
Robot is inside dining_room_41. Robot is close table_114. Robot is close cup_2132. Grabbing cup_2132 by right hand. 
##############################
From agent.py
walk_executor(faucet_20)
Find drawing_33. Find mat_32. Find phone_2029. Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. Robot is no longer inside dining_room_41.Robot is no longer close table_114.
##############################
From agent.py
switchon_executor(faucet_20)
Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
switchoff_executor(faucet_20)
Robot is inside bathroom_1. Robot is close cup_2132. Robot is close bathroom_counter_18. Robot is close faucet_20. 
##############################
From agent.py
Human Instruction: You need to fill the coffee maker with water, make sure it is on, and ensure that the coffee cup is filled with coffee using the coffee maker.

The actions you have taken:
Action 1: Walk to coffe_maker_130.
Action 2: Switch on coffe_maker_130.
Action 3: Walk to kitchen_counter_123.
Action 4: look for cup_2132 around kitchen_counter_123.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for cup_2132 around cupboard_118.
Action 8: Walk to cupboard_117.
Action 9: look for cup_2132 around cupboard_117.
Action 10: Walk to oven_127.
Action 11: Open oven_127.
Action 12: look for cup_2132 around oven_127.
Action 13: Walk to dishwasher_129.
Action 14: Open dishwasher_129.
Action 15: look for cup_2132 around dishwasher_129.
Action 16: Walk to sink_120.
Action 17: look for cup_2132 around sink_120.
Action 18: Walk to table_114.
Action 19: look for cup_2132 around table_114.
Action 20: Walk to cup_2132.
Action 21: Grab cup_2132.
Action 22: Walk to faucet_20.
Action 23: Switch on faucet_20.
Action 24: Switch off faucet_20.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_dessert_2090_around_fridge_126(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

behavior find_food_butter_2007_around_fridge_126(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_butter,fridge_instance)
        else:
            exp(food_butter,fridge_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,fridge_instance]=True
        close[fridge_instance,food_butter]=True
    

behavior find_clothes_scarf_2120_around_dresser_274(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind dresser_instance:item where:
            is_dresser(dresser_instance) and id[dresser_instance]==274
        achieve close_char(char,dresser_instance)
        if can_open(dresser_instance):
            achieve_once open(dresser_instance)
            exp(clothes_scarf,dresser_instance)
        else:
            exp(clothes_scarf,dresser_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,dresser_instance]=True
        close[dresser_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_coffee_maker_with_water(coffee_maker: item, sink: item):
    body:
        achieve_once inside(coffee_maker, sink)
        # Place the coffee maker inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the coffee maker with water

        achieve has_water(coffee_maker)
        # Ensure the coffee maker is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the coffee maker

behavior make_coffee(coffee_maker: item, cup: item):
    body:
        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

        achieve has_water(coffee_maker)
        # The coffee maker should have water

        achieve inside(cup, coffee_maker)
        # Ensure the coffee is brewed and fills the cup

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind cup: item where:
            is_cup(cup)
        # Select the cup instance

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink
        
        fill_coffee_maker_with_water(coffee_maker, sink)
        # Execute the behavior to fill the coffee maker with water

        make_coffee(coffee_maker, cup)
        # Execute the behavior to make a cup of coffee using the coffee maker

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
  
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior fill_water_tank(coffee_maker:item, sink:item):
    body:
        achieve_once inside(coffee_maker, sink)
        # Ensure the coffee maker is inside the sink to fill its water tank

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the coffee makers water tank

        achieve has_water(coffee_maker)
        # Ensure the coffee makers water tank is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the water tank

behavior fill_cup_with_coffee(coffee_maker:item, cup:item):
    body:
        achieve on(cup, coffee_maker)
        # Place the cup under the coffee makers dispenser

        achieve has_water(coffee_maker)
        # Ensure the coffee maker has water to brew coffee

        achieve has_a_free_hand(char)
        # Ensure the character has a free hand

behavior __goal__():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind sink: item where:
            is_sink(sink) and id[sink]==19
        # Select the sink instance

        fill_water_tank(coffee_maker, sink)
        # Execute the behavior to fill the coffee makers water tank

        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with the specific ID

        fill_cup_with_coffee(coffee_maker, cup)
        # Execute the behavior to fill the cup with coffee using the coffee maker

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "make a cup of coffee using the coffee maker." ?
Answer: Put a cup inside the coffee maker and turn it on.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2136_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
def has_coffee_in_cup(cup:item):
    # Check if there is coffee in a specified cup
    symbol has_coffee=exists o: item : is_coffee_filter(o) and inside(o, cup)
    return has_coffee

behavior fill_coffee_maker_with_water(faucet:item, coffe_maker:item):
    body:
        achieve_once is_on(faucet)
        # Make sure the faucet is turned on
        
        achieve has_water(coffe_maker)
        # Fill the coffee maker with water
        
        achieve_once is_off(faucet)
        # Turn off the faucet after filling

behavior make_coffee(coffe_maker:item, cup:item):
    body:
        achieve is_on(coffe_maker)
        # Ensure the coffee maker is switched on

        achieve inside(cup, coffe_maker)
        # Place the cup inside the coffee maker to fill it with coffee

        achieve has_coffee_in_cup(cup)
        # Check that the cup is filled with coffee from the coffee maker

behavior ensure_filled_coffee_maker_and_cup_craft(faucet:item, coffe_maker:item, cup:item):
    body:
        fill_coffee_maker_with_water(faucet, coffe_maker)
        make_coffee(coffe_maker, cup)

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup]==2132
        # Select the cup with the ID 2132
        
        bind coffe_maker: item where:
            is_coffe_maker(coffe_maker) and id[coffe_maker] == 130
        # Select the coffee maker with the ID 130

        bind faucet: item where:
            is_faucet(faucet)
        # Select an instance of a faucet to fill the coffee maker

        ensure_filled_coffee_maker_and_cup_craft(faucet, coffe_maker, cup)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_book_2137_around_bookshelf_124(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==124
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

#exp_behavior_end

#goal_representation
 
behavior make_coffee_with_coffee_maker():
    body:
        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker)
        # Select the coffee maker instance

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, coffee_maker)
        # Select the faucet close to the coffee maker (for water filling)

        bind coffee_cup: item where:
            is_cup(coffee_cup) and id[coffee_cup] == 2132
        # Select the coffee cup with ID 2132
        
        achieve_once inhand(coffee_cup)
        # Temporarily hold the coffee cup

        achieve is_on(coffee_maker)
        # Ensure the coffee maker is turned on

        achieve inside(coffee_cup, coffee_maker)
        # Place the cup inside the coffee maker

behavior __goal__():
    body:
        make_coffee_with_coffee_maker()
        # Execute the behavior to make a cup of coffee using the coffee maker

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put a cup inside the coffee maker and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_tea_bag_2023_around_fridge_126(tea_bag:item):
    goal: not unknown(tea_bag)
    body:
        assert is_tea_bag(tea_bag)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(tea_bag,fridge_instance)
        else:
            exp(tea_bag,fridge_instance)
    eff:
        unknown[tea_bag]=False
        close[tea_bag,fridge_instance]=True
        close[fridge_instance,tea_bag]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior put_cup_in_coffee_maker(cup: item, coffee_maker: item):
    body:
        achieve inside(cup, coffee_maker)
        # Ensure the cup is placed inside the coffee maker

behavior turn_on_coffee_maker(coffee_maker: item):
    body:
        achieve is_on(coffee_maker)
        # Turn on the coffee maker

behavior __goal__():
    body:
        bind cup: item where:
            is_cup(cup) and id[cup] == 2132
        # Select the cup with ID 2132

        bind coffee_maker: item where:
            is_coffe_maker(coffee_maker) and id[coffee_maker] == 130
        # Select the coffee maker with ID 130

        put_cup_in_coffee_maker(cup, coffee_maker)
        # Place the cup inside the coffee maker

        turn_on_coffee_maker(coffee_maker)
        # Turn on the coffee maker

##############################
From agent.py-> find a plan in act()
walk_executor(coffe_maker_130)switchoff_executor(coffe_maker_130)open_executor(coffe_maker_130)putin_executor(cup_2132, coffe_maker_130)close_executor(coffe_maker_130)switchon_executor(coffe_maker_130)
##############################
From agent.py
walk_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_18.Robot is no longer close faucet_20.
##############################
From agent.py
switchoff_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
open_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
putin_executor(cup_2132, coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. cup_2132 released by right hand. 
##############################
From agent.py
close_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
From agent.py
switchon_executor(coffe_maker_130)
Robot is inside dining_room_41. Robot is close cup_2132. Robot is close coffee_filter_2065. Robot is close coffe_maker_130. Robot is close kitchen_counter_122. 
##############################
