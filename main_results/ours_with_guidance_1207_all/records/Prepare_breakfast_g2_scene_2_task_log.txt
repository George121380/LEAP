From agent.py
Reset goals: The sub-goals are: 
['Scramble the egg in the frying pan.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_kitchen_counter_129(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(fryingpan,kitchen_counter_instance)
        else:
            exp(fryingpan,kitchen_counter_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,kitchen_counter_instance]=True
        close[kitchen_counter_instance,fryingpan]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_sauce_2101_around_fridge_140(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is scrambled inside the frying pan
        
        achieve is_on(stove)
        # Ensure the stove is turned on to cook the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        scramble_egg_in_fryingpan(egg, fryingpan, stove)

#goal_representation_end

##############################
From agent.py->reset_goal
 
behavior scramble_egg_in_fryingpan(egg:item, fryingpan:item, stove:item):
    body:
        achieve inside(egg, fryingpan)
        # Ensure the egg is scrambled inside the frying pan
        
        achieve is_on(stove)
        # Ensure the stove is turned on to cook the egg

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of an egg

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
        # Select the frying pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        scramble_egg_in_fryingpan(egg, fryingpan, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(fryingpan_2107, kitchen_counter_129)walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_54. Find pot_2093. Find tray_142. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(fryingpan_2107, kitchen_counter_129)
Find fryingpan_2107. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(food_egg_2053, fridge_140)
Find food_egg_2053. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_egg_2053)walk_executor(fryingpan_2107)putin_executor(food_egg_2053, fryingpan_2107)walk_executor(stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close milk_2074.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
putin_executor(food_egg_2053, fryingpan_2107)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close fryingpan_2107.Robot is no longer close food_egg_2053.
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: You need to scramble the egg that is currently in the frying pan. Consider actions such as stirring or mixing it in the frying pan while it heats on the stove.

The actions you have taken:
Action 1: Walk to kitchen_counter_129.
Action 2: look for fryingpan_2107 around kitchen_counter_129.
Action 3: Walk to fridge_140.
Action 4: Switch off fridge_140.
Action 5: Open fridge_140.
Action 6: look for food_egg_2053 around fridge_140.
Action 7: Grab food_egg_2053.
Action 8: Walk to fryingpan_2107.
Action 9: Put food_egg_2053 into fryingpan_2107.
Action 10: Walk to stove_2090.
Action 11: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

behavior find_oil_2102_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is placed in the frying pan
        
        scrambler = exists spatula: item : grabbable(spatula) and close(spatula, fryingpan)
        # Check if there is a tool nearby to scramble the egg

behavior ensure_egg_scrambled(egg:item, fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Scrambling the egg involves stirring it within the pan, ensuring that its being cooked

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan_2107)
        # Select the egg that has been placed into the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2090)
        # Select the frying pan on the stove

        scramble_egg_in_pan(egg, fryingpan)
        ensure_egg_scrambled(egg, fryingpan)  
        # Execute both behaviors to scramble the egg in the frying pan
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Invalid assignment target: it is not a local variable and not a feature with 0 arguments: scrambler
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_oil_2102_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_fork_2103_around_cupboard_131(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fork,cupboard_instance)
        else:
            exp(fork,cupboard_instance)
    eff:
        unknown[fork]=False
        close[fork,cupboard_instance]=True
        close[cupboard_instance,fork]=True
    

#goal_representation
behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is placed in the frying pan

        if exists spatula: item : grabbable(spatula) and close(spatula, fryingpan):
            # Check if there is a tool nearby to scramble the egg
            bind spatula: item where:
                grabbable(spatula) and close(spatula, fryingpan)
            achieve_once inhand(spatula)

behavior ensure_egg_scrambled(egg:item, fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Scrambling the egg involves stirring it within the pan, ensuring that its being cooked

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan_2107)
        # Select the egg that has been placed into the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2090)
        # Select the frying pan on the stove

        scramble_egg_in_pan(egg, fryingpan)
        ensure_egg_scrambled(egg, fryingpan)  
        # Execute both behaviors to scramble the egg in the frying pan
#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2107; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_oil_2102_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_dough_2021_around_cupboard_131(dough:item):
    goal: not unknown(dough)
    body:
        assert is_dough(dough)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dough,cupboard_instance)
        else:
            exp(dough,cupboard_instance)
    eff:
        unknown[dough]=False
        close[dough,cupboard_instance]=True
        close[cupboard_instance,dough]=True
    

#goal_representation

behavior scramble_egg_in_pan(egg:item, fryingpan:item):
    body:
        achieve on(egg, fryingpan)
        # Ensure the egg is placed in the frying pan

        if exists spatula: item : grabbable(spatula) and close(spatula, fryingpan):
            # Check if there is a tool nearby to scramble the egg
            bind spatula: item where:
                grabbable(spatula) and close(spatula, fryingpan)
            achieve_once inhand(spatula)

behavior ensure_egg_scrambled(egg:item, fryingpan:item):
    body:
        achieve dirty(fryingpan)
        # Scrambling the egg involves stirring it within the pan, ensuring that its being cooked

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan_2107)
        # Select the egg that has been placed into the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and on(fryingpan, stove_2090)
        # Select the frying pan on the stove

        achieve inside(egg, fryingpan)
        
        scramble_egg_in_pan(egg, fryingpan)
        ensure_egg_scrambled(egg, fryingpan)
        # Execute both behaviors to scramble the egg in the frying pan


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2102_around_oil_2102(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind oil_instance:item where:
            is_oil(oil_instance) and id[oil_instance]==2102
        achieve close_char(char,oil_instance)
        if can_open(oil_instance):
            achieve_once open(oil_instance)
            exp(oil,oil_instance)
        else:
            exp(oil,oil_instance)
    eff:
        unknown[oil]=False
        close[oil,oil_instance]=True
        close[oil_instance,oil]=True
    

#exp_behavior_end

#goal_representation

def stir_egg(egg: item, fryingpan: item):
    # Define behavior to scramble the egg in the frying pan
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled (stirred or cut while heating)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan_2107)
        # Select the egg that is inside the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan instance with the egg

        stir_egg(egg, fryingpan)
        # Execute the behavior to scramble the egg in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('COLON', ':') at line 6036, column 9.
Expected one of: 
	* OR
	* MINUS
	* EQUAL
	* __ANON_5
	* __ANON_7
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* FLOORDIV
	* __ANON_2
	* GREATER_EQ
	* LESS_EQ
	* __ANON_6
	* AMPERSAND
	* __ANON_4
	* COMMA
	* SEMICOLON
	* LESSTHAN
	* MORETHAN
	* NOT_EQ
	* RSHIFT
	* AND
	* __ANON_3
	* __ANON_0
	* VBAR
	* __ANON_1
	* _NEWLINE
	* AT
	* PERCENT
	* STAR
	* PLUS
	* __ANON_8
	* IF
	* LSHIFT
	* SLASH

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior stir_egg(egg: item, fryingpan: item):
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled (stirred or cut while heating)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan_2107)
        # Select the egg that is inside the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan instance with the egg

        stir_egg(egg, fryingpan)
        # Execute the behavior to scramble the egg in the frying pan

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: fryingpan_2107; available variables: [Variable<egg: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation

behavior stir_egg(egg: item, fryingpan: item):
    body:
        achieve cut(egg)
        # Ensure the egg is scrambled (stirred or cut while heating)

behavior __goal__():
    body:
        bind egg: item where:
            is_food_egg(egg) and inside(egg, fryingpan)
        # Select the egg that is inside the frying pan

        bind fryingpan: item where:
            is_fryingpan(fryingpan) and id[fryingpan] == 2107
        # Select the frying pan instance with the egg

        stir_egg(egg, fryingpan)
        # Execute the behavior to scramble the egg in the frying pan

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "scramble the egg in the frying pan." ?
Answer: Put the pan on the stove, turn on the stove, put oil in the pan, and put the egg in the pan.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['Put the pan on the stove, turn on the stove, put oil in the pan, and put the egg in the pan to scramble it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_oil_2005_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)

behavior put_egg_in_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind oil: item where:
            is_oil(oil)
        # Select the oil instance
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_pan_on_stove(pan, stove)
        # Place the pan on the stove

        turn_on_stove(stove)
        # Turn on the stove

        put_oil_in_pan(oil, pan)
        # Add oil to the pan

        put_egg_in_pan(egg, pan)
        # Add the egg to the pan

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_pan_on_stove(pan:item, stove:item):
    body:
        achieve on(pan, stove)

behavior turn_on_stove(stove:item):
    body:
        achieve is_on(stove)

behavior put_oil_in_pan(oil:item, pan:item):
    body:
        achieve inside(oil, pan)

behavior put_egg_in_pan(egg:item, pan:item):
    body:
        achieve inside(egg, pan)

behavior __goal__():
    body:
        bind pan: item where:
            is_fryingpan(pan)
        # Select the pan instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        bind oil: item where:
            is_oil(oil)
        # Select the oil instance
        
        bind egg: item where:
            is_food_egg(egg)
        # Select the egg instance

        put_pan_on_stove(pan, stove)
        # Place the pan on the stove

        turn_on_stove(stove)
        # Turn on the stove

        put_oil_in_pan(oil, pan)
        # Add oil to the pan

        put_egg_in_pan(egg, pan)
        # Add the egg to the pan

##############################
From agent.py-> find a plan in act()
walk_executor(fryingpan_2107)grab_executor(fryingpan_2107)walk_executor(stove_2090)put_executor(fryingpan_2107, stove_2090)walk_executor(oil_2102)grab_executor(oil_2102)walk_executor(fryingpan_2107)putin_executor(oil_2102, fryingpan_2107)
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is no longer close stove_2090.
##############################
From agent.py
grab_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Grabbing fryingpan_2107 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. 
##############################
From agent.py
put_executor(fryingpan_2107, stove_2090)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close fryingpan_2107. Robot is close stove_2090. fryingpan_2107 released by right hand. 
##############################
From agent.py
walk_executor(oil_2102)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close oil_2102. Robot is no longer close stove_2090.Robot is no longer close fryingpan_2107.
##############################
From agent.py
grab_executor(oil_2102)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close oil_2102. Grabbing oil_2102 by right hand. 
##############################
From agent.py
walk_executor(fryingpan_2107)
Robot is inside dining_room_1. Robot is close oil_2102. Robot is close stove_2090. Robot is close fryingpan_2107. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
putin_executor(oil_2102, fryingpan_2107)
Robot is inside dining_room_1. Robot is close oil_2102. Robot is close stove_2090. Robot is close fryingpan_2107. oil_2102 released by right hand. 
##############################
