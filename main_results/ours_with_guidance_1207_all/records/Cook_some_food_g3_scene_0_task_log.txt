From agent.py
Reset goals: The sub-goals are: 
['1. Wash all the vegetables.', '2. Put the vegetables in a pot and boil them on the stove.', '3. Cool the boiled vegetables in a bowl.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_potato_2035_around_fridge_289(food_potato:item):
    goal: not unknown(food_potato)
    body:
        assert is_food_potato(food_potato)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_potato,fridge_instance)
        else:
            exp(food_potato,fridge_instance)
    eff:
        unknown[food_potato]=False
        close[food_potato,fridge_instance]=True
        close[fridge_instance,food_potato]=True
    

behavior find_food_food_2022_around_fridge_289(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_vegetable_2041_around_kitchen_counter_230(food_vegetable:item):
    goal: not unknown(food_vegetable)
    body:
        assert is_food_vegetable(food_vegetable)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_vegetable,kitchen_counter_instance)
        else:
            exp(food_vegetable,kitchen_counter_instance)
    eff:
        unknown[food_vegetable]=False
        close[food_vegetable,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_vegetable]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

#goal_representation_end

##############################
From agent.py->reset_goal
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior wash_vegetable(vegetable:item, sink:item):
    body:
        achieve_once inside(vegetable, sink)
        # Ensure the vegetable is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to wash the vegetable

        wash(vegetable)
        # Wash the vegetable

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after washing

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select a vegetable instance

        bind sink: item where:
            is_sink(sink)
        # Select a sink instance

        wash_vegetable(vegetable, sink)
        # Execute the behavior to wash the vegetable

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_vegetable_2041, kitchen_counter_230)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(sink_42)putin_executor(food_vegetable_2041, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_vegetable_2041)wash_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(food_vegetable_2041, kitchen_counter_230)
Fail to find food_vegetable_2041 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_vegetable_2041, fridge_289)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(sink_42)putin_executor(food_vegetable_2041, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_vegetable_2041)wash_executor(food_vegetable_2041)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_vegetable_2041, fridge_289)
Find food_vegetable_2041. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_vegetable_2041)walk_executor(sink_42)putin_executor(food_vegetable_2041, sink_42)walk_executor(faucet_43)switchon_executor(faucet_43)walk_executor(food_vegetable_2041)wash_executor(food_vegetable_2041)
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Find basket_for_clothes_2006. Find towel_rack_34. Find detergent_2084. Find soap_2053. Find cleaning_solution_2073. Find towel_rack_32. Find towel_rack_31. Robot is inside bathroom_1. Robot is close food_vegetable_2041. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer inside dining_room_201.Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_bread_2012.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
putin_executor(food_vegetable_2041, sink_42)
Find drawing_176. Robot is inside bathroom_1. Robot is close food_vegetable_2041. Robot is close bathroom_counter_41. Robot is close sink_42. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. Robot is no longer close food_vegetable_2041.Robot is no longer close sink_42.
##############################
From agent.py
switchon_executor(faucet_43)
Robot is inside bathroom_1. Robot is close bathroom_counter_41. Robot is close faucet_43. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. Robot is no longer inside bathroom_1.Robot is no longer close bathroom_counter_41.Robot is no longer close faucet_43.
##############################
From agent.py
wash_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_spectacles_2082_around_pot_2069(spectacles:item):
    goal: not unknown(spectacles)
    body:
        assert is_spectacles(spectacles)
        bind pot_instance:item where:
            is_pot(pot_instance) and id[pot_instance]==2069
        achieve close_char(char,pot_instance)
        if can_open(pot_instance):
            achieve_once open(pot_instance)
            exp(spectacles,pot_instance)
        else:
            exp(spectacles,pot_instance)
    eff:
        unknown[spectacles]=False
        close[spectacles,pot_instance]=True
        close[pot_instance,spectacles]=True
    

#exp_behavior_end

#goal_representation
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior put_vegetables_in_pot(vegetable:item, pot:item):
    body:
        achieve inside(vegetable, pot)
        # Ensure all the vegetables are placed inside the pot

behavior boil_vegetables_on_stove(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Make sure the pot is on the stove
        achieve is_on(stove)
        # Turn on the stove to boil the vegetables

behavior __goal__():
    body:
        bind vegetable: item where:
            is_food_vegetable(vegetable)
        # Select the vegetables

        bind pot: item where:
            is_pot(pot)
        # Select the pot instance

        bind stove: item where:
            is_stove(stove)
        # Select the stove instance

        put_vegetables_in_pot(vegetable, pot)
        boil_vegetables_on_stove(pot, stove)

##############################
From agent.py-> find a plan in act()
walk_executor(pot_2069)open_executor(pot_2069)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(pot_2069)putin_executor(food_vegetable_2041, pot_2069)grab_executor(pot_2069)walk_executor(stove_2065)put_executor(pot_2069, stove_2065)switchon_executor(stove_2065)
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer close food_vegetable_2041.Robot is no longer close sink_42.
##############################
From agent.py
open_executor(pot_2069)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. Robot is no longer close pot_2069.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(pot_2069)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is no longer close sink_42.
##############################
From agent.py
putin_executor(food_vegetable_2041, pot_2069)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close pot_2069. Robot is close kitchen_counter_230. food_vegetable_2041 released by right hand. 
##############################
From agent.py
grab_executor(pot_2069)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close pot_2069. Robot is close kitchen_counter_230. Grabbing pot_2069 by right hand. 
##############################
From agent.py
walk_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is close stove_2065. Robot is no longer close food_vegetable_2041.
##############################
From agent.py
put_executor(pot_2069, stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is close stove_2065. pot_2069 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is close stove_2065. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
def in_bowl(food:item, container:item):
    # Function to check if the food is in the specified container
    symbol is_in_bowl=exists o: item : is_food(o) and inside(o, container)
    return is_in_bowl

behavior cool_the_food(food:item, sink:item, bowl:item):
    body:
        bind pot: item where:
            is_pot(pot) and inside(food, pot)
        # Identify the pot with the food

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Identify the stove that the pot with the food is on

        achieve is_off(stove)
        # Turn off the stove before moving the food

        achieve_once inside(food, sink)
        # Ensure the food is placed briefly in the sink to cool

        achieve once inside(food, bowl)
        # Transfer the food into the bowl for further cooling

behavior __goal__():
    body:
        bind food: item where:
            is_food_vegetable(food)
        # Select the food instance, which is vegetables

        bind sink: item where:
            is_sink(sink)
        # Identify a sink to temporarily cool the food

        bind bowl: item where:
            is_bowl(bowl) and not in_bowl(food, bowl)
        # Select a bowl that is currently empty

        cool_the_food(food, sink, bowl)
        # Execute the behavior to move and cool the food in a bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'inside') at line 6077, column 22.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior cool_the_food(food:item, sink:item, bowl:item):
    body:
        bind pot: item where:
            is_pot(pot) and inside(food, pot)
        # Identify the pot with the food

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Identify the stove that the pot with the food is on

        achieve is_off(stove)
        # Turn off the stove before moving the food

        achieve_once inside(food, sink)
        # Ensure the food is placed briefly in the sink to cool

        achieve_once inside(food, bowl)
        # Transfer the food into the bowl for further cooling

behavior __goal__():
    body:
        bind food: item where:
            is_food_vegetable(food)
        # Select the food instance, which is vegetables

        bind sink: item where:
            is_sink(sink)
        # Identify a sink to temporarily cool the food

        bind bowl: item where:
            is_bowl(bowl) and not in_bowl(food, bowl)
        # Select a bowl that is currently empty

        cool_the_food(food, sink, bowl)
        # Execute the behavior to move and cool the food in a bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function in_bowl not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_book_2066_around_bookshelf_101(book:item):
    goal: not unknown(book)
    body:
        assert is_book(book)
        bind bookshelf_instance:item where:
            is_bookshelf(bookshelf_instance) and id[bookshelf_instance]==101
        achieve close_char(char,bookshelf_instance)
        if can_open(bookshelf_instance):
            achieve_once open(bookshelf_instance)
            exp(book,bookshelf_instance)
        else:
            exp(book,bookshelf_instance)
    eff:
        unknown[book]=False
        close[book,bookshelf_instance]=True
        close[bookshelf_instance,book]=True
    

behavior find_bowl_2071_around_cupboard_229(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==229
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

#goal_representation
 
behavior cool_the_food(food:item, sink:item, bowl:item):
    body:
        bind pot: item where:
            is_pot(pot) and inside(food, pot)
        # Identify the pot with the food

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Identify the stove that the pot with the food is on

        achieve is_off(stove)
        # Turn off the stove before moving the food

        achieve_once inside(food, sink)
        # Ensure the food is placed briefly in the sink to cool

        achieve_once inside(food, bowl)
        # Transfer the food into the bowl for further cooling

behavior __goal__():
    body:
        bind food: item where:
            is_food_vegetable(food)
        # Select the food instance, which is vegetables

        bind sink: item where:
            is_sink(sink)
        # Identify a sink to temporarily cool the food

        bind bowl: item where:
            is_bowl(bowl) and not inside(food, bowl)
        # Select a bowl that is currently empty

        cool_the_food(food, sink, bowl)
        # Execute the behavior to move and cool the food in a bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_the_food(food:item, sink:item, bowl:item):
    body:
        bind pot: item where:
            is_pot(pot) and inside(food, pot)
        # Identify the pot with the food

        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Identify the stove that the pot with the food is on

        achieve is_off(stove)
        # Turn off the stove before moving the food

        achieve_once inside(food, sink)
        # Ensure the food is placed briefly in the sink to cool

        achieve_once inside(food, bowl)
        # Transfer the food into the bowl for further cooling

behavior __goal__():
    body:
        bind food: item where:
            is_food_vegetable(food)
        # Select the food instance, which is vegetables

        bind sink: item where:
            is_sink(sink)
        # Identify a sink to temporarily cool the food

        bind bowl: item where:
            is_bowl(bowl) and not inside(food, bowl)
        # Select a bowl that is currently empty

        cool_the_food(food, sink, bowl)
        # Execute the behavior to move and cool the food in a bowl

##############################
From agent.py-> find a plan in act()
switchoff_executor(stove_2065)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(sink_42)putin_executor(food_vegetable_2041, sink_42)walk_executor(cupboard_229)open_executor(cupboard_229)exp(bowl_2071, cupboard_229)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
switchoff_executor(stove_2065)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close kitchen_counter_230. Robot is close stove_2065. 
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close food_vegetable_2041. Robot is no longer close stove_2065.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close pot_2069. Robot is close food_vegetable_2041. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(sink_42)
Robot is inside bathroom_1. Robot is close food_vegetable_2041. Robot is close bathroom_counter_41. Robot is close sink_42. Robot is no longer inside dining_room_201.Robot is no longer close pot_2069.
##############################
From agent.py
putin_executor(food_vegetable_2041, sink_42)
Robot is inside bathroom_1. Robot is close food_vegetable_2041. Robot is close bathroom_counter_41. Robot is close sink_42. food_vegetable_2041 released by right hand. 
##############################
From agent.py
walk_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. Robot is no longer inside bathroom_1.Robot is no longer close food_vegetable_2041.Robot is no longer close sink_42.Robot is no longer close bathroom_counter_41.
##############################
From agent.py
open_executor(cupboard_229)
Robot is inside dining_room_201. Robot is close wall_211. Robot is close cupboard_229. 
##############################
From agent.py
exp(bowl_2071, cupboard_229)
Fail to find bowl_2071 around cupboard_229. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve on(vegetables, bowl)
        # Ensure the boiled vegetables are placed in the bowl for cooling

behavior __goal__():
    body:
        bind vegetables: item where:
            is_food_vegetable(vegetables)
        # Select the boiled vegetables instance
        
        bind bowl: item where:
            is_bowl(bowl) and visited(bowl)
        # Select a bowl that has been visited

        cool_boiled_vegetables(vegetables, bowl)
        # Execute the behavior to transfer and cool the boiled vegetables in the bowl
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#exp_behavior_end

#goal_representation
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and inside(vegetables, sink_42)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: sink_42; available variables: [Variable<vegetables: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_bowl_2072_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

behavior find_bowl_2071_around_wallshelf_234(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind wallshelf_instance:item where:
            is_wallshelf(wallshelf_instance) and id[wallshelf_instance]==234
        achieve close_char(char,wallshelf_instance)
        if can_open(wallshelf_instance):
            achieve_once open(wallshelf_instance)
            exp(bowl,wallshelf_instance)
        else:
            exp(bowl,wallshelf_instance)
    eff:
        unknown[bowl]=False
        close[bowl,wallshelf_instance]=True
        close[wallshelf_instance,bowl]=True
    

#goal_representation
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior cool_boiled_vegetables(vegetables:item, bowl:item):
    body:
        achieve_once inside(vegetables, bowl)
        # Ensure that the boiled vegetables are inside the bowl for cooling

behavior __goal__():
    body:
        bind bowl: item where:
            is_bowl(bowl)
        # Select an instance of a bowl

        bind vegetables: item where:
            is_food_vegetable(vegetables) and not visited(vegetables)
        # Ensure the vegetables that were boiled are available for cooling

        cool_boiled_vegetables(vegetables, bowl)
        # Execute behavior to cool the boiled vegetables in the bowl

##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_234)exp(bowl_2071, wallshelf_234)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(wallshelf_234)
Robot is inside dining_room_201. Robot is close wallshelf_234. Robot is close wall_212. Robot is no longer close wall_211.Robot is no longer close cupboard_229.
##############################
From agent.py
exp(bowl_2071, wallshelf_234)
Fail to find bowl_2071 around wallshelf_234. 
##############################
From agent.py-> find a plan in act()
walk_executor(wallshelf_235)exp(bowl_2071, wallshelf_235)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(wallshelf_235)
Robot is inside dining_room_201. Robot is close wallshelf_235. Robot is no longer close wallshelf_234.Robot is no longer close wall_212.
##############################
From agent.py
exp(bowl_2071, wallshelf_235)
Fail to find bowl_2071 around wallshelf_235. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_394)exp(bowl_2071, closetdrawer_394)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(closetdrawer_394)
Find hanger_361. Find hanger_372. Find hanger_363. Find hanger_374. Find hanger_375. Find hanger_367. Find hanger_359. Find hanger_369. Find hanger_365. Find hanger_376. Robot is inside home_office_319. Robot is close closetdrawer_394. Robot is close dresser_358. Robot is no longer inside dining_room_201.Robot is no longer close wallshelf_235.
##############################
From agent.py
exp(bowl_2071, closetdrawer_394)
Fail to find bowl_2071 around closetdrawer_394. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_377)exp(bowl_2071, closetdrawer_377)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(closetdrawer_377)
Robot is inside home_office_319. Robot is close dresser_358. Robot is close closetdrawer_384. Robot is close closetdrawer_377. Robot is no longer close closetdrawer_394.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find bowl_2071 ?
Answer: The target item, bowl_2071, is located inside dining_room_201. You will find it resting on table_226, which is situated within the same room. Please proceed to dining_room_201 and locate table_226, and you will see bowl_2071 positioned on it.
Re-decompose: None

##############################
From agent.py
Human Instruction: The target item, bowl_2071, is located inside dining_room_201. You will find it resting on table_226, which is situated within the same room. Please proceed to dining_room_201 and locate table_226, and you will see bowl_2071 positioned on it.

The actions you have taken:
Action 1: Walk to kitchen_counter_230.
Action 2: look for food_vegetable_2041 around kitchen_counter_230.
Action 3: Walk to fridge_289.
Action 4: Switch off fridge_289.
Action 5: Open fridge_289.
Action 6: look for food_vegetable_2041 around fridge_289.
Action 7: Grab food_vegetable_2041.
Action 8: Walk to sink_42.
Action 9: Put food_vegetable_2041 into sink_42.
Action 10: Walk to faucet_43.
Action 11: Switch on faucet_43.
Action 12: Walk to food_vegetable_2041.
Action 13: Wash food_vegetable_2041.
Action 14: Walk to pot_2069.
Action 15: Open pot_2069.
Action 16: Walk to food_vegetable_2041.
Action 17: Grab food_vegetable_2041.
Action 18: Walk to pot_2069.
Action 19: Put food_vegetable_2041 into pot_2069.
Action 20: Grab pot_2069.
Action 21: Walk to stove_2065.
Action 22: Put pot_2069 on stove_2065.
Action 23: Switch on stove_2065.
Action 24: Switch off stove_2065.
Action 25: Walk to food_vegetable_2041.
Action 26: Grab food_vegetable_2041.
Action 27: Walk to sink_42.
Action 28: Put food_vegetable_2041 into sink_42.
Action 29: Walk to cupboard_229.
Action 30: Open cupboard_229.
Action 31: look for bowl_2071 around cupboard_229.
Action 32: Walk to wallshelf_234.
Action 33: look for bowl_2071 around wallshelf_234.
Action 34: Walk to wallshelf_235.
Action 35: look for bowl_2071 around wallshelf_235.
Action 36: Walk to closetdrawer_394.
Action 37: look for bowl_2071 around closetdrawer_394.
Action 38: Walk to closetdrawer_377.

##############################
From agent.py
exp(bowl_2071, closetdrawer_377)
Fail to find bowl_2071 around closetdrawer_377. 
##############################
From agent.py-> find a plan in act()
walk_executor(hanger_363)exp(bowl_2071, hanger_363)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(hanger_363)
Robot is inside home_office_319. Robot is close dresser_358. Robot is close hanger_363. Robot is no longer close closetdrawer_384.Robot is no longer close closetdrawer_377.
##############################
From agent.py
exp(bowl_2071, hanger_363)
Fail to find bowl_2071 around hanger_363. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_107)exp(bowl_2071, table_107)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(table_107)
Find mat_173. Find clothes_hat_2045. Find drawing_175. Find clothes_gloves_2046. Robot is inside bedroom_67. Robot is close floor_73. Robot is close table_107. Robot is no longer inside home_office_319.Robot is no longer close hanger_363.Robot is no longer close dresser_358.
##############################
From agent.py
exp(bowl_2071, table_107)
Fail to find bowl_2071 around table_107. 
##############################
From agent.py-> find a plan in act()
walk_executor(table_226)exp(bowl_2071, table_226)walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(table_226)
Find coffee_filter_2000. Find bowl_2071. Find drawing_2003. Find bowl_2072. Find mat_236. Find fork_2080. Find fork_2081. Find mat_237. Robot is inside dining_room_201. Robot is close table_226. Robot is no longer inside bedroom_67.Robot is no longer close floor_73.Robot is no longer close table_107.
##############################
From agent.py
exp(bowl_2071, table_226)
Find bowl_2071. 
##############################
From agent.py-> find a plan in act()
walk_executor(food_vegetable_2041)grab_executor(food_vegetable_2041)walk_executor(bowl_2071)putin_executor(food_vegetable_2041, bowl_2071)
##############################
From agent.py
walk_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. Robot is no longer close table_226.
##############################
From agent.py
grab_executor(food_vegetable_2041)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close sink_42. Grabbing food_vegetable_2041 by right hand. 
##############################
From agent.py
walk_executor(bowl_2071)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close table_226. Robot is close bowl_2071. Robot is no longer close sink_42.
##############################
From agent.py
putin_executor(food_vegetable_2041, bowl_2071)
Robot is inside dining_room_201. Robot is close food_vegetable_2041. Robot is close table_226. Robot is close bowl_2071. food_vegetable_2041 released by right hand. 
##############################
