From agent.py
Reset goals: The sub-goals are: 
['Slice and toast the bread.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_122(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_toaster_door(toaster:item):
    # Determine whether the toaster has a door
    symbol toaster_door=exists door: item : is_door(door) and close(door, toaster)
    return toaster_door

behavior slice_bread(bread:item, cutting_board:item, knife:item):
    body:
        achieve inside(bread, cutting_board)
        # Place the bread on a cutting board
        achieve_once inhand(knife)
        # Temporarily hold the knife to slice the bread
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread in the toaster

        if has_toaster_door(toaster):
            bind door: item where:
                is_door(door) and close(door, toaster)
            achieve closed(door)
            # Ensure the toaster door is closed when toasting

        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select a knife

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster

        slice_bread(bread, cutting_board, knife)
        # Slice the bread on a cutting board using a knife

        toast_bread(bread, toaster)
        # Execute the behavior to toast the sliced bread in the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_123(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item, cutting_board:item, knife:item):
    body:
        achieve cut(bread)
        # Ensure the bread is sliced

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster
        achieve closed(toaster)
        # Close the toaster to toast
        achieve is_on(toaster)
        # Turn on the toaster 
        
behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an instance of bread

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select an instance of a cutting board

        bind knife: item where:
            is_knife(knife)
        # Select an instance of a knife

        bind toaster: item where:
            is_toaster(toaster)
        # Select an instance of a toaster

        slice_bread(bread, cutting_board, knife)
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice and toast the bread." ?
Answer: Cut the bread and put it in the toaster. Turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_kitchen_counter_123(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread item

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster item

        cut_bread(bread)
        # Cut the bread into slices

        toast_bread(bread, toaster)
        # Toast the sliced bread in the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster
        achieve plugged(toaster)
        # Ensure the toaster is plugged in
        achieve is_on(toaster)
        # Turn on the toaster to start toasting

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an instance of bread

        bind toaster: item where:
            is_toaster(toaster)
        # Select an instance of a toaster

        slice_bread(bread)
        # Slice the bread

        toast_bread(bread, toaster)
        # Toast the sliced bread

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_kitchen_counter_122(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        # Execute behavior to cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread into the toaster

        turn_on_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_cutting_board_2123_around_kitchen_counter_122(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_bread_2084_around_fridge_126(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_cutting_board_available():
    # Check if a cutting board is available in the scene
    symbol has_cutting_board=exists board: item : is_cutting_board(board)
    return has_cutting_board

def is_toaster_plugged_and_ready(toaster:item):
    # Check if the toaster is plugged in and can be turned on
    return plugged(toaster) and has_switch(toaster)

behavior cut_bread(bread:item, board:item):
    body:
        achieve on(bread, board)
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an instance of bread

        if is_cutting_board_available():
            bind board: item where:
                is_cutting_board(board)
            # Select the cutting board

            cut_bread(bread, board)
            # Execute behavior to cut the bread

            bind toaster: item where:
                is_toaster(toaster)
            # Select the toaster

            if is_toaster_plugged_and_ready(toaster):
                place_in_toaster(bread, toaster)
                # Place the bread inside the toaster

                start_toaster(toaster)
                # Start the toaster to begin toasting


#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_cutting_board_available():
    # Check if a cutting board is available in the scene
    symbol has_cutting_board=exists board: item : is_cutting_board(board)
    return has_cutting_board

def is_toaster_plugged_and_ready(toaster:item):
    # Check if the toaster is plugged in and can be turned on
    return plugged(toaster) and has_switch(toaster)

behavior cut_bread(bread:item, board:item):
    body:
        achieve on(bread, board)
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select an instance of bread

        if is_cutting_board_available():
            bind board: item where:
                is_cutting_board(board)
            # Select the cutting board

            cut_bread(bread, board)
            # Execute behavior to cut the bread

            bind toaster: item where:
                is_toaster(toaster)
            # Select the toaster

            if is_toaster_plugged_and_ready(toaster):
                place_in_toaster(bread, toaster)
                # Place the bread inside the toaster

                start_toaster(toaster)
                # Start the toaster to begin toasting


##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_122)exp(cutting_board_2123, kitchen_counter_122)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(kitchen_counter_122)
Find tray_128. Find spectacles_2153. Find fryingpan_2154. Find pot_78. Robot is inside dining_room_41. Robot is close kitchen_counter_122. 
##############################
From agent.py
exp(cutting_board_2123, kitchen_counter_122)
Fail to find cutting_board_2123 around kitchen_counter_122. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_123)exp(cutting_board_2123, kitchen_counter_123)exp(food_bread_2084, kitchen_counter_123)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(kitchen_counter_123)
Find oil_2149. Find knife_2035. Find food_kiwi_2054. Find food_orange_2027. Find tray_2068. Robot is inside dining_room_41. Robot is close kitchen_counter_123. Robot is close floor_45. Robot is no longer close kitchen_counter_122.
##############################
From agent.py
exp(cutting_board_2123, kitchen_counter_123)
Fail to find cutting_board_2123 around kitchen_counter_123. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(cutting_board_2123, cupboard_118)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. Robot is no longer close kitchen_counter_123.Robot is no longer close floor_45.
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(cutting_board_2123, cupboard_118)
Fail to find cutting_board_2123 around cupboard_118. 
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_117)exp(cutting_board_2123, cupboard_117)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(cupboard_117)
Find coffee_filter_2053. Robot is inside dining_room_41. Robot is close coffee_filter_2053. Robot is close wall_67. Robot is close cupboard_117. Robot is no longer close wall_68.Robot is no longer close tea_2066.Robot is no longer close knife_2037.Robot is no longer close cupboard_118.Robot is no longer close food_peanut_butter_2077.
##############################
From agent.py
exp(cutting_board_2123, cupboard_117)
Fail to find cutting_board_2123 around cupboard_117. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_119)exp(cutting_board_2123, kitchen_counter_119)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(kitchen_counter_119)
Find pot_2138. Find bowl_2141. Find plate_2152. Find cutting_board_2123. Find food_salt_2041. Find fork_2150. Find bowl_2140. Find bowl_2142. Find fork_2151. Robot is inside dining_room_41. Robot is close kitchen_counter_119. Robot is no longer close coffee_filter_2053.Robot is no longer close wall_67.Robot is no longer close cupboard_117.
##############################
From agent.py
exp(cutting_board_2123, kitchen_counter_119)
Find cutting_board_2123. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_bread_2084, fridge_126)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(fridge_126)
Find food_onion_2048. Find food_food_2046. Find food_food_2073. Find food_steak_2080. Find food_apple_2081. Find food_bacon_2082. Find food_banana_2083. Find food_cake_2085. Find food_carrot_2086. Find food_cereal_2087. Find food_cheese_2088. Find food_chicken_2089. Find food_dessert_2090. Find food_donut_2091. Find food_egg_2092. Find food_fish_2093. Find food_food_2094. Find food_fruit_2095. Find food_hamburger_2096. Find food_ice_cream_2097. Find food_jam_2098. Find food_kiwi_2099. Find food_lemon_2100. Find food_noodles_2101. Find food_oatmeal_2102. Find food_orange_2103. Find food_onion_2104. Find food_peanut_butter_2105. Find food_pizza_2106. Find food_potato_2107. Find food_rice_2108. Find food_salt_2109. Find food_snack_2110. Find food_sugar_2111. Find food_turkey_2112. Find food_vegetable_2113. Find food_food_2001. Find sauce_2148. Find basket_for_clothes_2078. Find food_food_1000. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. Robot is no longer close kitchen_counter_119.
##############################
From agent.py
switchoff_executor(fridge_126)
Find mouse_213. Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
open_executor(fridge_126)
Robot is inside dining_room_41. Robot is close food_onion_2048. Robot is close food_food_2046. Robot is close food_food_2073. Robot is close food_steak_2080. Robot is close food_apple_2081. Robot is close food_bacon_2082. Robot is close food_banana_2083. Robot is close food_cake_2085. Robot is close food_carrot_2086. Robot is close food_cereal_2087. Robot is close food_cheese_2088. Robot is close food_chicken_2089. Robot is close food_dessert_2090. Robot is close food_donut_2091. Robot is close food_egg_2092. Robot is close food_fish_2093. Robot is close food_food_2094. Robot is close food_fruit_2095. Robot is close food_hamburger_2096. Robot is close food_ice_cream_2097. Robot is close food_jam_2098. Robot is close food_kiwi_2099. Robot is close food_lemon_2100. Robot is close food_noodles_2101. Robot is close food_oatmeal_2102. Robot is close food_orange_2103. Robot is close food_onion_2104. Robot is close food_peanut_butter_2105. Robot is close food_pizza_2106. Robot is close food_potato_2107. Robot is close food_rice_2108. Robot is close food_salt_2109. Robot is close food_snack_2110. Robot is close food_sugar_2111. Robot is close food_turkey_2112. Robot is close food_vegetable_2113. Robot is close food_food_2001. Robot is close floor_44. Robot is close sauce_2148. Robot is close fridge_126. 
##############################
From agent.py
exp(food_bread_2084, fridge_126)
Fail to find food_bread_2084 around fridge_126. 
##############################
From agent.py-> find a plan in act()
walk_executor(toaster_132)exp(food_bread_2084, toaster_132)walk_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(cutting_board_2123)put_executor(food_bread_2084, cutting_board_2123)walk_executor(knifeblock_76)exp(knife_2122, knifeblock_76)walk_executor(knife_2122)grab_executor(knife_2122)walk_executor(food_bread_2084)cut_executor(food_bread_2084)grab_executor(food_bread_2084)walk_executor(toaster_132)putin_executor(food_bread_2084, toaster_132)
##############################
From agent.py
walk_executor(toaster_132)
Robot is inside dining_room_41. Robot is close kitchen_counter_122. Robot is close toaster_132. Robot is no longer close food_onion_2048.Robot is no longer close food_food_2046.Robot is no longer close food_food_2073.Robot is no longer close food_steak_2080.Robot is no longer close food_apple_2081.Robot is no longer close food_bacon_2082.Robot is no longer close food_banana_2083.Robot is no longer close food_cake_2085.Robot is no longer close food_carrot_2086.Robot is no longer close food_cereal_2087.Robot is no longer close food_cheese_2088.Robot is no longer close food_chicken_2089.Robot is no longer close food_dessert_2090.Robot is no longer close food_donut_2091.Robot is no longer close food_egg_2092.Robot is no longer close food_fish_2093.Robot is no longer close food_food_2094.Robot is no longer close food_fruit_2095.Robot is no longer close food_hamburger_2096.Robot is no longer close food_ice_cream_2097.Robot is no longer close food_jam_2098.Robot is no longer close food_kiwi_2099.Robot is no longer close food_lemon_2100.Robot is no longer close food_noodles_2101.Robot is no longer close food_oatmeal_2102.Robot is no longer close food_orange_2103.Robot is no longer close food_onion_2104.Robot is no longer close food_peanut_butter_2105.Robot is no longer close food_pizza_2106.Robot is no longer close food_potato_2107.Robot is no longer close food_rice_2108.Robot is no longer close food_salt_2109.Robot is no longer close food_snack_2110.Robot is no longer close food_sugar_2111.Robot is no longer close food_turkey_2112.Robot is no longer close food_vegetable_2113.Robot is no longer close food_food_2001.Robot is no longer close floor_44.Robot is no longer close sauce_2148.Robot is no longer close fridge_126.
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you help me to find food_bread_2084 ?
Answer: Go to the dining_room_41. Inside the dining room, locate table_114. The target item, food_bread_2084, is inside table_114. Look for it there.
Re-decompose: None

##############################
From agent.py
Human Instruction: Go to the dining_room_41. Inside the dining room, locate table_114. The target item, food_bread_2084, is inside table_114. Look for it there.

Human Guidance: Cut the bread and put it in the toaster. Turn on the toaster.
The actions you have taken:
Action 1: Walk to kitchen_counter_122.
Action 2: look for cutting_board_2123 around kitchen_counter_122.
Action 3: Walk to kitchen_counter_123.
Action 4: look for cutting_board_2123 around kitchen_counter_123.
Action 5: Walk to cupboard_118.
Action 6: Open cupboard_118.
Action 7: look for cutting_board_2123 around cupboard_118.
Action 8: Walk to cupboard_117.
Action 9: look for cutting_board_2123 around cupboard_117.
Action 10: Walk to kitchen_counter_119.
Action 11: look for cutting_board_2123 around kitchen_counter_119.
Action 12: Walk to fridge_126.
Action 13: Switch off fridge_126.
Action 14: Open fridge_126.
Action 15: look for food_bread_2084 around fridge_126.
Action 16: Walk to toaster_132.

##############################
From agent.py
exp(food_bread_2084, toaster_132)
Fail to find food_bread_2084 around toaster_132. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn it on.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        # Select dining room with ID 41

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select table with ID 114 in the dining room

        bind bread: item where:
            is_food_bread(bread) and id[bread]==2084 and inside(bread, table)
        # Select the bread with ID 2084 inside the table

        bind toaster: item where:
            is_toaster(toaster) and id[toaster]==132
        # Select the toaster with ID 132

        cut_bread(bread)
        # Execute behavior to cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread inside the toaster

        start_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_knife():
    # Check if theres a knife available
    symbol has_knife=exists knife: item : is_knife(knife) and visited(knife)
    return has_knife

def has_food_bread(food_bread:item):
    # Check if the bread is present in the dining_room_41
    symbol has_food_bread=exists table: item : is_table(table) and id[table]==114 and inside(food_bread, table)
    return has_food_bread

behavior cut_bread(bread:item, knife:item):
    body:
        achieve cut(bread)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior put_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room) and id[dining_room]==41
        # Bind the dining room with ID 41

        bind table: item where:
            is_table(table) and id[table]==114 and inside(table, dining_room)
        # Bind the table with ID 114 inside the dining room

        bind food_bread: item where:
            is_food_bread(food_bread) and has_food_bread(food_bread)
        # Bind the food_bread item and check its location

        if has_knife():
            bind knife: item where:
                is_knife(knife)
            # Bind a knife if available
            cut_bread(food_bread, knife)
            # Cut the bread using the knife
        
        bind toaster: item where:
            is_toaster(toaster)
        # Bind a toaster

        put_bread_in_toaster(food_bread, toaster)
        # Place the bread into the toaster

        start_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the bread, put it in the toaster, and turn it on." ?
Answer: Cut the bread and put it in the toaster. Turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_rag_2025_around_sink_120(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==120
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(rag,sink_instance)
        else:
            exp(rag,sink_instance)
    eff:
        unknown[rag]=False
        close[rag,sink_instance]=True
        close[sink_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def find_food_bread(table:item):
    # Check if food_bread_2084 is inside or on a specific table
    symbol has_bread=exists food: item : is_food_bread(food) and inside(food, table)
    return has_bread

behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_appliance(appliance:item):
    body:
        achieve is_on(appliance)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select table with ID 114 inside the dining room

        if not find_food_bread(table):
            observe(table, "Locate food_bread_2084 in table_114")
            
        bind bread: item where:
            is_food_bread(bread) and inside(bread, table)
        # Select bread inside table_114

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        place_in_toaster(bread, toaster)
        turn_on_appliance(toaster)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board(kitchen_counter:item):
    # Determine whether a kitchen counter has a cutting board nearby
    symbol has_cutting_board=exists cutting_board:item: is_cutting_board(cutting_board) and close(cutting_board, kitchen_counter)
    return has_cutting_board

behavior observe_and_locate_food_bread():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table] == 114
        # Select the table in the dining room with the specified ID
        
        observe(table, "Locate food_bread_2084 inside the table")

behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve close_char(char, cutting_board)
        # Ensure character is close to the cutting board
        
        achieve cut(bread)
        # Achieve state where the bread is cut

behavior toast_bread(bread:item, toaster:item):
    body:
        observe(toaster, "Check toaster condition and place bread inside") 
        # Observe if the toaster is suitable for use and place bread
        
        achieve inside(bread, toaster)
        # Achieve bread being inside the toaster
    
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        observe_and_locate_food_bread()
        
        bind bread: item where:
            is_food_bread(bread) and id[bread] == 2084
        # Select the instance of food bread

        if exists kitchen_counter: item : is_kitchen_counter(kitchen_counter) and has_cutting_board(kitchen_counter):
            bind kitchen_counter: item where:
                is_kitchen_counter(kitchen_counter) and has_cutting_board(kitchen_counter)
            # Select the kitchen counter with a cutting board

            bind cutting_board: item where:
                is_cutting_board(cutting_board) and close(cutting_board, kitchen_counter)
            # Select the cutting board close to the chosen kitchen counter

            cut_bread(bread, cutting_board)

        else:
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter, "Check is there any cutting board around")
                    # Observe each unvisited kitchen counter to find a cutting board

        bind toaster: item where:
            is_toaster(toaster) and id[toaster] == 132
        # Select the toaster instance
        
        toast_bread(bread, toaster)

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_rag_2025_around_bathroom_cabinet_17(rag:item):
    goal: not unknown(rag)
    body:
        assert is_rag(rag)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==17
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(rag,bathroom_cabinet_instance)
        else:
            exp(rag,bathroom_cabinet_instance)
    eff:
        unknown[rag]=False
        close[rag,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,rag]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board_available():
    # Function to check if there is a cutting board available
    symbol cutting_board_exists = exists cb: item : is_cutting_board(cb) and visited(cb)
    return cutting_board_exists

def has_bread_available(bread:item):
    # Function to determine if the bread has been found
    symbol bread_exists = exists b: item : is_food_bread(b) and on(b, bread)
    return bread_exists

behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve on(bread, cutting_board)
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and id[table]==114 and inside(table, dining_room)
        # Select the table in the dining room with ID 114
        
        # Search for the bread in the specified location
        if exists bread: item : is_food_bread(bread) and not has_bread_available(bread):
            observe(table, "Check if the bread is inside table_114")

        bind bread: item where:
            is_food_bread(bread) and has_bread_available(bread)
        # Select the bread instance

        # Find a cutting board to cut the bread on
        if not has_cutting_board_available():
            foreach location: item:
                if is_kitchen_counter(location) or is_cupboard(location):
                    observe(location, "Check if there is a cutting board")
        
        bind cutting_board: item where:
            is_cutting_board(cutting_board) and visited(cutting_board)
        # Select the cutting board instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread, cutting_board)
        # Execute behavior to cut the bread

        place_in_toaster(bread, toaster)
        # Place the bread inside the toaster

        turn_on_toaster(toaster)
        # Turn on the toaster to toast the bread

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is cut into slices

behavior insert_into_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the sliced bread inside the toaster

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        # Ensure the toaster is turned on to start toasting

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select the table with ID 114 inside the dining room

        bind bread: item where:
            is_food_bread(bread) and inside(bread, table) and id[bread]==2084
        # Select the bread with ID 2084 inside the table

        bind toaster: item where:
            is_toaster(toaster) and close(toaster, bread)
        # Select the toaster close to the bread

        slice_bread(bread)
        insert_into_toaster(bread, toaster)
        start_toaster(toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the bread, put it in the toaster, and turn on the toaster." ?
Answer: Cut the bread, put it in the toaster, and turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_bread_inside(table:item):
    # Determine if the specified table has bread inside
    symbol has_bread=exists bread:item: is_food_bread(bread) and inside(bread, table)
    return has_bread

def has_cutting_board_nearby():
    # Check if there is a cutting board nearby
    symbol cutting_board_nearby=exists cutting_board:item: is_cutting_board(cutting_board) and close_char(char, cutting_board)
    return cutting_board_nearby

behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve inside(bread, cutting_board)
        # Place the bread on the cutting board
        achieve cut(bread)
        # Ensure the bread is cut

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster

        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Identify the dining room

        bind table: item where:
            is_table(table) and id[table]==114 and inside(table, dining_room)
        # Bind the table with ID 114 in the dining room

        if exists bread: item : is_food_bread(bread) and has_bread_inside(table):
            bind bread: item where:
                is_food_bread(bread) and inside(bread, table)
            # Retrieve the bread from the table

            if not has_cutting_board_nearby():
                foreach item: item:
                    if is_cutting_board(item) and not visited(item):
                        observe(item, "check if it is a cutting board and close to me")

            bind cutting_board: item where:
                is_cutting_board(cutting_board) and close_char(char, cutting_board)
            # Bind the cutting board

            cut_bread(bread, cutting_board)
            # Cut the bread

            bind toaster: item where:
                is_toaster(toaster) and close_char(char, toaster)
            toast_bread(bread, toaster)
            # Toast the bread

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_cutting_board_in_kitchen():
    # Check if a cutting board is already known to be in the kitchen
    symbol has_cutting_board=exists item1:item: is_cutting_board(item1) and visited(item1)
    return has_cutting_board

behavior cut_bread(bread: item, cutting_board: item):
    body:
        achieve on(bread, cutting_board)
        # Ensure the bread is placed on the cutting board
        achieve cut(bread)
        # Ensure the bread is cut

behavior put_bread_in_toaster(bread: item, toaster: item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster

behavior turn_on_toaster(toaster: item):
    body:
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind kitchen: item where:
            is_kitchen_counter(kitchen)
        # Bind a kitchen counter
            
        if not has_cutting_board_in_kitchen():
            # If no cutting board is known to be in the kitchen
            foreach kitchen_counter: item:
                if is_kitchen_counter(kitchen_counter) and not visited(kitchen_counter):
                    observe(kitchen_counter,"Check for cutting board")
        
        bind table: item where:
            is_table(table) and id[table] == 114
        # Select table with ID 114
        
        bind bread: item where:
            is_food_bread(bread) and inside(bread, table)
        # Select the bread inside the table
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select an instance of a toaster

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board
        
        cut_bread(bread, cutting_board)
        # Execute behavior to cut the bread

        put_bread_in_toaster(bread, toaster)
        # Place the bread in the toaster
        
        turn_on_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def locate_bread():
    # Function to identify if the bread is located
    symbol located=exists bread: item : is_food_bread(bread) and inside(bread, table)
    return located

def in_dining_room(item:item):
    # Function to check if an item is in the dining room
    symbol in_dining_room=exists room: item : is_dining_room(room) and inside(item, room)
    return in_dining_room

behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select the specific table with ID 114 in the dining room

        bind bread: item where:
            is_food_bread(bread) and locate_bread()
        # Select the bread item located within table

        bind toaster: item where:
            is_toaster(toaster) and in_dining_room(toaster)
        # Select the toaster located in the dining room

        cut_bread(bread)
        # Cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread inside the toaster

        start_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table; available variables: [Variable<bread: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def locate_bread(table:item):
    # Function to identify if the bread is located
    symbol located=exists bread: item : is_food_bread(bread) and inside(bread, table)
    return located

def in_dining_room(item:item):
    # Function to check if an item is in the dining room
    symbol in_dining_room=exists room: item : is_dining_room(room) and inside(item, room)
    return in_dining_room

behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room) and id[table]==114
        # Select the specific table with ID 114 in the dining room

        bind bread: item where:
            is_food_bread(bread) and locate_bread(table)
        # Select the bread item located within table

        bind toaster: item where:
            is_toaster(toaster) and in_dining_room(toaster)
        # Select the toaster located in the dining room

        cut_bread(bread)
        # Cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread inside the toaster

        start_toaster(toaster)
        # Turn on the toaster

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)

        bind table: item where:
            is_table(table) and inside(table, dining_room)

        bind bread: item where:
            is_food_bread(bread) and inside(bread, table)

        bind toaster: item where:
            is_toaster(toaster)

        cut_bread(bread)
        place_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

behavior find_envelope_2018_around_filing_cabinet_200(envelope:item):
    goal: not unknown(envelope)
    body:
        assert is_envelope(envelope)
        bind filing_cabinet_instance:item where:
            is_filing_cabinet(filing_cabinet_instance) and id[filing_cabinet_instance]==200
        achieve close_char(char,filing_cabinet_instance)
        if can_open(filing_cabinet_instance):
            achieve_once open(filing_cabinet_instance)
            exp(envelope,filing_cabinet_instance)
        else:
            exp(envelope,filing_cabinet_instance)
    eff:
        unknown[envelope]=False
        close[envelope,filing_cabinet_instance]=True
        close[filing_cabinet_instance,envelope]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_dining_room_table_114():
    # Function to check if table_114 is in the dining room
    symbol is_the_table=exists dining_room: item : is_dining_room(dining_room) and inside(table_114, dining_room)
    return is_the_table

behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread) 
        # Ensure that the bread is cut

behavior put_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table_114: item where:
            is_table(table_114) and is_dining_room_table_114()
        # Select table 114 in the dining room

        bind bread: item where:
            is_food_bread(bread) and inside(bread, table_114)
        # Select the bread inside table 114

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        cut_bread(bread, cutting_board)
        put_bread_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

Unknown variable: table_114; available variables: [Variable<dining_room: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2122_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_knife_2037_around_knifeblock_76(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==76
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2084_around_table_114(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==114
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#goal_representation
 
def is_dining_room_table_114(table:item, dining_room:item):
    # Function to check if table_114 is in the dining room
    symbol is_the_table=exists item: item : is_dining_room(dining_room) and inside(table, dining_room)
    return is_the_table

behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread) 
        # Ensure that the bread is cut

behavior put_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table_114: item where:
            is_table(table_114) and is_dining_room_table_114(table_114, dining_room)
        # Select table 114 in the dining room

        bind bread: item where:
            is_food_bread(bread) and inside(bread, table_114)
        # Select the bread inside table 114

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        cut_bread(bread, cutting_board)
        put_bread_in_toaster(bread, toaster)
        turn_on_toaster(toaster)

#goal_representation_end

##############################
Error is:
tuple.index(x): x not in tuple
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2035_around_knife_2035(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knife_instance:item where:
            is_knife(knife_instance) and id[knife_instance]==2035
        achieve close_char(char,knife_instance)
        if can_open(knife_instance):
            achieve_once open(knife_instance)
            exp(knife,knife_instance)
        else:
            exp(knife,knife_instance)
    eff:
        unknown[knife]=False
        close[knife,knife_instance]=True
        close[knife_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_bread(table:item):
    # Function to check if there is bread on a specified table
    symbol has_bread=exists o: item : is_food_bread(o) and inside(o, table)
    return has_bread

behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior insert_bread_into_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve plugged(toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Select the dining room

        bind table: item where:
            is_table(table) and inside(table, dining_room)
        # Select the table inside the dining room

        bind bread: item where:
            is_food_bread(bread) and id[bread]==2084
        # Select the bread item with specific ID
        
        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        if not has_bread(table):
            observe(table, "Check for bread inside the table")

        cut_bread(bread)
        insert_bread_into_toaster(bread, toaster)
        start_toaster(toaster)


#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
