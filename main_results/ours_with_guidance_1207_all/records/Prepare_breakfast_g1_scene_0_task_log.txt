From agent.py
Reset goals: The sub-goals are: 
['Slice the bread and toast it.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

#exp_behavior_end

#goal_representation
behavior slice_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve plugged(toaster)
        achieve is_on(toaster)
        achieve inside(bread, toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        slice_bread(bread)
        # Execute behavior to slice the bread

        toast_bread(bread, toaster)
        # Execute behavior to toast the sliced bread in the toaster
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_closetdrawer_116(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_food_bread_2012_around_table_107(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==107
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(food_bread,table_instance)
        else:
            exp(food_bread,table_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,table_instance]=True
        close[table_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_bread_sliced(bread:item):
    # Determine whether the bread has been cut
    symbol cut_bread=exists slice: item : is_food_bread(slice) and cut(slice)
    return cut_bread

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the bread inside the toaster
        
        achieve plugged(toaster)
        # Ensure the toaster is plugged in
        
        achieve is_on(toaster)
        # Turn on the toaster to toast the bread

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        if not is_bread_sliced(bread):
            achieve cut(bread)
        # Ensure the bread is sliced before toasting

        toast_bread(bread, toaster)
        # Execute the behavior to toast the sliced bread

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "slice the bread and toast it." ?
Answer: Cut the bread and put it in the toaster. Turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_closetdrawer_160(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        achieve is_on(toaster)

behavior unplug_toaster(toaster:item):
    body:
        achieve is_off(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select a bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select a toaster instance
        
        cut_bread(bread)
        # Execute behavior to cut the bread

        toast_bread(bread, toaster)
        # Execute behavior to toast the bread

        unplug_toaster(toaster)
        # Turn off the toaster after use

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_closetdrawer_116(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_egg_2020_around_fridge_289(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)

behavior toast_bread(bread_slice:item, toaster:item):
    body:
        achieve inside(bread_slice, toaster) 
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        # Cut the bread into slices

        foreach bread_slice: item:
            if is_food_bread(bread_slice) and cut(bread_slice):
                toast_bread(bread_slice, toaster)
                # Toast each slice of bread in the toaster

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['Cut the bread, put it in the toaster, and turn on the toaster.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_kitchen_counter_230(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(knife,kitchen_counter_instance)
        else:
            exp(knife,kitchen_counter_instance)
    eff:
        unknown[knife]=False
        close[knife,kitchen_counter_instance]=True
        close[kitchen_counter_instance,knife]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item):
    body:
        achieve cut(bread) 

behavior put_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior toast_bread(toaster:item):
    body:
        achieve plugged(toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        # Execute the behavior to cut the bread

        put_bread_in_toaster(bread, toaster)
        # Put the cut bread inside the toaster

        toast_bread(toaster)
        # Turn on the toaster to toast the bread
 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_closetdrawer_160(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==160
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_bread_2012_around_fridge_289(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==289
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_bread,fridge_instance)
        else:
            exp(food_bread,fridge_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,fridge_instance]=True
        close[fridge_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior cut_bread(bread:item, cutting_board:item):
    body:
        achieve cut(bread)

behavior place_bread_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)

behavior start_toaster(toaster:item):
    body:
        achieve closed(toaster)
        achieve is_on(toaster)

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind cutting_board: item where:
            is_cutting_board(cutting_board)
        # Select the cutting board

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster

        cut_bread(bread, cutting_board)
        # Execute behavior to cut the bread

        place_bread_in_toaster(bread, toaster)
        # Place the cut bread in the toaster

        start_toaster(toaster)
        # Turn on the toaster in which the bread is placed

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "cut the bread, put it in the toaster, and turn on the toaster." ?
Answer: Cut the bread and put it in the toaster. Turn on the toaster.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2050_around_closetdrawer_116(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind closetdrawer_instance:item where:
            is_closetdrawer(closetdrawer_instance) and id[closetdrawer_instance]==116
        achieve close_char(char,closetdrawer_instance)
        if can_open(closetdrawer_instance):
            achieve_once open(closetdrawer_instance)
            exp(knife,closetdrawer_instance)
        else:
            exp(knife,closetdrawer_instance)
    eff:
        unknown[knife]=False
        close[knife,closetdrawer_instance]=True
        close[closetdrawer_instance,knife]=True
    

behavior find_cutting_board_2051_around_kitchen_counter_230(cutting_board:item):
    goal: not unknown(cutting_board)
    body:
        assert is_cutting_board(cutting_board)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cutting_board,kitchen_counter_instance)
        else:
            exp(cutting_board,kitchen_counter_instance)
    eff:
        unknown[cutting_board]=False
        close[cutting_board,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cutting_board]=True
    

behavior find_food_bread_2012_around_kitchen_counter_230(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==230
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
behavior cut_bread(bread:item):
    body:
        achieve cut(bread)
        # Ensure the bread is cut

behavior place_in_toaster(bread:item, toaster:item):
    body:
        achieve inside(bread, toaster)
        # Place the cut bread inside the toaster

behavior turn_on_toaster(toaster:item):
    body:
        achieve is_on(toaster)
        # Turn on the toaster

behavior __goal__():
    body:
        bind bread: item where:
            is_food_bread(bread)
        # Select the bread instance

        bind toaster: item where:
            is_toaster(toaster)
        # Select the toaster instance

        cut_bread(bread)
        # Execute behavior to cut the bread

        place_in_toaster(bread, toaster)
        # Place the cut bread into the toaster

        turn_on_toaster(toaster)
        # Turn on the toaster to toast the bread
#goal_representation_end

##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_230)exp(food_bread_2012, kitchen_counter_230)exp(cutting_board_2051, kitchen_counter_230)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(closetdrawer_116)exp(knife_2050, closetdrawer_116)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(kitchen_counter_230)
Find pot_2069. Find cup_2063. Find knife_2050. Find napkin_2005. Find cup_2064. Find cutting_board_2051. Find oil_2079. Find fryingpan_2083. Find tray_296. Find drawing_239. Find drawing_238. Find drawing_240. Find drawing_241. Find drawing_242. Find drawing_243. Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is no longer inside bathroom_1.
##############################
From agent.py
exp(food_bread_2012, kitchen_counter_230)
Fail to find food_bread_2012 around kitchen_counter_230. 
##############################
From agent.py-> find a plan in act()
walk_executor(closetdrawer_116)exp(food_bread_2012, closetdrawer_116)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(closetdrawer_116)
Find hanger_110. Find hanger_140. Find hanger_109. Find hanger_132. Find hanger_113. Find hanger_112. Find hanger_124. Find hanger_115. Find hanger_130. Find hanger_134. Find hanger_136. Find hanger_138. Find hanger_111. Find hanger_114. Find hanger_126. Find hanger_128. Find hanger_141. Find hanger_142. Robot is inside bedroom_67. Robot is close closetdrawer_116. Robot is close dresser_108. Robot is close closetdrawer_119. Robot is no longer inside dining_room_201.Robot is no longer close kitchen_counter_230.
##############################
From agent.py
exp(food_bread_2012, closetdrawer_116)
Fail to find food_bread_2012 around closetdrawer_116. 
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_289)switchoff_executor(fridge_289)open_executor(fridge_289)exp(food_bread_2012, fridge_289)walk_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
walk_executor(fridge_289)
Find sauce_2078. Find food_steak_2008. Find food_apple_2009. Find food_bacon_2010. Find food_banana_2011. Find food_bread_2012. Find food_cake_2013. Find food_carrot_2014. Find food_cereal_2015. Find food_cheese_2016. Find food_chicken_2017. Find food_dessert_2018. Find food_donut_2019. Find food_egg_2020. Find food_fish_2021. Find food_food_2022. Find food_fruit_2023. Find food_hamburger_2024. Find food_ice_cream_2025. Find food_jam_2026. Find food_kiwi_2027. Find food_lemon_2028. Find food_noodles_2029. Find food_oatmeal_2030. Find food_orange_2031. Find food_onion_2032. Find food_peanut_butter_2033. Find food_pizza_2034. Find food_potato_2035. Find food_rice_2036. Find food_salt_2037. Find food_snack_2038. Find food_sugar_2039. Find food_turkey_2040. Find food_vegetable_2041. Find dry_pasta_2042. Find milk_2043. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Robot is no longer inside bedroom_67.Robot is no longer close closetdrawer_116.Robot is no longer close dresser_108.Robot is no longer close closetdrawer_119.
##############################
From agent.py
switchoff_executor(fridge_289)
Find mat_22. Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
open_executor(fridge_289)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. 
##############################
From agent.py
exp(food_bread_2012, fridge_289)
Find food_bread_2012. 
##############################
From agent.py-> find a plan in act()
grab_executor(food_bread_2012)walk_executor(cutting_board_2051)put_executor(food_bread_2012, cutting_board_2051)walk_executor(knife_2050)grab_executor(knife_2050)walk_executor(food_bread_2012)cut_executor(food_bread_2012)grab_executor(food_bread_2012)walk_executor(toaster_292)putin_executor(food_bread_2012, toaster_292)switchon_executor(toaster_292)
##############################
From agent.py
grab_executor(food_bread_2012)
Robot is inside dining_room_201. Robot is close sauce_2078. Robot is close fridge_289. Robot is close floor_202. Robot is close floor_203. Robot is close food_steak_2008. Robot is close food_apple_2009. Robot is close food_bacon_2010. Robot is close food_banana_2011. Robot is close food_bread_2012. Robot is close food_cake_2013. Robot is close food_carrot_2014. Robot is close food_cereal_2015. Robot is close food_cheese_2016. Robot is close food_chicken_2017. Robot is close food_dessert_2018. Robot is close food_donut_2019. Robot is close food_egg_2020. Robot is close food_fish_2021. Robot is close food_food_2022. Robot is close food_fruit_2023. Robot is close food_hamburger_2024. Robot is close food_ice_cream_2025. Robot is close food_jam_2026. Robot is close food_kiwi_2027. Robot is close food_lemon_2028. Robot is close food_noodles_2029. Robot is close food_oatmeal_2030. Robot is close food_orange_2031. Robot is close food_onion_2032. Robot is close food_peanut_butter_2033. Robot is close food_pizza_2034. Robot is close food_potato_2035. Robot is close food_rice_2036. Robot is close food_salt_2037. Robot is close food_snack_2038. Robot is close food_sugar_2039. Robot is close food_turkey_2040. Robot is close food_vegetable_2041. Robot is close dry_pasta_2042. Robot is close milk_2043. Grabbing food_bread_2012 by right hand. 
##############################
From agent.py
walk_executor(cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_bread_2012. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. Robot is no longer close sauce_2078.Robot is no longer close fridge_289.Robot is no longer close floor_202.Robot is no longer close floor_203.Robot is no longer close food_steak_2008.Robot is no longer close food_apple_2009.Robot is no longer close food_bacon_2010.Robot is no longer close food_banana_2011.Robot is no longer close food_cake_2013.Robot is no longer close food_carrot_2014.Robot is no longer close food_cereal_2015.Robot is no longer close food_cheese_2016.Robot is no longer close food_chicken_2017.Robot is no longer close food_dessert_2018.Robot is no longer close food_donut_2019.Robot is no longer close food_egg_2020.Robot is no longer close food_fish_2021.Robot is no longer close food_food_2022.Robot is no longer close food_fruit_2023.Robot is no longer close food_hamburger_2024.Robot is no longer close food_ice_cream_2025.Robot is no longer close food_jam_2026.Robot is no longer close food_kiwi_2027.Robot is no longer close food_lemon_2028.Robot is no longer close food_noodles_2029.Robot is no longer close food_oatmeal_2030.Robot is no longer close food_orange_2031.Robot is no longer close food_onion_2032.Robot is no longer close food_peanut_butter_2033.Robot is no longer close food_pizza_2034.Robot is no longer close food_potato_2035.Robot is no longer close food_rice_2036.Robot is no longer close food_salt_2037.Robot is no longer close food_snack_2038.Robot is no longer close food_sugar_2039.Robot is no longer close food_turkey_2040.Robot is no longer close food_vegetable_2041.Robot is no longer close dry_pasta_2042.Robot is no longer close milk_2043.
##############################
From agent.py
put_executor(food_bread_2012, cutting_board_2051)
Robot is inside dining_room_201. Robot is close food_bread_2012. Robot is close cutting_board_2051. Robot is close kitchen_counter_230. food_bread_2012 released by right hand. 
##############################
From agent.py
walk_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Robot is no longer close cutting_board_2051.Robot is no longer close food_bread_2012.
##############################
From agent.py
grab_executor(knife_2050)
Robot is inside dining_room_201. Robot is close kitchen_counter_230. Robot is close knife_2050. Grabbing knife_2050 by right hand. 
##############################
From agent.py
walk_executor(food_bread_2012)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_bread_2012. Robot is no longer close kitchen_counter_230.
##############################
From agent.py
cut_executor(food_bread_2012)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_bread_2012. 
##############################
From agent.py
grab_executor(food_bread_2012)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close cutting_board_2051. Robot is close food_bread_2012. Grabbing food_bread_2012 by left hand. 
##############################
From agent.py
walk_executor(toaster_292)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_bread_2012. Robot is close toaster_292. Robot is close kitchen_counter_230. Robot is no longer close cutting_board_2051.
##############################
From agent.py
putin_executor(food_bread_2012, toaster_292)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_bread_2012. Robot is close toaster_292. Robot is close kitchen_counter_230. food_bread_2012 released by left hand. 
##############################
From agent.py
switchon_executor(toaster_292)
Robot is inside dining_room_201. Robot is close knife_2050. Robot is close food_bread_2012. Robot is close toaster_292. Robot is close kitchen_counter_230. 
##############################
