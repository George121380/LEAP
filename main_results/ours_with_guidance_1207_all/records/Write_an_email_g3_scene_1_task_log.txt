From agent.py
Reset goals: The sub-goals are: 
['1. Find the chair in front of the computer in the home office and sit on it.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_194_around_home_office_241(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind home_office_instance:item where:
            is_home_office(home_office_instance) and id[home_office_instance]==241
        achieve close_char(char,home_office_instance)
        if can_open(home_office_instance):
            achieve_once open(home_office_instance)
            exp(chair,home_office_instance)
        else:
            exp(chair,home_office_instance)
    eff:
        unknown[chair]=False
        close[chair,home_office_instance]=True
        close[home_office_instance,chair]=True
    

#exp_behavior_end

#goal_representation
 
def is_on_first_chair_in_home_office(chair:item, home_office:item):
    # Determine if the chair is close to the computer in the home office
    symbol is_close_to_computer=exists computer: item: is_computer(computer) and close(chair, computer) and inside(chair, home_office) and sittable(chair)
    return is_close_to_computer

behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        if exists chair: item: is_chair(chair) and is_on_first_chair_in_home_office(chair, home_office):
            bind chair: item where:
                is_chair(chair) and is_on_first_chair_in_home_office(chair, home_office)
            sit_on_chair_in_front_of_computer(char, chair)
        else:
            # Explore to find appropriate chair matching criteria
            foreach chair: item:
                if is_chair(chair) and sittable(chair) and not visited(chair):
                    observe(chair, "Check if it is the chair in front of computer in home office")

#goal_representation_end

##############################
From agent.py->reset_goal
 
def is_on_first_chair_in_home_office(chair:item, home_office:item):
    # Determine if the chair is close to the computer in the home office
    symbol is_close_to_computer=exists computer: item: is_computer(computer) and close(chair, computer) and inside(chair, home_office) and sittable(chair)
    return is_close_to_computer

behavior sit_on_chair_in_front_of_computer(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        if exists chair: item: is_chair(chair) and is_on_first_chair_in_home_office(chair, home_office):
            bind chair: item where:
                is_chair(chair) and is_on_first_chair_in_home_office(chair, home_office)
            sit_on_chair_in_front_of_computer(char, chair)
        else:
            # Explore to find appropriate chair matching criteria
            foreach chair: item:
                if is_chair(chair) and sittable(chair) and not visited(chair):
                    observe(chair, "Check if it is the chair in front of computer in home office")

##############################
From agent.py-> find a plan in act()
walk_executor(home_office_241)exp(chair_194, home_office_241)walk_executor(chair_194)obs(chair_194, Check if it is the chair in front of computer in home office)walk_executor(home_office_241)exp(chair_271, home_office_241)walk_executor(chair_271)obs(chair_271, Check if it is the chair in front of computer in home office)walk_executor(home_office_241)exp(chair_2003, home_office_241)walk_executor(chair_2003)obs(chair_2003, Check if it is the chair in front of computer in home office)
##############################
From agent.py
walk_executor(home_office_241)
Robot is inside home_office_241. Robot is no longer inside dining_room_41.
##############################
From agent.py
exp(chair_194, home_office_241)
Fail to find chair_194 around home_office_241. 
##############################
From agent.py-> find a plan in act()
walk_executor(chair_271)exp(chair_194, chair_271)walk_executor(chair_194)obs(chair_194, Check if it is the chair in front of computer in home office)walk_executor(chair_271)obs(chair_271, Check if it is the chair in front of computer in home office)exp(chair_2003, chair_271)walk_executor(chair_2003)obs(chair_2003, Check if it is the chair in front of computer in home office)
##############################
From agent.py
walk_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. 
##############################
From agent.py
exp(chair_194, chair_271)
Fail to find chair_194 around chair_271. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Sit on the chair in front of the computer in the home office.', '2. Touch the mouse near the computer to turn it on.', '3. Type on the keyboard to send an email.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_chair_271_around_table_270(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==270
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(chair,table_instance)
        else:
            exp(chair,table_instance)
    eff:
        unknown[chair]=False
        close[chair,table_instance]=True
        close[table_instance,chair]=True
    

#exp_behavior_end

#goal_representation
behavior sit_on_chair(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair(char, chair)
        # Execute the behavior to sit on the chair in front of the computer
#goal_representation_end

##############################
From agent.py->reset_goal
behavior sit_on_chair(char: character, chair: item):
    body:
        achieve close_char(char, chair)
        # Ensure the character is close to the chair

        achieve on_char(char, chair)
        # Ensure the character is sitting on the chair

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind chair: item where:
            is_chair(chair) and sittable(chair) and close(computer, chair)
        # Select the chair in front of the computer

        sit_on_chair(char, chair)
        # Execute the behavior to sit on the chair in front of the computer
##############################
From agent.py-> find a plan in act()
sit_executor(chair_271)
##############################
From agent.py
sit_executor(chair_271)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_271. Robot is facing computer_276. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_211_around_desk_272(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==272
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(keyboard,desk_instance)
        else:
            exp(keyboard,desk_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,desk_instance]=True
        close[desk_instance,keyboard]=True
    

behavior find_mouse_280_around_mouse_280(mouse:item):
    goal: not unknown(mouse)
    body:
        assert is_mouse(mouse)
        bind mouse_instance:item where:
            is_mouse(mouse_instance) and id[mouse_instance]==280
        achieve close_char(char,mouse_instance)
        if can_open(mouse_instance):
            achieve_once open(mouse_instance)
            exp(mouse,mouse_instance)
        else:
            exp(mouse,mouse_instance)
    eff:
        unknown[mouse]=False
        close[mouse,mouse_instance]=True
        close[mouse_instance,mouse]=True
    

#exp_behavior_end

#goal_representation
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch(mouse)
        # Execute the behavior to touch the mouse to turn it on
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior __goal__():
    body:
        bind computer: item where:
            is_computer(computer)
        # Select the computer instance

        bind mouse: item where:
            is_mouse(mouse) and close(mouse, computer)
        # Select the mouse instance that is close to the computer

        achieve close_char(char, mouse)
        # Ensure you are close to the mouse near the computer

        touch(mouse)
        # Execute the behavior to touch the mouse to turn it on
##############################
From agent.py-> find a plan in act()
standup_executor(char)walk_executor(mouse_280)touch_executor(mouse_280)
##############################
From agent.py
standup_executor(char)
Robot is inside home_office_241. Robot is close chair_271. Robot is on chair_271. Robot is facing computer_276. 
##############################
From agent.py
walk_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_271. Robot is no longer close chair_271.Robot is no longer facing computer_276.
##############################
From agent.py
touch_executor(mouse_280)
Robot is inside home_office_241. Robot is close mouse_280. Robot is close desk_272. Robot is close mousepad_279. Robot is on chair_271. 
##############################
Goal representation from planning.py

#exp_behavior

behavior find_keyboard_211_around_computer_209(keyboard:item):
    goal: not unknown(keyboard)
    body:
        assert is_keyboard(keyboard)
        bind computer_instance:item where:
            is_computer(computer_instance) and id[computer_instance]==209
        achieve close_char(char,computer_instance)
        if can_open(computer_instance):
            achieve_once open(computer_instance)
            exp(keyboard,computer_instance)
        else:
            exp(keyboard,computer_instance)
    eff:
        unknown[keyboard]=False
        close[keyboard,computer_instance]=True
        close[computer_instance,keyboard]=True
    

#exp_behavior_end

#goal_representation
behavior type_on_keyboard(keyboard:item):
    body:
        type(keyboard)
        # Ensure the keyboard is typed on to send the email

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select the keyboard that is close to the computer

        achieve close_char(char, keyboard)
        # Ensure you are close to the keyboard near the computer

        type_on_keyboard(keyboard)
        # Execute the behavior to type on the keyboard to send the email
#goal_representation_end

##############################
From agent.py->reset_sub_goal
behavior type_on_keyboard(keyboard:item):
    body:
        type(keyboard)
        # Ensure the keyboard is typed on to send the email

behavior __goal__():
    body:
        bind home_office: item where:
            is_home_office(home_office)
        # Select the home office as the target location

        bind computer: item where:
            is_computer(computer) and inside(computer, home_office)
        # Select the computer within the home office

        bind keyboard: item where:
            is_keyboard(keyboard) and close(keyboard, computer)
        # Select the keyboard that is close to the computer

        achieve close_char(char, keyboard)
        # Ensure you are close to the keyboard near the computer

        type_on_keyboard(keyboard)
        # Execute the behavior to type on the keyboard to send the email
##############################
From agent.py-> find a plan in act()
walk_executor(keyboard_278)type_executor(keyboard_278)
##############################
From agent.py
walk_executor(keyboard_278)
Robot is inside home_office_241. Robot is close desk_272. Robot is close keyboard_278. Robot is on chair_271. Robot is no longer close mouse_280.Robot is no longer close mousepad_279.
##############################
From agent.py
type_executor(keyboard_278)
Robot is inside home_office_241. Robot is close desk_272. Robot is close keyboard_278. Robot is on chair_271. 
##############################
