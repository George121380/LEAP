From agent.py
Reset goals: The sub-goals are: 
['Use a pot to boil some water.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2093_around_cupboard_130(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==130
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

behavior find_food_dessert_2051_around_fridge_140(food_dessert:item):
    goal: not unknown(food_dessert)
    body:
        assert is_food_dessert(food_dessert)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_dessert,fridge_instance)
        else:
            exp(food_dessert,fridge_instance)
    eff:
        unknown[food_dessert]=False
        close[food_dessert,fridge_instance]=True
        close[fridge_instance,food_dessert]=True
    

behavior find_vacuum_cleaner_2094_around_washing_machine_2041(vacuum_cleaner:item):
    goal: not unknown(vacuum_cleaner)
    body:
        assert is_vacuum_cleaner(vacuum_cleaner)
        bind washing_machine_instance:item where:
            is_washing_machine(washing_machine_instance) and id[washing_machine_instance]==2041
        achieve close_char(char,washing_machine_instance)
        if can_open(washing_machine_instance):
            achieve_once open(washing_machine_instance)
            exp(vacuum_cleaner,washing_machine_instance)
        else:
            exp(vacuum_cleaner,washing_machine_instance)
    eff:
        unknown[vacuum_cleaner]=False
        close[vacuum_cleaner,washing_machine_instance]=True
        close[washing_machine_instance,vacuum_cleaner]=True
    

#exp_behavior_end

#goal_representation
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior boil_water(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        fill_pot_with_water(pot, sink)
        # Execute the behavior to fill the pot with water

        boil_water(pot, stove)
        # Execute the behavior to boil the water in the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        bind faucet: item where:
            is_faucet(faucet) and close(faucet, sink)
        achieve_once is_on(faucet)
        # Turn on the faucet to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        achieve_once is_off(faucet)
        # Turn off the faucet after filling the pot

behavior boil_water(pot:item, stove:item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        fill_pot_with_water(pot, sink)
        # Execute the behavior to fill the pot with water

        boil_water(pot, stove)
        # Execute the behavior to boil the water in the pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_130)exp(pot_2093, cupboard_130)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(cupboard_130)
Find blender_2032. Find tea_bag_2017. Find tray_142. Find pot_54. Robot is inside dining_room_1. Robot is close blender_2032. Robot is close tea_bag_2017. Robot is close cupboard_130. Robot is no longer inside home_office_161.
##############################
From agent.py
exp(pot_2093, cupboard_130)
Fail to find pot_2093 around cupboard_130. 
##############################
From agent.py-> find a plan in act()
walk_executor(kitchen_counter_129)exp(pot_2093, kitchen_counter_129)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(kitchen_counter_129)
Find pot_2093. Find oil_2102. Find fryingpan_2107. Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is no longer close blender_2032.Robot is no longer close tea_bag_2017.Robot is no longer close cupboard_130.
##############################
From agent.py
exp(pot_2093, kitchen_counter_129)
Find pot_2093. 
##############################
From agent.py-> find a plan in act()
walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)switchon_executor(stove_2090)
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. 
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close kitchen_counter_129. Robot is close pot_2093. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Find juice_2034. Find after_shave_2029. Find cleaning_solution_2098. Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.
##############################
From agent.py
putin_executor(pot_2093, sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Robot is no longer close kitchen_counter_132.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close sink_133.
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
switchon_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. 
##############################
From agent.py
Human Instruction: The robot needs to fill pot_2093 with water. It should place the pot under the faucet, turn the faucet on, ensure the pot is filled with water, and then turn the faucet off before proceeding to boil the water.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for pot_2093 around kitchen_counter_129.
Action 5: Walk to pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to sink_133.
Action 8: Put pot_2093 into sink_133.
Action 9: Walk to pot_2093.
Action 10: Grab pot_2093.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to stove_2090.
Action 14: Put pot_2093 on stove_2090.
Action 15: Switch on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2087_around_cupboard_131(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(cup,cupboard_instance)
        else:
            exp(cup,cupboard_instance)
    eff:
        unknown[cup]=False
        close[cup,cupboard_instance]=True
        close[cupboard_instance,cup]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

#exp_behavior_end

#goal_representation
 
behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to use the pot to boil water on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve has_water(pot)
        # Ensure the pot is filled with water
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to use the pot to boil water on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(faucet_134)switchon_executor(faucet_134)switchoff_executor(faucet_134)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
switchoff_executor(faucet_134)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
From agent.py
Human Instruction: You need to ensure the pot is actually filled with water. In the timeline of actions, it seems you placed the pot under the faucet and switched the faucet on then off, but this was done after the stove was already on, and it is unclear if the pot was filled with water before you started boiling it. You'll need to clearly perform and confirm the step where the pot is filled with water before placing it on the stove and turning the stove on.

The actions you have taken:
Action 1: Walk to cupboard_130.
Action 2: look for pot_2093 around cupboard_130.
Action 3: Walk to kitchen_counter_129.
Action 4: look for pot_2093 around kitchen_counter_129.
Action 5: Walk to pot_2093.
Action 6: Grab pot_2093.
Action 7: Walk to sink_133.
Action 8: Put pot_2093 into sink_133.
Action 9: Walk to pot_2093.
Action 10: Grab pot_2093.
Action 11: Walk to faucet_134.
Action 12: Switch off faucet_134.
Action 13: Walk to stove_2090.
Action 14: Put pot_2093 on stove_2090.
Action 15: Switch on stove_2090.
Action 16: Grab pot_2093.
Action 17: Walk to faucet_134.
Action 18: Switch on faucet_134.
Action 19: Switch off faucet_134.
Action 20: Walk to stove_2090.
Action 21: Put pot_2093 on stove_2090.

##############################
Goal representation from planning.py

#exp_behavior

behavior find_cup_2006_around_coffe_maker_147(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind coffe_maker_instance:item where:
            is_coffe_maker(coffe_maker_instance) and id[coffe_maker_instance]==147
        achieve close_char(char,coffe_maker_instance)
        if can_open(coffe_maker_instance):
            achieve_once open(coffe_maker_instance)
            exp(cup,coffe_maker_instance)
        else:
            exp(cup,coffe_maker_instance)
    eff:
        unknown[cup]=False
        close[cup,coffe_maker_instance]=True
        close[coffe_maker_instance,cup]=True
    

behavior find_food_lemon_2061_around_fridge_140(food_lemon:item):
    goal: not unknown(food_lemon)
    body:
        assert is_food_lemon(food_lemon)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_lemon,fridge_instance)
        else:
            exp(food_lemon,fridge_instance)
    eff:
        unknown[food_lemon]=False
        close[food_lemon,fridge_instance]=True
        close[fridge_instance,food_lemon]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
behavior has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        fill_pot_with_water(pot, sink)
        # Execute the behavior to fill the pot with water

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to boil the water in the pot on the stove
#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('SYMBOL', 'symbol') at line 5947, column 5.
Expected one of: 
	* EFF
	* MINIMIZE
	* GOAL
	* BODY
	* HEURISTIC
Previous tokens: [Token('_NEWLINE', '\n    # Determine whether this sink has a faucet\n    ')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_cup_2089_around_kitchen_counter_128(cup:item):
    goal: not unknown(cup)
    body:
        assert is_cup(cup)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==128
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(cup,kitchen_counter_instance)
        else:
            exp(cup,kitchen_counter_instance)
    eff:
        unknown[cup]=False
        close[cup,kitchen_counter_instance]=True
        close[kitchen_counter_instance,cup]=True
    

behavior find_food_food_2055_around_fridge_140(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#goal_representation
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        fill_pot_with_water(pot, sink)
        # Execute the behavior to fill the pot with water

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to boil the water in the pot on the stove

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def has_faucet(sink: item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet: item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot: item, sink: item):
    body:
        achieve_once inside(pot, sink)
        # Place the pot inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water

        achieve has_water(pot)
        # Ensure the pot is filled with water

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot

behavior use_pot_to_boil_water(pot: item, stove: item):
    body:
        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Ensure the stove is turned on to boil the water in the pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
        # Select an instance of a pot

        bind sink: item where:
            is_sink(sink)
        # Select an instance of a sink

        bind stove: item where:
            is_stove(stove)
        # Select an instance of a stove

        fill_pot_with_water(pot, sink)
        # Execute the behavior to fill the pot with water

        use_pot_to_boil_water(pot, stove)
        # Execute the behavior to boil the water in the pot on the stove

##############################
From agent.py-> find a plan in act()
grab_executor(pot_2093)walk_executor(sink_133)putin_executor(pot_2093, sink_133)walk_executor(faucet_134)switchon_executor(faucet_134)walk_executor(pot_2093)grab_executor(pot_2093)walk_executor(stove_2090)put_executor(pot_2093, stove_2090)
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. Robot is no longer close kitchen_counter_129.Robot is no longer close stove_2090.
##############################
From agent.py
putin_executor(pot_2093, sink_133)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_132. Robot is close sink_133. pot_2093 released by right hand. 
##############################
From agent.py
walk_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. Robot is no longer close pot_2093.Robot is no longer close sink_133.
##############################
From agent.py
switchon_executor(faucet_134)
Robot is inside dining_room_1. Robot is close kitchen_counter_132. Robot is close faucet_134. 
##############################
From agent.py
walk_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Robot is no longer close kitchen_counter_132.Robot is no longer close faucet_134.
##############################
From agent.py
grab_executor(pot_2093)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close sink_133. Grabbing pot_2093 by right hand. 
##############################
From agent.py
walk_executor(stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. Robot is no longer close sink_133.
##############################
From agent.py
put_executor(pot_2093, stove_2090)
Robot is inside dining_room_1. Robot is close pot_2093. Robot is close kitchen_counter_129. Robot is close stove_2090. pot_2093 released by right hand. 
##############################
