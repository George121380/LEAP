From agent.py
Reset goals: The sub-goals are: 
['1. Locate the milk, turkey, egg, fish, and chicken in the household.', '2. Bring the milk, turkey, egg, fish, and chicken to the table in the dining room.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def locate_food_items():
    # Function to determine if all needed items (milk, turkey, egg, fish, chicken) are located
    symbol items_located = exists m: item : is_milk(m)
    symbol turkey_located = exists t: item : is_food_turkey(t)
    symbol egg_located = exists e: item : is_food_egg(e)
    symbol fish_located = exists f: item : is_food_fish(f)
    symbol chicken_located = exists c: item : is_food_chicken(c)
    return items_located and turkey_located and egg_located and fish_located and chicken_located

behavior locate_item(obj:item, obj_type: string):
    body:
        if not visited(obj):
            observe(obj, "fCheck if this is a obj_type")

behavior __goal__():
    body:
        if not locate_food_items():
            foreach obj: item:
                if is_milk(obj):
                    locate_item(obj, milk)
                elif is_food_turkey(obj):
                    locate_item(obj, turkey)
                elif is_food_egg(obj):
                    locate_item(obj, egg)
                elif is_food_fish(obj):
                    locate_item(obj, fish)
                elif is_food_chicken(obj):
                    locate_item(obj, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_food_turkey') at line 5955, column 22.
Expected one of: 
	* OR
	* MINUS
	* EQUAL
	* __ANON_5
	* __ANON_7
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* FLOORDIV
	* __ANON_2
	* GREATER_EQ
	* LESS_EQ
	* __ANON_6
	* AMPERSAND
	* __ANON_4
	* COMMA
	* SEMICOLON
	* LESSTHAN
	* MORETHAN
	* NOT_EQ
	* RSHIFT
	* AND
	* __ANON_3
	* __ANON_0
	* VBAR
	* __ANON_1
	* _NEWLINE
	* AT
	* PERCENT
	* STAR
	* PLUS
	* __ANON_8
	* IF
	* LSHIFT
	* SLASH

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def locate_food_items():
    # Function to determine if all needed items (milk, turkey, egg, fish, chicken) are located
    symbol items_located = exists m: item : is_milk(m)
    symbol turkey_located = exists t: item : is_food_turkey(t)
    symbol egg_located = exists e: item : is_food_egg(e)
    symbol fish_located = exists f: item : is_food_fish(f)
    symbol chicken_located = exists c: item : is_food_chicken(c)
    return items_located and turkey_located and egg_located and fish_located and chicken_located

behavior locate_item(obj:item, obj_type: string):
    body:
        if not visited(obj):
            observe(obj, "Check if this is a   obj_type")

behavior __goal__():
    body:
        if not locate_food_items():
            foreach obj: item:
                if is_milk(obj):
                    locate_item(obj, milk)
                elif is_food_turkey(obj):
                    locate_item(obj, turkey)
                elif is_food_egg(obj):
                    locate_item(obj, egg)
                elif is_food_fish(obj):
                    locate_item(obj, fish)
                elif is_food_chicken(obj):
                    locate_item(obj, chicken)

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'is_food_turkey') at line 5955, column 22.
Expected one of: 
	* OR
	* MINUS
	* EQUAL
	* __ANON_5
	* __ANON_7
	* DOUBLE_EQUAL
	* CIRCUMFLEX
	* FLOORDIV
	* __ANON_2
	* GREATER_EQ
	* LESS_EQ
	* __ANON_6
	* AMPERSAND
	* __ANON_4
	* COMMA
	* SEMICOLON
	* LESSTHAN
	* MORETHAN
	* NOT_EQ
	* RSHIFT
	* AND
	* __ANON_3
	* __ANON_0
	* VBAR
	* __ANON_1
	* _NEWLINE
	* AT
	* PERCENT
	* STAR
	* PLUS
	* __ANON_8
	* IF
	* LSHIFT
	* SLASH

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#goal_representation
 
def locate_food_items():
    # Function to determine if all needed items (milk, turkey, egg, fish, chicken) are located
    symbol milk_located = exists m: item : is_milk(m)
    symbol turkey_located = exists t: item : is_food_turkey(t)
    symbol egg_located = exists e: item : is_food_egg(e)
    symbol fish_located = exists f: item : is_food_fish(f)
    symbol chicken_located = exists c: item : is_food_chicken(c)
    return milk_located and turkey_located and egg_located and fish_located and chicken_located

behavior locate_item(obj:item, obj_type: string):
    body:
        if not visited(obj):
            observe(obj, "Check if this is a   obj_type")

behavior __goal__():
    body:
        if not locate_food_items():
            foreach obj: item:
                if is_milk(obj):
                    locate_item(obj, milk)
                elif is_food_turkey(obj):
                    locate_item(obj, turkey)
                elif is_food_egg(obj):
                    locate_item(obj, egg)
                elif is_food_fish(obj):
                    locate_item(obj, fish)
                elif is_food_chicken(obj):
                    locate_item(obj, chicken)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_milk_2074_around_fridge_140(milk:item):
    goal: not unknown(milk)
    body:
        assert is_milk(milk)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(milk,fridge_instance)
        else:
            exp(milk,fridge_instance)
    eff:
        unknown[milk]=False
        close[milk,fridge_instance]=True
        close[fridge_instance,milk]=True
    

behavior find_food_turkey_2071_around_fridge_140(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_food_egg_2053_around_fridge_140(food_egg:item):
    goal: not unknown(food_egg)
    body:
        assert is_food_egg(food_egg)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_egg,fridge_instance)
        else:
            exp(food_egg,fridge_instance)
    eff:
        unknown[food_egg]=False
        close[food_egg,fridge_instance]=True
        close[fridge_instance,food_egg]=True
    

behavior find_food_fish_2054_around_fridge_140(food_fish:item):
    goal: not unknown(food_fish)
    body:
        assert is_food_fish(food_fish)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_fish,fridge_instance)
        else:
            exp(food_fish,fridge_instance)
    eff:
        unknown[food_fish]=False
        close[food_fish,fridge_instance]=True
        close[fridge_instance,food_fish]=True
    

behavior find_food_chicken_2050_around_fridge_140(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==140
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
behavior locate_items(milk:item, turkey:item, egg:item, fish:item, chicken:item):
    body:
        if not visited(milk):
            observe(milk, "Locate where the milk is stored")
        if not visited(turkey):
            observe(turkey, "Locate where the turkey is stored")
        if not visited(egg):
            observe(egg, "Locate where the egg is stored")
        if not visited(fish):
            observe(fish, "Locate where the fish is stored")
        if not visited(chicken):
            observe(chicken, "Locate where the chicken is stored")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        locate_items(milk, turkey, egg, fish, chicken)
#goal_representation_end

##############################
From agent.py->reset_goal
behavior locate_items(milk:item, turkey:item, egg:item, fish:item, chicken:item):
    body:
        if not visited(milk):
            observe(milk, "Locate where the milk is stored")
        if not visited(turkey):
            observe(turkey, "Locate where the turkey is stored")
        if not visited(egg):
            observe(egg, "Locate where the egg is stored")
        if not visited(fish):
            observe(fish, "Locate where the fish is stored")
        if not visited(chicken):
            observe(chicken, "Locate where the chicken is stored")

behavior __goal__():
    body:
        bind milk: item where:
            is_milk(milk)

        bind turkey: item where:
            is_food_turkey(turkey)

        bind egg: item where:
            is_food_egg(egg)

        bind fish: item where:
            is_food_fish(fish)

        bind chicken: item where:
            is_food_chicken(chicken)

        locate_items(milk, turkey, egg, fish, chicken)
##############################
From agent.py-> find a plan in act()
walk_executor(fridge_140)switchoff_executor(fridge_140)open_executor(fridge_140)exp(milk_2074, fridge_140)walk_executor(milk_2074)open_executor(milk_2074)obs(milk_2074, Locate where the milk is stored)walk_executor(fridge_140)exp(food_turkey_2071, fridge_140)walk_executor(food_turkey_2071)obs(food_turkey_2071, Locate where the turkey is stored)walk_executor(fridge_140)exp(food_egg_2053, fridge_140)walk_executor(food_egg_2053)obs(food_egg_2053, Locate where the egg is stored)walk_executor(fridge_140)exp(food_fish_2054, fridge_140)walk_executor(food_fish_2054)obs(food_fish_2054, Locate where the fish is stored)walk_executor(fridge_140)exp(food_chicken_2050, fridge_140)walk_executor(food_chicken_2050)obs(food_chicken_2050, Locate where the chicken is stored)
##############################
From agent.py
walk_executor(fridge_140)
Find food_cereal_2048. Find food_cheese_2049. Find food_chicken_2050. Find food_dessert_2051. Find food_donut_2052. Find food_egg_2053. Find food_fish_2054. Find food_food_2055. Find food_fruit_2056. Find food_hamburger_2057. Find food_ice_cream_2058. Find food_jam_2059. Find food_kiwi_2060. Find food_lemon_2061. Find food_noodles_2062. Find food_oatmeal_2063. Find food_peanut_butter_2064. Find food_pizza_2065. Find food_potato_2066. Find food_rice_2067. Find food_salt_2068. Find food_snack_2069. Find food_sugar_2070. Find food_turkey_2071. Find food_vegetable_2072. Find dry_pasta_2073. Find milk_2074. Find sauce_2101. Find food_steak_2042. Find food_apple_2043. Find food_bacon_2044. Find food_banana_2045. Find food_cake_2046. Find food_carrot_2047. Find chair_138. Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Robot is no longer inside home_office_161.
##############################
From agent.py
switchoff_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
open_executor(fridge_140)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. 
##############################
From agent.py
exp(milk_2074, fridge_140)
Find milk_2074. 
##############################
From agent.py-> find a plan in act()
open_executor(milk_2074)obs(milk_2074, Locate where the milk is stored)obs(food_turkey_2071, Locate where the turkey is stored)obs(food_egg_2053, Locate where the egg is stored)obs(food_fish_2054, Locate where the fish is stored)obs(food_chicken_2050, Locate where the chicken is stored)
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_orange_2008_around_cupboard_131(food_orange:item):
    goal: not unknown(food_orange)
    body:
        assert is_food_orange(food_orange)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_orange,cupboard_instance)
        else:
            exp(food_orange,cupboard_instance)
    eff:
        unknown[food_orange]=False
        close[food_orange,cupboard_instance]=True
        close[cupboard_instance,food_orange]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
behavior locate_item(item_type:string, item_variable:item):
    body:
        bind item_variable: item where:
            eval(item_type  (  item_variable  ))

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Bind the specific fridge with ID 140

        observe(fridge, "Locate milk, turkey, egg, fish, chicken inside or around")
        # Observe the fridge to locate milk, turkey, egg, fish, chicken

        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)

        foreach item_type:string in [is_milk, is_food_turkey, is_food_egg, is_food_fish, is_food_chicken]:
            locate_item(item_type, eval(item_type[3:]))

        # Ensures to visit and locate required items


#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('IN', 'in') at line 6078, column 34.
Expected one of: 
	* COLON
	* COMMA
	* LSQB
Previous tokens: [Token('BASIC_TYPENAME', 'string')]

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_food_bread_2016_around_kitchen_counter_132(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

#goal_representation
 
behavior locate_item(item_type:string, item_variable:item):
    body:
        bind item_variable: item where:
            item_type(item_variable)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Bind the specific fridge with ID 140

        observe(fridge, "Locate milk, turkey, egg, fish, chicken inside or around")
        # Observe the fridge to locate milk, turkey, egg, fish, chicken
        
        bind milk: item where:
            is_milk(milk)
        bind turkey: item where:
            is_food_turkey(turkey)
        bind egg: item where:
            is_food_egg(egg)
        bind fish: item where:
            is_food_fish(fish)
        bind chicken: item where:
            is_food_chicken(chicken)

        foreach item_variable: item:
            if is_milk(item_variable) or is_food_turkey(item_variable) or is_food_egg(item_variable) or is_food_fish(item_variable) or is_food_chicken(item_variable):
                locate_item(item_variable, item_variable)
        # Ensures to visit and locate required items

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable item_variable already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
behavior locate_item(item_type:string, item_variable:item):
    body:
        bind item_variable: item where:
            item_type(item_variable)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Bind the specific fridge with ID 140

        observe(fridge, "Locate milk, turkey, egg, fish, chicken inside or around")
        # Observe the fridge to locate milk, turkey, egg, fish, chicken

        foreach item_variable: item:
            if is_milk(item_variable) or is_food_turkey(item_variable) or is_food_egg(item_variable) or is_food_fish(item_variable) or is_food_chicken(item_variable):
                locate_item(is_  get_item_type(item_variable), item_variable)
        # Ensures to visit and locate required items

def get_item_type(item:item):
    if is_milk(item):
        return milk
    elif is_food_turkey(item):
        return food_turkey
    elif is_food_egg(item):
        return food_egg
    elif is_food_fish(item):
        return food_fish
    elif is_food_chicken(item):
        return food_chicken
    return 
#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#exp_behavior_end

#goal_representation
 
def cannot_open_milk(milk:item):
    # Determine whether you can open milk
    symbol cannot_open=not can_open(milk)
    return cannot_open

behavior locate_item(item:item, location:item):
    # Define a behavior to locate an item in a specified location
    body:
        achieve inside(item, location)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select the fridge with ID 140

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select an instance of turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of egg

        bind fish: item where:
            is_food_fish(fish)
        # Select an instance of fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        if cannot_open_milk(milk):
            # If milk_2074 cannot be opened, dont include it in the search
            foreach item: item:
                if (item == turkey or item == egg or item == fish or item == chicken) and not visited(item):
                    observe(item, "Locate the item in the household")
        else:
            foreach item: item:
                if (item == milk or item == turkey or item == egg or item == fish or item == chicken) and not visited(item):
                    observe(item, "Locate the item in the household")

        locate_item(milk, fridge)
        locate_item(turkey, fridge)
        locate_item(egg, fridge)
        locate_item(fish, fridge)
        locate_item(chicken, fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def cannot_open_milk(milk:item):
    # Determine whether you can open milk
    symbol cannot_open=not can_open(milk)
    return cannot_open

behavior locate_item(item:item, location:item):
    # Define a behavior to locate an item in a specified location
    body:
        achieve inside(item, location)

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge] == 140
        # Select the fridge with ID 140

        bind milk: item where:
            is_milk(milk)
        # Select an instance of milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select an instance of turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select an instance of egg

        bind fish: item where:
            is_food_fish(fish)
        # Select an instance of fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select an instance of chicken

        if cannot_open_milk(milk):
            # If milk_2074 cannot be opened, dont include it in the search
            foreach item: item:
                if (item == turkey or item == egg or item == fish or item == chicken) and not visited(item):
                    observe(item, "Locate the item in the household")
        else:
            foreach item: item:
                if (item == milk or item == turkey or item == egg or item == fish or item == chicken) and not visited(item):
                    observe(item, "Locate the item in the household")

        locate_item(milk, fridge)
        locate_item(turkey, fridge)
        locate_item(egg, fridge)
        locate_item(fish, fridge)
        locate_item(chicken, fridge)

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Locate the item in the household)obs(food_egg_2053, Locate the item in the household)obs(food_fish_2054, Locate the item in the household)obs(food_turkey_2071, Locate the item in the household)open_executor(milk_2074)obs(milk_2074, Locate the item in the household)
##############################
From agent.py
obs(food_chicken_2050, Locate the item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate the item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate the item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate the item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

behavior find_food_onion_2026_around_kitchen_counter_132(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==132
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#exp_behavior_end

#goal_representation
 
def is_needed_food_found():
    # Check if all the needed food items have been observed
    symbol has_all_items_visited=exists m: item : is_milk(m) and visited(m) and exists t: item : is_food_turkey(t) and visited(t) and exists e: item : is_food_egg(e) and visited(e) and exists f: item : is_food_fish(f) and visited(f) and exists c: item : is_food_chicken(c) and visited(c)
    return has_all_items_visited

behavior observe_food_items():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item)) and not visited(food_item):
                observe(food_item, "Locate the item in the household")

behavior __goal__():
    body:
        if not is_needed_food_found():
            # If not all needed food items have been observed, locate them
            observe_food_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 't') at line 6077, column 88.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#goal_representation
 
def is_needed_food_found():
    # Check if all the needed food items have been observed
    symbol has_all_items_visited=exists m: item : is_milk(m) and visited(m) and exists t: item : is_food_turkey(t) and visited(t) and exists e: item : is_food_egg(e) and visited(e) and exists f: item : is_food_fish(f) and visited(f) and exists c: item : is_food_chicken(c) and visited(c)
    return has_all_items_visited

behavior observe_food_items():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item)) and not visited(food_item):
                observe(food_item, "Locate the item in the household")

behavior __goal__():
    body:
        if not is_needed_food_found():
            # If not all needed food items have been observed, locate them
            observe_food_items()

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 't') at line 6059, column 88.
Expected one of: 
	* SEMICOLON
	* _NEWLINE

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_food_onion_2026_around_kitchen_counter_129(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_onion,kitchen_counter_instance)
        else:
            exp(food_onion,kitchen_counter_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_onion]=True
    

#goal_representation
 
def is_needed_food_found():
    # Check if all the needed food items have been observed
    symbol has_all_items_visited = exists m: item : is_milk(m) and visited(m) and exists t: item : is_food_turkey(t) and visited(t) and exists e: item : is_food_egg(e) and visited(e) and exists f: item : is_food_fish(f) and visited(f) and exists c: item : is_food_chicken(c) and visited(c)
    return has_all_items_visited

behavior observe_food_items():
    body:
        foreach food_item: item:
            if (is_milk(food_item) or is_food_turkey(food_item) or is_food_egg(food_item) or is_food_fish(food_item) or is_food_chicken(food_item)) and not visited(food_item):
                observe(food_item, "Locate the item in the household")

behavior __goal__():
    body:
        if not is_needed_food_found():
            # If not all needed food items have been observed, locate them
            observe_food_items()

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#exp_behavior_end

#goal_representation
 
def has_food_in_fridge(fridge:item):
    # Function to check if there are specific food items in the fridge
    symbol has_food=exists o: item : (is_food_milk(o) or is_food_chicken(o) or is_food_egg(o) or is_food_fish(o) or is_food_turkey(o)) and inside(o, fridge)
    return has_food

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_food_in_fridge(fridge):
            # Check if the fridge contains the desired food items
            bind fridge: item where:
                is_fridge(fridge) and has_food_in_fridge(fridge) 
            # Select fridge that has the food items
            achieve close_char(char, fridge) 
            # Move the character closer to the fridge with the food items

        else: 
           # If the fridge with food items is not found in prior knowledge, you may check around the fridge
            foreach item: item:
                if (is_food_milk(item) or is_food_chicken(item) or is_food_egg(item) or is_food_fish(item) or is_food_turkey(item)) and not visited(item):
                    # Check all unvisited specific food items
                    observe(item,"Locate the item in the household")
                    # Observe the location of each specific food item if its location is unknown


#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "function_definition":

'Function is_food_milk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_oil_2005_around_cupboard_131(oil:item):
    goal: not unknown(oil)
    body:
        assert is_oil(oil)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(oil,cupboard_instance)
        else:
            exp(oil,cupboard_instance)
    eff:
        unknown[oil]=False
        close[oil,cupboard_instance]=True
        close[cupboard_instance,oil]=True
    

behavior find_blender_2032_around_kitchen_counter_129(blender:item):
    goal: not unknown(blender)
    body:
        assert is_blender(blender)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(blender,kitchen_counter_instance)
        else:
            exp(blender,kitchen_counter_instance)
    eff:
        unknown[blender]=False
        close[blender,kitchen_counter_instance]=True
        close[kitchen_counter_instance,blender]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
def has_food_in_fridge(fridge:item):
    # Function to check if there are specific food items in the fridge
    symbol has_food=exists o: item : is_food(o) and (is_food_chicken(o) or is_food_egg(o) or is_food_fish(o) or is_food_turkey(o) or is_milk(o)) and inside(o, fridge)
    return has_food

behavior __goal__():
    body:
        if exists fridge: item : is_fridge(fridge) and has_food_in_fridge(fridge):
            # Check if the fridge contains the desired food items
            bind fridge: item where:
                is_fridge(fridge) and has_food_in_fridge(fridge)
            # Select fridge that has the food items
            achieve close_char(char, fridge)
            # Move the character closer to the fridge with the food items
        else:
            # If the fridge with food items is not found in prior knowledge, you may check around for these food items
            foreach item: item:
                if is_food(item) and (is_food_chicken(item) or is_food_egg(item) or is_food_fish(item) or is_food_turkey(item) or is_milk(item)) and not visited(item):
                    # Check all unvisited specific food items
                    observe(item, "Locate the item in the household")
                    # Observe the location of each specific food item if its location is unknown

#goal_representation_end

##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. locate the milk, turkey, egg, fish, and chicken in the household." ?
Answer: Locate the milk, turkey, egg, fish, and chicken in the household.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_food_onion_2026_around_cupboard_131(food_onion:item):
    goal: not unknown(food_onion)
    body:
        assert is_food_onion(food_onion)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_onion,cupboard_instance)
        else:
            exp(food_onion,cupboard_instance)
    eff:
        unknown[food_onion]=False
        close[food_onion,cupboard_instance]=True
        close[cupboard_instance,food_onion]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_food_found():
    # Check if the food items have been visited
    symbol food_found=exists item: item : (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and visited(item)
    return food_found

behavior __goal__():
    body:
        if not is_food_found():
            # If no food items are found yet, search for unvisited ones
            foreach item: item:
                if (is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item)) and not visited(item):
                    observe(item, "Locate the item in the household")

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_clothes_scarf_2079_around_desk_261(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(clothes_scarf,desk_instance)
        else:
            exp(clothes_scarf,desk_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,desk_instance]=True
        close[desk_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
behavior observe_items_around_fridge():
    body:
        foreach food: item:
            if (is_food_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                observe(food, "Locate the item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        achieve close_char(char, fridge)
        # Ensure the character is close to the fridge to locate items effectively

        if not visited(milk_2074):
            observe(fridge, "Find milk_2074 around fridge_140")

        observe_items_around_fridge()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function is_food_milk not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

#goal_representation
 
behavior observe_items_around_fridge():
    body:
        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                observe(food, "Locate the item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        achieve close_char(char, fridge)
        # Ensure the character is close to the fridge to locate items effectively

        if not visited(milk_2074):
            observe(fridge, "Find milk_2074 around fridge_140")

        observe_items_around_fridge()

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: milk_2074; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_clothes_scarf_2079_around_chair_138(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind chair_instance:item where:
            is_chair(chair_instance) and id[chair_instance]==138
        achieve close_char(char,chair_instance)
        if can_open(chair_instance):
            achieve_once open(chair_instance)
            exp(clothes_scarf,chair_instance)
        else:
            exp(clothes_scarf,chair_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,chair_instance]=True
        close[chair_instance,clothes_scarf]=True
    

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

#goal_representation
 
behavior observe_items_around_fridge(fridge: item):
    body:
        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                observe(food, "Locate the item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        achieve close_char(char, fridge)
        # Ensure the character is close to the fridge to locate items effectively

        bind milk_2074: item where:
            is_milk(milk_2074)

        if not visited(milk_2074):
            observe(fridge, "Find milk_2074 around fridge_140")

        observe_items_around_fridge(fridge)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior observe_items_around_fridge(fridge: item):
    body:
        foreach food: item:
            if (is_milk(food) or is_food_turkey(food) or is_food_egg(food) or is_food_fish(food) or is_food_chicken(food)) and not visited(food):
                observe(food, "Locate the item in the household")

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge)

        achieve close_char(char, fridge)
        # Ensure the character is close to the fridge to locate items effectively

        bind milk_2074: item where:
            is_milk(milk_2074)

        if not visited(milk_2074):
            observe(fridge, "Find milk_2074 around fridge_140")

        observe_items_around_fridge(fridge)

##############################
From agent.py-> find a plan in act()
obs(fridge_140, Find milk_2074 around fridge_140)obs(food_chicken_2050, Locate the item in the household)obs(food_egg_2053, Locate the item in the household)obs(food_fish_2054, Locate the item in the household)obs(food_turkey_2071, Locate the item in the household)open_executor(milk_2074)obs(milk_2074, Locate the item in the household)
##############################
From agent.py
obs(fridge_140, Find milk_2074 around fridge_140)
Get this information:  food_chicken_2050 is inside fridge_140. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. dry_pasta_2073 is inside fridge_140. food_banana_2045 is inside fridge_140. food_cereal_2048 is inside fridge_140. food_rice_2067 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. fridge_140 is on floor_22. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. fridge_140 is inside dining_room_1. sauce_2101 is inside fridge_140. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_snack_2069 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. food_bacon_2044 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. milk_2074 is inside fridge_140. food_peanut_butter_2064 is inside fridge_140. food_food_2055 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN. fridge_140 is OFF.
##############################
From agent.py
obs(food_chicken_2050, Locate the item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate the item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate the item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate the item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

behavior find_clothes_scarf_2079_around_nightstand_262(clothes_scarf:item):
    goal: not unknown(clothes_scarf)
    body:
        assert is_clothes_scarf(clothes_scarf)
        bind nightstand_instance:item where:
            is_nightstand(nightstand_instance) and id[nightstand_instance]==262
        achieve close_char(char,nightstand_instance)
        if can_open(nightstand_instance):
            achieve_once open(nightstand_instance)
            exp(clothes_scarf,nightstand_instance)
        else:
            exp(clothes_scarf,nightstand_instance)
    eff:
        unknown[clothes_scarf]=False
        close[clothes_scarf,nightstand_instance]=True
        close[nightstand_instance,clothes_scarf]=True
    

#exp_behavior_end

#goal_representation
 
def is_item_located(item: item):
    # Determine if the item has been located in the household
    return visited(item)

behavior locate_item(item: item):
    body:
        observe(item, "Locate the item in the household")  # Observe the household to locate the item

behavior __goal__():
    body:
        if not is_item_located(item):
            foreach item: item:
                if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
                    # Iterate through each food category item that hasnt been visited
                    observe(item, "Locate the item in the household")

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: item; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

#goal_representation
 
def is_item_located(item: item):
    # Determine if the item has been located in the household
    return visited(item)

behavior locate_item(item: item):
    body:
        observe(item, "Locate the item in the household")  # Observe the household to locate the item

behavior __goal__():
    body:
        foreach item: item:
            if not is_item_located(item):
                if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
                    # Iterate through each food category item that hasnt been visited
                    observe(item, "Locate the item in the household")

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_item_located(item: item):
    # Determine if the item has been located in the household
    return visited(item)

behavior locate_item(item: item):
    body:
        observe(item, "Locate the item in the household")  # Observe the household to locate the item

behavior __goal__():
    body:
        foreach item: item:
            if not is_item_located(item):
                if is_milk(item) or is_food_turkey(item) or is_food_egg(item) or is_food_fish(item) or is_food_chicken(item):
                    # Iterate through each food category item that hasnt been visited
                    observe(item, "Locate the item in the household")

##############################
From agent.py-> find a plan in act()
obs(food_chicken_2050, Locate the item in the household)obs(food_egg_2053, Locate the item in the household)obs(food_fish_2054, Locate the item in the household)obs(food_turkey_2071, Locate the item in the household)open_executor(milk_2074)obs(milk_2074, Locate the item in the household)
##############################
From agent.py
obs(food_chicken_2050, Locate the item in the household)
Get this information:  food_chicken_2050 is inside dining_room_1. food_chicken_2050 is inside fridge_140. food_chicken_2050 is close to fridge_140. food_chicken_2050 is close to character_219. food_chicken_2050 is CLEAN.
##############################
From agent.py
obs(food_egg_2053, Locate the item in the household)
Get this information:  food_egg_2053 is close to fridge_140. food_egg_2053 is close to character_219. food_egg_2053 is inside dining_room_1. food_egg_2053 is inside fridge_140. food_egg_2053 is CLEAN.
##############################
From agent.py
obs(food_fish_2054, Locate the item in the household)
Get this information:  food_fish_2054 is close to fridge_140. food_fish_2054 is close to character_219. food_fish_2054 is inside dining_room_1. food_fish_2054 is inside fridge_140. food_fish_2054 is CLEAN.
##############################
From agent.py
obs(food_turkey_2071, Locate the item in the household)
Get this information:  food_turkey_2071 is inside dining_room_1. food_turkey_2071 is inside fridge_140. food_turkey_2071 is close to fridge_140. food_turkey_2071 is close to character_219. food_turkey_2071 is CLEAN.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_butter_2018_around_cupboard_131(food_butter:item):
    goal: not unknown(food_butter)
    body:
        assert is_food_butter(food_butter)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_butter,cupboard_instance)
        else:
            exp(food_butter,cupboard_instance)
    eff:
        unknown[food_butter]=False
        close[food_butter,cupboard_instance]=True
        close[cupboard_instance,food_butter]=True
    

behavior find_soap_2038_around_bathroom_cabinet_305(soap:item):
    goal: not unknown(soap)
    body:
        assert is_soap(soap)
        bind bathroom_cabinet_instance:item where:
            is_bathroom_cabinet(bathroom_cabinet_instance) and id[bathroom_cabinet_instance]==305
        achieve close_char(char,bathroom_cabinet_instance)
        if can_open(bathroom_cabinet_instance):
            achieve_once open(bathroom_cabinet_instance)
            exp(soap,bathroom_cabinet_instance)
        else:
            exp(soap,bathroom_cabinet_instance)
    eff:
        unknown[soap]=False
        close[soap,bathroom_cabinet_instance]=True
        close[bathroom_cabinet_instance,soap]=True
    

behavior find_bowl_2095_around_sink_133(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(bowl,sink_instance)
        else:
            exp(bowl,sink_instance)
    eff:
        unknown[bowl]=False
        close[bowl,sink_instance]=True
        close[sink_instance,bowl]=True
    

behavior find_bowl_2096_around_cupboard_131(bowl:item):
    goal: not unknown(bowl)
    body:
        assert is_bowl(bowl)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(bowl,cupboard_instance)
        else:
            exp(bowl,cupboard_instance)
    eff:
        unknown[bowl]=False
        close[bowl,cupboard_instance]=True
        close[cupboard_instance,bowl]=True
    

behavior find_food_bread_2016_around_cupboard_131(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==131
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(food_bread,cupboard_instance)
        else:
            exp(food_bread,cupboard_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,cupboard_instance]=True
        close[cupboard_instance,food_bread]=True
    

#exp_behavior_end

#goal_representation
 
def is_fridge_open(fridge:item):
    # Check if the fridge is open
    return open(fridge)

behavior find_and_locate_food_items(fridge:item):
    body:
        if not is_fridge_open(fridge):
            achieve_once open(fridge)
            # Open the fridge to locate items

        observe(fridge, "Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge")
        # Look inside the fridge to locate the specified items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140
        # Select fridge with ID 140

        find_and_locate_food_items(fridge)
        # Execute the behavior to locate all specified food items in the fridge

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
def is_fridge_open(fridge:item):
    # Check if the fridge is open
    return open(fridge)

behavior find_and_locate_food_items(fridge:item):
    body:
        if not is_fridge_open(fridge):
            achieve_once open(fridge)
            # Open the fridge to locate items

        observe(fridge, "Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge")
        # Look inside the fridge to locate the specified items

behavior __goal__():
    body:
        bind fridge: item where:
            is_fridge(fridge) and id[fridge]==140
        # Select fridge with ID 140

        find_and_locate_food_items(fridge)
        # Execute the behavior to locate all specified food items in the fridge

##############################
From agent.py-> find a plan in act()
obs(fridge_140, Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge)
##############################
From agent.py
obs(fridge_140, Locate milk_2074, food_chicken_2050, food_egg_2053, food_fish_2054, and food_turkey_2071 in the fridge)
Get this information:  food_chicken_2050 is inside fridge_140. food_steak_2042 is inside fridge_140. food_egg_2053 is inside fridge_140. dry_pasta_2073 is inside fridge_140. food_banana_2045 is inside fridge_140. food_cereal_2048 is inside fridge_140. food_rice_2067 is inside fridge_140. food_hamburger_2057 is inside fridge_140. food_salt_2068 is inside fridge_140. food_jam_2059 is inside fridge_140. food_sugar_2070 is inside fridge_140. fridge_140 is close to food_cereal_2048. fridge_140 is close to food_cheese_2049. fridge_140 is close to food_chicken_2050. fridge_140 is close to food_dessert_2051. fridge_140 is close to food_donut_2052. fridge_140 is close to food_egg_2053. fridge_140 is close to food_fish_2054. fridge_140 is close to food_food_2055. fridge_140 is close to food_fruit_2056. fridge_140 is close to food_hamburger_2057. fridge_140 is close to food_ice_cream_2058. fridge_140 is close to food_jam_2059. fridge_140 is close to food_kiwi_2060. fridge_140 is close to food_lemon_2061. fridge_140 is close to food_noodles_2062. fridge_140 is close to food_oatmeal_2063. fridge_140 is close to food_peanut_butter_2064. fridge_140 is close to food_pizza_2065. fridge_140 is close to food_potato_2066. fridge_140 is close to food_rice_2067. fridge_140 is close to food_salt_2068. fridge_140 is close to food_snack_2069. fridge_140 is close to food_sugar_2070. fridge_140 is close to food_turkey_2071. fridge_140 is close to food_vegetable_2072. fridge_140 is close to dry_pasta_2073. fridge_140 is close to milk_2074. fridge_140 is close to cupboard_131. fridge_140 is close to floor_22. fridge_140 is close to ceiling_34. fridge_140 is close to wall_7. fridge_140 is close to wall_8. fridge_140 is close to kitchen_counter_129. fridge_140 is close to sauce_2101. fridge_140 is close to chair_138. fridge_140 is close to toaster_144. fridge_140 is close to food_steak_2042. fridge_140 is close to food_apple_2043. fridge_140 is close to food_bacon_2044. fridge_140 is close to food_banana_2045. fridge_140 is close to food_cake_2046. fridge_140 is close to food_carrot_2047. fridge_140 is close to character_219. fridge_140 is on floor_22. food_apple_2043 is inside fridge_140. food_dessert_2051 is inside fridge_140. food_noodles_2062 is inside fridge_140. food_donut_2052 is inside fridge_140. food_turkey_2071 is inside fridge_140. fridge_140 is inside dining_room_1. sauce_2101 is inside fridge_140. food_fish_2054 is inside fridge_140. food_pizza_2065 is inside fridge_140. food_cake_2046 is inside fridge_140. food_carrot_2047 is inside fridge_140. food_potato_2066 is inside fridge_140. food_cheese_2049 is inside fridge_140. food_kiwi_2060 is inside fridge_140. food_snack_2069 is inside fridge_140. food_lemon_2061 is inside fridge_140. food_vegetable_2072 is inside fridge_140. food_bacon_2044 is inside fridge_140. food_oatmeal_2063 is inside fridge_140. milk_2074 is inside fridge_140. food_peanut_butter_2064 is inside fridge_140. food_food_2055 is inside fridge_140. food_fruit_2056 is inside fridge_140. food_ice_cream_2058 is inside fridge_140. fridge_140 is PLUGGED_IN. fridge_140 is CLEAN. fridge_140 is OPEN. fridge_140 is OFF.
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_bread_2016_around_kitchen_counter_129(food_bread:item):
    goal: not unknown(food_bread)
    body:
        assert is_food_bread(food_bread)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==129
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(food_bread,kitchen_counter_instance)
        else:
            exp(food_bread,kitchen_counter_instance)
    eff:
        unknown[food_bread]=False
        close[food_bread,kitchen_counter_instance]=True
        close[kitchen_counter_instance,food_bread]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

behavior find_fork_2104_around_sink_133(fork:item):
    goal: not unknown(fork)
    body:
        assert is_fork(fork)
        bind sink_instance:item where:
            is_sink(sink_instance) and id[sink_instance]==133
        achieve close_char(char,sink_instance)
        if can_open(sink_instance):
            achieve_once open(sink_instance)
            exp(fork,sink_instance)
        else:
            exp(fork,sink_instance)
    eff:
        unknown[fork]=False
        close[fork,sink_instance]=True
        close[sink_instance,fork]=True
    

behavior find_pot_2093_around_stove_2090(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_fryingpan_2107_around_stove_2090(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2090
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(fryingpan,stove_instance)
        else:
            exp(fryingpan,stove_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,stove_instance]=True
        close[stove_instance,fryingpan]=True
    

#exp_behavior_end

#goal_representation
 
behavior bring_items_to_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room
        
        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bring_items_to_table(milk, dining_room_table)
        bring_items_to_table(turkey, dining_room_table)
        bring_items_to_table(egg, dining_room_table)
        bring_items_to_table(fish, dining_room_table)
        bring_items_to_table(chicken, dining_room_table)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: dining_room; available variables: [Variable<dining_room_table: item>].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_chair_263_around_desk_261(chair:item):
    goal: not unknown(chair)
    body:
        assert is_chair(chair)
        bind desk_instance:item where:
            is_desk(desk_instance) and id[desk_instance]==261
        achieve close_char(char,desk_instance)
        if can_open(desk_instance):
            achieve_once open(desk_instance)
            exp(chair,desk_instance)
        else:
            exp(chair,desk_instance)
    eff:
        unknown[chair]=False
        close[chair,desk_instance]=True
        close[desk_instance,chair]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bring_items_to_table(milk, dining_room_table)
        bring_items_to_table(turkey, dining_room_table)
        bring_items_to_table(egg, dining_room_table)
        bring_items_to_table(fish, dining_room_table)
        bring_items_to_table(chicken, dining_room_table)

behavior bring_items_to_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place each item on the table

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

'Function bring_items_to_table not found. Note that recursive function calls are not supported in the current version.'
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_knife_2036_around_knifeblock_52(knife:item):
    goal: not unknown(knife)
    body:
        assert is_knife(knife)
        bind knifeblock_instance:item where:
            is_knifeblock(knifeblock_instance) and id[knifeblock_instance]==52
        achieve close_char(char,knifeblock_instance)
        if can_open(knifeblock_instance):
            achieve_once open(knifeblock_instance)
            exp(knife,knifeblock_instance)
        else:
            exp(knife,knifeblock_instance)
    eff:
        unknown[knife]=False
        close[knife,knifeblock_instance]=True
        close[knifeblock_instance,knife]=True
    

behavior find_plate_2105_around_table_127(plate:item):
    goal: not unknown(plate)
    body:
        assert is_plate(plate)
        bind table_instance:item where:
            is_table(table_instance) and id[table_instance]==127
        achieve close_char(char,table_instance)
        if can_open(table_instance):
            achieve_once open(table_instance)
            exp(plate,table_instance)
        else:
            exp(plate,table_instance)
    eff:
        unknown[plate]=False
        close[plate,table_instance]=True
        close[table_instance,plate]=True
    

#goal_representation
 
behavior bring_item_to_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bring_item_to_table(milk, dining_room_table)
        bring_item_to_table(turkey, dining_room_table)
        bring_item_to_table(egg, dining_room_table)
        bring_item_to_table(fish, dining_room_table)
        bring_item_to_table(chicken, dining_room_table)

#goal_representation_end

##############################
From agent.py->reset_sub_goal
 
behavior bring_item_to_table(item:item, table:item):
    body:
        achieve on(item, table)
        # Place each item on the table

behavior __goal__():
    body:
        bind dining_room: item where:
            is_dining_room(dining_room)
        # Bind the dining room

        bind dining_room_table: item where:
            is_table(dining_room_table) and inside(dining_room_table, dining_room)
        # Select the table in the dining room

        bind milk: item where:
            is_milk(milk)
        # Select the milk

        bind turkey: item where:
            is_food_turkey(turkey)
        # Select the turkey

        bind egg: item where:
            is_food_egg(egg)
        # Select the egg

        bind fish: item where:
            is_food_fish(fish)
        # Select the fish

        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken

        bring_item_to_table(milk, dining_room_table)
        bring_item_to_table(turkey, dining_room_table)
        bring_item_to_table(egg, dining_room_table)
        bring_item_to_table(fish, dining_room_table)
        bring_item_to_table(chicken, dining_room_table)

##############################
From agent.py-> find a plan in act()
grab_executor(milk_2074)walk_executor(table_123)put_executor(milk_2074, table_123)walk_executor(food_turkey_2071)grab_executor(food_turkey_2071)walk_executor(table_123)put_executor(food_turkey_2071, table_123)walk_executor(food_egg_2053)grab_executor(food_egg_2053)walk_executor(table_123)put_executor(food_egg_2053, table_123)walk_executor(food_fish_2054)grab_executor(food_fish_2054)walk_executor(table_123)put_executor(food_fish_2054, table_123)walk_executor(food_chicken_2050)grab_executor(food_chicken_2050)walk_executor(table_123)put_executor(food_chicken_2050, table_123)
##############################
From agent.py
grab_executor(milk_2074)
Robot is inside dining_room_1. Robot is close food_cereal_2048. Robot is close food_cheese_2049. Robot is close food_chicken_2050. Robot is close food_dessert_2051. Robot is close food_donut_2052. Robot is close food_egg_2053. Robot is close food_fish_2054. Robot is close food_food_2055. Robot is close food_fruit_2056. Robot is close food_hamburger_2057. Robot is close food_ice_cream_2058. Robot is close food_jam_2059. Robot is close fridge_140. Robot is close food_kiwi_2060. Robot is close food_lemon_2061. Robot is close food_noodles_2062. Robot is close food_oatmeal_2063. Robot is close food_peanut_butter_2064. Robot is close food_pizza_2065. Robot is close food_potato_2066. Robot is close food_rice_2067. Robot is close food_salt_2068. Robot is close food_snack_2069. Robot is close food_sugar_2070. Robot is close food_turkey_2071. Robot is close food_vegetable_2072. Robot is close dry_pasta_2073. Robot is close milk_2074. Robot is close floor_22. Robot is close sauce_2101. Robot is close food_steak_2042. Robot is close food_apple_2043. Robot is close food_bacon_2044. Robot is close food_banana_2045. Robot is close food_cake_2046. Robot is close food_carrot_2047. Grabbing milk_2074 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Find mat_114. Find drawing_118. Find laptop_2015. Find fork_2103. Find bowl_2095. Find cup_2087. Find cup_2088. Find mouse_2003. Find homework_2011. Find shoes_2001. Robot is inside dining_room_1. Robot is close milk_2074. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close food_cereal_2048.Robot is no longer close food_cheese_2049.Robot is no longer close food_chicken_2050.Robot is no longer close food_dessert_2051.Robot is no longer close food_donut_2052.Robot is no longer close food_egg_2053.Robot is no longer close food_fish_2054.Robot is no longer close food_food_2055.Robot is no longer close food_fruit_2056.Robot is no longer close food_hamburger_2057.Robot is no longer close food_ice_cream_2058.Robot is no longer close food_jam_2059.Robot is no longer close food_kiwi_2060.Robot is no longer close food_lemon_2061.Robot is no longer close food_noodles_2062.Robot is no longer close food_oatmeal_2063.Robot is no longer close food_peanut_butter_2064.Robot is no longer close food_pizza_2065.Robot is no longer close food_potato_2066.Robot is no longer close food_rice_2067.Robot is no longer close food_salt_2068.Robot is no longer close food_snack_2069.Robot is no longer close food_sugar_2070.Robot is no longer close food_turkey_2071.Robot is no longer close food_vegetable_2072.Robot is no longer close dry_pasta_2073.Robot is no longer close floor_22.Robot is no longer close sauce_2101.Robot is no longer close fridge_140.Robot is no longer close food_steak_2042.Robot is no longer close food_apple_2043.Robot is no longer close food_bacon_2044.Robot is no longer close food_banana_2045.Robot is no longer close food_cake_2046.Robot is no longer close food_carrot_2047.
##############################
From agent.py
put_executor(milk_2074, table_123)
Robot is inside dining_room_1. Robot is close milk_2074. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. milk_2074 released by right hand. 
##############################
From agent.py
walk_executor(food_turkey_2071)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_turkey_2071. Robot is no longer close floor_17.Robot is no longer close milk_2074.Robot is no longer close table_123.Robot is no longer close mat_114.
##############################
From agent.py
grab_executor(food_turkey_2071)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_turkey_2071. Grabbing food_turkey_2071 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_turkey_2071. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_turkey_2071, table_123)
Robot is inside dining_room_1. Robot is close food_turkey_2071. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_turkey_2071 released by right hand. 
##############################
From agent.py
walk_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_turkey_2071.
##############################
From agent.py
grab_executor(food_egg_2053)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_egg_2053. Grabbing food_egg_2053 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_egg_2053, table_123)
Robot is inside dining_room_1. Robot is close food_egg_2053. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_egg_2053 released by right hand. 
##############################
From agent.py
walk_executor(food_fish_2054)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_fish_2054. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_egg_2053.
##############################
From agent.py
grab_executor(food_fish_2054)
Robot is inside dining_room_1. Robot is close fridge_140. Robot is close food_fish_2054. Grabbing food_fish_2054 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_fish_2054. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_fish_2054, table_123)
Robot is inside dining_room_1. Robot is close food_fish_2054. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_fish_2054 released by right hand. 
##############################
From agent.py
walk_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Robot is no longer close floor_17.Robot is no longer close mat_114.Robot is no longer close table_123.Robot is no longer close food_fish_2054.
##############################
From agent.py
grab_executor(food_chicken_2050)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close fridge_140. Grabbing food_chicken_2050 by right hand. 
##############################
From agent.py
walk_executor(table_123)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. Robot is no longer close fridge_140.
##############################
From agent.py
put_executor(food_chicken_2050, table_123)
Robot is inside dining_room_1. Robot is close food_chicken_2050. Robot is close floor_17. Robot is close mat_114. Robot is close table_123. food_chicken_2050 released by right hand. 
##############################
