From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken.', '2. Put the cooked chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_on_stove(pot:item):
    # Determine if the pot is on the stove
    symbol on_stove=exists stove:item: is_stove(stove) and on(pot, stove)
    return on_stove

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        assert is_on_stove(pot)
        # Ensure the pot is on the stove

        if is_food_pizza(pasta):
            # Correct the binding if the pasta is incorrectly identified
            bind pasta: item where:
                is_dry_pasta(pasta) and inside(pasta, pot)

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        assert is_on_stove(fryingpan)
        # Ensure the frying pan is on the stove

        achieve is_food_chicken(chicken)
        # Identify the chicken

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(chicken, fryingpan)
        # Ensure the chicken is inside the frying pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot
        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            # Select a frying pan

        bind pasta: item where:
            is_dry_pasta(pasta) and inside(pasta, pot)
            # Select the appropriate pasta in the pot

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fryingpan)
            # Select the appropriate chicken in the frying pan

        bind stove: item where:
            is_stove(stove)
            # Select a stove

        cook_pasta(pasta, pot, stove)
        # Cook the pasta
        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable pasta already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
def is_on_stove(pot:item):
    # Determine if the pot is on the stove
    symbol on_stove=exists stove:item: is_stove(stove) and on(pot, stove)
    return on_stove

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        assert is_on_stove(pot)
        # Ensure the pot is on the stove

        if is_food_pizza(pasta):
            # Correct the binding if the pasta is incorrectly identified
            bind pasta: item where:
                is_dry_pasta(pasta) and inside(pasta, pot)

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        assert is_on_stove(fryingpan)
        # Ensure the frying pan is on the stove

        achieve is_food_chicken(chicken)
        # Identify the chicken

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(chicken, fryingpan)
        # Ensure the chicken is inside the frying pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            # Select a frying pan

        bind pasta_item: item where:
            is_dry_pasta(pasta_item) and inside(pasta_item, pot)
            # Select the appropriate pasta in the pot

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fryingpan)
            # Select the appropriate chicken in the frying pan

        bind stove: item where:
            is_stove(stove)
            # Select a stove

        cook_pasta(pasta_item, pot, stove)
        # Cook the pasta
        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable pasta already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_fryingpan_2154_around_cupboard_118(fryingpan:item):
    goal: not unknown(fryingpan)
    body:
        assert is_fryingpan(fryingpan)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(fryingpan,cupboard_instance)
        else:
            exp(fryingpan,cupboard_instance)
    eff:
        unknown[fryingpan]=False
        close[fryingpan,cupboard_instance]=True
        close[cupboard_instance,fryingpan]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#goal_representation
 
def is_on_stove(pot:item):
    # Determine if the pot is on the stove
    symbol on_stove=exists stove:item: is_stove(stove) and on(pot, stove)
    return on_stove

behavior cook_pasta(pasta:item, pot:item, stove:item):
    body:
        assert is_on_stove(pot)
        # Ensure the pot is on the stove

        if is_food_pizza(pasta):
            # Correct the binding if the pasta is incorrectly identified
            bind pasta: item where:
                is_dry_pasta(pasta) and inside(pasta, pot)

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(pasta, pot)
        # Ensure the pasta is inside the pot

behavior cook_chicken(chicken:item, fryingpan:item, stove:item):
    body:
        assert is_on_stove(fryingpan)
        # Ensure the frying pan is on the stove

        achieve is_food_chicken(chicken)
        # Identify the chicken

        achieve is_on(stove)
        # Turn on the stove to start cooking
        achieve inside(chicken, fryingpan)
        # Ensure the chicken is inside the frying pan

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot)
            # Select a pot

        bind fryingpan: item where:
            is_fryingpan(fryingpan)
            # Select a frying pan

        bind pasta_item: item where:
            is_dry_pasta(pasta_item) and inside(pasta_item, pot)
            # Select the appropriate pasta in the pot

        bind chicken: item where:
            is_food_chicken(chicken) and inside(chicken, fryingpan)
            # Select the appropriate chicken in the frying pan

        bind stove: item where:
            is_stove(stove)
            # Select a stove

        cook_pasta(pasta_item, pot, stove)
        # Cook the pasta
        cook_chicken(chicken, fryingpan, stove)
        # Cook the chicken

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2046_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2114_around_cupboard_118(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2138_around_cupboard_118(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==118
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(pot,cupboard_instance)
        else:
            exp(pot,cupboard_instance)
    eff:
        unknown[pot]=False
        close[pot,cupboard_instance]=True
        close[cupboard_instance,pot]=True
    

#exp_behavior_end

#goal_representation
behavior cook_pasta_and_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        
        achieve inside(chicken, pot)
        # Put the chicken inside the pot with the pasta
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove to cook the pasta and chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        cook_pasta_and_chicken(pasta, chicken, pot, stove)
        # Call the behavior to cook pasta and chicken in the pot on the stove
#goal_representation_end

##############################
From agent.py->reset_goal
behavior cook_pasta_and_chicken(pasta:item, chicken:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Put the pasta inside the pot
        
        achieve inside(chicken, pot)
        # Put the chicken inside the pot with the pasta
        
        achieve on(pot, stove)
        # Place the pot on the stove
        
        achieve is_on(stove)
        # Turn on the stove to cook the pasta and chicken

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta
        
        bind chicken: item where:
            is_food_chicken(chicken)
        # Select the chicken
        
        bind pot: item where:
            is_pot(pot)
        # Select a pot for cooking
        
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        cook_pasta_and_chicken(pasta, chicken, pot, stove)
        # Call the behavior to cook pasta and chicken in the pot on the stove
##############################
From agent.py-> find a plan in act()
walk_executor(cupboard_118)open_executor(cupboard_118)exp(pot_2138, cupboard_118)exp(dry_pasta_2114, cupboard_118)walk_executor(pot_2138)open_executor(pot_2138)walk_executor(dry_pasta_2114)grab_executor(dry_pasta_2114)walk_executor(pot_2138)putin_executor(dry_pasta_2114, pot_2138)walk_executor(fridge_126)switchoff_executor(fridge_126)open_executor(fridge_126)exp(food_chicken_2089, fridge_126)walk_executor(food_chicken_2089)grab_executor(food_chicken_2089)walk_executor(pot_2138)putin_executor(food_chicken_2089, pot_2138)grab_executor(pot_2138)walk_executor(stove_2135)put_executor(pot_2138, stove_2135)switchon_executor(stove_2135)
##############################
From agent.py
walk_executor(cupboard_118)
Find tea_2066. Find knife_2037. Find food_peanut_butter_2077. Find tray_128. Find pot_78. Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
open_executor(cupboard_118)
Robot is inside dining_room_41. Robot is close wall_68. Robot is close tea_2066. Robot is close knife_2037. Robot is close cupboard_118. Robot is close food_peanut_butter_2077. 
##############################
From agent.py
exp(pot_2138, cupboard_118)
Fail to find pot_2138 around cupboard_118. 
##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Cook the pasta and chicken together.', '2. Put the chicken pasta on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_turkey_2112_around_fridge_126(food_turkey:item):
    goal: not unknown(food_turkey)
    body:
        assert is_food_turkey(food_turkey)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_turkey,fridge_instance)
        else:
            exp(food_turkey,fridge_instance)
    eff:
        unknown[food_turkey]=False
        close[food_turkey,fridge_instance]=True
        close[fridge_instance,food_turkey]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def can_use_pot_for_cooking(pot:item):
    # Determine if a pot is available for cooking
    return not dirty(pot)

behavior cook_pasta_and_chicken(pasta:item, chicken:item, pot:item):
    body:
        if can_use_pot_for_cooking(pot):
            achieve has_water(pot)
            achieve is_on(pot)
            # Cook pasta and chicken together in the pot

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        bind chicken: item where:
            is_food_chicken(chicken)
        bind pot: item where:
            is_pot(pot) and not visited(pot)
        # Select a pot that is available and not visited yet
        
        observe(pot, "Check pot for cooking suitability")
        cook_pasta_and_chicken(pasta, chicken, pot)


#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2021_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

#exp_behavior_end

#goal_representation

def is_pasta_in_pot(pasta:item, pot:item):
    # Function to check if the pasta is inside a specific pot
    symbol pasta_in_pot = inside(pasta, pot) and is_dry_pasta(pasta)
    return pasta_in_pot

def is_chicken_in_pot(chicken:item, pot:item):
    # Function to check if the chicken is inside a specific pot
    symbol chicken_in_pot = inside(chicken, pot) and is_food_chicken(chicken)
    return chicken_in_pot

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select a pot that has already been visited

        foreach pasta: item:
            if is_dry_pasta(pasta) and not is_pasta_in_pot(pasta, pot):
                # Check if there is dry pasta not in the pot
                achieve inside(pasta, pot)
                # Place the pasta inside the pot
        
        foreach chicken: item:
            if is_food_chicken(chicken) and not is_chicken_in_pot(chicken, pot):
                # Check if there is chicken not in the pot
                achieve inside(chicken, pot)
                # Place the chicken inside the pot
        
        achieve has_water(pot)
        # Ensure the pot has water
        
        bind stove: item where:
            is_stove(stove) and on(pot, stove)
        # Select a stove and place the pot on it
        achieve is_on(stove)
        # Turn on the stove

#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. cook the pasta and chicken together." ?
Answer: Boil some pasta. Cook some chicken.
Re-decompose: True

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Combine the cooked pasta and chicken, then put it on a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_78_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

#exp_behavior_end

#goal_representation
 
behavior boil_pasta():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve inside(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        if not exists pot: item: is_pot(pot) and visited(pot):
            # If the pot has not been found yet
            observe(cupboard_118, "Check for pot around the cupboard")
            # Look for a pot in the cupboard

        else:
            boil_pasta()
            # If a pot is found, start boiling the pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'pot') at line 5596, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_78_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
behavior boil_pasta():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        if not exists item: item: is_pot(item) and visited(item):
            # If the pot has not been found yet
            observe(cupboard_118, "Check for pot around the cupboard")
            # Look for a pot in the cupboard

        else:
            boil_pasta()
            # If a pot is found, start boiling the pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'item') at line 5560, column 23.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_food_food_2074_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_2040_around_oven_127(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind oven_instance:item where:
            is_oven(oven_instance) and id[oven_instance]==127
        achieve close_char(char,oven_instance)
        if can_open(oven_instance):
            achieve_once open(oven_instance)
            exp(pot,oven_instance)
        else:
            exp(pot,oven_instance)
    eff:
        unknown[pot]=False
        close[pot,oven_instance]=True
        close[oven_instance,pot]=True
    

#goal_representation
 
behavior boil_pasta():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited

        bind stove: item where:
            is_stove(stove)
        # Select the stove

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        if not exists item: is_pot(item) and visited(item):
            # If the pot has not been found yet
            observe(cupboard_118, "Check for pot around the cupboard")
            # Look for a pot in the cupboard

        else:
            boil_pasta()
            # If a pot is found, start boiling the pasta

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_pot_78_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_pasta(pot:item):
    # Function to check if there is pasta in the specified pot
    symbol has_dry_pasta=exists pasta: item : is_dry_pasta(pasta) and inside(pasta, pot)
    return has_dry_pasta

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        # Ensure the pot is placed inside the sink
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water
            achieve has_water(pot)
            # Ensure the pot now contains water
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited
        bind sink: item where:
            is_sink(sink)
        # Select any sink
        
        if has_pasta(pot):
            achieve close_char(char, pot)
            # Move the character to the pot that already has pasta
            fill_pot_with_water(pot, sink)
            # Fill the pot containing pasta with water
            achieve is_on(stove) and on(pot, stove)
            # Boil the pasta by turning on the stove with the pot on it

        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check is there any dry pasta in the pot")
                    # Inspect each unvisited pot for dry pasta

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Unknown variable: stove; available variables: [].
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_food_food_2094_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

#goal_representation
 
def has_pasta(pot:item):
    # Function to check if there is pasta in the specified pot
    symbol has_dry_pasta=exists pasta: item : is_dry_pasta(pasta) and inside(pasta, pot)
    return has_dry_pasta

def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet, sink)
    return has_faucet

behavior fill_pot_with_water(pot:item, sink:item):
    body:
        achieve inside(pot, sink)
        # Ensure the pot is placed inside the sink
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet, sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to fill the pot with water
            achieve has_water(pot)
            # Ensure the pot now contains water
            achieve_once is_off(faucet)
            # Turn off the faucet after filling the pot with water

behavior __goal__():
    body:
        bind pot: item where:
            is_pot(pot) and visited(pot)
        # Select the pot that has been visited
        bind sink: item where:
            is_sink(sink)
        # Select any sink
        bind stove: item where:
            is_stove(stove)
        # Select the stove
        
        if has_pasta(pot):
            achieve close_char(char, pot)
            # Move the character to the pot that already has pasta
            fill_pot_with_water(pot, sink)
            # Fill the pot containing pasta with water
            achieve is_on(stove) and on(pot, stove)
            # Boil the pasta by turning on the stove with the pot on it

        else:
            foreach pot: item:
                if is_pot(pot) and not visited(pot):
                    observe(pot, "Check is there any dry pasta in the pot")
                    # Inspect each unvisited pot for dry pasta

#goal_representation_end

##############################
From agent.py
Reset goals: The sub-goals are: 
['1. Boil the pasta.', '2. Cook the chicken.', '3. Combine the cooked pasta and chicken, then place it in a plate.']
##############################
Goal representation from planning.py

#exp_behavior

behavior find_pot_2138_around_kitchen_counter_123(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_food_food_2073_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_food_chicken_2089_around_fridge_126(food_chicken:item):
    goal: not unknown(food_chicken)
    body:
        assert is_food_chicken(food_chicken)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_chicken,fridge_instance)
        else:
            exp(food_chicken,fridge_instance)
    eff:
        unknown[food_chicken]=False
        close[food_chicken,fridge_instance]=True
        close[fridge_instance,food_chicken]=True
    

#exp_behavior_end

#goal_representation
 
def has_faucet(sink:item):
    # Determine whether this sink has a faucet
    symbol has_faucet=exists faucet:item: is_faucet(faucet) and close(faucet,sink)
    return has_faucet

behavior clean_pasta(pasta:item, sink:item):
    # Define the behavior to clean pasta in the sink
    body:
        achieve_once inside(pasta, sink)
        # Ensure the pasta is placed inside the sink

        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_on(faucet)
            # If the sink has a faucet, turn it on to clean

        wash(pasta) # This is the key step of the behavior, used for cleaning pasta
        
        if has_faucet(sink):
            bind faucet: item where:
                is_faucet(faucet) and close(faucet,sink)
            achieve_once is_off(faucet)
            # If the sink has a faucet, turn it off after cleaning

behavior boil_pasta(pasta:item, pot:item):
    body:
        achieve inside(pasta, pot) 
        # Ensure pasta is inside the pot
        achieve has_water(pot) 
        # Ensure pot has water for boiling

        bind stove: item where:
            is_stove(stove)
        # Select the stove to boil water

        achieve is_on(stove) 
        # Turn on the stove for boiling

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta to boil

        bind sink: item where:
            is_sink(sink)
        # Select a sink for cleaning the pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot for boiling pasta

        clean_pasta(pasta, sink)
        boil_pasta(pasta, pot)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_food_food_2094_around_fridge_126(food_food:item):
    goal: not unknown(food_food)
    body:
        assert is_food_food(food_food)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(food_food,fridge_instance)
        else:
            exp(food_food,fridge_instance)
    eff:
        unknown[food_food]=False
        close[food_food,fridge_instance]=True
        close[fridge_instance,food_food]=True
    

behavior find_dry_pasta_2114_around_cupboard_117(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind cupboard_instance:item where:
            is_cupboard(cupboard_instance) and id[cupboard_instance]==117
        achieve close_char(char,cupboard_instance)
        if can_open(cupboard_instance):
            achieve_once open(cupboard_instance)
            exp(dry_pasta,cupboard_instance)
        else:
            exp(dry_pasta,cupboard_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,cupboard_instance]=True
        close[cupboard_instance,dry_pasta]=True
    

behavior find_glue_2045_around_kitchen_counter_122(glue:item):
    goal: not unknown(glue)
    body:
        assert is_glue(glue)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(glue,kitchen_counter_instance)
        else:
            exp(glue,kitchen_counter_instance)
    eff:
        unknown[glue]=False
        close[glue,kitchen_counter_instance]=True
        close[kitchen_counter_instance,glue]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def is_pasta_inside_pot(pasta:item, pot:item):
    # Function to check if the pasta is inside the pot
    symbol inside_pot=inside(pasta, pot)
    return inside_pot

def can_be_filled_with_water(pot:item, faucet:item):
    # Function to check if the pot can have water added from the faucet
    symbol can_fill=close(pot, faucet)
    return can_fill

behavior fill_pot_with_water(pot:item, faucet:item):
    body:
        if can_be_filled_with_water(pot, faucet):
            achieve has_water(pot)
            # If the pot is in a position to be filled by the faucet, fill it with water

behavior boil_pasta(pot:item):
    body:
        achieve is_on(pot)
        # Turn on the heat to boil the pasta
        achieve has_water(pot)
        # Ensure there is water in the pot for boiling pasta

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta

        bind pot: item where:
            is_pot(pot)
        # Select a pot

        bind faucet: item where:
            is_faucet(faucet)
        # Select a faucet to fill with water

        if is_pasta_inside_pot(pasta, pot):
            # Check if the pasta is already inside the pot
            fill_pot_with_water(pot, faucet)
            boil_pasta(pot)


#goal_representation_end

##############################
From agent.py->reset_goal
Fail to generate the goal representation
##############################
From agent.py
Record from func query_LLM_human in agent.py
Question: Can you teach me how to "1. boil the pasta." ?
Answer: Boil some pasta.
Re-decompose: False

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2138_around_stove_2135(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind stove_instance:item where:
            is_stove(stove_instance) and id[stove_instance]==2135
        achieve close_char(char,stove_instance)
        if can_open(stove_instance):
            achieve_once open(stove_instance)
            exp(pot,stove_instance)
        else:
            exp(pot,stove_instance)
    eff:
        unknown[pot]=False
        close[pot,stove_instance]=True
        close[stove_instance,pot]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

#exp_behavior_end

#goal_representation
 
def is_pasta_boil_pot(pot:item):
    # Check if the pot can be used to boil pasta, typically it should be a pot with water
    symbol suitable_pot=has_water(pot) and not is_on(pot)
    return suitable_pot

def is_stove_near_sink(stove:item, sink:item):
    # Determine if the stove is close to the sink
    return close(stove, sink)

behavior boil_pasta(pasta:item, pot:item, stove:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        if not has_water(pot):
            # If the pot does not have water, add water
            achieve has_water(pot)

        bind stove: item where:
            is_stove(stove) and is_stove_near_sink(stove, sink)
        # Ensure stove is nearby for easier boiling

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta available

        bind pot: item where:
            is_pot(pot) and is_pasta_boil_pot(pot)
        # Select a suitable pot for boiling pasta

        bind sink: item where:
            is_sink(sink)
        # Select a nearby sink, so we can fill the pot if needed

        boil_pasta(pasta, pot, stove)

#goal_representation_end

##############################
Inner TransformationError Debug
Error trying to process rule "behavior_definition":

Variable stove already exists.
##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_78_around_kitchen_counter_119(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==119
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
def is_pasta_boil_pot(pot:item):
    # Check if the pot can be used to boil pasta, typically it should be a pot with water
    symbol suitable_pot = has_water(pot) and not is_on(pot)
    return suitable_pot

def is_stove_near_sink(stove:item, sink:item):
    # Determine if the stove is close to the sink
    return close(stove, sink)

behavior boil_pasta(pasta:item, pot:item, stove:item, sink:item):
    body:
        achieve inside(pasta, pot)
        # Place the pasta inside the pot

        if not has_water(pot):
            # If the pot does not have water, add water
            achieve has_water(pot)

        achieve on(pot, stove)
        # Place the pot on the stove

        achieve_once is_on(stove)
        # Turn on the stove to start boiling

behavior __goal__():
    body:
        bind pasta: item where:
            is_dry_pasta(pasta)
        # Select dry pasta available

        bind pot: item where:
            is_pot(pot) and is_pasta_boil_pot(pot)
        # Select a suitable pot for boiling pasta

        bind sink: item where:
            is_sink(sink)
        # Select a nearby sink, so we can fill the pot if needed

        bind stove: item where:
            is_stove(stove) and is_stove_near_sink(stove, sink)
        # Ensure stove is nearby for easier boiling

        boil_pasta(pasta, pot, stove, sink)

#goal_representation_end

##############################
Goal representation from planning.py

#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#exp_behavior_end

#goal_representation
 
def has_water_filled_pot():
    # Function to check if there is a pot with water
    symbol has_water_filled=exists pot: item : is_pot(pot) and has_water(pot)
    return has_water_filled

def has_dry_pasta_on_table():
    # Function to check if there is dry pasta on a specified table
    symbol has_dry_pasta=exists p: item : is_dry_pasta(p) and on(p, table)
    return has_dry_pasta

behavior __goal__():
    body:
        if has_water_filled_pot() and exists pastatable: item : is_table(pastatable) and has_dry_pasta_on_table():
            bind pot: item where:
                is_pot(pot) and has_water(pot)
            bind dry_pasta: item where:
                is_dry_pasta(dry_pasta) and on(dry_pasta, pastatable)
            # Select a pot filled with water and dry pasta on a table

            achieve inside(dry_pasta, pot)
            # Place the pasta inside the pot with water

            bind stove: item where:
                is_stove(stove)
            achieve is_on(stove)
            # Turn on the stove to boil the pot

        else:
            # Need to find pot and pasta if they are not appropriately placed
            foreach obj: item:
                if is_pot(obj) and not visited(obj):
                    observe(obj, "Check if the pot has water")
                
                if is_table(obj) and not visited(obj):
                    observe(obj, "Check if there is any dry pasta on the table")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'pastatable') at line 5554, column 46.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_122(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2138_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

#goal_representation
 
def has_water_filled_pot():
    # Function to check if there is a pot with water
    symbol has_water_filled=exists pot: item : is_pot(pot) and has_water(pot)
    return has_water_filled

def has_dry_pasta_on_table():
    # Function to check if there is dry pasta on a specified table
    symbol has_dry_pasta=exists p: item : is_dry_pasta(p) and on(p, table)
    return has_dry_pasta

behavior __goal__():
    body:
        if has_water_filled_pot() and exists table: item : is_table(table) and has_dry_pasta_on_table():
            bind pot: item where:
                is_pot(pot) and has_water(pot)
            bind dry_pasta: item where:
                is_dry_pasta(dry_pasta) and on(dry_pasta, table)
            # Select a pot filled with water and dry pasta on a table

            achieve inside(dry_pasta, pot)
            # Place the pasta inside the pot with water

            bind stove: item where:
                is_stove(stove)
            achieve is_on(stove)
            # Turn on the stove to boil the pot

        else:
            # Need to find pot and pasta if they are not appropriately placed
            foreach obj: item:
                if is_pot(obj) and not visited(obj):
                    observe(obj, "Check if the pot has water")
                
                if is_table(obj) and not visited(obj):
                    observe(obj, "Check if there is any dry pasta on the table")

#goal_representation_end

##############################
Inner TransformationError Debug
Unexpected token Token('VARNAME', 'table') at line 5554, column 46.
Expected one of: 
	* COLON

##############################
Goal representation after debugging in planning.py
#exp_behavior

behavior find_dry_pasta_2114_around_kitchen_counter_123(dry_pasta:item):
    goal: not unknown(dry_pasta)
    body:
        assert is_dry_pasta(dry_pasta)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==123
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(dry_pasta,kitchen_counter_instance)
        else:
            exp(dry_pasta,kitchen_counter_instance)
    eff:
        unknown[dry_pasta]=False
        close[dry_pasta,kitchen_counter_instance]=True
        close[kitchen_counter_instance,dry_pasta]=True
    

behavior find_pot_2040_around_kitchen_counter_122(pot:item):
    goal: not unknown(pot)
    body:
        assert is_pot(pot)
        bind kitchen_counter_instance:item where:
            is_kitchen_counter(kitchen_counter_instance) and id[kitchen_counter_instance]==122
        achieve close_char(char,kitchen_counter_instance)
        if can_open(kitchen_counter_instance):
            achieve_once open(kitchen_counter_instance)
            exp(pot,kitchen_counter_instance)
        else:
            exp(pot,kitchen_counter_instance)
    eff:
        unknown[pot]=False
        close[pot,kitchen_counter_instance]=True
        close[kitchen_counter_instance,pot]=True
    

behavior find_sauce_2148_around_fridge_126(sauce:item):
    goal: not unknown(sauce)
    body:
        assert is_sauce(sauce)
        bind fridge_instance:item where:
            is_fridge(fridge_instance) and id[fridge_instance]==126
        achieve close_char(char,fridge_instance)
        if can_open(fridge_instance):
            achieve_once open(fridge_instance)
            exp(sauce,fridge_instance)
        else:
            exp(sauce,fridge_instance)
    eff:
        unknown[sauce]=False
        close[sauce,fridge_instance]=True
        close[fridge_instance,sauce]=True
    

#goal_representation
 
def has_water_filled_pot():
    # Function to check if there is a pot with water
    symbol has_water_filled=exists pot: item : is_pot(pot) and has_water(pot)
    return has_water_filled

def has_dry_pasta_on_table():
    # Function to check if there is dry pasta on a specified table
    symbol has_dry_pasta=exists p: item : is_dry_pasta(p) and on(p, table)
    return has_dry_pasta

behavior __goal__():
    body:
        if has_water_filled_pot() and exists table: item : is_table(table) and has_dry_pasta_on_table():
            bind pot: item where:
                is_pot(pot) and has_water(pot)
            bind dry_pasta: item where:
                is_dry_pasta(dry_pasta) and on(dry_pasta, table)
            # Select a pot filled with water and dry pasta on a table

            achieve inside(dry_pasta, pot)
            # Place the pasta inside the pot with water

            bind stove: item where:
                is_stove(stove)
            achieve is_on(stove)
            # Turn on the stove to boil the pot

        else:
            # Need to find pot and pasta if they are not appropriately placed
            foreach obj: item:
                if is_pot(obj) and not visited(obj):
                    observe(obj, "Check if the pot has water")
                
                if is_table(obj) and not visited(obj):
                    observe(obj, "Check if there is any dry pasta on the table")

#goal_representation_end

##############################
